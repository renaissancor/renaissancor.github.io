{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#common-commands","title":"Common Commands","text":"<pre><code>mkdocs serve\nmkdocs build\nmkdocs gh-deploy\n</code></pre> <p>Visual Studio </p> <p><code>Ctrl</code> + <code>F5</code> Program Execution </p> <p><code>Ctrl</code> + <code>~</code>  Open Terminal </p> <p><code>F5</code>          Program Debug </p> <p>Visual Studio Code </p> <p><pre><code>svn update \nsvn log -v -l 10 \n</code></pre> Shows latest 10 logs of svn updated records containing file changes </p> <pre><code>Get-Content \"docs/AR250409.md\" | Out-String | Select-String -Pattern '[^\\x00-\\x7F]' -AllMatches\n</code></pre> <p>Open git bash  <pre><code>iconv -f UTF-8 -t UTF-8 docs/AR250409.md &gt; /dev/null\n</code></pre></p>"},{"location":"AR111111/","title":"Sample Template Title","text":"<p>Write a Markdown-formatted study note for my MkDocs-based C++ blog. Generate markdown texts with this kind of structure:</p>"},{"location":"AR111111/#sample-template-title_1","title":"Sample Template Title","text":""},{"location":"AR111111/#date-2025-01-01","title":"Date: 2025-01-01","text":""},{"location":"AR111111/#key-points","title":"Key Points","text":"<ul> <li>Move semantics transfer ownership instead of copying.</li> <li><code>std::move()</code> performs a cast to an rvalue reference.</li> <li>Mark move operations <code>noexcept</code> to enable STL optimizations.</li> <li>Rule of Five: if you define one special function, consider defining all five.</li> </ul>"},{"location":"AR111111/#overview","title":"Overview","text":"<p>Move semantics, introduced in C++11, enable efficient resource transfer?\ubd34seful for managing dynamic memory, file handles, etc.</p> <pre><code>class Resource {\n    int* data; size_t size;\n\npublic:\n    Resource(size_t s) : size(s), data(new int[s]) {}\n    ~Resource() { delete[] data; }\n\n    Resource(const Resource&amp; other);\n\n    Resource(Resource&amp;&amp; other) noexcept\n        : data(other.data), size(other.size) {\n        other.data = nullptr; other.size = 0;\n    }\n\n    Resource&amp; operator=(Resource&amp;&amp; other) noexcept {\n        if (this != &amp;other) {\n            delete[] data;\n            data = other.data; size = other.size;\n            other.data = nullptr; other.size = 0;\n        }\n        return *this;\n    }\n};\n</code></pre>"},{"location":"AR111111/#common-mistakes","title":"Common Mistakes","text":"<p>Using moved-from objects <pre><code>std::vector&lt;int&gt; v1 = {1, 2, 3};\nstd::vector&lt;int&gt; v2 = std::move(v1);\n// v1 is now valid but unspecified\n</code></pre></p> <p>Missing <code>noexcept</code> <pre><code>class A {\npublic:\n    A(A&amp;&amp;) noexcept;  // Allows STL containers to optimize\n};\n</code></pre></p> <p>Preventing RVO (Return Value Optimization) <pre><code>std::vector&lt;int&gt; create() {\n    std::vector&lt;int&gt; v = {1, 2};\n    return std::move(v);  // Bad: disables RVO\n    // return v;          // Good: lets RVO work\n}\n</code></pre></p>"},{"location":"AR111111/#tricky-case-unique_ptr","title":"Tricky Case: <code>unique_ptr</code>","text":"<pre><code>auto ptr = std::make_unique&lt;Resource&gt;();\n\n// Error: copy is disabled\n// process(ptr);\n\n// Correct: use std::move\nprocess(std::move(ptr));\n</code></pre> <p>After the move, <code>ptr</code> is null and must not be used except for reset or reassignment.</p>"},{"location":"AR111111/#interview-questions","title":"Interview Questions","text":"<p>Q: Difference between <code>std::move</code> and <code>std::forward</code>? A: <code>std::move</code> casts to rvalue; <code>std::forward</code> preserves value category in template functions.</p> <p>Q: Why use <code>noexcept</code> with move? A: Containers prefer <code>noexcept</code> move operations to maintain strong exception guarantees.</p>"},{"location":"AR111111/#modern-examples","title":"Modern Examples","text":"<pre><code>// C++17: optional + implicit move\nstd::optional&lt;std::string&gt; get(bool ok) {\n    if (ok) return std::string(\"value\");\n    return std::nullopt;\n}\n\n// C++20: constexpr move\nconstexpr std::string create() {\n    std::string a = \"A\";\n    return std::move(a);\n}\n</code></pre>"},{"location":"AR111111/#code-demonstration","title":"Code Demonstration","text":"<pre><code>std::string a = \"Hello\";\nstd::string b = std::move(a);\n\nstd::cout &lt;&lt; \"b: \" &lt;&lt; b &lt;&lt; \"\\n\";\nstd::cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; \"\\n\";  // Moved-from state\n</code></pre>"},{"location":"AR111111/#visual-ownership-transfer","title":"Visual: Ownership Transfer","text":"<pre><code>Before Move             After Move\n------------            -------------\nObject A                Object A\n[data -&gt; 0x1234]        [data -&gt; nullptr]\n\nObject B                Object B\n[data -&gt; nullptr]       [data -&gt; 0x1234]\n</code></pre> <p>Format the explanation clearly and concisely,  so easily readable while containing all necessary details.  Respect the comments inside the code and rewrite them in the blog text description.  Keep code blocks clean and readable.  Focus on tricky cases and common cases that might be crucial later as C++ video game programmer intervew  Create extra contents for common mistakes or tricky cases.  Make sample interview questions and answers.  It is good to make tricky cases or sample interview questions related to input text.  Write in English. Do not use icon. Return markdown in canvas, aka textdoc editor. Now convert the study notes and codes I will copy and paste below.  Date is 2025 03 10</p> <p>Convert the study notes and code I will paste below into a well-structured markdown article for my technical blog.  It should serve as a comprehensive study guide for a C++ game programmer interview. Clearly and concisely explain each concept for easy readability without skipping any important idea or nuance.  Integrate all original notes and comments from the code into the markdown explanation.  These should appear as narrative text, not left as raw comments. Keep code blocks clean and correctly formatted, grouped logically with the explanation. Add any missing examples or diagrams to clarify tricky or subtle mechanics.  Relate sample questions and tricky cases directly to input content where possible.  No emojis or icons.  Output in markdown format only, using the canvas editor.</p> <p>const_member_variables.cpp  <pre><code>class CMyClass\n{\nprivate:\n    int         m_i;\n    const char  m_C;\n\npublic:\n    void SetIntData(int _Data)\n    {\n        m_i = _Data;\n    }\n\n    // const \ub9f4\ubc84\ud568\uc218\n    // \ub9f4\ubc84\ud568\uc218 \ub4a4\uc5d0 const \ub97c \ubd99\uc774\uba74, \n    // \ud574\ub2f9 \ub9f4\ubc84\ud568\uc218\uac00 \ub3d9\uc791\ud558\ub294\ub3d9\uc548 \uac1d\uccb4\uc758 \ub9f4\ubc84\ub97c \ubcc0\uacbd\uc744 \ud558\uc9c0 \uc54a\uc74c\uc744 \ubcf4\uc7a5\ud55c\ub2e4.\n    int GetIntData() const\n    {\n        return m_i;\n    }\n\n    char GetCharData() const\n    {\n        return m_C;\n    }\n\npublic:\n    CMyClass()\n        : m_i(0)\n        , m_C(100)\n    {\n        m_i = 10;\n    }\n\n    ~CMyClass()\n    {\n    }\n};\n\n\n\nint main()\n{\n    const int a = 100;\n\n    CMyClass c;\n    CMyClass c1;\n\n    c.SetIntData(200);\n\n    // const * \uc640 const \ub9f4\ubc84\ud568\uc218\n    const CMyClass* pMy = &amp;c;\n    pMy-&gt;GetIntData();\n\n\n\n    return 0;\n}\n</code></pre></p> <p>static_member_function.cpp <pre><code>class CTest\n{\nprivate:\n    static int  m_Static;\n\nprivate:\n    int         m_i;\n\npublic:\n    void SetData(int _Data) \n    { \n        this-&gt;m_i = _Data; \n        m_Static = 20;\n    }\n\n    // \uac1d\uccb4 \uc5c6\uc774 \ud638\ucd9c\uac00\ub2a5\ud55c \ub9f4\ubc84\ud568\uc218\n    // this \ud3ec\uc778\ud130 \uc5c6\ub2e4 == \ub9f4\ubc84\ubcc0\uc218 \uc0ac\uc6a9 \ubd88\uac00\ub2a5\n    static void StaticFunc() \n    {\n        // \uc815\uc801\ub9f4\ubc84\ubcc0\uc218\uac00 private \uc774\ub77c\ub3c4 \uc815\uc801\ub9f4\ubc84\ud568\uc218\ub3c4 \ub9f4\ubc84\ud568\uc218\uae30 \ub54c\ubb38\uc5d0 \uc811\uadfc \uac00\ub2a5\n        m_Static = 100;\n\n    }\n\npublic:\n    CTest() :m_i(0) {};\n    ~CTest() {}\n};\n\nint CTest::m_Static = 0;\n\n\n\n// \uc804\uc5ed\ud568\uc218\nvoid GlobalFunc()\n{\n    // \uc815\uc801\ub9f4\ubc84\ubcc0\uc218\uac00 private \uc774\ub77c\uc11c \uc678\ubd80\uc5d0\uc11c\ub294 \uc811\uadfc\uc774 \ubd88\uac00\ub2a5\n    //CTest::m_Static = 100;\n}\n\nint main()\n{\n    CTest t1;\n    CTest t2;\n    CTest t3;\n\n    t1.SetData(100);\n    t2.SetData(100);\n    t3.SetData(100);\n\n\n\n    // \uc815\uc801\ub9f4\ubc84\ud568\uc218\ub294 \ud2b9\uc815\uac1d\uccb4\uac00 \uc5c6\uc774\ub3c4 \ud638\ucd9c\uc774 \uac00\ub2a5\ud558\ub2e4\n    // this \uac1c\ub150\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\n    CTest::StaticFunc();\n\n    // \uc815\uc801\ub9f4\ubc84\ud568\uc218\uc640 \uc77c\ubc18 \uc804\uc5ed\ud568\uc218\uc640\uc758 \ucc28\uc774?\n    // \uc815\uc801\ub9f4\ubc84\ud568\uc218\ub3c4 \ub9f4\ubc84\ud568\uc218\uc758 \uc77c\uc885\uc774\uae30 \ub54c\ubb38\uc5d0, \n    // \uc815\uc801\ub9f4\ubc84\ud568\uc218\uac00 \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\uc758 private: \uae30\ub2a5\uc5d0 \uc811\uadfc\uc774 \uac00\ub2a5\ud558\ub2e4.\n    // \uc815\uc801\ub9f4\ubc84\ud568\uc218 \uc548\uc5d0\uc11c\ub294 private: \uc5d0 \uc120\uc5b8\ub41c \uc815\uc801\ub9f4\ubc84\ubcc0\uc218\uc5d0 \uc811\uadfc \uac00\ub2a5\ud558\ub2e4.\n    GlobalFunc();\n\n    // \uc815\uc801\ub9f4\ubc84\ubcc0\uc218\uac00 private \uc774\ub77c\uc11c \uc678\ubd80\uc5d0\uc11c\ub294 \uc811\uadfc\uc774 \ubd88\uac00\ub2a5\n    //CTest::m_Static = 200;\n\n    return 0;\n}\n</code></pre></p> <p>static_var_class.cpp <pre><code>// \uc815\uc801\ubcc0\uc218\n// \uacf5\ud1b5 - \ub370\uc774\ud130 \uc601\uc5ed\uc5d0 \uc800\uc7a5\uc774 \ub41c\ub2e4.\n// 1. \uc804\uc5ed\ud568\uc218, \ub9f4\ubc84\ud568\uc218 \uc548\uc5d0 \uc120\uc5b8\ub41c \uacbd\uc6b0\n//  \ud574\ub2f9 \ud568\uc218 \uc804\uc6a9 \uc804\uc5ed\ubcc0\uc218\n//  \ud574\ub2f9 \ud568\uc218\uc548\uc5d0\uc11c\ub9cc \ubcc0\uc218\uba85\uc73c\ub85c \uc811\uadfc\uc774 \uac00\ub2a5\n//  \uc8fc\uc18c\ub97c \uc54c\uba74 \ud3ec\uc778\ud130\ub85c\ub294 \uc5b4\ub514\uc11c\ub4e0 \uc811\uadfc \uac00\ub2a5\n\n\n// 2. cpp \ud30c\uc77c\uc5d0 \uc120\uc5b8\ud558\ub294 \uacbd\uc6b0\n//  \uc120\uc5b8\ub41c \ud30c\uc77c \uc804\uc6a9 \uc804\uc5ed\ubcc0\uc218\n//  \ub2e4\ub978 cpp \uc5d0 \ub611\uac19\uc740 \uc774\ub984\uc758 \uc804\uc5ed\ubcc0\uc218\uac00 \uc788\uc5b4\ub3c4 \uc0c1\uad00\uc774 \uc5c6\ub2e4.\nstatic int g_static = 0;\n\n\n\n\n\n// 3. \ud074\ub798\uc2a4 \ub9f4\ubc84\ubcc0\uc218\uc55e\uc5d0 static \uc774 \ubd99\uc740 \uacbd\uc6b0\n//  \uc815\uc801 \ub9f4\ubc84\ubcc0\uc218\n//  \ud574\ub2f9 \ud074\ub798\uc2a4 \uc790\ub8cc\ud615 \uc804\uc6a9 \uc804\uc5ed\ubcc0\uc218\n//  \ub9f4\ubc84\ubcc0\uc218\uc758 \ud2b9\uc9d5\uc778 \uc811\uadfc\uc81c\ud55c \uc9c0\uc815\uc790\uc5d0 \uc601\ud5a5\uc744 \ubc1b\uc74c\n//  private: \ud544\ub4dc\uc5d0 \uc120\uc5b8\ub41c \uacbd\uc6b0, \ud574\ub2f9 \ud074\ub798\uc2a4 \ub9f4\ubc84\ud568\uc218 \uc548\uc5d0\uc11c\ub9cc \uc811\uadfc \uac00\ub2a5\n//  public: \ud544\ub4dc\uc5d0 \uc120\uc5b8\ub41c \uacbd\uc6b0 \ud2b9\uc815 \uac1d\uccb4 \uc5c6\uc774\ub3c4 \uc811\uadfc \uac00\ub2a5(\uac1d\uccb4 \uc548\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uac1c\ub150\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38)\nclass CTestClass\n{\npublic:\n    static int  m_StaticMember; // \uc804\ubc29\uc120\uc5b8\n\nprivate:\n    // static == \ub370\uc774\ud130\uc601\uc5ed\n    // \uc815\uc801 \ub9f4\ubc84\ub294 \ub370\uc774\ud130\uc601\uc5ed\uc5d0 1\uac1c\ub9cc \uc874\uc7ac\ud568    \n    int         m_Member;\n\npublic:\n    CTestClass()\n        : m_Member(0)       \n    {\n        m_StaticMember = 20;\n    }\n    ~CTestClass()\n    {}\n};\n\n// \ud2b9\uc815 CPP \uc5d0 \ubc18\ub4dc\uc2dc \ub9c1\ud06c\ubc1b\uc744 \uc2e4\uc81c \uc815\uc801\ub9f4\ubc84\ubcc0\uc218\ub97c \uc815\uc758\ud574\uc57c\ud568\n// extern \uc804\uc5ed\ubcc0\uc218\uc640 \uc720\uc0ac\ud55c \uad6c\uc870\nint CTestClass::m_StaticMember = 0;\n\n\n\n\nint* StaticFunc()\n{\n    static int iStatic = 0;\n    iStatic = 100;\n\n    return &amp;iStatic;\n}\n\n\n\n\n\n\nint main()\n{\n    int* pStatic = StaticFunc();\n\n    *pStatic = 300;\n\n    StaticFunc();\n\n    CTestClass inst;\n    CTestClass inst1;\n    CTestClass inst2;\n\n    inst.m_StaticMember = 10;\n    inst1.m_StaticMember = 20;\n    inst2.m_StaticMember = 30;\n\n    CTestClass::m_StaticMember = 40;\n\n\n    return 0;\n}\n</code></pre></p> <p>polymorphism.cpp <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n\n\n// \ub2e4\ud615\uc131\n// \uc0c1\uc18d\n// \ud3ec\uc778\ud130\nclass Parent\n{\nprivate:\n    float   m_P;\n\npublic:\n    virtual void Move()\n    {\n        cout &lt;&lt; \"!!Parent Move!!\" &lt;&lt; endl;\n    }\n\n    virtual void Test()\n    {\n        cout &lt;&lt; \"!!Parent Test!!\" &lt;&lt; endl;\n    }\n\n    // \uc21c\uc218 \uac00\uc0c1\ud568\uc218\n    virtual void Fly() = 0;\n};\n\nclass Child\n    : public Parent\n{\nprivate:\n    short   m_S;\n\npublic:\n    virtual void Move() override\n    {\n        cout &lt;&lt; \"!!Child Move!!\" &lt;&lt; endl;\n    }\n\n    virtual void SetShort(short _Short)\n    {\n        m_S = _Short;\n    }\n};\n\nint main()\n{\n    Parent  P;\n    Child   C;\n\n    int size = 0;\n    size = sizeof(P);\n    size = sizeof(C);\n\n    Parent* pParent = &amp;P;\n    Child* pChild = &amp;C;\n\n    pParent = &amp;C; // -- (1) \ubd80\ubaa8\ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub85c, \uc790\uc2dd\ud074\ub798\uc2a4 \uac1d\uccb4\uc758 \uc8fc\uc18c\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub098?\n    //pChild = &amp;P;  // -- (2) \uc790\uc2dd\ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub85c, \ubd80\ubaa8\ud074\ub798\uc2a4 \uac1d\uccb4\uc758 \uc8fc\uc18c\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub098?\n\n    // \ubd80\ubaa8\ud074\ub798\uc2a4 \ud3ec\uc778\ud130 \ubcc0\uc218\ub294, \ubd80\ubaa8\ud074\ub798\uc2a4\ub85c\ubd80\ud130 \ud30c\uc0dd\ub41c \ubaa8\ub4e0 \ud074\ub798\uc2a4 \uac1d\uccb4\ub4e4\uc758 \uc8fc\uc18c\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4.\n    // \uac00\ub9ac\ud0a4\ub294 \uc601\uc5ed\uc774, \ud574\ub2f9 \uac1d\uccb4\uc758 \uac00\uc7a5 \uc55e\ubd80\ubd84(\ubd80\ubaa8\ud074\ub798\uc2a4 \uc601\uc5ed) \uae4c\uc9c0\ub9cc \uac00\ub9ac\ud0a4\uae30 \ub54c\ubb38\n\n    // \ub2e4\ud615\uc131\n    // \ubd80\ubaa8\ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ubcc0\uc218 \ud558\ub098\ub85c, \ubd80\ubaa8\ud074\ub798\uc2a4\ub85c\ubd80\ud130 \ud30c\uc0dd\ub418\ub294 \ubaa8\ub4e0 \ud074\ub798\uc2a4\ub4e4\uc758 \uac1d\uccb4\uc758 \uc8fc\uc18c\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4.\n    // \ud558\ub098\uc758 \ud0c0\uc785\uc73c\ub85c, \uc0dd\uc131\ub41c \uadf8\ub9ac\uace0 \uc55e\uc73c\ub85c \uc0dd\uc131\ub420 \ubaa8\ub4e0 \ud074\ub798\uc2a4\ud0c0\uc785 \uac1d\uccb4\ub97c \uad00\ub9ac \uac00\ub2a5\n    // \ud0c0\uc785\uc740 \ud558\ub098\uc9c0\ub9cc, \uac00\ub9ac\ud0a4\ub294 \ub300\uc0c1\uc740 \ubb50\ub4e0\uc9c0 \uac00\ub2a5\ud568\n\n    // \ub2e4\ud615\uc131\uc758 \ubb38\uc81c\uc810\n    // \ubd80\ubaa8\ud3ec\uc778\ud130 \ud0c0\uc785\uc73c\ub85c \uc790\uc2dd\uac1d\uccb4\ub97c \uac00\ub9ac\ud0a4\uba74\uc11c \uc624\ubc84\ub77c\uc774\ub529\ub41c \ud568\uc218\ub97c \ud638\ucd9c\uc2dc\ud0ac \uacbd\uc6b0,\n    // \ucef4\ud30c\uc77c\ub7ec\ub294 \ud638\ucd9c\uc790 \ud3ec\uc778\ud130\uac00 \ubd80\ubaa8\ud3ec\uc778\ud130 \ud0c0\uc785\uc774\uae30 \ub54c\ubb38\uc5d0, \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ubd80\ubaa8\ucabd \ud568\uc218\ub85c \uc815\uc801\ubc14\uc778\ub529\uc744 \ud558\uac8c \ub428\n\n    // \ud574\uacb0 - \ubd80\ubaa8 \ud3ec\uc778\ud130\ub85c \uc790\uc2dd\ucabd\uc5d0 \uc624\ubc84\ub77c\uc774\ub529\ub41c \ud568\uc218\uac00 \ud638\ucd9c\uc774 \uc548\ub418\ub294 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30\uc704\ud574\uc11c\n    //        virtual(\uac00\uc0c1\ud568\uc218) \ub97c \ud65c\uc6a9\ud55c\ub2e4.\n    P.Move();\n    C.Move();\n\n    // Parent \ud3ec\uc778\ud130\ub85c Parent \uac1d\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0, Move \ub97c \ud638\ucd9c\uc2dc\ud0b4\n    // Parent::Move \uac00 \ud638\ucd9c\ub428\n    pParent = &amp;P;\n    pParent-&gt;Move(); \n\n    // Parent \ud3ec\uc778\ud130\ub85c Child \uac1d\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0, Move \ub97c \ud638\ucd9c\uc2dc\ud0b4\n    // Child::Move \uac00 \ud638\ucd9c\ub418\uc5b4\uc57c \ud558\ub294\ub370 Parent::Move \uac00 \ud638\ucd9c\ub418\ubc84\ub9bc ==&gt; \ubb38\uc81c\uc0ac\ud56d\n    pParent = &amp;C;\n    pParent-&gt;Test();\n\n    // virtual \uac00\uc0c1\ud568\uc218\n    // \ub7f0\ud0c0\uc784 \uc911\uc5d0, \uc2e4\uc81c \uac1d\uccb4\uc758 \ud074\ub798\uc2a4\uc5d0 \ub9de\ub294 \ubc84\uc804\uc758 \uc624\ubc84\ub77c\uc774\ub529\ub41c \ud568\uc218\ub97c \uad6c\ubcc4\ud574\uc11c \ud638\ucd9c\uc2dc\ud0ac \uc218 \uc788\uac8c \ud574\uc90c\n\n    // \uac00\uc0c1\ud568\uc218 \ub3d9\uc791 \uc6d0\ub9ac\n    // \uac00\uc0c1\ud568\uc218\ub97c \ubcf4\uc720\ud558\uace0\uc788\ub294 \ubd80\ubaa8\ud074\ub798\uc2a4 \ubfd0\ub9cc \uc544\ub2c8\ub77c, \uadf8\uac78 \uc0c1\uc18d\ubc1b\uc740 \ubaa8\ub4e0 \uc790\uc2dd\ud074\ub798\uc2a4\ub4e4\ub3c4 \uac01\uac01 TypeInfo \uac00 \uc0dd\uc131\ub41c\ub2e4.\n    // TypeInfo \uc548\uc5d0\ub294 \uac00\uc0c1\ud568\uc218 \ud14c\uc774\ube14\uc774 \uc788\ub2e4. \ud574\ub2f9\ud074\ub798\uc2a4\uc758 \uac00\uc0c1\ud568\uc218\uc758 \uc8fc\uc18c\ub4e4\uc744 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. \n    // \uac00\uc0c1\ud568\uc218\ub97c \ubcf4\uc720\ud55c \ubd80\ubaa8 \ud074\ub798\uc2a4\ub294 __vfptr(\uac00\uc0c1\ud568\uc218 \ud14c\uc774\ube14 \ud3ec\uc778\ud130) \uc774\ub77c\ub294 \ud3ec\uc778\ud130\ubcc0\uc218\uac00 \uc0dd\ub7b5\ub418\uc5b4\uc788\ub2e4.\n\n\n    // \ucd94\uc0c1\ud654\n    // virtual \ud568\uc218\uba85 = 0; == \uc21c\uc218\uac00\uc0c1\ud568\uc218\n    // \uac00\uc0c1\ud568\uc218\ub97c \uc120\uc5b8\ud568\uc73c\ub85c\uc368 \uc790\uc2dd\ucabd\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub529 \ud560 \uc218 \uc788\uac8c \ud558\uace0, \ud574\ub2f9 \ud074\ub798\uc2a4\uc5d0\ub294 \uad6c\ud604\uc744 \ud558\uc9c0 \uc54a\uc74c\n    // \uac00\uc0c1\ud568\uc218\ub97c \uad6c\ud604\ud558\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0, \ud14c\uc774\ube14\uc5d0 \ub4f1\ub85d\uc2dc\ud0ac \ud568\uc218\uac00 \uc5c6\uac8c \ub418\uace0, \n    // \ub530\ub77c\uc11c \ud574\ub2f9 \ud074\ub798\uc2a4\ub85c \uac1d\uccb4\uc0dd\uc131\uc744 \ud558\ub294\uac83\uc774 \uae08\uc9c0 \ub428\n\n    // \uc21c\uc218\uac00\uc0c1\ud568\uc218\ub97c \uc790\uc2dd\ud074\ub798\uc2a4\ub3c4 \uc624\ubc84\ub77c\uc774\ub529(\uc7ac\uc815\uc758) \ud558\uc9c0 \uc54a\uc73c\uba74, \ud574\ub2f9 \ud074\ub798\uc2a4\ub3c4 \ud638\ucd9c\ud560 \ud568\uc218\uac00 \uc5c6\uae30\ub54c\ubb38\uc5d0\n    // \uac1d\uccb4\uc0dd\uc131\uc774 \ubd88\uac00\ub2a5\ud558\ub2e4.\n\n    // \uc21c\uc218\uac00\uc0c1\ud568\uc218\ub97c \uad6c\ud604\ud55c \uc790\uc2dd\ud074\ub798\uc2a4\ubd80\ud130 \uac1d\uccb4\uc0dd\uc131\uc774 \uac00\ub2a5\ud574\uc9c4\ub2e4.\n\n    // \uc21c\uc218\uac00\uc0c1\ud568\uc218\uac00 \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\uac00 \ucd94\uc0c1\uc801\uc778 \uac1c\ub150\uc758 \ud074\ub798\uc2a4\uc784\uc744 \uc120\uc5b8\n    // \ucd94\uc0c1\ud074\ub798\uc2a4\ub294 \uac1d\uccb4\uc0dd\uc131\uc744 \ud560 \uc218 \uc5c6\ub3c4\ub85d \ubc29\uc9c0\ud568\n    // \ud30c\uc0dd\ub418\ub294 \uc790\uc2dd\ud074\ub798\uc2a4\ub4e4\uc774 \ud574\ub2f9 \ud568\uc218\ub97c \uad6c\ud604\ud558\ub3c4\ub85d \uac15\uc81c\ud558\uace0, \n\n\n\n\n\n    return 0;\n}\n</code></pre></p>"},{"location":"Algorithm/A01/","title":"Algorithms","text":"<p>Path Finding </p>"},{"location":"Algorithm/A01/#recursion","title":"Recursion","text":"<p>Basic recursion function works like this </p> <pre><code>void Recurse(unsigned int row, unsigned int col, char val)\n{\n    if(graph[row][col] == 0) return; \n    else if (graph[row][col] == val) return;\n    else graph[row][col] = val;\n\n    if (0 &lt; col) Recurse(row, col - 1, val); \n    if (0 &lt; row) Recurse(row - 1, col, val); \n    if (col &lt; col_size - 1) Recurse(row, col + 1, val);\n    if (row &lt; row_size - 1) Recurse(row + 1, col, val); \n}\n</code></pre> <p>During the time measurement, the function is called a lot.  For the simple DFS and BFS logic that do NOT check and mark value  before it gets inside stack or queue, recursion is more efficient. </p> <p>Counting the function call, it is possible to figure out total function call count.  Then, all functions including recursion, bfs, dfs have different function call count. </p> <p>This logic might be inefficient because sometimes same index of row and column value  might get accessed several times. Moreover, wall values containing 0 might be  accessed several times. Thus, the logic to prevent multiple access and condition check  is required.  </p> <p>It contains partially Memoization logic, which is one characteristic of Dynamic Programming.  Since the code changes the previous data accessed, checking the value availability before  calling recursion, or putting inside stack or queue would remove unnecessary function call  or stack queue input. Thus, the following logic is required for all recursion, bfs, and dfs. </p> <pre><code>if (col &gt; 0 &amp;&amp; graph[row][col - 1] != 0 &amp;&amp; graph[row][col - 1] != val) Recurse(row, col - 1, val);\nif (row &gt; 0 &amp;&amp; graph[row - 1][col] != 0 &amp;&amp; graph[row - 1][col] != val) Recurse(row - 1, col, val);\nif (col &lt; col_size - 1 &amp;&amp; graph[row][col + 1] != 0 &amp;&amp; graph[row][col + 1] != val) Recurse(row, col + 1, val);\nif (row &lt; row_size - 1 &amp;&amp; graph[row + 1][col] != 0 &amp;&amp; graph[row + 1][col] != val) Recurse(row + 1, col, val);\n</code></pre> <p>Sounds messy and unnecessary, but this kind of condition check let the total function call, or  total stack / queue input count same value, meaning that the optimal path is found despite of different  approaches. </p>"},{"location":"Algorithm/A01/#bfs-breadth-first-search","title":"BFS (Breadth First Search)","text":"<p>Implementation based on Queue was approached with several methods, including  dynamic memory allocation of independent rows and cols as unsigned integer,  typedef struct with two unsigned intS, and using STLS including not only <code>std::vector</code>  as an alternative of dynamic memory allocation, but also <code>std::queue</code>.  Among these approaches, direct dynamic memory allocation of two arrays  of <code>unsigned int</code> was the most efficient and fast in the testing process. </p> <pre><code>unsigned int * qrow = new unsigned int [ROW_SIZE * COL_SIZE];\nunsigned int * qcol = new unsigned int [ROW_SIZE * COL_SIZE]; \n\nvector&lt;unsigned int&gt; qrow(ROW_SIZE * COL_SIZE); \nvector&lt;unsigned int&gt; qcol(ROW_SIZE * COL_SIZE); \n\nqueue&lt;unsigned int&gt; qrow;\nqueue&lt;unsigned int&gt; qcol;\n\nstruct RC{ unsigned int row; unsigned int col; } \nRC* queue = new RC[ROW_SIZE * COL_SIZE * 2];\nstd::vector&lt;RC&gt; queue; \nstd::queue&lt;RC&gt; queue; \n</code></pre> <p>Among all these, the most time efficient method was dynamic memory allocation of two arrays  containing rows and columns for each, followed by <code>std::vector</code> instead of direct dynamic allocation  with a slight difference. Since <code>std::queue</code> was quite inefficient due to the overhead caused  by its basic <code>std::deque</code> based structure, it showed poor performance about more than twice time  than using array and index of front and back. Also, struct based array and STL data structures  clearly showed much lower performance than basic datatype based arrays like <code>unsigned int</code>.  Thus, <code>RC</code> struct datatype was removed. </p> <pre><code>unsigned int* qrow = new unsigned int[ROW_SIZE * COL_SIZE];\nunsigned int* qcol = new unsigned int[ROW_SIZE * COL_SIZE];\nsize_t front = 0, back = 0;\nqrow[back] = row;\nqcol[back] = col;\nback++;\n\nwhile (front &lt; back)\n{\n    unsigned int row = qrow[front];\n    unsigned int col = qcol[front];\n    ++front;\n    graph[row][col] = val; \n\n    if (col &gt; 0 &amp;&amp; graph[row][col - 1] != 0 &amp;&amp; graph[row][col - 1] != val) {\n        graph[row][col - 1] = val;\n        qrow[back] = row;\n        qcol[back] = col - 1;\n        back++;\n    } \n    // Same ... \n}\n</code></pre> <p>The original logic to input inside queue without checking availability worked  more critically compared to DFS based on recursion or stack.  Queue is FIFO, and without implementation of the circular queue logic structure,  it would result in overflow, exceeding higher than the maximum queue size easily,  even though it is set like <code>[ROW_SIZE * COL_SIZE * 5]</code>.  Thus, especially for BFS that implement queue without circular structure,  minimizing the queue input is necessary to avoid overflow. </p> <p>Since queue input without checking validity or visit of the value has potential to  make so much input queue that buffer overflow of queue is very likely. </p>"},{"location":"Algorithm/A01/#dfs-depth-first-search","title":"DFS (Depth First Search)","text":"<p>Implementation based on Stack was very similar to the array based Queue implementation  written above. Similar to the BFS above, the time efficiency was similar, showing  lower performance for using <code>std::stack</code> or struct datatype.  Logic flow is very similar to the recursion, so unoptimized condition checking only  edge value like <code>0 &lt; col</code> applied for both recursion and dfs here gave same call counts. </p> <p>After the application of dynamic programming memoization to not visit already visited and  unnecessary memory space, all BFS DFS and recursion function got same calls. However, still  DFS has same logic with recursion, if direction comparison order is same.   </p> <pre><code>void Graph::DFS(unsigned int row, unsigned int col, char val)\n{\n    unsigned int *srow = new unsigned int[ROW_SIZE * COL_SIZE];\n    unsigned int *scol = new unsigned int[ROW_SIZE * COL_SIZE]; \n\n    size_t top = 0;\n    srow[top] = row; \n    scol[top] = col; \n    ++top; \n\n    while (top &gt; 0)\n    {\n        cntjhp++;\n        top--;\n        UINT row = srow[top];\n        UINT col = scol[top]; \n\n        graph[row][col] = val;\n\n        if (0 &lt; col &amp;&amp; graph[row][col - 1] != 0 &amp;&amp; graph[row][col - 1] != val) {\n            srow[top] = row;\n            scol[top] = col - 1;\n            ++top;\n            graph[row][col - 1] = val; // mark as visited\n        }\n        // Same logic ... \n    }\n}\n</code></pre> <p>Only top index is required, unlike queue that requires both front and back. </p>"},{"location":"Algorithm/A01/#performance-analysis","title":"Performance Analysis","text":"<p>Now, after testing randomly generated maps, time measurement is required.  Time testing was based on the modern C++ library <code>std::chrono</code>. </p> <p><pre><code>std::chrono::steady_clock::time_point start, end;\nlong long duration;\nstart = steady_clock::now();\nBFS(row, col, 2);\nend = steady_clock::now();\nduration = duration_cast&lt;microseconds&gt;(end - start).count(); \ntime_record.bfs_time += duration;\n</code></pre> By application of this structure, all execution time of function per second was measured. </p> <p>This is the original random map generated. </p> <pre><code>void Graph::CreateGraph() {\n    srand((unsigned)time(nullptr));\n    graph = new char* [row_size];\n    for (unsigned int i = 0; i &lt; row_size; ++i) {\n        graph[i] = new char[col_size];\n        for (unsigned int j = 0; j &lt; col_size; ++j) {\n            int r = rand() % 5; // 0~4\n            if (i == 0) graph[i][j] = 1;\n            else if (r == 4) graph[i][j] = 0; \n            else graph[i][j] = 1; \n        }\n    }\n}\n</code></pre> <p>This would result in huge random matrix with rows and columns.  Occasionally some blocks might appear, but it is perfect to check spreading search environment.  In this map, generally BFS showed slightly higher performance than DFS. </p> <pre><code>Total Accumulated BFS   Time:    199831 \u03bcs\nTotal Accumulated BFSV  Time:    194558 \u03bcs\nTotal Accumulated BFSTL Time:    246616 \u03bcs\nTotal Accumulated DFS   Time:    201897 \u03bcs\nTotal Accumulated DFSV  Time:    210272 \u03bcs\nTotal Accumulated DFSTL Time:    458883 \u03bcs\nTotal Accumul Recursion Time:    214588 \u03bcs\nTotal Row Size: 50, Total Col Size: 220\nMap Type: Random Graph, Iteration : 1000 \n</code></pre> <p>This result made probability that spreading style maps might favor BFS rather than DFS.  However, for case of matrix with maze like structure, consequence might be different.  Thus, the Maze like maps was implemented instead, to make sure one line is full and one line  is blocked with only one single available element per each row.</p> <pre><code>void Graph::CreateMaze() {\n    srand((unsigned)time(nullptr));\n    graph = new char* [row_size];\n    for (unsigned int i = 0; i &lt; row_size; ++i) {\n        graph[i] = new char[col_size];\n        int r = rand() % col_size; // 0~4\n        for (unsigned int j = 0; j &lt; col_size; ++j) {\n            if (i % 2 == 0) graph[i][j] = 1; \n            else if (j == r) graph[i][j] = 1; \n            else graph[i][j] = 0; \n        }\n    }\n}\n</code></pre> <p>This case, DFS gave slightly, but meaningfully more higher than BFS, showing that  sometimes DFS might be more efficient than BFS in a maze or path like matrix,  while BFS is more efficient than DFS in wide, spreading matrix.  </p> <pre><code>Total Accumulated BFS   Time:     29929 \u03bcs\nTotal Accumulated BFSV  Time:     34815 \u03bcs\nTotal Accumulated BFSTL Time:    101968 \u03bcs\nTotal Accumulated DFS   Time:     28094 \u03bcs\nTotal Accumulated DFSV  Time:     32001 \u03bcs\nTotal Accumulated DFSTL Time:     87057 \u03bcs\nTotal Accumul Recursion Time:     42940 \u03bcs\nTotal Row Size: 50, Total Col Size: 220\nMap Type: Maze,         Iteration : 1000 \n</code></pre> <p>Also, result showed that highly optimized BFS and DFS by using most fundamental  form of dynamic array allocation with index to use them as stack and queue is enough  to accomplish higher performance than the recursion function. </p> Algorithm Random Map (\u03bcs) Maze Map (\u03bcs) Random Map (%) Maze Map (%) BFS 199831 29929 100% 106.5% DFS 201897 28094 101.0% 100% Recursion 214588 42940 107.4% 152.8% std::queue 246616 101968 123.4% 362.8% std::stack 458883 87057 229.6% 309.9% <p>In conclusion, for map of about 50 X 220 size, the test result was following. </p>"},{"location":"Algorithm/A02/","title":"Path Finding Algorithm","text":"<p>This post explores various pathfinding algorithms used to find the shortest path between two points on a grid or graph. </p> <p>Memorizing and printing graph status requires buffer status, so following <code>struct</code>  datatype is implemented. </p> <pre><code>union Val {\n    struct {\n        signed short col; \n        signed short row;\n    };\n    signed int v; \n\n    signed int dist(const Val&amp; goal) const {\n        return abs(goal.col - col) + abs(goal.row - row); // Manhattan distance\n    }\n\n    bool operator&lt;(const Val&amp; other) const {\n        return this-&gt;dist(other) &lt; other.dist(other);\n    }\n};\n</code></pre> <p>This <code>union</code> datatype allow byte access, letting lower size of dynamic memory allocation. </p>"},{"location":"Algorithm/A02/#basic-algorithms-bfs-and-dfs","title":"Basic Algorithms: BFS and DFS","text":"<ul> <li>Breadth-First Search (BFS) and Depth-First Search (DFS) are foundational graph traversal methods.</li> <li>BFS explores nodes in layers and guarantees the shortest path in an unweighted grid or graph.</li> <li>DFS explores as deep as possible before backtracking but does not guarantee the shortest path.</li> </ul> <p>Sample DFS Code </p> <pre><code>void  Graph::DFS(Val start, Val end) {\n    CreateBuffer();\n    Val cur = start;\n    stack&lt;Val&gt; stk;\n    stk.push(start); \n    graph[start.row][start.col] = VISITED; // Mark start as visited\n\n    while (!stk.empty())\n    {\n        cur = stk.top();\n        stk.pop();\n        if (cur.v == end.v) break; // Found Answer \n        const short dx[4] = { 1, 0, -1, 0 };\n        const short dy[4] = { 0, 1, 0, -1 };\n        for (signed char i = 0; i &lt; 4; ++i) {\n            signed short new_col = cur.col + dx[i];\n            signed short new_row = cur.row + dy[i];\n            if (0 &lt;= new_row &amp;&amp; 0 &lt;= new_col &amp;&amp; new_col &lt; col_size &amp;&amp; new_row &lt; row_size\n                &amp;&amp; graph[new_row][new_col] == PATH &amp;&amp; buffer[new_row][new_col].v == 0) {\n                buffer[new_row][new_col] = cur;\n                graph[new_row][new_col] = VISITED;\n                stk.push({ new_col, new_row });\n            }\n        }\n    }\n    DeleteBuffer(); \n}\n</code></pre>"},{"location":"Algorithm/A02/#dijkstras-algorithm","title":"Dijkstra\u2019s Algorithm","text":"<ul> <li>Extends BFS to weighted graphs, where edges have different costs.</li> <li>Finds the shortest path by accumulating edge weights.</li> <li>Suitable for graphs where movement costs vary.</li> </ul> <p>Since grid map does not have weight for movement, Dijakstra is simply BFS. </p> <pre><code>void Graph::BFS(Val start, Val end) {\n    CreateBuffer();\n\n    Val cur = start; \n    queue&lt;Val&gt; que; \n    que.push(start); \n    graph[start.row][start.col] = VISITED; // Mark start as visited\n\n    while(!que.empty()) {\n        cur = que.front();\n        que.pop(); \n\n        if (cur.v == end.v) break; // Found Answer \n\n        const short dx[4] = { 1, 0, -1, 0 };\n        const short dy[4] = { 0, 1, 0, -1 };\n\n        for(signed char i = 0; i &lt; 4; ++i) {\n            signed short new_col = cur.col + dx[i];\n            signed short new_row = cur.row + dy[i];\n            if (0 &lt;= new_row &amp;&amp; 0 &lt;= new_col &amp;&amp; new_col &lt; col_size &amp;&amp; new_row &lt; row_size\n                &amp;&amp; graph[new_row][new_col] == PATH &amp;&amp; buffer[new_row][new_col].v == 0) {\n                buffer[new_row][new_col] = cur;\n                graph[new_row][new_col] = VISITED;\n                que.push({ new_col, new_row });\n            }\n        } \n    }\n    DeleteBuffer(); \n}\n</code></pre>"},{"location":"Algorithm/A02/#greedy-algorithm","title":"Greedy Algorithm","text":"<ul> <li>Basic DFS Algorithm is very inefficient, with accessing every possible direction. </li> <li>However, priority queue based implementation would give shortest distance </li> </ul> <p>Manhattan Distance simply calculates linear distance based comparison </p> \\[ |a_x - b_x| + |a_y - b_y| \\] <p>Euclid Distance calculates square root variable comparison </p> \\[ \\sqrt{(a_x - b_x)^2 + (a_y - b_y)^2} \\] <p>In this Greedy Algorithm Path Finding, distance between current location  and destination is simply used Manhattan Diatance logic with <code>std::priority_queue</code>. </p> <pre><code>void Graph::Greedy(Val start, Val end) {\n    CreateBuffer();\n    auto cmp = [&amp;end](const Val&amp; a, const Val&amp; b) {\n        return a.dist(end) &gt; b.dist(end); // Min-Heap\n    };\n    Val cur = start;\n    priority_queue&lt;Val, vector&lt;Val&gt;, decltype(cmp)&gt; pq(cmp); \n    // Min-heap based on distance \n    pq.push(start);\n    graph[start.row][start.col] = VISITED; // Mark start as visited\n    while (!pq.empty())\n    {\n        cur = pq.top(); \n        pq.pop();\n        if (cur.v == end.v) break;\n        const short dx[4] = { 1, 0, -1, 0 };\n        const short dy[4] = { 0, 1, 0, -1 };\n        for (signed char i = 0; i &lt; 4; ++i) {\n            signed short new_col = cur.col + dx[i];\n            signed short new_row = cur.row + dy[i];\n            if (0 &lt;= new_row &amp;&amp; 0 &lt;= new_col &amp;&amp; new_col &lt; col_size &amp;&amp; new_row &lt; row_size\n                &amp;&amp; graph[new_row][new_col] == PATH\n                &amp;&amp; buffer[new_row][new_col].v == 0) {\n                buffer[new_row][new_col] = cur;\n                graph[new_row][new_col] = VISITED;\n                pq.push({ new_col, new_row });\n            }\n        }\n    }\n    DeleteBuffer();\n}\n</code></pre> <p>Priority Queue will have comparison function <code>cmp</code> to figure out distance  between destination point <code>end</code> and current location. </p> <pre><code>auto cmp = [&amp;end](const Val&amp; a, const Val&amp; b) {\n        return a.dist(end) &gt; b.dist(end); // Min-Heap\n};\npriority_queue&lt;Val, vector&lt;Val&gt;, decltype(cmp)&gt; pq(cmp); \n</code></pre> <p>Key concepts used here are lambda function and usage of it in <code>priority_queue</code>. </p>"},{"location":"Algorithm/A02/#a-algorithm","title":"A* Algorithm","text":"<ul> <li>An informed search algorithm that uses a heuristic (often Manhattan distance) to prioritize nodes closer to the goal.</li> <li>Unlike BFS, which explores all neighbors equally, A* focuses on the most promising path, minimizing actual search space.</li> <li>Provides optimal paths like BFS but often with better performance on large maps.</li> </ul>"},{"location":"Algorithm/A02/#grid-vs-graph-representation","title":"Grid vs. Graph Representation","text":"<ul> <li>Pathfinding can be done on grids, where each cell is a node, or on graphs with vertices and edges.</li> <li>Grids are easier to visualize and implement but can be less efficient for very large or sparse maps.</li> <li>Graphs allow explicit edge weights and complex connections.</li> </ul>"},{"location":"Algorithm/A02/#path-reconstruction-methods","title":"Path Reconstruction Methods","text":"<p>To display the found path, algorithms need to record how they reached each node. Two common methods:</p> <ol> <li> <p>Store the Previous Position (Coordinates)</p> </li> <li> <p>Requires a buffer that saves the previous node\u2019s row and column.</p> </li> <li> <p>For large maps (row/column &gt; 256), use a union like <code>{ unsigned short x; unsigned short y; }</code> to handle indices efficiently.</p> </li> <li> <p>Store the Previous Direction</p> </li> <li> <p>Saves the direction (e.g., up, down, left, right) from which the node was reached.</p> </li> <li>More space-efficient, using only a char per cell.</li> </ol>"},{"location":"Algorithm/A02/#implementation-overview","title":"Implementation Overview","text":"<ul> <li>The implementations here build on BFS and DFS for complete search algorithms.</li> <li>Source and destination are defined, and the algorithms attempt to find a path between them.</li> <li>The path is recorded using a buffer of previous positions and then reconstructed for display.</li> <li>The map is generated as a 2D grid with walls and paths, using a byte per node.</li> </ul>"},{"location":"Algorithm/A02/#summary","title":"Summary","text":"<ul> <li>BFS guarantees the shortest path in unweighted grids but can explore many nodes.</li> <li>Dijkstra handles weighted edges by accumulating costs.</li> <li>A* optimizes search by estimating distance to the goal, reducing unnecessary exploration.</li> <li>Efficient path reconstruction and map storage are crucial for performance, especially on large grids.</li> </ul>"},{"location":"Algorithm/A05/","title":"Quick Sort Algorithm","text":"<p>Randomized Quick Sort </p> <p>Quick Sort is based on Divide and Conquer.  Compared to other sorting mechanisms with same time complexity of \\(O(n log n)\\)  including heap sort and merge sort, quick sort has way much better performance  due to its high cache hit probability by using two pointers linearly. </p> <p>However, the weakness of Quick Sort is when pivot selection makes the  worst choice in sequence. For instance, if one array is sorted in descending  order, and the goal is to re sort it again in ascending order, and  pivot selection is sequential from 0 to n or vise versa, then the  pivot value selected might be the biggest or the smallest in order, so that  It will move pivot only to the edge of the index, resulting in  time complexity of \\(O(n^2)\\) in the worst case. </p> <p>However, application of random selection of pivot might be useful alternative. </p>"},{"location":"Algorithm/A06/","title":"Bucket Sort","text":"<p>Limit of Sort by Comparison </p> <p>Suppose sorting numbers a b c, having total 6 possibilities.  It would be <code>abc</code> <code>acb</code> <code>bac</code> <code>bca</code> <code>cab</code> <code>cba</code>, total 6.  It represents, Sorting probability exist total <code>n!</code>, permutation numbers.  For total size of <code>n</code> array, there would exist total <code>n!</code> likelihoods of order. </p> <p>Comparison based sorting can be represented as binary decision tree.  So, in perspective of binary decision tree,  based on comparison result, it is likely to be a search tree of total  <code>n!</code> number of leaf nodes. </p> <p>Suppose <code>n</code> numbers of elements to be sorted in a decision tree format,  when drown as binary tree, there is total leaf node of <code>n!</code> numbers.  Time complexity of this binary tree would be height of this tree.  When there exists total <code>n!</code> numbers of leaf node, then the  height can be measurable by <code>log (n!)</code>. </p> <p>Stirling's Approximation Applied to thehe minumim height of the <code>n!</code> leaf nodes would be <code>log (n!)</code>. </p> \\[ n! \\approx \\sqrt{2\\pi n} \\left(\\frac{n}{e}\\right)^n \\] \\[ \\log(n!) = \\Theta(n \\log n) \\] <p>Thus, worst caste of any sorting function based on one by one comparison and swap will have at least \\(\\Theta(n \\log n)\\). Or, since it is at least \\(\\Theta(n \\log n)\\),  meaning that it is \\(\\Omega (n \\log n)\\)</p> <p>Then, any other way to make sorting faster, in linear time close to \\(O(n)\\)? </p>"},{"location":"Algorithm/A06/#counting-sort","title":"Counting Sort (\uacc4\uc218 \u8a08\u6578 \uc815\ub82c)","text":"<p>All comparison sorts have at least \\(O(n \\log n)\\) time complexity as proven above. </p> <p>However, there are theoretically more faster ways to sort faster.  Suppose we put balls in the basket.  Memory access will be constant, \\(O(1)\\). </p> <p>Prepare for basket for each number, considering that several numbers will be  duplicated. Count how much each number exist and save in each different count array.  Then, accumulate values from the end. </p> <p>Suppose <code>n</code> inputs and <code>k</code> numbers </p> <ul> <li>Time  Complexity \\(\\theta(n + k) = \\theta(n)\\)</li> <li>Space Complexity \\(\\theta(n + k) = \\theta(n)\\)</li> </ul>"},{"location":"Algorithm/A06/#radix-sort","title":"Radix Sort (\uae30\uc218 \u57fa\uf969 \uc815\ub82c)","text":"<p>It is tought to use counting sort to several digit numbers,  since too large numbers will exponentially amplify complexity.  For instance, if number unit is in 3 digits, array size should  be \\(10^3 \\eq 1000\\). </p> <p>Thus, to maintain \\(O(1)\\) close time complexity as much as possible  while preventing too gigantic array is called as <code>Radix Sort</code>. </p> <p>Unconsciously people sort from high to low order, but it became  divide and conquer rather than radix sort.  So, in counting sort, it should be from lower digit to higher digit. </p> <p>Limits are, stable sort is required.  Also, avoid unnecessary order changes.  If current checking digit of two numbers are same, do NOT change order. </p> <p>Radix sort is stable sort, while Quick sort is unstable sort. </p> <p>In a counting sort, if maximum digit number is supposed as <code>d</code>, then total time complexity will be  \\(\\Theta(d\\dot(n+k)) = \\Theta(n)\\)</p>"},{"location":"Algorithm/A06/#bucket-sort_1","title":"Bucket Sort","text":"<p>Radix Sort exist for integers, but  Bucket Sort can work for non integer numbers. </p> <p>Make appropriate size of the bucket array first and  put similar sized numbers in order by division. </p> <p>After than, sort by simpler sort like insertion sort inside bucket. </p> <p>For instance, if input i is numbers between 0 ~ 1 and there exists 10 buckets,  decide bucket by math formula like \\(float (i * 10) / 1\\)</p> \\[ T(n) = \\Theta(n) + \\sigma^{n-1}_{i=0} O(n_i^2) \\rightarrow T(n) = \\Theta(n)  \\] <p>Ideal case, one number per one bucket,  \\(n_i = 1 \\rightarrow O(n_i^2) = O(1^2) = O(1)\\)</p> <p>Worst, case, all numbers inside one single bucket  \\(n_i = n \\rightarrow O(n_i^2) = O(n^2)\\)</p> <p>Average expectecd usage case, if small number <code>k</code> is input then  \\(n_i = k \\rightarrow O(n_i^2) = O(k^2) = O(1)\\)</p>"},{"location":"Algorithm/A08/","title":"Hash Table Hashing","text":"<p>Birthday Problem</p> <p>Suppose there are \\(n\\) people in a room. What is the probability that at least two of them share the same birthday?</p> <p>Let:</p> <ul> <li>\\(p(n)\\): the probability that at least two people share a birthday</li> <li>\\(\\bar{p}(n) = 1 - p(n)\\): the probability that all birthdays are different</li> </ul> <p>We compute \\(\\bar{p}(n)\\) first:</p> \\[ \\bar{p}(n) = \\frac{365}{365} \\cdot \\frac{364}{365} \\cdot \\frac{363}{365} \\cdots \\frac{365 - n + 1}{365} = \\prod_{k=0}^{n-1} \\left( \\frac{365 - k}{365} \\right) \\] <p>So,</p> \\[ p(n) = 1 - \\bar{p}(n) = 1 - \\prod_{k=0}^{n-1} \\left( \\frac{365 - k}{365} \\right) \\] <p>For instance, when \\(n = 23\\), which is not that large number compared to 365 possible birthdays, </p> \\[ p(23) \\approx 1 - \\prod_{k=0}^{22} \\left( \\frac{365 - k}{365} \\right) \\approx 0.507 \\] <p>Which is significantly high. </p> <p>Pigeonhole Principle</p> <p>When putting \\(n + 1\\) objects in \\(n\\) boxes then at least one box will contain more than one object.  So, if 366 people are in the room (i.e. \\(n=366\\)), and there are only 365 possible birthdays, at least two people must share a birthday: </p> \\[ p(366) = 1 \\]"},{"location":"Algorithm/A08/#hash-table-analogy","title":"Hash Table Analogy","text":"<p>This phenomenon illustrates how hash collisions are more likely than expected.</p> <p>In hashing, if we hash \\(n\\) keys uniformly into \\(m\\) slots, a collision (two keys mapping to the same slot) is quite likely even when \\(n \\ll m\\).</p> <p>The Birthday Paradox shows that:</p> <p>Collisions occur with \\~50% probability when \\(n \\approx \\sqrt{2m \\ln 2} \\approx 1.17 \\sqrt{m}\\)</p> <p>So for \\(m = 365\\), even just 23 inputs lead to a high chance of collision.</p>"},{"location":"Algorithm/A08/#separate-chaning","title":"Separate Chaning","text":"<p>Separate Chaining (\uac1c\ubcc4 \uccb4\uc774\ub2dd) can be described as extension of bucket sort. </p>"},{"location":"Algorithm/A08/#comparison-between-stdmap-and-stdunordered_map","title":"Comparison between <code>std::map</code> and <code>std::unordered_map</code>.","text":"<p>The STL data structure name <code>map</code> is related to math <code>mapping</code>, since it can be described as  value finding by key, aka mapping(\uc0ac\uc0c1) value to key. </p> <ul> <li><code>std::map</code> is Red Black Tree based Binary Search Tree, with Search Time Complexity of \\(O(n log n)\\)</li> <li><code>std::unordered_map</code> is based on individual chaining similar hash table, with Search time complexity \\(O(1)\\).  </li> </ul>"},{"location":"Algorithm/A09/","title":"Graph Algorithm","text":"<p>Array is  1 Dimensional linear structure </p> <p>More generalized form than tree is Graph </p> <p>Graph is used to express real life data structure  SNS connectoin and easy chatting program  Inter connectoin status  AI Neural Network is also Graph based </p> <p>Graph Data Structure, Design Algorithm  is important. </p>"},{"location":"Algorithm/A09/#graph-basics","title":"Graph Basics","text":"<p>Vertex of Graph is  similar to Node on List or Tree  Basic unit to save Data  In SNS it can be name, profile info, user ID, etc </p> <p>Edge is connection between two Vertex  No Edge between two vertex means no connectoin </p> <p>Data might be saved like Weight  Weight of Edge might exist or not  Direction can also exist or not  Can be represented with arrow  Undirected Graph and Directed Graph  Undirected Graph means path in both ways </p> <p>Edge might save info like geometric distance between two vertex </p> <p>In-Degree \uc9c4\uc785 \ucc28\uc218  For one Vertex, how much Edges are heading from other vertices to this Vertex  Other vertices are incoming neighbors  Out-Degree \ucd9c\ub825 \ucc28\uc218  For One Vertex, how much Edges are heading from this vertex to other vertices  other vertices are outgoing neighbors </p> <p>Graph to Math Expression </p> <p>4 Vertices expressed as  \\(V = {0, 1, 2, 3}\\) </p> <p>Edges are connection of two vertices, so can be represented as pair. </p> <p>\\(E = {(0, 2), (1, 3), (2, 3), (3, 2), (2, 1)}\\)</p> <p>\uc815\uc810 \uc0ac\uc774 \uc5f0\uacb0 \uad00\uacc4 \ud45c\ud604 \ud589\ub82c  \uc778\uc811 \ud589\ub82c \ubc29\uc2dd  Adjacent Matrix </p> <p>Undirected Graph Adjacent Matrix  will be Symmetric Matrix (\ub300\uce6d \ud589\ub82c)</p> <p>\uc778\uc811 \ub9ac\uc2a4\ud2b8 Adjacent List </p> <p>\ud0d0\uc0c9  \ucd5c\ub2e8 \uac70\ub9ac \uc9c0\ub3c4 \uc804\uccb4 \ub4a4\uc9c0\uae30\ubcf4\ub2e4\ub294 \uc2dc\uc791\uc810\ubd80\ud130  \uc6d0\ud558\ub294 \uc815\ubcf4 \ubc1c\uacac \uc2dc \uc911\uac04\uc5d0 \ud0d0\uc0c9 \uba48\ucd94\uae30 </p> <p>\uae4a\uc774\uc6b0\uc120\ud0d0\uc0c9 </p> <p>\uc778\uc811\ub9ac\uc2a4\ud2b8 \uad6c\uc870  \ubc29\ubb38\ud55c \uc801 \uc5c6\ub294 \uc774\uc6c3 \uc6b0\uc120\uc801\uc73c\ub85c \uc9c4\ud589 </p>"},{"location":"Algorithm/A09/#topological-sort","title":"Topological Sort \uc704\uc0c1 \uc815\ub82c","text":"<p>Topology \uc704\uc0c1  Meaning Connection \uc5f0\uacb0 \uad00\uacc4 </p> <p>Connection Relation based Sort  So, for shortest path finding, not possible to use </p> <p>So what to do? </p> <p>Epitite,  Main Dish,  Dessert </p> <p>Suppose,  Epitite -&gt; Main Dish  Epitite -&gt; Dessert  Main Dish -&gt; Dessert </p> <p>Order is possible, and you want to find ways  to eat every dish possible </p> <p>In Directed Grap,  Find 1 Dimensional Order to access all vertices </p> <p>Also, Topological Sort is Impossible to use in  Circular Order!  For instance, if Dessert -&gt; Epitite is possible,  it is infinite circular structure. </p>"},{"location":"Algorithm/A09/#characteristics-of-topological-sort","title":"Characteristics of Topological Sort","text":"<p>Graph to 1D  From left to right, if left one visit right one while  vise versa is imposssible, it will NOT break preceding rule.  (\uc120\ud589 \uc870\uac74 \uc704\ubc18 \uac00\ub2a5\uc131 \uc5c6\uc74c) </p> <p>Sometimes Result of Topological Sort might be multiple, not one </p> <p>Some Graph Vertices have  Either No In-Degree, meaning in left edge  Whatever order among No In-Degree does not matter in topological sort  \uc9c4\uc785\ucc28\uc218 0 </p> <p>Or No Out-Degree, meaning it is in right edge  Whatever order among No Out-Degree does not matter in topological sort  \ucd9c\ub825\ucc28\uc218 0 </p>"},{"location":"Algorithm/A09/#queue-based-topological-sort","title":"Queue Based Topological Sort","text":"<p>Steps of Queue based Topological Sort is inspired by BFS  Breadth First Search </p> <p>First, make an array storing how much  In-Degree Edges each vertex have in array. </p> <pre><code>struct Vertex {\n    int index; \n    bool visited = false; \n    vector&lt;Vertex*&gt; out_neighbors; \n}; \n\nclass Graph {\n    vector&lt;Vertex*&gt; vertices; \n    // Additional Functions \n}; \n</code></pre> <p>If counting array element <code>in_count[i]</code> became zero, then that vertex  with index <code>i</code> can be inside queue for topological sort. </p> <pre><code>vector&lt;size_t&gt; in_count(vertices.size(), 0); // Reset as 0 \nfor(Vertex* vertex : vertices) {\n    for(Vertex* out_neighbor : vertex-&gt;out_neighbors)  \n        in_count[out_neighbor]++; // Add count per in neighbor \n}\n</code></pre> <p>Start by pushing all elements that <code>in_count[i]</code> is zero. </p> <pre><code>queue&lt;Vertex*&gt; bfs;\nfor (int i = 0; i &lt; in_count.size(); ++i) \n    if (indegree[i] == 0) bfs.push(vertices[i]); \n</code></pre> <p>Now, implement logic for topological sort.  Pseudocode will be, </p> <ol> <li>While Queue is not Empty </li> <li>Pop current vertex from Queue </li> <li>Loop of the out neighbor vertices of current vertex </li> <li>If <code>in_count[index]</code> is zero, meaning no In-Direction Edge has left </li> <li>Push that vertex inside queue as all In-Direction Neighbor are visited </li> </ol> <p>Real C++ code implementation is similar to this. </p> <pre><code>while(!bfs.empty()) {\n    Vertex *cur = bfs.front(); bfs.pop(); \n    for (Vertex* out : cur-&gt;out_neighbors) {\n        if (indegree[out-&gt;index] &gt; 0) continue; \n        bfs.push(out); \n    } // result.push_back(vertex); // Don't forget to save path \n}\n</code></pre> <p>If Result path saving and visiting mark is required, should be  implemented additionally  </p>"},{"location":"Algorithm/A09/#dfs-based-topological-sort","title":"DFS Based Topological Sort","text":"<p>Surprisingly, Recursion based DFS per each random vertex order can be used.  This is based on inserting input after calling Recursive function of  each of its Out neighbors. </p> <p>The entire Topological sorting is based on following. </p> <pre><code>stack&lt;Vertex*&gt; TopologicalSort() {\n    ans = stack&lt;Vertex*&gt;();\n    for (Vertex* v : vertices) v-&gt;visited = false; \n    for (Vertex* v : vertices) \n        if (v-&gt;visited == false) TopologicalSortHelper(v); \n    return ans; \n}\n</code></pre> <p>The helper function is following.  Simply, based on the starting vertex, all  vertices accessible from the starting node will be searched. </p> <pre><code>void TopologicalSortHelper(Vertex* v)\n{\n    v-&gt;visited = true; \n    for (Vertex* out : v-&gt;out_neighbors) {\n        if (out-&gt;visited == false)\n            TopologicalSortHelper(out); \n    }\n    ans.push(v); \n}\n</code></pre> <p>Then, despite of no consideration of order, returned values  inside stack will satisfy, because of the characteristics of stack. </p> <p>In iteration of array of <code>vector&lt;Vertex*&gt; vertices</code>,  When one vertex helper function is called, then all  Out-Direction vertex will be inside stack. </p> <p>Also, since vertices that are not out-neighbors of the previous  vertex would either be independent vertex or in neighbor of the  previous vertex. Thus, those pushed into stack after previous  vertex is pushed inside already makes sense. </p> <p>DAG \ubc29\ud5a5\uc131 \ube44\uc21c\ud658 \uadf8\ub798\ud504  Directed Acyclic Graph </p>"},{"location":"Algorithm/HKU/HKUL1P1/","title":"Divide and Conquer","text":""},{"location":"Algorithm/HKU/HKUL1P1/#learning-outcome","title":"Learning Outcome","text":"<ul> <li>Learn how to analyze recursive algorithms.</li> <li>Understand the divide-and-conquer technique, recurrence relations, and recursive functions.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P1/#what-is-a-recursive-function","title":"What is a Recursive Function?","text":"<ul> <li>A recursive function calls itself with a smaller input.</li> <li>It consists of:<ul> <li>A base case that stops the recursion.</li> <li>A recursive case that breaks the problem into a smaller subproblem.</li> </ul> </li> </ul>"},{"location":"Algorithm/HKU/HKUL1P1/#example","title":"Example","text":"<p><pre><code>f(n) = 1                 if n = 1\nf(n) = f(n - 1) + n      if n &gt; 1\n</code></pre> To compute f(4): <pre><code>f(4) = f(3) + 4\n     = f(2) + 3 + 4\n     = f(1) + 2 + 7\n     = 1 + 9 = 10\n</code></pre></p>"},{"location":"Algorithm/HKU/HKUL1P1/#finding-a-closed-form-non-recursive-formula","title":"Finding a Closed Form (Non-Recursive Formula)","text":""},{"location":"Algorithm/HKU/HKUL1P1/#method-iteration","title":"Method: Iteration","text":"<p>By expanding the recurrence: <pre><code>f(n) = f(n-1) + n\n     = f(n-2) + (n-1) + n\n     = ...\n     = 1 + 2 + ... + n = n(n+1)/2\n</code></pre></p>"},{"location":"Algorithm/HKU/HKUL1P1/#mathematical-induction","title":"Mathematical Induction","text":"<p>To prove: f(n) = n(n+1)/2 - Base case: n = 1 \u2192 f(1) = 1, and 1(1+1)/2 = 1 \u2705 - Inductive step:   Assume f(k) = k(k+1)/2   Show f(k+1) = f(k) + (k+1) = k(k+1)/2 + (k+1) = (k+1)(k+2)/2 \u2705</p>"},{"location":"Algorithm/HKU/HKUL1P1/#asymptotic-analysis-big-o","title":"Asymptotic Analysis (Big-O)","text":"<p>We often care about the growth rate instead of the exact formula.</p>"},{"location":"Algorithm/HKU/HKUL1P1/#prove-fn-on2","title":"Prove: f(n) = O(n\u00b2)","text":"<p>We want to find a constant c such that f(n) \u2264 cn\u00b2 for all n \u2265 1.</p> <p>Step 1: Trial to find c <pre><code>f(n) = f(n-1) + n \u2264 c(n-1)\u00b2 + n = cn\u00b2 - (2cn - c - n)\n</code></pre> To ensure f(n) \u2264 cn\u00b2, we need: <pre><code>2cn - c - n \u2265 0 \u2192 c \u2265 n / (2n - 1)\n</code></pre> Since n / (2n - 1) \u2264 1 for all n \u2265 1, choose c = 1.</p> <p>Step 2: Induction proof - Base: f(1) = 1 \u2264 1\u00b2 - Inductive step:   Assume f(k) \u2264 k\u00b2   Then f(k+1) = f(k) + (k+1) \u2264 k\u00b2 + (k+1) \u2264 (k+1)\u00b2</p> <p>So, f(n) = O(n\u00b2) is proven.</p>"},{"location":"Algorithm/HKU/HKUL1P1/#take-home-exercise","title":"Take-home Exercise","text":"<p>Prove: f(n) = O(n), where <pre><code>f(1) = 3\nf(n) = f(n - 1) + 10 for n &gt; 1\n</code></pre></p>"},{"location":"Algorithm/HKU/HKUL1P1/#solving-recurrences-how-to-find-asymptotic-bounds","title":"Solving Recurrences (How to Find Asymptotic Bounds)","text":"<p>Here are three common techniques: 1. Substitution Method 2. Recursion Tree Method 3. Master Method</p> <p>These are detailed in MIT Introduction to Algorithms (CLRS), Chapters 4.3 to 4.5. While not a major exam topic, understanding them is useful for mastering algorithm analysis. You can review online materials or request a tutorial if needed.</p>"},{"location":"Algorithm/HKU/HKUL1P1/#divide-and-conquer-overview","title":"Divide and Conquer Overview","text":"<p>This approach leads to recursive algorithms. Their time complexity is usually described by recurrence relations.</p> <p>The general structure: 1. Divide the problem into subproblems 2. Conquer each subproblem recursively 3. Combine their solutions</p>"},{"location":"Algorithm/HKU/HKUL1P1/#factorial-example","title":"Factorial Example","text":""},{"location":"Algorithm/HKU/HKUL1P1/#recursive-code","title":"Recursive Code","text":"<pre><code>fact(n) {\n  if (n == 1) return 1;\n  else return n * fact(n-1);\n}\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P1/#time-complexity-analysis","title":"Time Complexity Analysis","text":"<p>Let T(n) be the runtime: - T(1) = c1 - T(n) = T(n - 1) + c2 (for n &gt; 1)</p> <p>Unfolding: <pre><code>T(n) = T(n-1) + c2\n     = T(n-2) + 2c2\n     = ...\n     = T(1) + (n - 1)c2 = c1 + (n - 1)c2\n</code></pre> Therefore, T(n) = O(n)</p> <p>This shows that the recursive factorial algorithm runs in linear time.</p>"},{"location":"Algorithm/HKU/HKUL1P1/#tower-of-hanoi-summary","title":"Tower of Hanoi - Summary","text":""},{"location":"Algorithm/HKU/HKUL1P1/#problem-overview","title":"Problem Overview","text":"<ul> <li>Given 3 pegs and n disks of different sizes stacked in increasing size on one peg (largest at bottom).</li> <li>Goal: Move all disks from the source peg to the destination peg.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P1/#rules","title":"Rules","text":"<ol> <li>Only one disk can be moved at a time.</li> <li>A disk can only be placed on top of a larger disk or an empty peg.</li> </ol>"},{"location":"Algorithm/HKU/HKUL1P1/#recursive-solution-strategy","title":"Recursive Solution Strategy","text":"<p>To move <code>n</code> disks from Peg A to Peg C using Peg B: 1. Move <code>n-1</code> disks from A to B (using C as auxiliary). 2. Move the largest disk (nth) from A to C. 3. Move the <code>n-1</code> disks from B to C (using A as auxiliary).</p>"},{"location":"Algorithm/HKU/HKUL1P1/#base-case","title":"Base Case","text":"<p>If <code>n = 1</code>: Move the single disk directly from A to C.</p>"},{"location":"Algorithm/HKU/HKUL1P1/#pseudocode","title":"Pseudocode","text":"<pre><code>TofH(A, B, C, n) {\n    if (n == 1)\n        move disk from A to C;\n    else {\n        TofH(A, C, B, n - 1);\n        move disk from A to C;\n        TofH(B, A, C, n - 1);\n    }\n}\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P1/#visual-explanation-for-n-3","title":"Visual Explanation for n = 3","text":""},{"location":"Algorithm/HKU/HKUL1P1/#initial-state","title":"Initial State","text":"<pre><code>Peg A       Peg B       Peg C\n[3]         |           |\n[2]         |           |\n[1]         |           |\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P1/#step-by-step-moves","title":"Step-by-step Moves","text":"<ol> <li> <p>Move 2 disks from A to B (use C):</p> <ul> <li>Move [1] A \u2192 C</li> <li>Move [2] A \u2192 B</li> <li>Move [1] C \u2192 B <pre><code>Peg A       Peg B       Peg C\n[3]         [2]         |\n            [1]         |\n</code></pre></li> </ul> </li> <li> <p>Move [3] A \u2192 C <pre><code>Peg A       Peg B       Peg C\n            [2]        [3]\n            [1]         |\n</code></pre></p> </li> <li> <p>Move 2 disks from B to C (use A):</p> <ul> <li>Move [1] B \u2192 A</li> <li>Move [2] B \u2192 C</li> <li>Move [1] A \u2192 C <pre><code>Peg A       Peg B       Peg C\n            |          [3]\n            |          [2]\n            |          [1]\n</code></pre></li> </ul> </li> </ol>"},{"location":"Algorithm/HKU/HKUL1P1/#number-of-moves","title":"Number of Moves","text":"<p>Let f(n) be the number of moves: - f(1) = 1 - f(n) = 2f(n-1) + 1</p> <p>Solving recurrence: <pre><code>f(n) = 2f(n - 1) + 1\n     = 2(2f(n - 2) + 1) + 1 = 4f(n - 2) + 3\n     = ...\n     = 2\u207f - 1\n</code></pre></p>"},{"location":"Algorithm/HKU/HKUL1P1/#time-complexity","title":"Time Complexity","text":"<ul> <li>Recursive algorithm performs <code>2\u207f - 1</code> moves</li> <li>\u21d2 Time complexity: O(2\u207f) (exponential)</li> </ul> <p>This version includes structured visuals and step-by-step logic for explaining Tower of Hanoi to students in an intuitive way. You can draw each state on a whiteboard or use the pseudocode and recurrence to connect with algorithm analysis.</p>"},{"location":"Algorithm/HKU/HKUL1P2/","title":"Tower of Hanoi","text":""},{"location":"Algorithm/HKU/HKUL1P2/#problem-overview","title":"Problem Overview","text":"<ul> <li>Given 3 pegs and n disks of different sizes stacked in increasing size on one peg (largest at bottom).</li> <li>Goal: Move all disks from the source peg to the destination peg.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P2/#rules","title":"Rules","text":"<ol> <li>Only one disk can be moved at a time.</li> <li>A disk can only be placed on top of a larger disk or an empty peg.</li> </ol>"},{"location":"Algorithm/HKU/HKUL1P2/#recursive-solution-strategy","title":"Recursive Solution Strategy","text":"<p>To move <code>n</code> disks from Peg A to Peg C using Peg B: 1. Move <code>n-1</code> disks from A to B (using C as auxiliary). 2. Move the largest disk (nth) from A to C. 3. Move the <code>n-1</code> disks from B to C (using A as auxiliary).</p>"},{"location":"Algorithm/HKU/HKUL1P2/#base-case","title":"Base Case","text":"<p>If <code>n = 1</code>: Move the single disk directly from A to C.</p>"},{"location":"Algorithm/HKU/HKUL1P2/#pseudocode","title":"Pseudocode","text":"<pre><code>TofH(A, B, C, n) {\n    if (n == 1)\n        move disk from A to C;\n    else {\n        TofH(A, C, B, n - 1);\n        move disk from A to C;\n        TofH(B, A, C, n - 1);\n    }\n}\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P2/#visual-explanation-for-n-3","title":"Visual Explanation for n = 3","text":""},{"location":"Algorithm/HKU/HKUL1P2/#initial-state","title":"Initial State","text":"<pre><code>Peg A       Peg B       Peg C\n[3]         |           |\n[2]         |           |\n[1]         |           |\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P2/#step-by-step-moves","title":"Step-by-step Moves","text":"<ol> <li> <p>Move 2 disks from A to B (use C):</p> <ul> <li>Move [1] A \u2192 C</li> <li>Move [2] A \u2192 B</li> <li>Move [1] C \u2192 B <pre><code>Peg A       Peg B       Peg C\n[3]         [2]         |\n            [1]         |\n</code></pre></li> </ul> </li> <li> <p>Move [3] A \u2192 C <pre><code>Peg A       Peg B       Peg C\n            [2]        [3]\n            [1]         |\n</code></pre></p> </li> <li> <p>Move 2 disks from B to C (use A):</p> <ul> <li>Move [1] B \u2192 A</li> <li>Move [2] B \u2192 C</li> <li>Move [1] A \u2192 C <pre><code>Peg A       Peg B       Peg C\n            |          [3]\n            |          [2]\n            |          [1]\n</code></pre></li> </ul> </li> </ol>"},{"location":"Algorithm/HKU/HKUL1P2/#number-of-moves","title":"Number of Moves","text":"<p>Let f(n) be the number of moves: - f(1) = 1 - f(n) = 2f(n-1) + 1</p> <p>Solving recurrence: <pre><code>f(n) = 2f(n - 1) + 1\n     = 2(2f(n - 2) + 1) + 1 = 4f(n - 2) + 3\n     = ...\n     = 2\u207f - 1\n</code></pre></p>"},{"location":"Algorithm/HKU/HKUL1P2/#time-complexity","title":"Time Complexity","text":"<ul> <li>Recursive algorithm performs <code>2\u207f - 1</code> moves</li> <li>\u21d2 Time complexity: O(2\u207f) (exponential)</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P2/#incorrect-attempt-at-hanoi","title":"\u26a0\ufe0f Incorrect Attempt at Hanoi","text":"<p>Student\u2019s Wrong Approach: <pre><code>TofH2(A, B, C, n) {\n  if (n == 1)\n    move disk from A to C;\n  else {\n    TofH2(A, C, B, n/2);\n    TofH2(A, B, C, n/2);\n    TofH2(B, A, C, n/2);\n  }\n}\n</code></pre></p>"},{"location":"Algorithm/HKU/HKUL1P2/#why-its-incorrect","title":"Why It\u2019s Incorrect","text":"<ul> <li>Tower of Hanoi must preserve disk ordering.</li> <li>Splitting into <code>n/2</code> is invalid because it breaks the top-to-bottom size rule.</li> <li>The correct subproblem is always: move top <code>n-1</code> disks first.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P3/","title":"Divide-and-Conquer Approach","text":""},{"location":"Algorithm/HKU/HKUL1P3/#key-concepts","title":"Key Concepts","text":"<ol> <li> <p>Divide-and-Conquer Strategy:</p> <ul> <li>Solve a problem of size <code>n</code> by assuming solutions exist for smaller inputs (<code>n-1</code>, or <code>n/2</code>).</li> <li>Then, combine those solutions to build the solution for size <code>n</code>.</li> </ul> </li> <li> <p>Base Case is Essential:</p> <ul> <li>For factorial: <code>n! = 1</code> when <code>n = 1</code></li> <li>For Tower of Hanoi: Move 1 disk directly</li> </ul> </li> <li> <p>Steps in Divide-and-Conquer:</p> <ul> <li>Define subproblems</li> <li>Solve base cases</li> <li>Combine subproblem solutions</li> <li>Formulate a recursive algorithm</li> <li>Model running time as recurrence and solve it</li> </ul> </li> </ol>"},{"location":"Algorithm/HKU/HKUL1P3/#example-finding-the-maximum-number","title":"Example: Finding the Maximum Number","text":""},{"location":"Algorithm/HKU/HKUL1P3/#goal","title":"Goal","text":"<p>Find the largest value in an array using recursion.</p>"},{"location":"Algorithm/HKU/HKUL1P3/#strategy","title":"Strategy","text":"<ul> <li>Base Case: If one number, return it.</li> <li>Recursive Case: Compare the last number with the result from a recursive call on the rest.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P3/#pseudocode","title":"Pseudocode","text":"<pre><code>largest1(A[1..n]) {\n  if (n == 1) return A[1];\n  x = largest1(A[1..n-1]);\n  if (x &gt; A[n]) return x;\n  else return A[n];\n}\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P3/#time-complexity","title":"Time Complexity","text":"<ul> <li><code>T(n) = T(n-1) + c2</code>, <code>T(1) = c1</code></li> <li>\u21d2 T(n) = O(n)</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P3/#example-execution","title":"Example Execution","text":"<pre><code>largest1([4, 60, 21, 3, 5])\n  \u2192 largest1([4, 60, 21, 3])\n    \u2192 largest1([4, 60, 21])\n      \u2192 largest1([4, 60])\n        \u2192 largest1([4]) \u2192 4\n        \u2192 return max(4, 60) \u2192 60\n      \u2192 return max(60, 21) \u2192 60\n    \u2192 return max(60, 3) \u2192 60\n  \u2192 return max(60, 5) \u2192 60\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P3/#divide-and-conquer-finding-the-largest-number-alternative-approach","title":"Divide and Conquer: Finding the Largest Number (Alternative Approach)","text":""},{"location":"Algorithm/HKU/HKUL1P3/#problem","title":"Problem:","text":"<p>Find the largest number in an array of size <code>n</code> using divide-and-conquer.</p>"},{"location":"Algorithm/HKU/HKUL1P3/#key-idea","title":"Key Idea:","text":"<ul> <li>Divide the array into two equal halves.</li> <li>Conquer each half recursively.</li> <li>Combine: Compare the maximums from both halves.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P3/#algorithm","title":"Algorithm:","text":"<pre><code>// Assume n is a power of 2 for simplicity\nlargest2(A[1..n]) {\n    if (n == 1)\n        return A[1];\n    else {\n        x1 = largest2(A[1..n/2]);\n        x2 = largest2(A[n/2+1..n]);\n        if (x1 &gt; x2)\n            return x1;\n        else\n            return x2;\n    }\n}\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P3/#time-complexity_1","title":"Time Complexity:","text":"<p>Let T(n) be the time taken to find the largest element in n numbers. - T(1) = c1 - T(n) = 2T(n/2) + c2 - Using Master Theorem, this gives T(n) = O(n)</p>"},{"location":"Algorithm/HKU/HKUL1P3/#example","title":"Example:","text":"<p>Array: [14, 65, 34, 33, 7, 56, 100, 20]</p> <p>Step-by-step recursive split: <pre><code>Left: [14, 65, 34, 33]           Right: [7, 56, 100, 20]\n  \u251c\u2500\u2500 [14, 65]                      \u251c\u2500\u2500 [7, 56]\n  \u2502     \u251c\u2500\u2500 14                     \u2502     \u251c\u2500\u2500 7\n  \u2502     \u2514\u2500\u2500 65                     \u2502     \u2514\u2500\u2500 56\n  \u2514\u2500\u2500 [34, 33]                     \u2514\u2500\u2500 [100, 20]\n        \u251c\u2500\u2500 34                           \u251c\u2500\u2500 100\n        \u2514\u2500\u2500 33                           \u2514\u2500\u2500 20\n</code></pre> Compare and propagate max values up: - max(14, 65) \u2192 65 - max(34, 33) \u2192 34 - max(65, 34) \u2192 65 - max(7, 56) \u2192 56 - max(100, 20) \u2192 100 - max(56, 100) \u2192 100 - final max: max(65, 100) \u2192 100</p>"},{"location":"Algorithm/HKU/HKUL1P3/#comparison-with-straightforward-approach","title":"Comparison with Straightforward Approach:","text":"<p><pre><code>largest(A[1..n]) {\n    maximum = A[1];\n    for (i = 2; i &lt;= n; i++) {\n        if (A[i] &gt; maximum)\n            maximum = A[i];\n    }\n    return maximum;\n}\n</code></pre> - Also O(n) time complexity. - This method is simpler, but the divide-and-conquer version helps practice recursion.</p>"},{"location":"Algorithm/HKU/HKUL1P3/#summary","title":"Summary:","text":"<ul> <li>Divide-and-conquer is not always the most efficient in practice but is helpful conceptually.</li> <li>Good for illustrating recursion and recurrence analysis.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P4/","title":"Master Theorem, Fibonacci Example","text":""},{"location":"Algorithm/HKU/HKUL1P4/#master-theorem-simplified-statement","title":"Master Theorem (Simplified Statement)","text":"<p>For recurrence of the form: <pre><code>T(n) = aT(n/b) + f(n)\n</code></pre> where: - <code>a \u2265 1</code> (number of subproblems) - <code>b \u2265 2</code> (factor of size reduction) - <code>f(n) = \u0398(n^p)</code> (non-recursive work per level)</p> <p>Then: - If <code>f(n) = O(n^{log_b a - \u03b5})</code> for some \u03b5 &gt; 0:     - T(n) = \u0398(n^{log_b a}) - If <code>f(n) = \u0398(n^{log_b a})</code>:     - T(n) = \u0398(n^{log_b a} log n) - If <code>f(n) = \u03a9(n^{log_b a + \u03b5})</code> and regularity condition holds:     - T(n) = \u0398(f(n))</p> <p>For cases where <code>n</code> is not a perfect power of <code>b</code>, the time complexity usually stays the same, but algorithms may require additional handling for leftover elements.</p>"},{"location":"Algorithm/HKU/HKUL1P4/#fibonacci-numbers-recursive-vs-iterative","title":"Fibonacci Numbers: Recursive vs Iterative","text":""},{"location":"Algorithm/HKU/HKUL1P4/#definition","title":"Definition:","text":"<pre><code>F(1) = 1\nF(2) = 1\nF(n) = F(n-1) + F(n-2) for n &gt; 2\n</code></pre>"},{"location":"Algorithm/HKU/HKUL1P4/#algorithm-1-naive-recursion","title":"Algorithm 1: Naive Recursion","text":"<p><pre><code>FIB1(n):\n  if n \u2264 2:\n    return 1\n  else:\n    return FIB1(n-1) + FIB1(n-2)\n</code></pre> - Recurrence:     - T(n) = T(n-1) + T(n-2) + c\u2082     - T(n) = exponential time (approximately \u0398(1.618^n)) - Inefficient: Recomputes many values</p> <p>Claim: T(n) &gt; 2^(n/2 - 1) - Recursive calls double roughly every two levels - Exponential growth due to repeated calls</p>"},{"location":"Algorithm/HKU/HKUL1P4/#algorithm-2-iterative-loop","title":"Algorithm 2: Iterative Loop","text":"<p><pre><code>FIB2(n):\n  if n \u2264 2:\n    return 1\n  p = 1\n  q = 1\n  for i = 3 to n:\n    r = p + q\n    p = q\n    q = r\n  return r\n</code></pre> - Time Complexity: \u0398(n) - Efficient: No redundant computations</p>"},{"location":"Algorithm/HKU/HKUL1P4/#q-can-we-do-even-better","title":"Q: Can We Do Even Better?","text":"<ul> <li>Yes! Matrix exponentiation or using Binet\u2019s formula (closed-form) can bring time complexity to O(log n).</li> <li>Example: Fast doubling or matrix power via divide-and-conquer.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P5/","title":"Fibonacci Numbers &amp; Matrix Exponentiation Summary","text":""},{"location":"Algorithm/HKU/HKUL1P5/#problem-compute-the-n-th-fibonacci-number-efficiently","title":"Problem: Compute the n-th Fibonacci number efficiently","text":"<p>We\u2019ve seen two common approaches:</p> <ol> <li> <p>Recursive (FIB1)</p> <ul> <li>Direct implementation of the recurrence.</li> <li>Time Complexity: Exponential, \\( T(n) = \\Theta(1.618^n) \\)</li> <li>Inefficient due to repeated computation.</li> </ul> </li> <li> <p>Iterative (FIB2)</p> <ul> <li>Uses a loop to iteratively build up to \\( F_n \\).</li> <li>Time Complexity: \\( \\Theta(n) \\)</li> <li>Much faster, but can we go even faster?</li> </ul> </li> </ol>"},{"location":"Algorithm/HKU/HKUL1P5/#matrix-exponentiation","title":"Matrix Exponentiation","text":"<p>Fibonacci numbers can be computed using matrix exponentiation:</p> <p>Let: <pre><code>    | 0 1 |\nA = | 1 1 |\n</code></pre> Then, <pre><code>    | F(n)   F(n+1) |\nA\u207f =| F(n-1) F(n)   |\n</code></pre></p> <p>To compute Fibonacci numbers, compute \\( A^{n-1} \\), and return the value at position (2,2).</p>"},{"location":"Algorithm/HKU/HKUL1P5/#matrix-power-algorithms","title":"Matrix Power Algorithms","text":"<p>1st Attempt: Straightforward Recursion <pre><code>Power1(A, n):\n  if (n == 1): return A\n  else: return Multiply(A, Power1(A, n-1))\n</code></pre> - Time: \\( O(n) \\)</p> <p>2nd Attempt: If n is a power of 2 <pre><code>Power2(A, n):\n  if (n == 1): return A\n  else:\n    B = Power2(A, n/2)\n    return Multiply(B, B)\n</code></pre> - Time: \\( O(\\log n) \\)</p> <p>3rd Attempt: General n (Odd or Even) <pre><code>Power3(A, n):\n  if (n == 1): return A\n  if (n is even):\n    B = Power3(A, n/2)\n    return Multiply(B, B)\n  else:\n    B = Power3(A, (n-1)/2)\n    return Multiply(A, Multiply(B, B))\n</code></pre> - Time: \\( O(\\log n) \\)</p>"},{"location":"Algorithm/HKU/HKUL1P5/#application-to-fibonacci","title":"Application to Fibonacci","text":"<ul> <li>Use the matrix: <pre><code>    | 0 1 |\n    | 1 1 |\n</code></pre></li> <li>Compute \\( A^{n-1} \\) using Power3 to get \\( F(n) \\) efficiently.</li> <li>Time Complexity: \\( O(\\log n) \\), very efficient for large n.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P6/","title":"Maximum Subarray Problem","text":"<p>Problem Statement: Given an array <code>A[1..n]</code> of integers, find a contiguous subarray (nonempty) whose sum is the largest among all possible contiguous subarrays.</p> <p>Example: A = [-4, 6, -3, -1, 6, 1, -2]</p> <p>The maximum subarray is A[2..6] = [6, -3, -1, 6, 1], and the sum is 9.</p> <p>1st Attempt: Brute-force Algorithm</p> <p>Idea: Try all possible subarrays and compute the sum of each.</p> <p>Algorithm (Max_subarray1): <pre><code>max = -inf;\nfor i = 1 to n:\n    for j = i to n:\n        sum = 0;\n        for k = i to j:\n            sum += A[k];\n        if sum &gt; max:\n            max = sum;\n            ans = (i, j, max);\nreturn ans;\n</code></pre> Time Complexity: O(n^3)</p> <p>Observation: The brute-force algorithm does a lot of redundant addition. For example: - For <code>i=1, j=2</code>: sum = A[1] + A[2] - For <code>i=1, j=3</code>: sum = A[1] + A[2] + A[3] (repeats the work done in <code>j=2</code>)</p> <p>2nd Attempt: Improved Brute-force</p> <p>Idea: Reuse the computed sums to avoid redundancy.</p> <p>Algorithm (Max_subarray2): <pre><code>max = -inf;\nfor i = 1 to n:\n    sum = 0;\n    for j = i to n:\n        sum += A[j];\n        if sum &gt; max:\n            max = sum;\n            ans = (i, j, max);\nreturn ans;\n</code></pre> Time Complexity: O(n^2)</p> <p>This version significantly improves performance by avoiding unnecessary recomputation of subarray sums.</p> <p>Next Step: Can we do even better? (Hint: use divide-and-conquer or dynamic programming)</p> <p>Maximum Subarray Problem (Divide-and-Conquer Approach)</p> <p>Goal: Given an array A[1..n] of integers, find a nonempty, contiguous subarray of A whose values have the largest sum.</p> <p>3rd Attempt: Divide-and-Conquer Approach</p> <p>Key Idea: - Divide the array into two halves around the midpoint. - Recursively solve the maximum subarray problem on the left half and the right half. - Additionally, find the maximum subarray that crosses the midpoint.</p>"},{"location":"Algorithm/HKU/HKUL1P6/#why","title":"Why?","text":"<p>Even if the best subarray doesn't lie entirely in one half, it may span both.</p> <p>Example: Array: <code>[3, -1, 3, -5, 4, 5, -8, 2, 0, 4]</code> - Left recursion returns max sum 5 for <code>[3, -1, 3]</code> - Right recursion returns max sum 6 for <code>[2, 0, 4]</code> - But crossing subarray <code>[4, 5]</code> yields sum 9 \u2014 the true maximum.</p>"},{"location":"Algorithm/HKU/HKUL1P6/#finding-maximum-subarray-across-the-middle","title":"Finding Maximum Subarray Across the Middle:","text":"<ul> <li>Find max sum from middle to left. <pre><code>max = -\u221e; sum = 0;\nfor i from mid downto 1:\n    sum += A[i]\n    if sum &gt; max:\n        max = sum; left_index = i\n</code></pre></li> <li>Find max sum from middle+1 to right. <pre><code>max = -\u221e; sum = 0;\nfor j from mid+1 to n:\n    sum += A[j]\n    if sum &gt; max:\n        max = sum; right_index = j\n</code></pre></li> <li>Combine both results into a crossing subarray.</li> <li>This takes O(n) time.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P6/#full-recursive-algorithm","title":"Full Recursive Algorithm:","text":"<pre><code>Max_subarray3(A, p, q):\n  if p == q:\n    return (p, q, A[p])\n\n  mid = (p + q) // 2\n  (i1, j1, max1) = Max_subarray3(A, p, mid)\n  (i2, j2, max2) = Max_subarray3(A, mid + 1, q)\n  (i3, j3, max3) = Max_subarray_middle(A, p, q)\n\n  if max1 &gt;= max2 and max1 &gt;= max3:\n    return (i1, j1, max1)\n  elif max2 &gt;= max3:\n    return (i2, j2, max2)\n  else:\n    return (i3, j3, max3)\n</code></pre> <p>Time Complexity: - T(n) = 2T(n/2) + cn  =&gt; T(n) = O(n log n)</p> <p>Can we do even better? (Hint: Yes \u2014 Kadane\u2019s Algorithm)</p>"},{"location":"Algorithm/HKU/HKUL1P7/","title":"Exercises Summary","text":"<p>1) Recursive Average of Array - Idea: Use a recursive function to compute the sum of the array and divide by the number of elements. - Algorithm:   <pre><code>avg(A[1..n]) {\n  if (n == 1) return A[1];\n  return (avg(A[1..n-1]) * (n-1) + A[n]) / n;\n}\n</code></pre> - Time Complexity: O(n), as each recursive call processes one element.</p> <p>2) Recursive Array Reversal - Idea: Swap the first and last elements and recurse on the subarray. - Algorithm:   <pre><code>reverse(A, start, end) {\n  if (start &gt;= end) return;\n  swap(A[start], A[end]);\n  reverse(A, start + 1, end - 1);\n}\n</code></pre> - Time Complexity: O(n), with only constant extra space used for recursion.</p> <p>3) Generating All n-bit Strings - Idea: Fix the last bit and recursively generate the first (n-1) bits. - Algorithm:   <pre><code>generate_bits(A, n) {\n  if (n == 0) {\n    print A;\n    return;\n  }\n  A[n] = 0;\n  generate_bits(A, n-1);\n  A[n] = 1;\n  generate_bits(A, n-1);\n}\n</code></pre> - Time Complexity: O(2^n), since there are 2^n combinations.</p> <p>4) Generating All Subsets of a Set - Idea: Use recursion to include or exclude each element. - Algorithm:   <pre><code>generate_subsets(set, i, current) {\n  if (i == set.length) {\n    print current;\n    return;\n  }\n  generate_subsets(set, i+1, current); // exclude\n  current.add(set[i]);\n  generate_subsets(set, i+1, current); // include\n  current.remove(set[i]);\n}\n</code></pre> - Time Complexity: O(2^n)</p> <p>5) Generating Subsets of Size &lt;= x - Idea: Modify the subset generation to track the current size. - Algorithm:   <pre><code>generate_limited_subsets(set, i, current, x) {\n  if (i == set.length) {\n    if (current.size() &lt;= x) print current;\n    return;\n  }\n  generate_limited_subsets(set, i+1, current, x); // exclude\n  if (current.size() &lt; x) {\n    current.add(set[i]);\n    generate_limited_subsets(set, i+1, current, x); // include\n    current.remove(set[i]);\n  }\n}\n</code></pre> - Time Complexity: O(2^n) worst-case, but may reduce depending on x.</p>"},{"location":"Algorithm/HKU/HKUL1P8/","title":"HKUL1P8","text":"<p>Summary &amp; Exam Guide: Recursion and Divide-and-Conquer</p>"},{"location":"Algorithm/HKU/HKUL1P8/#y-core-concepts-covered","title":"\u00f0\u0178\u201c\u2013 Core Concepts Covered","text":""},{"location":"Algorithm/HKU/HKUL1P8/#a-1-divide-and-conquer","title":"\u00e2\u0153\u2026 1. Divide and Conquer","text":"<ul> <li>Problem is split into subproblems, solved recursively, and solutions combined.</li> <li>Common recurrence: <code>T(n) = 2T(n/2) + cn</code></li> <li>Time complexity often solved via Master Theorem:<ul> <li>If <code>f(n) = \u00ce\u02dc(n^p)</code>, then:<ul> <li>If <code>a &gt; b^p</code> \u00e2\u017e\u201d <code>T(n) = \u00ce\u02dc(n^log_b a)</code></li> <li>If <code>a = b^p</code> \u00e2\u017e\u201d <code>T(n) = \u00ce\u02dc(n^p log n)</code></li> <li>If <code>a &lt; b^p</code> \u00e2\u017e\u201d <code>T(n) = \u00ce\u02dc(n^p)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#a-2-recursion","title":"\u00e2\u0153\u2026 2. Recursion","text":"<ul> <li>Recursive algorithms must define:<ul> <li>Base case</li> <li>Recursive step</li> </ul> </li> <li>Should always aim to reduce the problem size.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#a-3-recurrence-and-complexity","title":"\u00e2\u0153\u2026 3. Recurrence and Complexity","text":"<ul> <li>Learn to express recursive time complexity and simplify using:<ul> <li>Recursion Tree</li> <li>Master Theorem</li> </ul> </li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#y-classic-recursive-problems","title":"\u00f0\u0178\u201d\u00a7 Classic Recursive Problems","text":""},{"location":"Algorithm/HKU/HKUL1P8/#a-largest-number-in-array","title":"\u00e2\u20ac\u00a2 Largest Number in Array","text":"<ul> <li>Divide array into halves.</li> <li>Base: single element</li> <li>Combine: return max of two halves</li> <li>Time Complexity: O(n)</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#a-fibonacci-numbers","title":"\u00e2\u20ac\u00a2 Fibonacci Numbers","text":"<ul> <li>Naive recursion: exponential time <code>T(n) = T(n-1) + T(n-2)</code></li> <li>Iterative: O(n)</li> <li>Matrix Exponentiation: O(log n)</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#a-maximum-subarray-problem","title":"\u00e2\u20ac\u00a2 Maximum Subarray Problem","text":"<ul> <li>Brute-force: O(n^3)</li> <li>Improved brute-force: O(n^2)</li> <li>Divide-and-conquer: O(n log n)</li> <li>(Optional) Kadane\u00e2\u20ac\u2122s algorithm: O(n)</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#a-matrix-exponentiation","title":"\u00e2\u20ac\u00a2 Matrix Exponentiation","text":"<ul> <li>Naive: O(n)</li> <li>Recursive squaring: O(log n)</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#a-key-implementation-exercises","title":"\u00e2\u0153\u00a8 Key Implementation Exercises","text":"<ol> <li>Average of Array: Use recursion to divide and compute average.</li> <li>Reverse Array: Swap elements recursively with constant space.</li> <li>Generate Binary Strings: Fix last bit recursively and backtrack.</li> <li>Generate Subsets: Include/exclude current element recursively.</li> </ol>"},{"location":"Algorithm/HKU/HKUL1P8/#ys-exam-tips","title":"\u00f0\u0178\u201c\u0161 Exam Tips","text":"<ul> <li>Know how to write recursive functions with correct base and recursive cases.</li> <li>Be able to analyze time complexity using recurrence relations.</li> <li>Understand where recursion is inefficient and should be replaced with iteration.</li> <li>Trace recursive calls and predict outputs.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#y1-practice-questions-you-might-see","title":"\u00f0\u0178\u201d\u00b9 Practice Questions You Might See","text":"<ul> <li>Write a recursive algorithm to compute the average of numbers.</li> <li>Implement and analyze recursive Fibonacci.</li> <li>Use divide-and-conquer to solve max subarray problem.</li> <li>Derive time complexity from a given recursive function.</li> <li>Generate all subsets of a set recursively.</li> </ul>"},{"location":"Algorithm/HKU/HKUL1P8/#y-asymptotic-notation-key","title":"\u00f0\u0178\u201d\u00a4 Asymptotic Notation Key","text":"Symbol Name Meaning O Big-O Upper bound: f(n) grows at most as fast as g(n), up to constant factors \u00ce\u00a9 Big-Omega Lower bound: f(n) grows at least as fast as g(n), up to constant factors \u00ce\u02dc Big-Theta Tight bound: f(n) grows at the same rate as g(n), up to constant factors o Little-o Strictly slower: f(n) grows slower than g(n); f(n)/g(n) \u00e2\u2020\u2019 0 as n \u00e2\u2020\u2019 \u00e2\u02c6\u017e \u00cf\u2030 Little-omega Strictly faster: f(n) grows faster than g(n); f(n)/g(n) \u00e2\u2020\u2019 \u00e2\u02c6\u017e as n \u00e2\u2020\u2019 \u00e2\u02c6\u017e"},{"location":"Algorithm/HKU/HKUL1P8/#y-intuition-cheat-sheet","title":"\u00f0\u0178\u2019\u00a1 Intuition Cheat Sheet","text":"<ul> <li><code>f(n) = O(g(n))</code> \u00e2\u2020\u2019 f \u00e2\u2030\u00a4 g</li> <li><code>f(n) = \u00ce\u00a9(g(n))</code> \u00e2\u2020\u2019 f \u00e2\u2030\u00a5 g</li> <li><code>f(n) = \u00ce\u02dc(g(n))</code> \u00e2\u2020\u2019 f \u00e2\u2030\u02c6 g</li> <li><code>f(n) = o(g(n))</code> \u00e2\u2020\u2019 f \u00e2\u2030\u00aa g</li> <li><code>f(n) = \u00cf\u2030(g(n))</code> \u00e2\u2020\u2019 f \u00e2\u2030\u00ab g</li> </ul> <p>Would you like me to walk through that table now and fill in the T/F for each row based on these?</p>"},{"location":"Algorithm/HKU/HKUPSET1/","title":"HKUPSET1","text":"<ul> <li>\\( f(n) = O(g(n)) \\) \u2013 \u201cBig-O\u201d: f grows no faster than g (upper bound).</li> <li>\\( f(n) = \\Omega(g(n)) \\) \u2013 \u201cBig-Omega\u201d: f grows at least as fast as g (lower bound).</li> <li>\\( f(n) = \\Theta(g(n)) \\) \u2013 \u201cBig-Theta\u201d: f and g grow at the same rate.</li> <li>\\( f(n) = o(g(n)) \\) \u2013 \u201clittle-o\u201d: f grows strictly slower than g.</li> <li>\\( f(n) = \\omega(g(n)) \\) \u2013 \u201clittle-omega\u201d: f grows strictly faster than g.</li> </ul>"},{"location":"Algorithm/HKU/HKUPSET1/#lets-fill-out-the-table-for-each-pair","title":"Let's fill out the table for each pair:","text":"f(n) g(n) O \u2126 \u0398 o \u03c9 Explanation \\( n^2 \\) \\( n^3 \\) T F F T F \\( n^2 &lt; n^3 \\), strictly slower growth \\( 2^n \\) \\( \\log \\sqrt{n} \\) F T F F T Exponential &gt;&gt; any log variant \\( \\sqrt{\\log n} \\) \\( 3n \\) T F F T F Log grows much slower than linear \\( \\log^2 n \\) \\( \\log_{10}n \\) F T F F T \\( \\log^2 n = (\\log n)^2 \\) &gt;&gt; \\( \\log n \\) \\( n \\cos n \\) \\( \\sqrt{3} \\) F T F F T Oscillates but grows unbounded vs constant \\( \\sqrt{n} \\) \\( n \\) T F F T F Root is slower than linear"},{"location":"Algorithm/HKU/HKUPSET1/#final-completed-table","title":"Final Completed Table:","text":"f(n) g(n) O \u2126 \u0398 o \u03c9 \\( n^2 \\) \\( n^3 \\) T F F T F \\( 2^n \\) \\( \\log \\sqrt{n} \\) F T F F T \\( \\sqrt{\\log n} \\) \\( 3n \\) T F F T F \\( \\log^2 n \\) \\( \\log_{10}n \\) F T F F T \\( n \\cos n \\) \\( \\sqrt{3} \\) F T F F T \\( \\sqrt{n} \\) \\( n \\) T F F T F"},{"location":"Algorithm/HKU/HKU_Math/","title":"HKU Math","text":"<p>Mathematical Induction Proofs and Fibonacci Algorithms</p>"},{"location":"Algorithm/HKU/HKU_Math/#1-sum-of-first-n-natural-numbers","title":"1. Sum of First n Natural Numbers","text":"<p>We want to prove: [ f(n) = 1 + 2 + 3 + \\dots + n = \\frac{n(n + 1)}{2} ]</p>"},{"location":"Algorithm/HKU/HKU_Math/#case-1-base-case-n-1","title":"Case 1: Base Case (n = 1)","text":"\\[ f(1) = 1 = \\frac{1(1 + 1)}{2} = \\frac{2}{2} = 1 \\quad \\text{True} \\]"},{"location":"Algorithm/HKU/HKU_Math/#case-2-inductive-step","title":"Case 2: Inductive Step","text":"<p>Assume the formula works for some \\( k \\): [ f(k) = \\frac{k(k + 1)}{2} ]</p> <p>We want to prove it works for \\( k + 1 \\): [ f(k + 1) = f(k) + (k + 1) ] [ = \\frac{k(k + 1)}{2} + (k + 1) ] [ = \\frac{k(k + 1) + 2(k + 1)}{2} ] [ = \\frac{(k + 1)(k + 2)}{2} \\quad \\text{True} ]</p> <p>Conclusion: By induction, the formula holds for all \\( n \\in \\mathbb{N} \\).</p>"},{"location":"Algorithm/HKU/HKU_Math/#2-sum-of-squares","title":"2. Sum of Squares","text":"<p>We want to prove: [ \\sum_{i=1}^n i^2 = \\frac{n(n + 1)(2n + 1)}{6} ]</p>"},{"location":"Algorithm/HKU/HKU_Math/#case-1-base-case-n-1_1","title":"Case 1: Base Case (n = 1)","text":"\\[ \\frac{1 \\cdot 2 \\cdot 3}{6} = 1 \\quad \\text{True} \\]"},{"location":"Algorithm/HKU/HKU_Math/#case-2-inductive-step_1","title":"Case 2: Inductive Step","text":"<p>Assume it works for some \\( k \\): [ \\sum_{i=1}^k i^2 = \\frac{k(k + 1)(2k + 1)}{6} ]</p> <p>Show it holds for \\( k + 1 \\): [ \\sum_{i=1}^{k+1} i^2 = \\sum_{i=1}^k i^2 + (k + 1)^2 ] [ = \\frac{k(k + 1)(2k + 1)}{6} + (k + 1)^2 ]</p> <p>Combine: [ = \\frac{k(k + 1)(2k + 1) + 6(k + 1)^2}{6} ] [ = \\frac{(k + 1)(k(2k + 1) + 6(k + 1))}{6} ] [ = \\frac{(k + 1)(k + 2)(2k + 3)}{6} \\quad \\text{True} ]</p> <p>Conclusion: Formula is valid by induction.</p>"},{"location":"Algorithm/HKU/HKU_Math/#3-fibonacci-implementations","title":"3. Fibonacci Implementations","text":""},{"location":"Algorithm/HKU/HKU_Math/#recursive-version","title":"Recursive Version","text":"<p><pre><code>FIB1(n):\n  if n \u2264 2:\n    return 1\n  else:\n    return FIB1(n - 1) + FIB1(n - 2)\n</code></pre> - Time complexity: \\( O(2^n) \\) \u2014 very inefficient for large n.</p>"},{"location":"Algorithm/HKU/HKU_Math/#dynamic-programming-version","title":"Dynamic Programming Version","text":"<p><pre><code>FIB_ARRAY[n] = [0];\nvector&lt;int&gt; fib_array(n);\nfib_array.resize(n);\n\nFIBDP(n):\n  if n \u2264 2:\n    return 1\n  else if FIB_ARRAY[n] == 0:\n    FIB_ARRAY[n] = FIBDP(n - 1) + FIBDP(n - 2)\n  return FIB_ARRAY[n];\n</code></pre> - Time complexity: \\( O(n) \\) - Uses memoization to avoid recomputation.</p>"},{"location":"Algorithm/HKU/HKU_Math/#summary","title":"Summary","text":"<ul> <li>Induction proofs work by validating the base case and extending to \\( k + 1 \\) from \\( k \\).</li> <li>The sum of natural numbers and sum of squares are classic examples.</li> <li>Fibonacci recursion is elegant but inefficient; dynamic programming makes it scalable.</li> </ul>"},{"location":"Architecture/CA250709/","title":"Assembly Debugging","text":"<p>\uc5b4\uc148\ube14\ub9ac\uc5b4  \uc5b4\uc148\ube14\ub9ac \uc5b8\uc5b4 \ub514\ubc84\uae45 \ubc29\ubc95 </p> <p>\uba3c\uc800 \ud559\uc2b5\ubaa9\uc801\uc73c\ub85c\ub294 64\ube44\ud2b8\ubcf4\ub2e4\ub294 32\ube44\ud2b8 \uc6b4\uc601\uccb4\uc81c\uc5d0\uc11c \ud559\uc2b5 \uad8c\uc7a5  \uc2e4\ubb34\ub294 \ub2f9\uc5f0\ud788 64\ube44\ud2b8\uaca0\uc9c0\ub9cc </p> <p>F5 \ub514\ubc84\uae45 \uc2dc\uc791  F9 \ube0c\ub808\uc774\ud06c\ud3ec\uc778\ud2b8 \uc124\uc815  F10 \ud604\uc7ac \ud55c \uc904 \uc2e4\ud589, \ub2e4\uc74c \uc904\ub85c  F11 \ud568\uc218 \ub0b4\ubd80\ub85c \uc9c4\uc785 </p> <p>\ud638\ucd9c\uc2a4\ud0dd \ub2e8\ucd95\ud0a4  Ctrl Alt C </p> <p>\uc870\uc0ac\uc2dd \ub2e8\ucd95\ud0a4  Ctrl Alt W </p> <p>x86 \uc544\ud0a4\ud14d\uccd0 \uc9c0\uc815\ub41c \ubaa9\uc801\uc758 \ub808\uc9c0\uc2a4\ud130 (CPU \ub0b4\ubd80 \uac12) esp Stack Pointer Register  ebp  Base Pointer Register </p> <p>\uc5b4\uc148\ube14\ub9ac\uc5b4 \ub2e8\uc704 \ub514\ubc84\uadf8  F9 \ube0c\ub808\uc774\ud06c\ud3ec\uc778\ud2b8 \uc124\uc815  F5 \ub514\ubc84\uae45 \uc2e4\ud589  \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ub514\ubc84\uae45 \ubaa8\ub4dc \uc2e4\ud589  Ctrl Alt D \ub514\ubc84\uadf8 &gt; \ucc3d &gt; \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac  \ubcf4\uae30 \uc635\uc158  \ucf54\ub4dc \ubc14\uc774\ud2b8 \ud45c\uc2dc \uc8fc\uc18c \ud45c\uc2dc \uc18c\uc2a4\ucf54\ub4dc \ud45c\uc2dc \uae30\ud638\uc774\ub984 \ud45c\uc2dc \uc904 \ubc88\ud638 \ud45c\uc2dc </p> <p>\uc870\uc0ac\uc2dd \ucc3d  \ub2e8\ucd95\ud0a4  Ctrl Alt W  \ub514\ubc84\uadf8 &gt; \ucc3d &gt; \uc870\uc0ac\uc2dd  \ub0b4\ubd80\uc5d0 ebp esp ecx \ub4f1 \ub808\uc9c0\uc2a4\ud130 \uac80\uc0c9\ub3c4 \uac00\ub2a5  \uc6b0\ud074\ub9ad \ud6c4 16\uc9c4\uc218 \ud45c\uc2dc \ub204\ub974\uba74 16\uc9c4\ubc95\uc73c\ub85c \ud45c\uae30\ub428 </p> <p>\ud638\ucd9c \uc2a4\ud0dd \ucc3d  \ub2e8\ucd95\ud0a4  Ctrl Alt C  \ub514\ubc84\uadf8 &gt; \ucc3d &gt; \ud638\ucd9c \uc2a4\ud0dd  \uc6b0\ud074\ub9ad \ud6c4 \uc678\ubd80 \ucf54\ub4dc \ud45c\uc2dc \ub204\ub974\uba74 main \ud568\uc218 \ubc16\uc758 \ud568\uc218\ub3c4 \ub098\uc634 </p> <p>\uba54\ubaa8\ub9ac \ucc3d  \ub514\ubc84\uadf8 &gt; \ucc3d &gt; \uba54\ubaa8\ub9ac  \uc5f4: 4\uc5f4 \ucd94\ucc9c, 16\uc9c4\uc218 4\uac1c \uc989 \uba54\ubaa8\ub9ac 4\ubc14\uc774\ud2b8 32\ube44\ud2b8\uc529 \ud655\uc778 \uac00\ub2a5  \ub0b4\ubd80 \uac12 \ubcc0\uacbd \uac00\ub2a5, \uba54\ubaa8\ub9ac \ub0b4\ubd80 \uac12 \uc9c1\uc811 \uc811\uadfc \ud6c4 \ubcc0\uacbd \uac00\ub2a5 </p> <p>\ub808\uc9c0\uc2a4\ud130 \ucc3d </p> <p>\ub514\ubc84\uadf8 &gt; \ucc3d &gt; \ub808\uc9c0\uc2a4\ud130  32\ube44\ud2b8 \uae30\uc900 EAX EBX ECX EDX ESI EDI EIP ESP EBP EFL \ub2e4 \ud655\uc778 \uac00\ub2a5 </p> <p>\uc5b4\uc148\ube14\ub9ac\uc5b4 \uc5d0\uc11c \uae30\uacc4\uc5b4 \ubcc0\ud658 \uacfc\uc815\uc5d0\uc11c, push (Register Name) \ud615\uc2dd\uc758 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub294 1\ubc14\uc774\ud2b8\uc9dc\ub9ac \uae30\uacc4\uc5b4\ub85c \ubcc0\ud658\uc774 \ub418\ub294 \uac83\uc744 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. \uc608\uc2dc\ub85c\ub294  <pre><code>00871810 55                   push        ebp  \n</code></pre> \uc774\ub97c \ud1b5\ud558\uc5ec Intel Opcode \ub97c \uac80\uc0c9\ud574 \ubcf4\uc558\uace0, \ud2b9\uc815 \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ub808\uc9c0\uc2a4\ud130 \uac12 \uc2a4\ud0dd \uba54\ubaa8\ub9ac\uc5d0 push \ud558\ub294 \uacbd\uc6b0 \uacbd\uc6b0 1\ubc14\uc774\ud2b8\ub9cc\uc5d0 \ucc98\ub9ac\ud560 \uc218 \uc788\uac8c \ud574 \uc8fc\ub294 opcode\uc758 \uc874\uc7ac \ud655\uc778 </p> <p></p> <p>\uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \ubd84\uc11d </p> <p><pre><code>000719C0  push        ebp  \n000719C1  mov         ebp,esp  \n000719C3  sub         esp,0D8h \n</code></pre> \uc5ec\uae30\uc11c\ub294 14 X 16 + 8 = 232 \ub9cc\ud07c\uc758 \uacf5\uac04 \ud655\ubcf4 \uc0ac\uc2e4 \ubcc0\uc218\ub3c4 \uc5c6\ub294 \uac83, \uc2a4\ud0dd\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ud655\ubcf4\ud558\uace0  \ubcc0\uc218\ub294 \uadf8\ub0e5 \uc2a4\ud0dd \uba54\ubaa8\ub9ac \uacf5\uac04\uc73c\ub85c \uace0\ub824\ud568  \uc5ec\uae30\uc11c, CPU \ub808\uc9c0\uc2a4\ud130 \uad00\uc810\uacfc RAM \uba54\ubaa8\ub9ac \uad00\uc810\uc744 \ub2e4\ub974\uac8c \ud560 \ud544\uc694\uac00 \uc788\uc74c </p> <p>\uc2a4\ud0dd\uacfc CPU \uc0c1\ud669 </p> <p>\uc2a4\ud0dd \uc0c1\ud669\uacfc \ub808\uc9c0\uc2a4\ud130 \uc0c1\ud669\uc744 \ub3d9\uc2dc\uc5d0 \uace0\ub824\ud574\uc57c \ud568 </p> <p>push ebp // \uc2a4\ud0dd \uc5c5\ub370\uc774\ud2b8  \uc2a4\ud0dd\uc5d0 ebp\uc758 \uac12\uc744 \ubc00\uc5b4\ub123\uc74c  ebp \ub294 main \ud568\uc218\uc758 base pointer,  main \ud568\uc218\uc758 \uc2a4\ud0dd \ud504\ub808\uc784 \ucd5c\uc0c1\ub2e8 \uc2dc\uc791\uc810\uc774\ub77c\uace0 \ubcfc \uc218 \uc788\uc74c  \uc989 main base pointer\ub97c \uc2a4\ud0dd\uc5d0 \uc9d1\uc5b4\ub123\uae30 </p> <p>mov ebp, esp  \ub808\uc9c0\uc2a4\ud130 \uac12 ebp = esp\ub85c \uc124\uc815  sub esp, 0E4H \ub808\uc9c0\uc2a4\ud130 \uac12 esp -= 0E4h\ub85c \uc124\uc815  push ebx push esi push edi  \uc2a4\ud0dd\uc5d0 ebx esi edi \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \ubc00\uc5b4\ub123\ub294 \uc774\uc720\ub294 \ud574\ub2f9 \ud568\uc218\uc758  \ud638\ucd9c \ud504\ub808\uc784\uc774 \uc885\ub8cc\ub418\uace0 \uc0c1\uc704 \ud568\uc218\uc758 \ud638\ucd9c \uc2a4\ud0dd\uc73c\ub85c \ub3cc\uc544\uac08 \ub54c \ubc31\uc5c5 \ub54c\ubb38  \ud558\uc9c0\ub9cc \uc774\uac8c \uacfc\uc5f0 \ud544\uc694\ud55c\uac00\ub294 \uc758\ubb38 \uc544\ubb34\ud2bc \ud604\uc7ac \uc2a4\ub808\ub4dc \uc2a4\ud0dd\uc740 \uc774\ub7ec\uba74  [Higher Address  ] [prev stack frame] [main ebp address] [main ebx address] [main esi address] [main edi address] [216 Byte Area   ] [Lower   Address ] \uc744 \ucd5c\ud558\ub2e8\uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\uc744 \uac83. </p> <p>\uc989  <pre><code>000719C0 55                   push        ebp  \n000719C1 8B EC                mov         ebp,esp  \n000719C3 81 EC D8 00 00 00    sub         esp,0D8h  \n000719C9 53                   push        ebx  \n000719CA 56                   push        esi  \n000719CB 57                   push        edi\n</code></pre> \uae4c\uc9c0\ub294 \ud568\uc218 \uc2e4\ud589 \uc774\uc804 \ub808\uc9c0\uc2a4\ud130 \uac12 \ubc31\uc5c5 \uc5b4\uc148\ube14\ub9ac\uc5b4 \uc2e4\ud589\uc774\ub77c\uace0 \ubcfc \uc218 \uc788\uc74c  EBX ESI EDI \ub294 Callee saved Register\ub85c, \ud568\uc218\uac00 \uc774\ub4e4\uc744 \uc0ac\uc6a9\ud558\uba74  \ubc18\ub4dc\uc2dc \uc6d0\ub798 \uac12\uc744 \ubcf5\uc6d0\ud574\uc57c \ud558\ubbc0\ub85c \ubc31\uc5c5\uc774 \ud544\uc218\uc801\uc784 </p> <p><pre><code>0007181C 8D 7D D8             lea         edi,[ebp-28h]  \n0007181F B9 0A 00 00 00       mov         ecx,0Ah  \n00071824 B8 CC CC CC CC       mov         eax,0CCCCCCCCh  \n00071829 F3 AB                rep stos    dword ptr es:[edi]  \n</code></pre> \uba3c\uc800 edi Destination Index\uc5d0 \uc9c0\uc5ed\ubcc0\uc218 \uc2dc\uc791 \uc8fc\uc18c\uc5d0 ebp - 28h  Base Pointer - 16 X 2 + 8 = Base Pointer - 40 \uac12 \uc800\uc7a5 </p> <p>mov ecx, 0Ah \uc774\uac70\ub294 ecx Counter \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 10\uc73c\ub85c \uc124\uc815, \ubc18\ubcf5 \ud69f\uc218\ub85c \uc0ac\uc6a9\ub420 \uc608\uc815  mov eax, 0CCCCCCCCh \uc774\uac70\ub294 eax Accumulator \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \ucd08\uae30\ud654\ud558\ub294 \uac83 </p> <p>rep stos dword ptr es:[edi] </p> <p><code>stos</code> \ub294 StoreString \uc57d\uc790, stos\uc758 \uc2e4\uc81c \ub3d9\uc791\uc740 </p> <ol> <li>eax \uac12\uc744 [edi] \uc704\uce58\uc5d0 \uc800\uc7a5 </li> <li>edi \uac12\uc744 \uc99d\uac00\uc2dc\ud0b4, df \ud50c\ub798\uadf8\uc5d0 \ub530\ub77c +4 \ub610\ub294 -4 </li> <li>ecx \ub97c 1 \uac10\uc18c </li> </ol> <p>\ubc29\ud5a5\uc131  \uc77c\ub9cc\uc801\uc73c\ub85c DF (Direction Flag) = 0 \uc774\ubbc0\ub974 edi\ub294 \uc99d\uac00\ud55c\ub2e4  edi\ub294 </p> <p>\\(ebp - 40 \\rightarrow ebp - 36 \\rightarrow ebp - 32 \\rightarrow \\dots \\rightarrow ebp-4\\) \ubc29\ud5a5\uc73c\ub85c \uc774\ub3d9 </p> <ol> <li>edi Destination Index \uc704\uce58\uc5d0 eax \uac12 (0xCCCCCCCC) 4\ubc14\uc774\ud2b8 DWORD \ub97c \uc800\uc7a5 \ud6c4 \ub2e4\uc74c DWORD \uc704\uce58\ub85c \uc774\ub3d9  </li> <li>edi += 4 \ubc14\uc774\ud2b8, \ub2e4\uc74c DWORD \uc704\uce58\ub85c \uc774\ub3d9 </li> <li>ecx-- 0Ah 10\uc73c\ub85c \uc2dc\uc791\ud588\ub358 Counter Register \uac10\uc18c </li> <li>ecx != 0 \uc77c \uacbd\uc6b0 (1)\ubc88\uc73c\ub85c \ub3cc\uc544\uac00\uc11c \ubc18\ubcf5 </li> </ol> <p>\uacb0\ub860\uc801\uc73c\ub85c ebp-40\ubd80\ud130 ebp-4\uae4c\uc9c0 \ubaa8\ub4e0 \uba54\ubaa8\ub9ac\uac00 0xCCCCCCCC \uac12\uc73c\ub85c \ucd08\uae30\ud654  \uc5ec\uae30\uc11c es\ub294 \uacfc\uac70 Segment Register, 16\ube44\ud2b8 \ucef4\ud4e8\ud130 \uc2dc\ub300\uc5d0 \ud3ec\uc778\ud130 20\ube44\ud2b8 \uc4f0\uace0 \uc2f6\uc5b4\uc11c \ub9cc\ub4e0 \uacf5\uac04 \ubb34\uc2dc\uac00\ub2a5 </p> <pre><code>0007182B A1 00 A0 07 00       mov         eax,dword ptr [__security_cookie (07A000h)]  \n00071830 33 C5                xor         eax,ebp  \n00071832 89 45 FC             mov         dword ptr [ebp-4],eax  \n00071835 B9 28 C0 07 00       mov         ecx,offset _12BD23D1_tmain@cpp (07C028h)  \n0007183A E8 F5 FA FF FF       call        @__CheckForDebuggerJustMyCode@4 (071334h)  \n0007183F 90                   nop  \n</code></pre> <p>\uc870\uc0ac\uc2dd\uc5d0\uc11c </p> <p>ebp, x \uc774\ub7ec\uba74 16\uc9c4\ubc95  ebp, b \uc774\ub7ec\uba74 2\uc9c4\ubc95 \uc774\ub807\uac8c  ebp, d \uc774\ub7ec\uba74 10\uc9c4\ubc95  \uc544\ub2c8\uba74 \uadf8\ub0e5 ebp \ub3c4 10\uc9c4\ubc95  ebp, o 8\uc9c4\ubc95 </p> <p>a b c d \uc55e\uc5d0 \uc5ed\ucc38\uc870  &amp;a \uc774\ub7ec\uba74 \uc8fc\uc18c \ub098\uc634 </p>"},{"location":"Architecture/CA250711/","title":"Process Memory Layout","text":"<p>2025 07 11 </p> <p>Memory Layout of a Process (Main Thread) </p> <ul> <li>Stack size = 1MB = \\(2^{20}\\) bytes = <code>0x00010000</code> </li> <li>Stack base address (top of stack) = <code>0x23010000</code> </li> <li>Stack grows downward (toward lower address)</li> </ul> <pre><code>|--------------|  Low Address (0x23000000)\n| .text (CODE) |  Machine Code (Instructions)\n|--------------|  Code == TEXT VS DATA Divides Here \n| .rodata      |  Read-Only Data (e.g. const, literals)\n|--------------|  Data Accessibility Divides Here \n| .data        |  Initialized Global/Static Variables\n|--------------|  Compile VS Runtime Divides Here \n| .bss         |  Block Started by Symbol (BSS)\n|--------------|  Static DATA VS Dynamic Heap Divides Here  \n|  heap        |  Dynamic Allocation at Runtime (grows upward)\n|~~~~~~~~~~~~~~|  malloc, new, etc (grows upward)\n|              |  Unused Memory == Gap \n|~~~~~~~~~~~~~~|  Function call stack (grows downward)\n|  stack       |  esp = esp - size of stack frame  \n|--------------|  High Address (0x23010000)\n</code></pre> <p>Sample C Code  <pre><code>const char* msg = \"hello\";    // .rodata \nint global_arr[1000] = {0,};  // .data \nint uninit_arr[2000];         // .bss  \n</code></pre></p> <p>All inside data, but *msg is in <code>.rodata</code> </p> <ul> <li><code>global_arr</code> space is initialized at compile time</li> <li>So <code>exe</code> file gets larger in <code>4 X 1000 = 4000</code> bytes   </li> <li><code>uninit_var</code> is existance known, and space initialized at runtime.</li> <li>Before main function starts, <code>.bss</code> static data space will be assigned <code>4 X 2000 = 8000</code> bytes. </li> </ul> <p>Similarly, suppose global variable declaration </p> <pre><code>const int g_x = 1000; \n\nint main() {\n    const int y = 2000; \n    int *p_y = const_cast&lt;int*&gt;(y);   // OK  \n    *p_y = 3000; \n    int *p_x = const_cast&lt;int*&gt;(g_x); // Runtime ERROR \n    *p_x = 4000; \n}\n</code></pre> <p>In here, <code>y</code> value is saved in stack memory while <code>g_x</code> is in <code>.rodata</code>. </p> <ul> <li>Thus, casting to access <code>y</code> data is fine in memory perspective. </li> <li>Although not recommended in C++ programming language perspective. </li> <li>However, global static variable <code>g_x</code> is declared inside <code>.rodata</code>. </li> <li>Thus, const casting will violate write access runtime error </li> </ul> <p>This one originally worked  <code>char* msg = \"hello\";</code>  But since people did similar things like  <code>*msg = \"abc\"</code> which access <code>.rodata</code> thus  throwing Runtime ERROR. So, currently sequential char, aka  char array declaration by pointer is only allowed in  <code>const</code> keyword, like <code>const char *msg = \"hello\"</code>.  </p> <p>C++ <code>extern</code> usage, borrows global variable definition from outside  <pre><code>// a.cpp \nint g_x; \n// b.cpp\nint g_x; \n</code></pre> Linker ERROR, overlap. If <code>b.cpp</code> want to use global variable <code>g_x</code> created by <code>a.cpp</code> should be declared like  <pre><code>extern int g_x; \n</code></pre> Also, when <code>a.cpp</code> remove declaration of <code>g_x</code> while <code>b.cpp</code> remains <code>extern int g_x</code> it will make Linker ERROR, passing all  preprocess and compile level. </p> <p><code>static</code> global declaration make the scope of this  global variable aka data area variable into that <code>.cpp</code> file.  However, if another <code>.cpp</code> file access that global variable by  <code>extern</code> keyword it is impossible to keep encapsulation.  Thus, modern C++ generally don not prefer this usage. </p> <p>Register Declaration concept exists, especially in release mode, to sometimes put some of the data or memory in CPU register to execute and optimize code. </p> <p>Usage of <code>const</code> inside function </p> <p><pre><code>const int a = 100; \nprintf(\"%d\", a); \n// int *p = &amp;a; // ERROR  \nint *p = const_cast&lt;int*&gt; (&amp;a);   \n*p = 999; \nprintf(\"%d\\n\", a);\nprintf(\"%d\", *p); \n</code></pre> Variable a is Stack Memory Address, something like  <code>dword ptr [ebp-0Ch]</code> in assembly language.  Stack Memory allows both read and write.  However, <code>printf(\"%d\", *p);</code> output is <code>100</code>, not <code>999</code> Why? </p> <pre><code>006B49AF 90                   nop  \n     8:     const int a = 100;\n006B49B0 C7 45 F4 64 00 00 00 mov         dword ptr [ebp-0Ch],64h  \n     9:     printf(\"%d\", a);\n006B49B7 6A 64                push        64h  \n006B49B9 68 D0 7B 6B 00       push        6B7BD0h  \n006B49BE E8 EE C9 FF FF       call        006B13B1  \n006B49C3 83 C4 08             add         esp,8  \n    10:     int* p = const_cast&lt;int*&gt;(&amp;a);\n006B49C6 8D 45 F4             lea         eax,[ebp-0Ch]  \n006B49C9 89 45 E8             mov         dword ptr [ebp-18h],eax  \n    11:     *p = 999;\n006B49CC 8B 45 E8             mov         eax,dword ptr [ebp-18h]  \n006B49CF C7 00 E7 03 00 00    mov         dword ptr [eax],3E7h  \n    12:     printf(\"%d\", *p);\n006B49D5 8B 45 E8             mov         eax,dword ptr [ebp-18h]  \n006B49D8 8B 08                mov         ecx,dword ptr [eax]  \n006B49DA 51                   push        ecx  \n006B49DB 68 D0 7B 6B 00       push        6B7BD0h  \n006B49E0 E8 CC C9 FF FF       call        006B13B1  \n006B49E5 83 C4 08             add         esp,8  \n</code></pre> <p>Complier supposed <code>int a</code> as literal constant, and did not read it from memory. </p> <p>Function <code>printf</code> call assembly analysis  <pre><code>006B49B7 6A 64                push        64h  \n006B49B9 68 D0 7B 6B 00       push        6B7BD0h  \n006B49BE E8 EE C9 FF FF       call        006B13B1  \n006B49C3 83 C4 08             add         esp,8  \n</code></pre></p> <ol> <li>push to stack constant number 64h == 100 </li> <li>push to stack constant pointer 6B7BD0h, address of char string \"%d\\n\" </li> <li>call function pointer 006B13B1, address of <code>printf</code> function </li> <li>reduce stack size by add stack pointer 8, ignoring 64h and 6B7BD0h </li> </ol> <p>Thus, it is possible to see internally, <code>const int a</code> was transformed as const number in compile level, so even after memory access changes <code>a</code> memory value, it is ignored and considered as const value by compiler. </p> <p>C/C++ Optimization Debug Mode VS Release Mode VS Turn off </p> <p>Properties - C/C++ - Optimization - </p> <p>Properties - C/C++ - Code Generation - Basic Runtime Check -  - Stack Frame (/RTCs) - Uninitialized Variables (/RTCu) - All (same as /RTC1, /RTCsu)(/RTC1) - Default </p>"},{"location":"Architecture/CA250711/#computer-architecture","title":"Computer Architecture","text":"<p>Command Assembly Language Sets, Register Sets  Intel CPU, AMD Ryzen CPU both have X86-64 Computer Architecture  While their Computer Organization inside is signinficantly different </p> <p>Two types of Computer Architecture aka Two Types of Command System </p> <ul> <li>CISC x86-64 </li> <li>RISC ARM MIPS RISC-V </li> </ul> <p>Command byte size is exactly same in RISC </p> <p>However, in CISC commands are complicated and have different sizes.  Thus, CISC should be interpreted from begin to end. </p> <p>However, in Visual Studio Assembly Debugging, it interprets  executed records of machine language from the breakpoint to the  closest order. It makes latter execution fine to interpret, but  the formal executions are not translated properly to the assembly language,  because they don't know beginning and end of each machine language byte. Translating wrong assembly languages and making records like <code>in al, dx</code>.  VS2022 read machine language reversely from breakpoint, making error. </p>"},{"location":"Architecture/CA250711/#volatile","title":"Volatile","text":"<p>Volatile means easily evaporated, \ud718\ubc1c\uc131  In C++, volatile keyword is used to prevent code optimization so that every executation related to variable is not skipped  Especially important in multithreading </p> <p>\ucef4\ud30c\uc77c\ub7ec\uac00 \uc5b4\ub5bb\uac8c \uc2e4\uc81c\ub85c \ucc98\ub9ac\ud558\ub294\uc9c0\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 \uc5b4\uc148\ube14\ub9ac \ub808\ubca8\uc5d0\uc11c  \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub294 \uac83\uc774 \ud544\uc694\ud568 </p> <p>\ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac \uad6c\uc870 (\uba54\uc778 \uc2a4\ub808\ub4dc \uae30\uc900)</p> <ul> <li>\uc2a4\ud0dd \ud06c\uae30 = 1MB = \\(2^{20}\\) \ubc14\uc774\ud2b8 = <code>0x00010000</code> </li> <li>\uc2a4\ud0dd \uc2dc\uc791\uc9c0\uc810\uc744 \uc784\uc758\ub85c <code>0x23010000</code> \ub85c \uac00\uc815 </li> <li>\uc2a4\ud0dd\uc740 \uc544\ub798 \ubc29\ud5a5\uc73c\ub85c \uc131\uc7a5 (\uc8fc\uc18c\uac00 \ub0ae\uc544\uc9c0\ub294 \ubc29\ud5a5)</li> </ul> <pre><code>|--------------|  \ub0ae\uc740 \uc8fc\uc18c (0x23000000)\n| .text (CODE) |  \uae30\uacc4\uc5b4 \ucf54\ub4dc (\uba85\ub839\uc5b4)\n|--------------|  \ucf54\ub4dc(\ud14d\uc2a4\ud2b8)\uc640 \ub370\uc774\ud130 \uad6c\uac04 \ubd84\uae30\uc810\n| .rodata      |  \uc77d\uae30 \uc804\uc6a9 \ub370\uc774\ud130 (\uc608: \uc0c1\uc218, \ub9ac\ud130\ub7f4)\n|--------------|  \ub370\uc774\ud130 \uc811\uadfc\uc131 \uad6c\uac04 \ubd84\uae30\uc810\n| .data        |  \ucd08\uae30\ud654\ub41c \uc804\uc5ed/\uc815\uc801 \ubcc0\uc218\n|--------------|  \ucef4\ud30c\uc77c \ud0c0\uc784\uacfc \ub7f0\ud0c0\uc784 \uad6c\uac04 \ubd84\uae30\uc810\n| .bss         |  \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed/\uc815\uc801 \ubcc0\uc218 (BSS)\n|--------------|  \uc815\uc801 \ub370\uc774\ud130\uc640 \ub3d9\uc801 \ud799 \uad6c\uac04 \ubd84\uae30\uc810\n|  heap        |  \ub7f0\ud0c0\uc784 \uc911 \ub3d9\uc801 \ud560\ub2f9 \uc601\uc5ed (\uc704\ub85c \uc131\uc7a5)\n|~~~~~~~~~~~~~~|  malloc, new \ub4f1 (\uc704\ub85c \uc131\uc7a5)\n|              |  \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04 (\uac2d)\n|~~~~~~~~~~~~~~|  \ud568\uc218 \ud638\ucd9c \uc2a4\ud0dd (\uc544\ub798\ub85c \uc131\uc7a5)\n|  stack       |  esp = esp - \uc2a4\ud0dd \ud504\ub808\uc784 \ud06c\uae30\n|--------------|  \ub192\uc740 \uc8fc\uc18c (0x23010000)\n</code></pre> <p>\ucd5c\uc801\ud654 \ucef4\ud30c\uc77c \uc124\uc815 \ubc29\ubc95 Release + Debugging</p> <p>\uc18d\uc131 -&gt; C/C++ -&gt; \ucd5c\uc801\ud654 (O2 \ucf1c\uae30) </p> <ul> <li>\uc0ac\uc6a9\uc790 \uc9c0\uc815 </li> <li>\uc0ac\uc6a9 \uc548 \ud568 (/Od) &lt;- \ub514\ubc84\uadf8 \uae30\ubcf8 \uc124\uc815 </li> <li>\ucd5c\ub300 \ucd5c\uc801\ud654 (\uc18d\ub3c4 \uc6b0\uc120)(/O2) &lt;- \ucd5c\uc801\ud654 \ub514\ubc84\uadf8 \uc124\uc815</li> <li>\ucd5c\ub300 \ucd5c\uc801\ud654 (\ud06c\uae30 \uc6b0\uc120)(/O1)</li> <li>\ucd5c\uc801\ud654 (\uc18d\ub3c4 \uc6b0\uc120)(/Ox) &lt;- \ucd5c\uc801\ud654 \ub514\ubc84\uadf8 \uc124\uc815</li> </ul> <p>\uc18d\uc131 -&gt; C/C++ -&gt; \ucf54\ub4dc \uc0dd\uc131 -&gt; \uae30\ubcf8 \ub7f0\ud0c0\uc784 \uac80\uc0ac </p> <ul> <li>\uc2a4\ud0dd \ud504\ub808\uc784 (/RTCs)</li> <li>\ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218 (/RTCu)</li> <li>\ubaa8\ub450 (/RTC1, /RTCsu\uc640 \ub3d9\uc77c)(/RTC1) &lt;- \ub514\ubc84\uadf8 \uae30\ubcf8 \uc124\uc815 </li> <li>\uae30\ubcf8\uac12 &lt;- \ucd5c\uc801\ud654 \ub514\ubc84\uadf8 \uc124\uc815, RTC \uac80\uc0ac \uc5c6\uc74c </li> </ul> <p>\uc18d\uc131 -&gt; C/C++ -&gt; \uc77c\ubc18 -&gt; \ub514\ubc84\uadf8 \uc815\ubcf4 \ud615\uc2dd  </p> <ul> <li>\ud3b8\uc9d1\ud558\uba70 \uacc4\uc18d\ud558\uae30 \ud504\ub85c\uadf8\ub7a8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 (/Zl) &lt;- \uae30\ubcf8 \uc124\uc815 </li> <li>\ud504\ub85c\uadf8\ub7a8 \ub370\uc774\ud130\ubca0\uc774\uc2a4 (/Zi) </li> <li>C7 \ud638\ud658 (/Z7)</li> <li>\uc5c6\uc74c </li> </ul> <p>\uc18d\uc131 -&gt; \ub9c1\ucee4 -&gt; \ub514\ubc84\uae45 -&gt; \ub514\ubc84\uadf8 \uc815\ubcf4 \uc0dd\uc131 -&gt; \uc608(/DEBUG) </p> <p>\ub514\ubc84\uadf8 </p> <p>\ucef4\ud4e8\ud130 \uc544\ud0a4\ud14d\uccd0 \ub294 \uba85\ub839\uc5b4 \uc138\ud2b8, \ub808\uc9c0\uc2a4\ud130 \uc138\ud2b8\ub97c \uc758\ubbf8  Intel CPU AMD Ryzen CPU \ubaa8\ub450 \ub0b4\ubd80 \uad6c\uc870  Computer Organization \uc740 \ub2e4\ub974\uc9c0\ub9cc, \ub458 \ub2e4 \uac19\uc740  Win86-64 Architecture \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4.  </p> <p>Computer Architecture means assembly language instruction  sets and register sets.</p>"},{"location":"Architecture/CA250714/","title":"Operator Priority","text":"<p>LLP64 Long Long Pointer  long long datatype 8 bytes while  long datatype is 4 bytes  X86-64 </p> <p>LP64 Long Pointer  long datatype is 8 bytes  also long long datatype is 8 bytes too  UNIX Linux MacOS </p> <p>Then How about X86-32 ?  Int Long Pointer are 4 Bytes, 32 Bits  Thus, X86-32 is  ILP32 Int Long Pointer 8 bytes </p>"},{"location":"Architecture/CA250714/#volatile","title":"<code>volatile</code> \ub294 \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c \uc548 \ud558\uaca0\ub2e4","text":"<p>multithreading logic includes other function logics  implied but compiler do not understand this. </p> <p>Optimal compile mess up the code </p> <p>Server debugging </p> <p>different compared to client </p> <p>First step for server programming is valid but  if working game server get down we should debug it  based on the memory dump </p> <p>Suppose function Test() became inline function by compiler  and its internal variables got processed as either  constant variable or completely ignored </p> <p>\uc870\uc0ac\uc2dd \ubcc0\uc218 \ud0d0\uc0c9\uc73c\ub85c\ub3c4 \uc548 \ub098\uc624\uace0  Assembly debugging, see main function Compiler Test function  got inline and removed </p> <p>In real stateful server in live service, it notices  what function caused error, but it does not show  our stack variables a x y inside Test function  </p> <p>Debugging is tremndously notorious you shoud analyze  disassembly debugging from the source code watching  \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c </p> <p>So, \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c Compiler Optimization do or not ? </p> <p>In best cases optimized compile increase performance about 30 ~ 40 % better = So for commercial use it is good to use optimal compile.  Game server live continues, add functions fix bugs but server got down consistently </p>"},{"location":"Architecture/CA250714/#most-recommended-study-environment-setup","title":"Most recommended study environment setup","text":"<ul> <li>Turn off Optimal Compile </li> <li>Use Release Mode, just no optimal compile </li> <li>Goal is to debug during live service </li> <li>more important than server performance </li> <li>Also program codes more optimally </li> </ul> <p>If no optimal compile no need to use <code>volatile</code> <code>volatile</code> is required if optimal compile applied </p> <p>C++ functions, do not turn this function as <code>inline</code>.  <pre><code>[[noinline]] // For some \n__declspec(noinline) // MSVC \n__attribute__((noinline)) // GCC / Clang \nvoid func() {\n    // ... \n}\n</code></pre></p> <p>Currently C++ STL and all functions they have very complicated wrapping layers  So without optimal compile speed is awful.  C++ STL is based on optimal compile so turning it off is not likely choice </p> <p>.cpp file level turn on or off optimal compile  inline function optimal code </p>"},{"location":"Architecture/CA250714/#release-build-is-recommended","title":"Release Build is recommended","text":"<p>C / C++ Runtime Library </p> <p>When based on Debug and switch to Release build  Countless Memory related bugs come out, and they are hard to find.  Wrong code but debug mode let them work without problem. </p> <p>Release Mode turned off &gt; Debug Mode difference ?  Release Build is basic task and optimize it there </p> <ul> <li>Default </li> </ul>"},{"location":"Architecture/CA250714/#security-of-game-server","title":"Security of Game Server","text":"<p>Generally it is impossible for external computer to get  access to admin or root for our Stateful server, since  only service port is opened and rest is blocked. </p> <p>This can be another method to enforce not use this as inline function  </p>"},{"location":"Architecture/CA250714/#c-operator-precedence","title":"C++ \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\ub9ac (Operator Precedence)","text":"<p>\ub0ae\uc740 \uc22b\uc790\uac00 \ub354 \ub192\uc740 \uc6b0\uc120\uc21c\uc704\ub97c \uac00\uc9d0 <code>\uacb0\ud569 \ubc29\ud5a5</code>: Left-to-Right (\u2192), Right-to-Left (\u2190)</p> \uc6b0\uc120\uc21c\uc704 \uc5f0\uc0b0\uc790 \uacb0\ud569 \ubc29\ud5a5 \uc124\uba85 0 <code>::</code> \u2192 \ubc94\uc704 \uc9c0\uc815 \uc5f0\uc0b0\uc790 (Class::Function) 1 <code>.</code>, <code>-&gt;</code>, <code>[]</code>, <code>()</code>, <code>++</code>(post), <code>--</code>(post), <code>const_cast</code>, <code>dynamic_cast</code>, <code>reinterpret_cast</code>, <code>static_cast</code> \u2192 \uba64\ubc84 \uc811\uadfc, \ud6c4\uc704 \uc99d\uac10, \ud615 \ubcc0\ud658 2 <code>sizeof</code>, <code>++</code>(prefix), <code>--</code>(prefix), <code>~</code>, <code>!</code>, <code>-</code>(\ub2e8\ud56d), <code>+</code>(\ub2e8\ud56d), <code>&amp;</code>, <code>*</code>, <code>new</code>, <code>delete</code>, <code>()</code>(\ud615\ubcc0\ud658) \u2190 \ub2e8\ud56d \uc5f0\uc0b0\uc790 \ubc0f \uba54\ubaa8\ub9ac \uc5f0\uc0b0 3 <code>.*</code>, <code>-&gt;*</code> \u2192 \uba64\ubc84 \ud3ec\uc778\ud130 \uc811\uadfc 4 <code>*</code>, <code>/</code>, <code>%</code> \u2192 \uacf1\uc148/\ub098\ub217\uc148/\ub098\uba38\uc9c0 5 <code>+</code>, <code>-</code> \u2192 \ub367\uc148, \ube84\uc148 6 <code>&lt;&lt;</code>, <code>&gt;&gt;</code> \u2192 \ube44\ud2b8 \uc2dc\ud504\ud2b8 7 <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> \u2192 \ube44\uad50 \uc5f0\uc0b0\uc790 8 <code>==</code>, <code>!=</code> \u2192 \ub3d9\ub4f1 \ube44\uad50 9 <code>&amp;</code> \u2192 \ube44\ud2b8 AND 10 <code>^</code> \u2192 \ube44\ud2b8 XOR 11 <code>|</code> \u2192 \ube44\ud2b8 OR 12 <code>&amp;&amp;</code> \u2192 \ub17c\ub9ac AND 13 <code>||</code> \u2192 \ub17c\ub9ac OR 14 <code>? :</code>, <code>=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>+=</code>, <code>-=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>|=</code>, <code>^=</code>, <code>throw</code> \u2190 \uc870\uac74, \ub300\uc785, \uc608\uc678 \ucc98\ub9ac"},{"location":"Architecture/CA250714/#ternary-operator-aka-conditional-operator","title":"Ternary Operator AKA Conditional Operator \uc0bc\ud56d\uc5f0\uc0b0\uc790","text":"<p>Functions like <code>a = a &gt; b ? a : b;</code> are sometimes used. Sometimes, these functions do not work as intended. For instance,  <code>a = a &gt; b ? a += c : b += c</code> is generally intended to work as  <code>a = a &gt; b ? (a += c) : (b += c)</code>. However, it actually operates like  <code>a = (a &gt; b ? (a += c) : b) += c</code>, which is not intended consequence. </p> <p>So how are these functions operating in disassembly?  Actually, they work very similar to if else, nearly same. cmp and jmp</p> <p>Need to check this part disassembly! </p>"},{"location":"Architecture/CA250714/#2s-compliment","title":"2's Compliment","text":"<p>Doing two operation for 2's Compliment should return same order </p> <p>Basically Flip 0 and 1 then Add 1 </p> <p>0x1100 12 = -4  0x0011 3  0x0100 4 </p> <p>0x0100 4  0x1011 11 0x1100 12 </p> <p>\ub4a4\uc9d1\uace0 \ub354\ud558\uae30 \ub458\ub2e4  \uac19\uc740 \uc5f0\uc0b0\uc744 \ub450\ubc88 \ud558\uba74 \uac19\uc740 \uacb0\uacfc\uac00 \ub098\uc640\uc57c \ub418\ub2c8\uae4c </p> <p>0x0011 3  0x1100 12  0x1101 13 </p> <p>0x1101 13  0x0010 2  0x0011 3 </p> <p>\ub4a4\uc9d1\uace0 1 \ub354\ud558\uae30  \ub4a4\uc9d1\uace0 1 \ub354\ud558\uae30 \ub450\ubc88 \ud558\uba74 \uc6d0\ub798 \uc218\ub85c \uc640\uc57c \ud568  \uadf8\uac8c \ubcf4\uc218\ubc95  </p>"},{"location":"Architecture/CA250716/","title":"Disassembly of Switch case, pre post fix and bit mask.","text":""},{"location":"Architecture/CA250716/#remember","title":"Remember","text":"<p>.bss Block Started by Symbol </p> <p>IP Instruction Pointer, X86 Program Counter  E Extended 32Bit  R Register 64Bit </p> <p>.rodata  .map File Analysis </p>"},{"location":"Architecture/CA250716/#speed-of-prefix-vs-postfix-operator","title":"Speed of Prefix vs Postfix Operator","text":"<p>Generally, prefix operator like <code>++a</code> is considered as  more efficient thatn postfix operator like <code>a++</code>, as </p> <p>postfix <code>a++</code> should temporarily save original value and return it  while prefix <code>++a</code> can return value itself with temporal save. </p> <p>However, in assembly perspective, for basic simple datatype like <code>int</code>  postfix <code>a++</code> might be efficient sometimes. </p> <pre><code>     7:     volatile int a = 0; \n00BF15D4 C7 45 FC 00 00 00 00 mov         dword ptr [a],0  \n     8:     volatile int b = ++a;\n00BF15DB 8B 45 FC             mov         eax,dword ptr [a]  \n00BF15DE 83 C0 01             add         eax,1  \n00BF15E1 89 45 FC             mov         dword ptr [a],eax  \n00BF15E4 8B 4D FC             mov         ecx,dword ptr [a]  \n00BF15E7 89 4D F8             mov         dword ptr [b],ecx  \n     9: \n    10:     a = 0xffffffff;\n00BF15EA C7 45 FC FF FF FF FF mov         dword ptr [a],0FFFFFFFFh  \n    11:     b = a++; \n00BF15F1 8B 45 FC             mov         eax,dword ptr [a]  \n00BF15F4 89 45 F8             mov         dword ptr [b],eax  \n00BF15F7 8B 4D FC             mov         ecx,dword ptr [a]  \n00BF15FA 83 C1 01             add         ecx,1  \n00BF15FD 89 4D FC             mov         dword ptr [a],ecx  \n</code></pre> <p>In this case, for <code>++a</code> prefix, assembly is loaded from memory to  register <code>eax</code>, and incremented 1 and saved to original memory.  Then, <code>ptr[a]</code> is copied to register ecx and saved to <code>ptr[b]</code>.</p> <p>On the other hand, for <code>a++</code> prefix, assembly is loaded from  <code>ptr[a]</code> to register <code>eax</code>, and then saved directly to <code>ptr[b]</code>  and then increment operation executes. </p> <p>Considering that the memory load and store process takes the  most amount of time, for basic data types like this  prefix and postfix do not have huge difference, and for basic  datatypes like int or long, postfix might be slightly faster.  To see this level of analysis, disassembly is necessary! </p>"},{"location":"Architecture/CA250716/#bit-operator","title":"Bit Operator","text":"<pre><code>&amp; AND \n^ XOR \n| OR \n~ Flip All \n&lt;&lt; Shift left \n&gt;&gt; Shift Right \na = 0xaf \na &amp; 0xf0 = 11110000; \na = 0xa0 \n</code></pre> <p>In Network IP Setup </p> <pre><code>         IP 192 168   0   10  \nSubnet Mask 255 255 255    0 \n</code></pre> <p>Subnet Mask exist for <code>&amp;</code> bit <code>AND</code> operator so that  IP address became its network ID.  That is why sometimes Subnet Mask is 255 255 255 128 or similar  Subnet Mask is for bit calculation masking. </p> <pre><code>    192.168.  0. 10 (11000000.10101000.00000000.00001010)  \n&amp;   255.255.255.  0 (11111111.11111111.11111111.00000000)  \n=   192.168.  0.  0 (11000000.10101000.00000000.00000000)  // Network Address \n</code></pre> <p>Bit Operator <code>|</code> <code>OR</code> exist to combined divided bitsinto one  <pre><code>X   1001 1011 0000 0000 \nY   0000 0000 1101 1010 \nOR  1001 1011 1101 1010\n</code></pre> Like this. </p> <p>Bit Operator <code>^</code> <code>XOR</code> has characteristic to return same value  if <code>XOR</code> is applied with flipped value, like <code>A XOR B XOR B == A</code>,  if and only if <code>(B == ~A)</code></p> <pre><code>A   01011010 \nXOR 11010110 \n~A  10001100 \nXOR 11010110\nA   01011010 \n</code></pre> <p>Simple encryption might work in <code>XOR</code> operator. Also,  Assembly languages like <code>XOR eax eax</code> will reset register value to 0  quicker than <code>mov eax 0</code>.  so inside disassembly code <code>mov eax 0</code> it actually is doing <code>XOR eax eax</code>. </p> <p>Shift Bit Operator</p> <p>This can actually be used as some form of multiplication or division  a &gt;&gt; 1 2 4 as /2 /4 /8, and a &lt;&lt; 1 2 4 as 2 4 *8  Hard to read so not recommended or should be used with comments </p> <p>Shift operation of the unsigned value moves literally in direction.  Its empty space will be filled by 0 only.  However, shift operation of the signed value operates differently.  For signed variables, first bit represents negative number.  Also, it is based on 2's compliment. </p>"},{"location":"Architecture/CA250716/#switch-case-optimization","title":"Switch Case optimization","text":"<p>switch case vs if else  In assembly perspective, given cases are in sequential order from 1 to n,  switch case is much efficient compared to if else, especially if  if else if functions get bigger. </p> <p>Case 1 : Switch Case num in order from 1 to n </p> <p><pre><code>switch (num) {\n    case 1: /**/ break; \n    case 2: /**/ break; \n    case 3: /**/ break; \n}\n</code></pre> Assembly codes look like this </p> <pre><code>10:     switch (num) {\n00073341 83 7D B4 06          cmp         dword ptr [ebp-4Ch],6    // Compare 6 and temp variable \n00073345 77 47                ja          $LN10+7h (07338Eh)  // jump if [ebp-4Ch] &gt; 6 \n00073347 8B 55 B4             mov         edx,dword ptr [ebp-4Ch]  \n0007334A FF 24 95 A8 33 07 00 jmp         dword ptr [edx*4+733A8h]\n11:     case 1 : \n12:         x = 123; \n0007334A FF 24 95 A8 33 07 00 jmp         dword ptr [edx*4+733A8h]  \n13:         break; \n00073358 EB 34                jmp         $LN10+7h (07338Eh)  \n</code></pre> <p>Switch Case, given cases are in order, will move based on  calculation of switch case registered value inside <code>ecx</code>,  with multiplication access by <code>ptr [edx*4+733A8h]</code> instead of if else function based on multiple <code>cmp</code> execution  improving speed performance way much faster. </p> <p>Case 2 : Switch Case num with very large numbers </p> <pre><code>switch (num) {\n    case 123421: /**/ break; \n    case 21342: /**/ break; \n    case 33214: /**/ break; \n}\n</code></pre> <p>In this case, it is not likely to use method above </p> <pre><code>00BA3332 8B 45 FC             mov         eax,dword ptr [num]  \n00BA3335 89 45 B4             mov         dword ptr [ebp-4Ch],eax  \n00BA3338 81 7D B4 9E 5B 00 00 cmp         dword ptr [ebp-4Ch],5B9Eh  \n00BA333F 7F 26                jg          main+57h (0BA3367h)  \n00BA3341 81 7D B4 9E 5B 00 00 cmp         dword ptr [ebp-4Ch],5B9Eh \n00BA3348 74 55                je          main+8Fh (0BA339Fh)  \n00BA334A 81 7D B4 09 09 00 00 cmp         dword ptr [ebp-4Ch],909h \n</code></pre> <p>So internally, it works with lots of <code>cmp</code> and <code>jne</code> same as if else statement.  Thus, performance improvement of if else if same. </p> <p>Case 3 : Switch Case num with sequential numbers with missing </p> <pre><code>switch (num) {\n    case 10: /**/ break; \n    case 12: /**/ break; \n    case 15: /**/ break; \n}\n</code></pre> <p>This way, instead of using <code>cmp</code> and <code>jne</code> like if else statement  there is better option </p> <pre><code>switch (num)\n00FC3332 8B 45 FC             mov         eax,dword ptr [num]  \n00FC3335 89 45 B4             mov         dword ptr [ebp-4Ch],eax  \n00FC3338 8B 4D B4             mov         ecx,dword ptr [ebp-4Ch]  \n00FC333B 83 E9 0A             sub         ecx,0Ah  \n00FC333E 89 4D B4             mov         dword ptr [ebp-4Ch],ecx  \n00FC3341 83 7D B4 0A          cmp         dword ptr [ebp-4Ch],0Ah  \n00FC3345 77 47                ja          $LN10+7h (0FC338Eh)  \n00FC3347 8B 55 B4             mov         edx,dword ptr [ebp-4Ch]  \n00FC334A FF 24 95 A8 33 FC 00 jmp         dword ptr [edx*4+0FC33A8h] \n</code></pre> <p>This one pre calculates switch value to 0 by subtracting 10  in <code>sub ecx,0Ah</code> assembly. Then, it starts with 10 but how about  jump gaps between 0 2 5 ... ? The concept of gap exists.  If moved to pointer of <code>jmp         dword ptr [edx*4+0FC33A8h]</code>  then it is possible to check the jump table area in Memory view of VS2022,  which is generated right after code area like following. </p> <pre><code>    36:     return 0; \n00FF339F 33 C0                xor         eax,eax  \n    37: }\n00FF33A1 5F                   pop         edi  \n00FF33A2 5E                   pop         esi  \n00FF33A3 5B                   pop         ebx  \n00FF33A4 8B E5                mov         esp,ebp  \n00FF33A6 5D                   pop         ebp  \n00FF33A7 C3                   ret  \n00FF33A8 51                   push        ecx  // These are not assembly code anymore \n00FF33A9 33 FF                xor         edi,edi  // just pointer values \n00FF33AB 00 8E 33 FF 00 5A    add         byte ptr [esi+5A00FF33h],cl  \n</code></pre> <p>This is actually <code>jump tables</code>, not codes anymore, after <code>ret</code>. </p> <pre><code>0x00FF33A8  51 33 ff 00  pointer to case_10\n0x00FF33AC  8e 33 ff 00  pointer to default\n0x00FF33B0  5a 33 ff 00  pointer to case_12\n0x00FF33B4  8e 33 ff 00  pointer to default\n0x00FF33B8  8e 33 ff 00  pointer to default\n0x00FF33BC  63 33 ff 00  pointer to case_15 \n</code></pre> <p>Question : Is this data section or code section?  Answer : It depends. Here might be either code section <code>.text</code> area <code>relocattion targets</code>, or sometimes list of pointer variables in <code>.rodata</code> area data section. </p> <p>Program Counter  or IP Instruction Register in X86 will not go after <code>ret</code>. </p> <p>For switch case analysis, disassembly is required, again! </p>"},{"location":"Architecture/CA250718/","title":"Function Call, Loops","text":""},{"location":"Architecture/CA250718/#while-loop-for-loop-do-while","title":"while loop, for loop, do while","text":"<p>Infinite <code>while</code> loop</p> <pre><code>     9:     while (1)\n00C815DB B8 01 00 00 00       mov         eax,1  \n00C815E0 85 C0                test        eax,eax  \n00C815E2 74 0B                je          main+2Fh (0C815EFh)  \n    10:     {\n    11:         ++i; \n00C815E4 8B 45 FC             mov         eax,dword ptr [i]  \n00C815E7 83 C0 01             add         eax,1  \n00C815EA 89 45 FC             mov         dword ptr [i],eax  \n    12:     }\n00C815ED EB EC                jmp         main+1Bh (0C815DBh)  \n    13: \n    14:     return 0; \n00C815EF 33 C0                xor         eax,eax  \n</code></pre> <p>Infinite while loop operates like this. Locate function table  after return table and do comparison in <code>00C815EF</code>. </p> <p>Infinite <code>for</code> loop </p> <pre><code>     9:     for (; ;) {\n    10:         ++i; \n008915DB 8B 45 FC             mov         eax,dword ptr [i]  \n008915DE 83 C0 01             add         eax,1  \n008915E1 89 45 FC             mov         dword ptr [i],eax  \n    11:     }\n008915E4 EB F5                jmp         main+1Bh (08915DBh)  \n</code></pre> <p>Infinite for loop IP (Instruction Pointer) continously jump to the upper code  and repeat it. </p>"},{"location":"Architecture/CA250718/#usage-of-do-while-0-in-macro-function","title":"Usage of <code>do {} while (0)</code> in MACRO function","text":"<p>Macro Function declaration often requires <code>do while</code> functions to  operate properly like macro function. Suppose <code>MACRO</code> function like this. </p> <p><pre><code>#define SHOW(V)         \\\n{                       \\\n    int x = V;          \\\n    x += 10;            \\\n    printf(\"%d\", x);    \\\n} \n</code></pre> However, this might not work properly in this kind of MACRO function call. </p> <pre><code>int x = 0; \nif(x == 0) SHOW(10);\nelse SHOW(20); // ERROR \n</code></pre> <p>Because this operates same as the following. </p> <pre><code>if(x == 0) {                        \n    int x = V;          \n    x += 10;            \n    printf(\"%d\", x);    \n}; // Terminate if else by semicolon  \nelse { /*skip*/ }; // else without if now \n</code></pre> <p>This will terminate the <code>if else</code> logic, so that original  <code>else</code> is not working properly. To prevent this, semicolon should be used in  terminator only, like this. </p> <pre><code>int x = 0; \nif(x == 0) SHOW(10)\nelse SHOW(20) // ERROR \n</code></pre> <p>However, using C++ function without C++ is very ridiculous and confusing,  even though it is MACRO function that works properly. Thus, to use  <code>MACRO</code> function with semicolon properly, <code>do {} while(0)</code> is often used. </p> <pre><code>#define SHOW(V)         \\\ndo {                    \\\n    int x = V;          \\\n    x += 10;            \\\n    printf(\"%d\", x);    \\\n} while (0) \n</code></pre> <p>So that <code>MACRO</code> function is always properly used with semicolon. </p>"},{"location":"Architecture/CA250718/#usage-of-do-while-0-to-finish-function-full-of-if-else","title":"Usage of <code>do {} while (0)</code> to finish function full of <code>if else</code>.","text":"<p>In Game Server, there might be severals checks in game server programming like this. </p> <pre><code>void Test() \n{\n    int x = 12; \n    if(x != 0) { /*logic*/ }\n    if(x != 0) { /*logic*/ }\n    if(x != 0) { /*logic*/ }\n}\n</code></pre> <p>These kinds of checks are common to determine input security and prevent errors. From Login to a lot of check and confirmation, if anything is wrong  comparison should stop and function should terminate.  Actually, in assembly level, <code>GOTO</code> usage is okay, unlike public expectation. </p> <p>However, as a junior programmer, if you use <code>GOTO</code> then senior engineers  will probably think you are not good. So, <code>do while</code> is also useful. </p> <pre><code>void Test() \n{\n    int x = 12; \n    do {\n        if(x != 1) { /*logic*/ break; }\n        if(x != 2) { /*logic*/ break; }\n        if(x != 3) { /*logic*/ break; }\n    } while (0); \n}\n</code></pre> <p>Actually in assembly language <code>do while</code> works same as <code>GOTO</code>.  Some might suggest usage of <code>try catch</code> instead of <code>do while</code>.  However, <code>try catch</code> is used for exeptional, serious cases that OS should intervene.  It is not for game logic, but for very exceptional system programming case.  Thus, do not use try catch throw logic. </p>"},{"location":"Architecture/CA250718/#function-call-debug-vs-release","title":"Function Call Debug vs Release","text":"<p>Function call disassembly, when function call happens.  In Debug Mode, function call moves instruction pointer by two steps. </p> <pre><code>00AD12EE E9 DD 06 00 00       jmp         test (0AD19D0h)  \n...\n00AD215A E8 8F F1 FF FF       call        test (0AD12EEh)  \n... \n00AD19D0 55                   push        ebp  \n</code></pre> <p>So basically IP moves twice. Why? </p> <p>Function calls A B C D while other function calls E F.  Compiler compile unit is function unit based. </p> <p>Function call address input, and address is not yet arrived in compile stage.  This is done in linker. </p> <p>However, in release mode, instruction pointer moves directly to the function pointer. </p> <pre><code>00AD215A E8 8F F1 FF FF       call        test (0AD19D0h)  \n... \n00AD19D0 55                   push        ebp  \n</code></pre> <p>So, why Debug mode is working like this? </p> <p>Suppose there are functions A B C D ... several functions.  Then function B() is edited, so that its size get changed. </p> <p>If <code>call (address)</code> address value is directly connected to the address of B.  It means, in Code section of the entire memory, all <code>address</code> values of not only  function B but also several other functions should be rewritten, since  function B size change will overwrite significant part of section. </p> <p>Moreover, if B function or other functions A C D that have their address changed  due to rewritting B function is called like hundreds or thousands of times,  then entire hundreds or thousands of function addresses in code section should  be rewritten completely again, and linking of function will be completely  reexecuted again. </p> <p>In Debug process, modification of functions is very common. So, reducing debug  compile time is recommended. Thus, usage of some space for linking convenience  is recommended like below. </p> <pre><code>A jmp \nB jmp \nC jmp \n</code></pre> <p>So, when function A is called thousands of times, and function A is edited, then  there would be nearly nothing to change, since A jmp that address only will be changed.  So, Linking process will be quicker in this method rather than rewriting function  call pointer values for all function A calls hundreds of times. However, in Release build this method is not used for faster performance. </p>"},{"location":"Architecture/CA250718/#function-call-stack-procedure","title":"Function Call Stack Procedure","text":"<p>When function call happens with parameters a b c d, then the stack input order  will be R to L, aka right to left.  Assembly language after function parameter call is following. </p> <pre><code>     5: static int __cdecl test(int a, int b, int c)\n00A319D0 55                   push        ebp  \n00A319D1 8B EC                mov         ebp,esp  \n00A319D3 83 EC 50             sub         esp,50h  // x y z, 0Ah for Release Mode \n00A319D6 53                   push        ebx  \n00A319D7 56                   push        esi  \n00A319D8 57                   push        edi  \n    ... \n     7:     volatile int ans = 0; \n00A319E4 C7 45 FC 00 00 00 00 mov         dword ptr [ebp-4],0  // ans \n     8:     \n     9:     volatile int x = a; \n00A319EB 8B 45 08             mov         eax,dword ptr [ebp+8]   // a\n00A319EE 89 45 F8             mov         dword ptr [ebp-8],eax   // x\n    10:     volatile int y = b;\n00A319F1 8B 45 0C             mov         eax,dword ptr [ebp+0Ch] // b \n00A319F4 89 45 F4             mov         dword ptr [ebp-0Ch],eax // y\n    11:     volatile int z = c;\n00A319F7 8B 45 10             mov         eax,dword ptr [ebp+10h] // c\n00A319FA 89 45 F0             mov         dword ptr [ebp-10h],eax // z \n</code></pre> <p>Based on assembly, inside of the stack structure will be following. </p> <pre><code>LOW  ADDRESS\n|-------------------|\n|     Saved EDI     |  &lt;-- (After push edi, this is at esp. Before ret, esp moves here)\n|-------------------|\n|     Saved ESI     |\n|-------------------|\n|     Saved EBX     |\n|-------------------|\n|     (Padding/     |  &lt;-- Remaining local var space from sub esp, 50h\n|   Other Locals)   |\n|-------------------|\n|         z         |  &lt;-- ebp - 16 (0x10) (Matches [ebp-10h])\n|-------------------|\n|         y         |  &lt;-- ebp - 12 (0x0C) (Matches [ebp-0Ch])\n|-------------------|\n|         x         |  &lt;-- ebp - 8  (0x08) (Matches [ebp-8])\n|-------------------|\n|        ans        |  &lt;-- ebp - 4  (0x04) (Matches [ebp-4])\n|-------------------|\n|    Old EBP        |  &lt;-- **ebp register points here** (after `mov ebp, esp`)\n|-------------------|\n|    Return Address |  &lt;-- ebp + 4 (Pushed by `call` instruction)\n|-------------------|\n|    Parameter 'a'  |  &lt;-- ebp + 8\n|-------------------|\n|    Parameter 'b'  |  &lt;-- ebp + 12 (0x0C)\n|-------------------|\n|    Parameter 'c'  |  &lt;-- ebp + 16 (0x10)\n|-------------------|\n|    Caller's       |\n|    Stack Frame    |\n|-------------------|\nHIGH ADDRESS\n</code></pre> <p>Now after function execution, stack frame should get back into original function. </p> <pre><code>    25:     return 0; \n00A33337 5F                   pop         edi  \n00A33338 5E                   pop         esi  \n00A33339 5B                   pop         ebx  \n00A3333A 8B E5                mov         esp,ebp  \n00A3333C 5D                   pop         ebp  \n00A3333D C3                   ret  \n</code></pre> <p>Before <code>ret</code> is called, <code>ebp</code> register will save old <code>ebp</code> register value  saved before stack frame of function (<code>test</code> function here). Now, before <code>ret</code>,  stack size will get resetted. When <code>ret</code> is called during function, </p> <ol> <li><code>ret</code> pops the value currently pointed to by esp </li> <li><code>ret</code> loads this popped value into the Instruction Pointer</li> </ol> <p><code>ebp</code> register itself will never contain return address. Now, old <code>ebp</code> value  saved in stack, will get popped out by <code>ret</code> and it will get back to caller  <code>ebp</code>, in here <code>main</code> function <code>ebp</code>. </p>"},{"location":"Architecture/CA250718/#function-calling-convention-__cdecl-vs-__stdcall","title":"Function Calling Convention <code>__cdecl</code> vs <code>__stdcall</code>.","text":"<p>x86 Architecture function call convention. </p> <p>Suppose you call function with parameters like <code>void Test(int a, int b, int c, int d)</code>.  Then, how does these parameters <code>a, b, c, d</code> are going to get transferred? </p> <p>In default, our functions follow <code>__cdecl</code> convention. This calling convention  is going to manage parameter stack pointer in caller side. </p> <pre><code>    30:     volatile int result = test(a, b, c, d); \n00BC3340 8B 45 F0             mov         eax,dword ptr [d]  \n         ... \n00BC334C 8B 45 FC             mov         eax,dword ptr [a]  \n00BC334F 50                   push        eax  \n00BC3350 E8 7B E6 FF FF       call        test (0BC19D0h)  \n00BC3355 83 C4 10             add         esp,10h  \n00BC3358 89 45 EC             mov         dword ptr [result],eax  \n</code></pre> <p>This is function caller part, and it is possible to see that  <code>add esp, 10h</code> actually adds stack pointer 16, parameter space  after function <code>call test</code> is done. </p> <pre><code>     5: static int __cdecl test(int a, int b, int c, int d)\n        ... \n    20:     return ans; \n00BC1A17 8B 45 FC             mov         eax,dword ptr [ans]  \n00BC1A1A 5F                   pop         edi  \n00BC1A1B 5E                   pop         esi  \n00BC1A1C 5B                   pop         ebx  \n00BC1A1D 8B E5                mov         esp,ebp  \n00BC1A1F 5D                   pop         ebp  \n00BC1A20 C3                   ret  \n</code></pre> <p>It is possible to see that <code>ret</code> value does not return anything. </p> <p>On the other hand, <code>__stdcall</code> convention will manage parameter in callee side.  In this calling convention, </p> <pre><code>    30:     volatile int result = test(a, b, c, d); \n00BC3340 8B 45 F0             mov         eax,dword ptr [d]  \n         ... \n00BC334C 8B 45 FC             mov         eax,dword ptr [a]  \n00BC334F 50                   push        eax  \n00BC3350 E8 7B E6 FF FF       call        test (0BC19D0h)  \n00BC3358 89 45 EC             mov         dword ptr [result],eax  \n</code></pre> <p>After call, parameter space memory is not handled on the caller side. </p> <pre><code>return ans; \n00641A1A 5F                   pop         edi  \n00641A1B 5E                   pop         esi  \n00641A1C 5B                   pop         ebx  \n00641A1D 8B E5                mov         esp,ebp  \n00641A1F 5D                   pop         ebp  \n00641A20 C2 10 00             ret         10h \n</code></pre> <p>It is possible to see that <code>ret 10h</code>, assembly command <code>ret</code> has parameter 16,  space assigned for 4 integers a b c d for input. </p>"},{"location":"Architecture/CA250721/","title":"Struct Parameter and Random Number","text":""},{"location":"Architecture/CA250721/#memorize","title":"Memorize","text":"<ul> <li>What is <code>__fastcall</code> Function? Parameters inside Register, not stack! </li> <li><code>printf()</code> function also has return value! </li> </ul>"},{"location":"Architecture/CA250721/#function-call","title":"Function Call","text":"<p>Release Mode Debugging, no optimized compile </p> <p>How does return value of the function works in C++?  Mostly, <code>eax</code> Register is used to get return value. </p> <p>For function <code>int test() {return 10;}</code>, Disassembly looks like following. </p> <pre><code>call Test(01A10000h) \nmov ptr[x], eax \n</code></pre> <p>This one is easy, but in real game server programming, sometimes WINAPI or modularized libraries debugging will enforce disassembly without source code. For instance, if function  <code>int test() {int a; ++a; return a;}</code> exists, then </p> <pre><code>    a++; \nmov eax, ptr[a]\nadd eax, 1 \nmov ptr[a]\n    return a; \nmov eax, ptr[a]\n</code></pre> <p>Then last <code>ptr[a]</code> to <code>eax</code> data movement is putting the return value to <code>ax</code> register.  For instance, <code>printf</code> function has a return value. It returns number of characters it printed.  Thus, using function like below will get completely unexpected variable.  <pre><code>int test() {\n    int a = 0;\n    a += 20; \n    if(a!=20) return 20; \n    printf(\"abcde\"); \n}\n</code></pre></p> <p>In this case, <code>eax</code> register variable will become 6 by <code>printf</code> function, which is completely unexpected  behavior in many cases. So, if code uses return value of <code>test()</code> function, it will cause error.  Thus, Remove EVERY warning is necessary to debug and maintain code in a long term. </p>"},{"location":"Architecture/CA250721/#struct-datatype-in-stack-frame","title":"Struct datatype in Stack Frame","text":"<p>Generally simple structs are working in expectable way. </p> <pre><code>struct DATA {\n    volatile int a;\n    volatile int b;\n    volatile char c; //[100];\n};\n</code></pre> <p>This will be 12 bytes data size with last place 3 bytes padding.  Below is <code>main()</code> function disassembly.  <pre><code>    33:     DATA data1 = { 1, 2 }; \n00DD3404 C7 45 F8 01 00 00 00 mov         dword ptr [data1],1  \n00DD340B C7 45 FC 02 00 00 00 mov         dword ptr [ebp-4],2  \n    34:     DATA data2 = fdata(data1); \n00DD3412 8B 45 FC             mov         eax,dword ptr [ebp-4]  \n00DD3415 50                   push        eax  \n00DD3416 8B 4D F8             mov         ecx,dword ptr [data1]  \n00DD3419 51                   push        ecx  \n00DD341A E8 CA DE FF FF       call        fdata (0DD12E9h)  \n00DD341F 83 C4 08             add         esp,8  \n00DD3422 89 45 A8             mov         dword ptr [ebp-58h],eax  \n00DD3425 89 55 AC             mov         dword ptr [ebp-54h],edx  \n00DD3428 8B 55 A8             mov         edx,dword ptr [ebp-58h]  \n00DD342B 8B 45 AC             mov         eax,dword ptr [ebp-54h]  \n00DD342E 89 55 F0             mov         dword ptr [data2],edx  \n00DD3431 89 45 F4             mov         dword ptr [ebp-0Ch],eax \n</code></pre></p> <p>Below is <code>fdata()</code> function disassembly </p> <pre><code>    22: __declspec(noinline)\n    23: DATA fdata(DATA in) {\n00DD1630 55                   push        ebp  \n00DD1631 8B EC                mov         ebp,esp  \n00DD1633 83 EC 48             sub         esp,48h  \n00DD1636 53                   push        ebx  \n00DD1637 56                   push        esi  \n00DD1638 57                   push        edi  \n00DD1639 B9 7B 90 DD 00       mov         ecx,offset _12BD23D1_tmain@cpp (0DD907Bh)  \n00DD163E E8 33 FC FF FF       call        @__CheckForDebuggerJustMyCode@4 (0DD1276h)  \n00DD1643 90                   nop  \n    24:     DATA data;\n    25:     data.a = in.a;\n00DD1644 8B 45 08             mov         eax,dword ptr [in]  \n00DD1647 89 45 F8             mov         dword ptr [data],eax  \n    26:     data.b = in.b;\n00DD164A 8B 45 0C             mov         eax,dword ptr [ebp+0Ch]  \n00DD164D 89 45 FC             mov         dword ptr [ebp-4],eax  \n    27:         \n    28:     return data;\n00DD1650 8B 45 F8             mov         eax,dword ptr [data]  \n00DD1653 8B 55 FC             mov         edx,dword ptr [ebp-4]  \n    29: }\n</code></pre> <p>Line <code>__declspec(noinline)</code> is MSVC compiler enforcing NO inline function.  Struct value copy generally works like considering certain stack block like a local variable.  However, given huge size of struct variable, assembly code to copy struct  contains loop similar to memory copy. </p> <p>Given struct like below </p> <pre><code>struct DATA {\n    volatile int a;\n    volatile int b;\n    volatile char c[47];\n};\n</code></pre> <p>Function disassembly for <code>main()</code> is following. </p> <pre><code>    33:     DATA data1 = { 1, 2 }; \n00433411 C7 45 C4 01 00 00 00 mov         dword ptr [data1],1  \n00433418 C7 45 C8 02 00 00 00 mov         dword ptr [ebp-38h],2  \n0043341F 6A 30                push        30h  \n00433421 6A 00                push        0  \n00433423 8D 45 CC             lea         eax,[ebp-34h]  \n00433426 50                   push        eax  \n00433427 E8 EC DC FF FF       call        _memset (0431118h)  \n0043342C 83 C4 0C             add         esp,0Ch  \n    34:     DATA data2 = fdata(data1); \n0043342F 83 EC 38             sub         esp,38h  \n00433432 B9 0E 00 00 00       mov         ecx,0Eh  \n00433437 8D 75 C4             lea         esi,[data1]  \n0043343A 8B FC                mov         edi,esp  \n0043343C F3 A5                rep movs    dword ptr es:[edi],dword ptr [esi]  \n0043343E 8D 85 DC FE FF FF    lea         eax,[ebp-124h]  \n00433444 50                   push        eax  \n00433445 E8 9F DE FF FF       call        fdata (04312E9h)  \n0043344A 83 C4 3C             add         esp,3Ch  \n0043344D B9 0E 00 00 00       mov         ecx,0Eh  \n00433452 8B F0                mov         esi,eax  \n00433454 8D BD 14 FF FF FF    lea         edi,[ebp-0ECh]  \n0043345A F3 A5                rep movs    dword ptr es:[edi],dword ptr [esi]  \n0043345C B9 0E 00 00 00       mov         ecx,0Eh  \n00433461 8D B5 14 FF FF FF    lea         esi,[ebp-0ECh]  \n00433467 8D 7D 8C             lea         edi,[data2]  \n0043346A F3 A5                rep movs    dword ptr es:[edi],dword ptr [esi]  \n</code></pre> <p>Function disassembly for <code>fdata</code> is below. </p> <pre><code>    22: __declspec(noinline)\n    23: DATA fdata(DATA in) {\n00431630 55                   push        ebp  \n00431631 8B EC                mov         ebp,esp  \n00431633 83 EC 78             sub         esp,78h  \n00431636 53                   push        ebx  \n00431637 56                   push        esi  \n00431638 57                   push        edi  \n00431639 B9 7B 90 43 00       mov         ecx,offset _12BD23D1_tmain@cpp (043907Bh)  \n0043163E E8 33 FC FF FF       call        @__CheckForDebuggerJustMyCode@4 (0431276h)  \n00431643 90                   nop  \n    24:     DATA data;\n    25:     data.a = in.a;\n00431644 8B 45 0C             mov         eax,dword ptr [in]  \n00431647 89 45 C8             mov         dword ptr [data],eax  \n    26:     data.b = in.b;\n0043164A 8B 45 10             mov         eax,dword ptr [ebp+10h]  \n0043164D 89 45 CC             mov         dword ptr [ebp-34h],eax  \n    27:         \n    28:     return data;\n00431650 B9 0E 00 00 00       mov         ecx,0Eh  \n00431655 8D 75 C8             lea         esi,[data]  \n00431658 8B 7D 08             mov         edi,dword ptr [ebp+8]  \n0043165B F3 A5                rep movs    dword ptr es:[edi],dword ptr [esi]  \n0043165D 8B 45 08             mov         eax,dword ptr [ebp+8]  \n    29: }\n</code></pre> <p>Showing that when huge array is inside <code>struct</code> then loop is used like <code>rep movs</code>.  Also, it is possible to see very inefficient stack memory usage to copy <code>struct</code> from  caller function to callee function. This is basic schema when return value is <code>struct</code>  instead of basic datatype. </p> <pre><code>           ^ Stack Growth (towards lower addresses)\n           |\n+----------+------------+\n|  ...     |            |\n|          |            |\n| data2.c[0-46] (56 bytes total for data2)\n| data2.b  |            |\n| data2.a  |            |  &lt;-- [ebp-0ECh] (base of data2)\n+----------+------------+\n|  ...     |            |\n|          |            |\n| main Local variables  |\n|          |            |\n+----------+------------+\n|  RETURN BUFFER FOR    |\n|   FDATA CALL (56 bytes) |  &lt;-- [ebp-124h] (address pushed as hidden arg)\n+----------+------------+\n|  ...     |            |\n+----------+------------+  &lt;-- main's ESP before call to fdata\n|  Copy of data1 struct |\n|  for argument 'in'    |\n|  (56 bytes)           |\n+----------+------------+\n|  Address of Return Buf|  &lt;-- This is the hidden first argument pushed by main\n+----------+------------+\n|  Return Address       |\n+----------+------------+  &lt;-- fdata's EBP (after prologue)\n|  Saved EBP (main's)   |\n+----------+------------+\n|  Saved Registers (EBX, ESI, EDI) |\n+----------+------------+\n|  Local variables of fdata (e.g., local 'data' struct) |\n|  ...                  |\n+----------+------------+  &lt;-- fdata's ESP (after prologue's stack allocation)\n</code></pre> <p>So, it copies from <code>fdata()</code> function local variable to the return buffer of <code>fdata()</code>,  and then <code>main</code> function return value save buffer from <code>fdata</code> function return value saving  buffer, and then to original destination from temporarily created <code>struct</code> space inside <code>main()</code>.  Thus, it is extremely ineffective, decreasing performance significantly, and that is why  using pointer parameters to send <code>struct</code> is recommended. </p> <p>Script languages like <code>C#</code> or <code>JavaScript</code> or a lot of these work well  with input of <code>struct</code> or <code>class</code>. However, they internally also work by reference call.  Thus, in <code>C++</code> data transfer by using <code>struct</code> especially when it is large, should be avoided. </p>"},{"location":"Architecture/CA250721/#critical-potential-error-for-missing-function","title":"Critical potential error for missing function","text":"<pre><code>int test() {\n    int a = 0; a += 20; \n    if(a!=20) return 20; \n}\n</code></pre> <p>This one does NOT return value for all cases, but it causes warning only, NO error.  However, this kind of code might make very critical, unexpected behaivor potentially. </p>"},{"location":"Architecture/CA250721/#disassembly-for-stdrand-and-srand-function","title":"Disassembly for <code>std::rand()</code> and <code>srand</code> function.","text":"<p>Completely random number is impossible. However, in progrmmer perspective,  if we do not have to consider deeply about computer security in cryptographic  perspective, it is not necessary to make complete random number.  Only pseudorandom number is enough. </p> <p><code>rand()</code> is not secure while <code>rand_s()</code> is more secure.  <code>std::rand()</code> will return <code>unsigned short</code> 2 bytes random number  variable between 0 and 32767. </p> <p>It is possible to see that <code>rand()</code> number has certian order.  If <code>exe</code> program starts, random numbers will always return same  sequence of numbers. Then, this is not likely to use as random number. </p>"},{"location":"Architecture/CA250721/#seed-variable","title":"seed variable","text":"<p>Since <code>srand(int)</code> stands for pseudo random number according to the input,  it is working in such a function that will return same sequence of number  according to the given input. Disassembly debugging is required to see  what happens inside <code>rand()</code> function in detail. </p> <pre><code>    13:     srand(0);\n33 C9                xor         ecx,ecx  \nFF 15 C4 F9 00 00    call        qword ptr [__imp_srand (07FF79B4E1318h)]  \n90                   nop  \n    14: \n    15:     unsigned short i = rand(); \nFF 15 B5 F9 00 00    call        qword ptr [__imp_rand (07FF79B4E1310h)]  \n66 89 45 04          mov         word ptr [i],ax \n</code></pre> <p>First, check where seed value is saved. </p> <pre><code> mov         dword ptr [rsp+8],ecx  \n sub         rsp,28h  \n call        00007FFE11D64610  \n mov         ecx,dword ptr [rsp+30h]  \n mov         dword ptr [rax+28h],ecx  \n add         rsp,28h\n</code></pre> <p>Based on this function, it is likely that seed value is saved at <code>ptr [rax + 28h]</code>. </p> <p>Given the structure, dive into call <code>rand</code> function move Instruction Pointer. </p> <pre><code>sub         rsp,38h                             Allocate Stack Frame \ncall        00007FFE2B3A4610                    \nmov         qword ptr [rsp+20h],rax             \nmov         rax,qword ptr [rsp+20h]             \nimul        eax,dword ptr [rax+28h],343FDh      X_n *= 214,013\nadd         eax,269EC3h                         X_n += 2,531,011\nmov         rcx,qword ptr [rsp+20h]             \nmov         dword ptr [rcx+28h],eax             \nmov         rax,qword ptr [rsp+20h]             \nmov         eax,dword ptr [rax+28h]  \nshr         eax,10h                             X_n &lt;&lt; 16 \nand         eax,7FFFh                           X_n &amp;= 7FFF == 0001 1111 ... \nadd         rsp,38h                             Retrieve Stack Frame \nret  \n</code></pre> <p>Value \\(X_0\\) is seed value input.  Function <code>rand()</code> return value is used like <code>ax</code>.  Based on the disassembly of <code>rand()</code> function, formula would be </p> <p>\\(X_{n+1} = (a \\cdot X_n + c) \\pmod {2^{32}}\\), same as  \\(X_{n+1} = (0X343FD \\cdot X_n + 0X269EC3) \\pmod {2^{32}}\\) </p> <p>Where Multiplier value \\(a = 0X343FD = 214,013\\),  and incrementor value \\(c = 0X269EC3 = 2,531,011\\). </p> <p>Saved position for previous and current random number is  \\(X_n \\rightarrow ptr[rsp+20h]\\), \\(X_{n+1} \\rightarrow ptr[rax+28h]\\). </p> <p>Original value \\(X_n\\) is <code>unsigned int</code> 4 bytes data type as they use <code>eax</code>  for data movement and calculation. However, since return value is supposed to be  unsigned short, the register value <code>eax</code> retrieved from \\(X_n\\) saved pointer  <code>[rax + 28h]</code> will be parsed by bit shift and return only small amount of number,  which is total 15 bit. </p> <p>Now, based on this math equation derived from disassembly analysis,  same <code>myrand</code> function will be implemented through using C++ code. </p> <pre><code>namespace jhp {\n    static constexpr unsigned int a = 0X343FD;\n    static constexpr unsigned int c = 0X269EC3;\n\n    static unsigned int x = 1;\n\n    inline static void srand(unsigned int seed) { x = seed; };\n    inline static unsigned short rand() \n    {\n        x = (a * x) + c; \n        return static_cast&lt;unsigned short&gt; ((x &gt;&gt; 16) &amp; 0X7FFF); \n    }\n}\n</code></pre> <p>Now, for same <code>std::srand()</code> and <code>jhp::srand()</code> seed value,  the output of <code>std::rand()</code> and <code>jhp::rand()</code> <code>unsigned short</code> values will be same. </p> <p>VS Installer &gt; \uc7ac\uc124\uce58 </p> <p>\uc120\ud0dd\uc0ac\ud56d\uc5d0\uc11c  Windows 11SDK \ub4e4\uc774\ubbf8 \uc124\uce58\ub418\uc5b4 \uc788\uc74c  \uadf8\uac70 \uc124\uce58 \ucde8\uc18c\ud558\uc2dc\uace0 10SDK \uc124\uce58\ud558\uba74 \ub428  VS2022\uc5d0\uc11c SDK \ubc84\uc804 \ubcc0\uacbd\ud558\uba74 \ub428 </p>"},{"location":"Architecture/CA250723/","title":"Stack Local Variable Contamination","text":""},{"location":"Architecture/CA250723/#user-level-thread-is-not-a-thread","title":"User Level Thread is not a Thread","text":"<p>In Old WINAPI System Programming book, user level thread is explained,  but this is not considered as thread anymore.  In past, some UNIX based OS had no thread concept and used process as thread, so  they made internal concept of thread, but it is actually not a thread  that could do parallel machine code execution. It works serially, not parallely.  User thread makes one more call stack on kernel thread.  Nowadays, Unity Game Engine works in single thread, so it uses Coroutine.  In OS perspective, making so called user thread inside one kernel level thread is  just one kernel thread. WinAPI Fiber do this, but this is unnecessary.  Thus, ignore concept of user level thread, and suppose all threads affected by  OS scheduler are kernel level threads.  So called User Level thread is not useful for parallel threads execution and multithreading. </p> <p>Function infinite recursion risk is stack overflow,  reaching 1 MB stack maximum size reach. </p> <pre><code>void func(int a){func(a);}\nint main(){func(0);}\n</code></pre> <p>This will be warned by compiler, that stack overflow is inevitable. </p> <p><pre><code>void func(int a){ if(a &gt; 9999) break; func(a);}\nint main(){func(0);}\n</code></pre> However, unlikely condition like this will NOT make stack overflow meaning. Be cautious. </p> <p>So when does stack overflow happens?  In Debug mode, since more space stack is assigned, stack overflow might happen quicker.  In sample code, debug mode got about 4700 calls until stack overflow while release mode got 85000. </p>"},{"location":"Architecture/CA250723/#stack-local-variable-contamination_1","title":"stack local variable contamination","text":"<p>If stack variable gets read access error,  or stack variable access wrong data by distorted address, then  it represents that stack access variable is wrong, meaning one of </p> <ul> <li><code>ebp</code> for X86  </li> <li><code>rsp</code> for X86-64 </li> </ul> <p>is contaminated in 100% Probability of cause. Since register variable <code>ebp</code> or <code>esp</code> are registers, it seems that it is not likely to be contaminated. </p> <p>However, <code>ebp</code> is more likely to be contaminated easier than <code>esp</code>. Let's see why. </p> <p>This is typical <code>esp</code> update procedure. </p> <pre><code>mov         ebp, esp \nsub         esp, 54h \n// function  \nmov         esp, ebp \n</code></pre> <p>Mostly <code>esp</code> values are changed by registers or constants calculation only, so it is safe from contamination.  However, <code>ebp</code> is different. It saves caller function stack base pointer, which is <code>ebp</code> of pointer. </p> <pre><code>push        ebp  \nmov         ebp,esp \n// function \nmov         esp,ebp  \npop         ebp \n</code></pre> <p><code>push ebp</code> saves caller stack frame base pointer into stack memory.  <code>pop ebp</code> retrieves caller stack frame base pointer from that stack memory.  The problem is, what if that stack memory address saving caller base pointer, is accessed and changed?  callee function works fine, but when instruction register jump back to continue execution of  caller function, its local variable that are supposed to be accessible by relative distance  between ebp, like [ebp-8] as <code>int a</code> or similar, would get completely different memory. </p> <pre><code>| *arr    | Local variable \n| cookie  | In MSVC for pointer calculation, this place exists for safety. `__security_cookie` Canary \n| old ebp | Caller Function Stack Frame Base Pointer \n| ret eip | Return Instruction Pointer pointing caller function \n| int  b  | Input Parameters \n| int  a  | Input Parameters \n| main    | Main Function Stack Frame \n</code></pre> <p>When access memory by pointer by using arr, like (arr + idx) = 1234 where idx is -4,  which is location where old <code>ebp</code> is stored. stack memory address that might contain old <code>ebp</code> or return <code>eip</code>, might potentially be contaminated. </p> <p>When callee function is returned, and ebp register value is updated into old ebp value,  then caller function accessing local variables by relative distance with <code>ebp</code> will not  operate properly. If error happens, it is easy to detect. However, worst scenario is that  it somehow works, and malfunctions while running and no one detect it. This might make  tremendous amount of error, so some user data is distorted, meaning online game server  rollback, aka tremendous amount of company profit loss.</p> <p>In Debug Mode, <code>ebp</code> and <code>eip</code> were accessible by this function method. </p> <pre><code>    31: void func() {\n00893430  push        ebp  \n00893431  mov         ebp,esp  \n00893433  sub         esp,54h  \n00893436  mov         eax,dword ptr [__security_cookie (0897040h)]  \n0089343B  xor         eax,ebp  \n0089343D  mov         dword ptr [ebp-4],eax  \n00893440  push        ebx  \n00893441  push        esi  \n00893442  push        edi  \n00893443  mov         ecx,offset _12BD23D1_tmain@cpp (089907Bh)  \n00893448  call        @__CheckForDebuggerJustMyCode@4 (0891276h)  \n0089344D  nop  \n    32:     int arr[3];\n    33:     int* ptr = nullptr; \n0089344E  mov         dword ptr [ptr],0  \n    34:     *(arr) = 1; \n00893455  mov         eax,4  \n0089345A  imul        ecx,eax,0  \n0089345D  mov         dword ptr arr[ecx],1  \n    35:     ptr = (arr + 4); // Forced ebp access \n00893465  lea         eax,[ebp]  \n00893468  mov         dword ptr [ptr],eax  \n    36:     // ptr = (arr + 5); // Forced eip access \n    37:     *ptr = 0; \n0089346B  mov         eax,dword ptr [ptr]  \n0089346E  mov         dword ptr [eax],0  \n    38: \n    39:     // printf(\"%p\", ptr);\n    40: }\n00893474  pop         edi  \n00893475  pop         esi  \n00893476  pop         ebx  \n00893477  mov         ecx,dword ptr [ebp-4]  \n0089347A  xor         ecx,ebp  \n0089347C  call        @__security_check_cookie@4 (0891113h)  \n00893481  mov         esp,ebp  \n00893483  pop         ebp  \n00893484  ret  \n</code></pre> <p>When pointer calculation is used in cpp code,  compiler push <code>__security_cookie</code> into stack memory to check safety.  It exists to prevent pointer access to old <code>ebp</code> or return <code>eip</code> variables that would result in unexpected behavoir.  </p> <p>So, for instance, if access to the space before first local variable happens,  like arr[idx] which is *(arr + 4); </p> <p>In Debug Mode code sample, </p> <pre><code>static void func() \n{\n    volatile int arr[4] = { 0, };\n    volatile int *ptr; \n    *arr = 10; \n\n    ptr = arr; // Stack Address \n    ptr += 3; // skip arr memory space and reach arr[0] \n    *ptr = 0xABCDABCD;\n    ptr += 1; // Debug buffer space 0XFFFFFFFF \n    *ptr = 0xEEEEEEEE; \n    ptr += 1; // __security_check_cookie Canary \n    *ptr = 0xDDDDDDDD;\n    ptr += 1; // ebp \n    *ptr = 0xCCCCCCCC;\n    ptr += 1; // eip \n    *ptr = 0xBBBBBBBB;\n}\n</code></pre> <p><code>Ctrl</code> + <code>Alt</code> + <code>M</code> -&gt; Then Press 1 2 3 OR 4, then memory table is visible showing  something similar to below. </p> <pre><code>0x0055F7AC  fe ba dc fe  \n0x0055F7B0  00 00 00 00  \n0x0055F7B4  00 00 00 00  \n0x0055F7B8  00 00 00 00  \n0x0055F7BC  cc cc cc cc  // Debug Padding, do not exist in Release Mode \n0x0055F7C0  7a f8 a0 80  // Canary, security cookie \n0x0055F7C4  98 f8 55 00  // Caller function ebp \n0x0055F7C8  94 19 5b 00  // Caller function eip \n</code></pre> <p>After function <code>func</code> executes completely, then address will be following. </p> <pre><code>0x0055F7AC  fe ba dc fe  \n0x0055F7B0  00 00 00 00  \n0x0055F7B4  00 00 00 00  \n0x0055F7B8  cd ab cd ab  \n0x0055F7BC  ba dc ba dc  \n0x0055F7C0  cd ab cd ab  \n0x0055F7C4  ba dc ba dc  \n0x0055F7C8  cd ab cd ab  \n</code></pre> <p>Distorting each part would make unexpected behavior.  Debug padding is okay to contaminate. </p> <p>Memory contamination saving caller register values for Debug and Release Mode  In debug mode, padding exists. However, release mode do not have padding.  Thus, old <code>ebp</code> or <code>eip</code> register backup saved in memory might not be  contaminated in debug mode while contaminated in release mode. </p> <p>Canary contamination </p> <pre><code> mov         eax,dword ptr [__security_cookie (022A000h)]  \n xor         eax,ebp  \n mov         dword ptr [ebp-4],eax  \n mov         ecx,offset _84A7C6DE_BasePtrContaminate@cpp (022C00Dh) \n</code></pre> <p>When function with pointer memory acess is called,  This kind of <code>ebp</code> memory access checker save location of <code>__security_cookie</code>, where is <code>[ebp-4]</code>. Before saved, it would be <code>xor</code>ed with <code>eax</code>.  </p> <p><pre><code>mov         ecx,ebp  \n... assembly codes ... \n mov         ecx,dword ptr [ebp-4]  \n xor         ecx,ebp  \n call        @__security_check_cookie@4 (022114Fh)  \n</code></pre> Function with pointer memory access finishes,  variable stored in <code>[ebp-4]</code>, that is result of <code>xor</code> of  <code>__security_cookie</code> Canary and current function caller function <code>ebp</code>. </p> <p>Function call of <code>__security_check_cookie</code> will jump here. </p> <pre><code>cmp         ecx,dword ptr [__security_cookie (022A000h)]  \njne         failure (0221CA9h)  \nret  \njmp         ___report_gsfailure (022102Dh) \n</code></pre> <p>Consequence of XOR function will result here.  XOR calculated value of original <code>ebp</code> stored will check whether  memory value in <code>[ebp-4]</code> is accessed and changed or not. If changed, it will throw error. </p> <p>However, if <code>[ebp-4]</code> is not touched while <code>[ebp]</code> itself memory area is contaminated,  compiler will NOT detect error. This will distort all data inside memory. </p> <p>The function above to deliberately contaminate canary, <code>ebp</code> and <code>eip</code> works in  debug mode. However, it does NOT work in release mode. </p> <p>Might turn off this warning  <code>/wd4789</code>: \"buffer overrun detected at compile time\"</p>"},{"location":"Architecture/CA250725/","title":"Debugging Process of Base Pointer or Instruction Pointer Contamination","text":"<p>What <code>ret</code> does includes <code>pop eip</code>, which includes decrementing <code>esp</code> register too. Or in other words, it pops what <code>esp</code> is pointing and save it into <code>eip</code>. </p> <p>When stack variable result in unexpected variable </p> <p>This is typical end of the disassembly of function. </p> <pre><code>00FE1144  add         esp,8  \n00FE1147  mov         ecx,dword ptr [ebp-4]  \n00FE114A  xor         ecx,ebp  \n00FE114C  call        __security_check_cookie (0FE116Ch)  \n00FE1151  mov         esp,ebp  \n00FE1153  pop         ebp  \n00FE1154  ret  \n</code></pre> <p>In this disassembly code, <code>ret</code> will pop current memory right below <code>ebp</code>. </p> <p>This is memory hierarchy before the callee function is terminated. </p> <pre><code>|------------|\n|   Callee   |\n|   Stack    |\n|   Frame    |\n|------------| \n|   Canary   |\n|------------|\n| ebp backup | &lt;- Potentially Might be accessed and changed \n|------------| \n| eip backup | &lt;- Potentially Might be accessed and changed \n|------------| \n| Parameters |\n|------------|\n|   Caller   |\n|   Stack    |\n|   Frame    | \n|------------|\n</code></pre> <p>When pop <code>ebp</code> is called, the previous base pointer value is restored from the stack into <code>ebp</code>.  This does not delete memory, but simply moves the esp up by 4 bytes (in 32-bit). </p> <p>When <code>ret</code> is called, the return address (original <code>eip</code>) is popped from the top of the stack  into the instruction pointer <code>eip</code>. Again, this modifies <code>esp</code>, not memory content directly.</p>"},{"location":"Architecture/CA250725/#debugging-process-of-base-pointer-contamination","title":"Debugging Process of Base Pointer Contamination","text":"<p>Goal : Detect when memory of caller function base pointer backup is changed. </p> <p>First, when <code>ebp</code> is changed in callee function, then callee function itself  would work mostly correct with appropriate access to stack members like <code>ebp - 4</code> similar calculations.  However, when <code>pop ebp</code> replace current <code>ebp</code> to old <code>ebp</code> of previous caller stack frame, but  it is contaminated, then caller function access in stack frame variables will be completely wrong,  causing either error, or for worse, undefined behavior.  </p> <p>Suppose code like this. </p> <pre><code>__declspec(noinline)\nstatic void parent() {\n    int a = 0; \n    printf(\"%d\", a); \n    func1(); \n    fpfunc(); \n    func2();\n    func3(); \n    a++; // Error thrown, reading access violated. \n}\n</code></pre> <p>Stack variable seems to be disrupted. </p> <p>First, check current <code>ebp</code> register value. If it is strange, it is clear.  Then, <code>ebp</code> contamination should be checked by <code>__debugbreak();</code> function. </p> <p>Contamination of <code>ebp</code> can be detectable through local variable. For instance,  if one single local variable exist, then meaningless assignment of  static variable from local variable would detect any <code>ebp</code> contamination easily. </p> <pre><code>static void parent() {\n    volatile static int g_whatever; \n    int a = 0; \n    printf(\"%d\", a); \n    a = 1; \n    func1(); \n    g_whatever = a; \n    func3();\n    g_whatever = a;\n    fpfunc(); \n    // Same checking process ... \n}\n</code></pre> <p>However, when there does not exist any local variable, only likely option is to use  function called as <code>_AddressOfReturnAddress()</code> which will return pointer value of  <code>eip</code> address that is right below the <code>ebp</code>. </p> <pre><code>#include &lt;intrin.h&gt;\n\n__declspec(noinline)\nstatic void parent() {\n    volatile static uintptr_t* g_ebptr;\n    volatile static uintptr_t g_ebpvalue;\n    g_ebptr = reinterpret_cast&lt;uintptr_t*&gt; // eip - 4\n        ((uintptr_t) _AddressOfReturnAddress() - sizeof(void*));\n    g_ebpvalue = *g_ebptr; \n    func1(); \n    g_ebptr = reinterpret_cast&lt;uintptr_t*&gt; // eip - 4\n        ((uintptr_t)_AddressOfReturnAddress() - sizeof(void*));\n    if (g_ebpvalue != *g_ebptr) __debugbreak(); // check if ebp is contaminated\n    func3();\n    // Same checking process ... \n}\n</code></pre> <p>This is very messy and require header, so not that much recommended approach.</p>"},{"location":"Architecture/CA250725/#prove-bp-backup-value-is-contaminated","title":"Prove <code>bp</code> backup value is contaminated.","text":"<p>First, check <code>esp</code>.  From <code>esp</code>, look whether upper variable is 0 or not. </p> <p>During debugging, Registers are visible. However, how to check  current <code>ebp</code> value by checking ? </p>"},{"location":"Architecture/CA250725/#64-bit","title":"64 Bit","text":"<p>The 32 Bit disassembly function call and finish are composed by strict following pattern </p> <pre><code>push ebp \nadd esp 12h // Whatever \n...\nmov esp ebp \npop ebp\nret\n</code></pre> <p>However, Release mode of 64 Bit stack frame acquisition might NOT use <code>rbp</code>, only based on  pure calculation of <code>rsp</code>, while <code>rbp</code> is used for some kind of other saving register,  especially in release mode. In debug mode, <code>rbp</code> works like <code>ebp</code> though.  </p> <pre><code>sub         rsp,48h  \nadd         rsp,48h  \n</code></pre> <p>Thus, in 64 Bit OS Release Mode debugging, base pointer contamination  disrupting stack frame variable access by method like <code>[ebp - 8]</code> is not likely. </p>"},{"location":"Architecture/CA250725/#debugging-process-of-instruction-pointer-contamination","title":"Debugging Process of Instruction Pointer Contamination","text":"<p>Goal : Detect when memory of caller function instruction register backup is changed. </p> <p>Every disassembly debugging is possible based on register that contains instruction pointer value.  However, when this instruction pointer is contaminated, even currently operating function  is not working. Then, how to detect problem? </p> <p>Probability of Register Instruction Pointer <code>rip</code> or <code>eip</code> will change in following circumstances. </p> <ul> <li>Move to next </li> <li>Jump <code>jmp</code> <code>jeq</code> <code>jne</code> etc ... </li> <li>Function <code>call</code> change <code>ip</code> to target assembly code </li> <li>Function <code>ret</code> pop <code>ip</code> to return from stack </li> </ul> <p>Given that C++ code is compiled and linked without error, it means that  code itself works for basic logic including execution of next command or jump.  Potential likelihood of <code>eip</code> contanimation is two : either <code>call</code> or <code>ret</code>. </p> <p>When function pointer parameter is not transferred properly into <code>call</code>, then  function call might point invalid zone, making unexpected behavior. </p> <p>If the return address (saved instruction pointer) on the stack is overwritten,  the <code>ret</code> instruction will jump to an unintended location.  This is often seen in stack corruption or exploitation scenarios and  can result in crashes or arbitrary code execution.</p> <p>So first, distinguish whether it is function call pointer problem or IP register backup  contamination problem. </p> <p>For 32 Bit Architecture, when Instruction pointer is completely broken,  both function call pointer interruption and <code>eip</code> disruption can be checked by  checking <code>ebp</code> register, which is currently saving the previous caller function <code>ebp</code>. Also, below previous <code>ebp</code> there would be previous <code>eip</code> too.  So, when Only <code>eip</code> is corrupted, and <code>ebp</code> is still same, make following approach. </p> <pre><code>|------------|\n| ebp callee | &lt;-This might be safe, saving (ebp caller) address \n|------------| \n| eip backup | &lt;-Suppose this is corrupted \n|------------| \n| Parameters |\n|------------|\n|   Caller   |\n|   Stack    |\n|   Frame    | \n|------------|\n| ebp caller | &lt;-This place is accessible \n|------------| \n| eip backup | &lt;-This place is right below, containing .text area address \n|------------| \n</code></pre> <p>Now, based on the address saved in <code>eip</code> backup of caller function,  search disassembly code address to find out function.  Then, finally can reach caller function of the function that corrupted <code>eip</code>. </p> <p>Given <code>ebp</code> is still not contaminated so it exist as callee function <code>ebp</code>,  tracking root would be following. </p> <ol> <li>Search <code>ebp</code> register saving address in Memory </li> <li>Suppose that address is caller function <code>ebp</code> stored, and look at one space down. </li> <li>Suppose it as caller function <code>eip</code>, and search them in code area to see caller function code.  </li> </ol> <p>Now, at least parent function of the function that contaminated <code>eip</code> is detectable. </p> <p>In 64 Bit Architecture, <code>rip</code> contamination would work quite similar.  However, 64 Bit Architecture has way more security features, and also  stack frame structure is not as intuitively clear as 32 Bit. </p>"},{"location":"Architecture/CA250725/#create-dump-file-dmp","title":"Create Dump File <code>.DMP</code>.","text":"<pre><code>.dump [options] FileName\n.dump /?\n</code></pre> <p>Or, Ctrl Shift ESC -&gt; Make Snapshot </p> <p>\uc791\uc5c5 \uad00\ub9ac\uc790 / \uc138\ubd80 \uc815\ubcf4 / \ud504\ub85c\uc138\uc2a4 \ubaa9\ub85d / exe \uc6b0\ud074\ub9ad / \ub364\ud504 \ud30c\uc77c \ub9cc\ub4e4\uae30 </p> <p>Path </p> <p>DMP File Path location </p> <pre><code>C:\\Users\\user\\AppData\\Local\\Temp\\ProcessName.DMP\n</code></pre> <p>\uad00\ub9ac \uc804\uc6a9 \ub514\ubc84\uadf8  \ud63c\ud569 \ub514\ubc84\uadf8  \ub124\uc774\ud2f0\ube0c \uc804\uc6a9 \ub514\ubc84\uadf8 &lt;- Select This </p>"},{"location":"Architecture/CA250728/","title":"Context Switching, Stack Frames, and Struct Alignment","text":"<p>Low-Level Memory and CPU Behavior in C/C++ on x64 Systems</p>"},{"location":"Architecture/CA250728/#context-switching","title":"Context Switching","text":"<p>CPU save current CPU physical thread status, register status backuped by kernel  and kernel load another thread backup to load it into physical thread. </p> <p>Context Switching itself does not reset cache in default. However, changing  entire physical thread to something else will make cache miss, so load for  higher level Cache, or RAM would be required. </p> <p>So, cache misses and memory reloads are side effects of context switching,  rather than part of the switching process itself.  Some CPUs may partially flush or partition L1 cache during a context switch  (e.g., on SMT or security-focused microarchitectures), but not in default. </p>"},{"location":"Architecture/CA250728/#x64-stack-frame-structure","title":"x64 Stack Frame Structure","text":"<p>x64 Debug Mode uses same stack frame management like x86,  using <code>rbp</code> and <code>rsp</code> together like <code>ebp</code> and <code>esp</code> backup is used. </p> <p>However, x64 release mode manages stack frame purely by  adding and subtracting number by using <code>rsp</code> only, with NO use of <code>rbp</code>. </p> <p>Thus, in 64 Bit release mode, stack frame access error due to  <code>rbp</code> backup value in memory contamination by unexpected mistakes like buffer overflow. </p> <p>Still, <code>rip</code> contamination risk is equal, like <code>eip</code> do. Also, when <code>rip</code> contamination  happens it is much harder to figure out because 64 bit stack frame is more sophisticated to analyze. </p>"},{"location":"Architecture/CA250728/#function-uses","title":"Function uses","text":"<p><code>__debugbreak</code> is same as assembly language command <code>int 3</code> aka interrupt by code 3  to break for debug purpose. Unlike <code>abort()</code> or <code>assert()</code>, it only cause pure exception,  so it is best to make dump file <code>.DMP</code>. </p> <p><code>_beginthreadex</code> and return function, when thread created by <code>_beginthreadex</code> ends with  return, then internally system will automatically call <code>_endthreadex</code>. However,  <code>CreateThread</code> should always call <code>ExitThread()</code>. </p>"},{"location":"Architecture/CA250728/#fucntion-pointers","title":"Fucntion pointers","text":"<p>Sometimes function pointers were used instead of switch case. </p> <pre><code>void (*ptr[100])(void); \nptr[0] = nullptr;\nptr[3](); // type == 3\n</code></pre> <p>However, when <code>ptr[0]</code> is called, which is <code>nullptr</code>, then <code>rip</code> would be 0x00000000 address,  causing CPU exception. In C++ virtual functions are way much more recommended. </p>"},{"location":"Architecture/CA250728/#table-based-optimization","title":"Table based Optimization","text":"<p>When calculation cost is high, use pre defined calculation table, using more memory while  saving time for calculation.  For instance, in 1990s and 2000s where calculation speed of decimals took long period of time  <code>sin_table[360]</code> or <code>cos_table[36]</code> were used. Similar logic might apply today, although  trigonometric functions are fast enough by STL nowadays. </p>"},{"location":"Architecture/CA250728/#struct-padding-and-alignment","title":"Struct padding and Alignment","text":"<p>All datatypes must start at boundaries of its type size  Entire struct align will be defined by the biggest member. </p> <p>Goal of this is performance upgrade and atomicity. </p> <p>Suppose cpp struct like this </p> <pre><code>struct DATA {\n    char a; \n    char b; \n    short c; \n    int d; \n    short e; \n    short f; \n    char g; \n}\n</code></pre> <p>Then the padding size will be  <pre><code>|a|b| c |\n|   d   |\n| e | f |\n|g|X|X|X| \n</code></pre> Like this so that only last part has 3 paddings. </p> <p>Padding is <code>align</code>. If it is 1 byte char, it can be anywhere.  However, 2 bytes datatype like <code>short</code> should start with even number address, not row number address.  Similarly, 4 bytes datatyle like <code>int</code> or <code>float</code> should start with address divisible by 4.  Same works for 8 bytes too. This rule applies for all compilers including  Clang GCC and MSVC, and operating systems including Windows Linux MacOS etc.  If struct members are only <code>short</code> and <code>char</code> then it will be align 2 struct. </p> <p>Whatever struct programming language declare, it would be such a space in CPU perspective.  For instance struct DATA above in sample code will be just 16 bytes space for CPU, and each member would be DATA data address like data for a data+1 for b data+2 for c data+4 for d  data+8 for e data+10 for f etc ... Also this rule applies same in 8 bytes logic too.  Then, what would happen for this access? </p> <p><pre><code>int main(){\n    char buffer[100]; \n    int *p = (int*) (buffer + 3); \n    *p = 0; \n    printf(\"a addr : 0x%p \\n\", &amp;a); \n    printf(\"a addr : 0x%p \\n\", p); \n}\n</code></pre> Check this fuction by disassembly with changing memory into ff ff ff ff at the  corresponding address to change value into 00s for better comprehension.  It will move based on boundaries.  Reading in boundaries might be especially tricky in multithreading. If spaces are  divided, then CPU might probably read data twice, meaning that the reading time  between first half and second half of the memory is different.  In multi threading environment it might change value saved at that memory not  aligned to the original data type, so that stored value in memory change during reading. </p> <p>Also, even stack memory saving data and pointer and etc ...  are also operating based on 4 bytes for x86-32 and 8 bytes for x86-64 unit too. </p>"},{"location":"Architecture/CA250728/#dynamic-allocation-padding","title":"Dynamic allocation padding","text":"<p>So, for all memory dynamic allocation process, function <code>malloc</code> will always  give align of 8 bytes for 32 bit OS and 16 bytes for 64 bit OS.  So, dynamic allocation of 1 byte variable like <code>char</code> will result in 7 bytes padding for 32 Bit OS and 15 bytes padding for 64 Bit OS. </p> <p>Large datatype Dynamic allocation like <code>_m128</code> or <code>_m256</code> will  require not just simple <code>malloc</code> but <code>_aligned_malloc</code> to make it work. </p> <p>struct members do not chage position, so even in optimal compile the  order will not change, and it is reason why padding consideration to  declare struct of data. Although RAM is enough these days, Cache memory  is still very limited and expensive, so padding of struct should be used these days. </p> <p>Unit to use during interaction between RAM (Dynamic DRAM) and Cache (Static DRAM)  is 64 Bytes, and it is called as Cache Lines. </p>"},{"location":"Architecture/CA250730/","title":"Time Measurement","text":"<p>Time Measurement </p> <p>Pros and cons of Recursion status check </p> <p><pre><code>void Recurse(int row, int col, int val){\n    if (0 &lt; col) Recurse(row, col - 1, val); \n    if (0 &lt; row) Recurse(row - 1, col, val); \n    if (col &lt; col_size - 1) Recurse(row, col + 1, val);\n    if (row &lt; row_size - 1) Recurse(row + 1, col, val); \n}\n// VS \nvoid Recurse(int row, int col, int val){\n    if (0 &lt; col || 0 &lt; row) return; \n    if(col &lt; col_size - 1 || row &lt; row_size - 1) return;  \n    Recurse(row, col - 1, val); \n    Recurse(row - 1, col, val); \n    Recurse(row, col + 1, val);\n    Recurse(row + 1, col, val); \n}\n</code></pre> Formal one decreases unnecessary function calls, but sometimes  latter one is used due to more clear code readability. </p> <p>Then Which one is better in algorithm, to use  either recursion, or <code>std::stack</code> based DFS or <code>std::queue</code> based BFS? </p> <p>Several students expect that resource consumed for function call might be larger  so that Recursion will be less efficient. </p>"},{"location":"Architecture/CA250730/#time-measurement_1","title":"Time Measurement","text":"<p><code>GetTickCount()</code> is Windows API  <code>timeGetTime()</code> Requires other library </p> <p>Other time measurement functions, for instance <code>chrono</code> in C++. </p> <p><code>GetTickCount()</code> function 1000 means 1 second, but update is not per 1ms but about 10 ~ 16 ms.  Expressable unit does not always represent that update is per unit.  It might be 10 or 15 or whatever, not 1 per tick. </p> <p><code>clock()</code> function is supported by C language. MSDN <code>clock()</code> this one is process clock time. </p> <p>CLOCK_PER_SECOND unit which is default 1000, requires <code>#include &lt;time.h&gt;</code>. </p> <p>Even C++ standard time functions are internally OS independent, so they use WinAPI internally in WinOS </p> <p>QueryPeformanceCounter(&amp;Start); </p> <p>Profiling the speed of the CPU operation, then <code>milisecond</code> unit is too late to measure.  If it is DB Query handle etc ... then milisecond unit might be enough,  but CPU level requires <code>microsecond</code> or even <code>nanosecond</code> is sometimes not enough to measure. </p> <p>Our OS is in multi tasking so check by Ctrl Shift ESC then there are about  200 processes, 2000 threads, and 70000 HANDLEs, which are a lot, and have variation of CPU usage. </p> <p>If function takes about 500ms, then performance measurement would be quite meaningful in <code>ms</code> unit.  However, some CPU functions take barely less than 10 ms, even lower than 1ms. This case,  the external intervention would be significantly meaningful, and  measuring my function logic completely will be unlikely! </p> <p>CPU running my process only is impossible. Even though very accurate time in nanoseconds unit is  acquired, it is just a value returned from somewhere in OS kernel, even time value acquiring moment  might happen process block interrupt or thread context switching. </p> <p>So, it is not getting exactly accurate time, but close to get closest time by several tries. </p>"},{"location":"Architecture/CA250730/#method-1-measurement-of-millions-of-times","title":"Method 1, measurement of millions of times","text":"<p>1 microsecond 2 microseconds 5 microseconds ... about millions of times of check will return estimated time,  and receive the average value. </p>"},{"location":"Architecture/CA250730/#method-2-measuremnt-by-multiple-executions","title":"Method 2, measuremnt by multiple executions","text":"<p>If micorsecond, or even nanosecond unit is not enough to accurately measure the time  like returning 0 or 1 always, for each measurement, then best option would be  repeating that part enough to measure meaningful time. </p>"},{"location":"Architecture/CA250730/#union","title":"Union","text":"<p>Datatype union shares data inside. </p> <pre><code>union DATA {\n    char        ch; \n    short int   sin; \n    int         in; \n}; \n</code></pre> <p>Internal structure will be like this </p> <pre><code>|7|8|1|2|6|3|6|7|\n              \\c/\n            \\sin/\n        \\   in  /\n</code></pre> <p>When extension is C meaning file is <code>.c</code> then <code>typedef</code> declaration is required,  but unnecessary for <code>.cpp</code> file.  For some data types like IP address, <code>union</code> datatype is often used similar to below. </p> <pre><code>struct _DATA { // ip addr 192.168.0.1 \n    char a; // 192 \n    char b; // 168  \n    char c; \n    char d; \n}DATA;\n\nunion udata \n{\n    DATA d; \n    unsigned long u; \n}\n</code></pre> <p>So that it is both accessible in entire data like <code>udata.u</code> and <code>udata.d.a</code> conveniently. </p> <p>Also, even though not used often there is a concept called bit field. </p> <pre><code>struct bitfield {\n    unsigned int bit_a : 3; \n    unsigned int bit_b : 3; \n    unsigned int bit_C : 3; \n}\n</code></pre> <p>Not used nowadays, just know the existence. </p>"},{"location":"Architecture/CA250730/#dynamic-memory-allocation","title":"Dynamic Memory Allocation","text":"<p>Functions like <code>malloc</code> <code>calloc</code> <code>realloc</code>.  Internally <code>realloc</code> does not often reuse that space, but instead just  allocate new space and <code>memcpy</code> data internally.  Unless there are specific reasons to use <code>calloc</code>, do not always try to  reset buffer by <code>calloc</code> but make a code that do not need to reset entire buffer,  unless there is specific reason to use it. </p> <p><code>memcpy</code> can be used, but not a huge difference compared to <code>for</code> loop based copy.  <code>memcpy</code> <code>memmove</code> can be used but should be used carefully and not recommmended often.  </p> <p>Suppose code like this </p> <pre><code>int main () \n{\n    int *p = (int*) malloc (40); \n    p++; \n    free(p); \n}\n</code></pre> <p>This is not trying to free allocated data so free will not work causing heap error. </p>"},{"location":"Architecture/CA250730/#dangling-pointer","title":"Dangling Pointer","text":"<pre><code>int main () \n{\n    int *p = (int*) malloc (40); \n    free(p); \n    *p = 0;\n}\n</code></pre> <p>This code is likely to cause Segmentation Fault if compiler setup about segment is activated.  Typical Dangling Pointer issue, however if segmentation check is not activated, then this code will work!  Which is dangerous and not recommended. </p> <p><code>malloc</code> and other dynamic memory allocation is access to heap in virtual memory.  Internally <code>malloc</code> in Windows OS would work like this. </p> <pre><code>new C++ \n---------\nmalloc C++ \n----------\nheap alloc WINAPI \n---------- \nvirtual alloc WINAPI \n--------------\n</code></pre> <p>In CPU perspective, heap is also just memory.  All Memories operate in Page Unit.  In OS perspective the minimum memory allocation unit is 4KB, \\(2^{12}\\) ALWAYS.  Thus, if your process main thread allocate 1 char then  virtual memory will allocate 4KB in some part of virtual memory, even though  you will use only 1 byte among those 4096 bytes. </p> <p>In OS perspective, unless you do not have segmentation fault check,  access area outside <code>.text</code> and <code>.rodata</code> will not result in direct error and termination.  It would NOT cause compile error. </p> <p>Access itself, Error by Write itself means that Virtual Memory is NOT allocated.  Even though you do <code>malloc (40)</code>, using only 40 bytes, System will allocate 4KB. </p> <p>If 4KB is full, then it will additionally allocate one more page and return pointer.  Also, the access to that 4KB area in virtual memory, if it is still allocated,  will let access by pointer possible, unless segmentation fault check is activated. </p> <p>Debug Build allocation or free then <code>0xdddddddd</code> reset.  Access to virtual memory address that are NOT committed are expressed with <code>??</code> for all bytes.  Access there will cause error. </p> <p>Also freeing all data, so that heap memory space is decommitted, became <code>??</code> for all bytes,  then access to that previously heap memory would cause Error. </p> <p>When OS was 16 bit based there was no concept like virtual memory, only physical memory existed.  Allocation was just a promise. </p> <p>Take a look at about heap address memory, <code>0xfdfdfdfd</code> is similar to <code>__security_cookie</code> in debug  mode stack frame using pointer, so that changing that area <code>0xfdfdfdfd</code> would be checked,  and will pop up error if <code>free</code> is called, causing Debug Error.  This is not error caused by OS or CPU, but by C/C++ programming language and SW!  Not error by access, but error by free memory. </p> <p><code>0xcdcdcdcd</code> <code>0xdddddddd</code> <code>0xfdfdfdfd</code></p> <p>All these memories are debug assistance hits. </p>"},{"location":"Architecture/CA250730/#virtual-memory","title":"Virtual Memory","text":"<p>All unused memory on RAM would get removed while saved on HDD.  However, pretend that virtual memory suppose they are in Memory. </p> <p>Actual RAM exists about 16GB while processes use about 32GB 64GB virtual memory for each  removing unused data from RAM, and if those data unused are now accessed and not in RAM it is Page Fault. </p> <p>OS CPU perspective, process Memory acquisition from SSD HDD to RAM unit is 4KB </p> <p>Committed actually, but not mapped on the physical memory.  Process got memory allocated but still not in virtual memory but considered as commit size. </p> <p>low fragment heap </p>"},{"location":"Architecture/CA250730/#check-contol-to-see-memory-leak","title":"Check Contol to see memory leak","text":"<p>\uc791\uc5c5 \uad00\ub9ac\uc790 </p> <p>\uc791\uc5c5 \uad00\ub9ac\uc790 &gt; \ud504\ub85c\uc138\uc2a4 &gt; \uba54\ubaa8\ub9ac \uc5b4\uac78 \ubcf4\ub358\uac00  \ub354 \uc815\ud655\ud558\uac8c\ub294 \uc791\uc5c5 \uad00\ub9ac\uc790 &gt; \uc138\ubd80 \uc815\ubcf4 &gt; \ud504\ub85c\uc138\uc2a4 \uc9c0\uc815\ud558\uace0  \uc791\uc5c5\uc9d1\ud569\uba54\ubaa8\ub9ac \uba54\ubaa8\ub9ac\ud65c\uc131\uac1c\uc778 \uba54\ubaa8\ub9ac\uac1c\uc778  \ud0ed \uc6b0\ud074\ub9ad &gt; \uc5f4 \uc120\ud0dd &gt; \ucd94\uac00\ud56d\ubaa9 </p> <p>\uba54\ubaa8\ub9ac \ud65c\uc131\uac1c\uc778\uc791\uc5c5\uc9d1\ud569  \uba54\ubaa8\ub9ac \uac1c\uc778\uc791\uc5c5\uc9d1\ud569  \ucee4\ubc0b \ud06c\uae30  \ud65c\uc131 </p> <p>If Commit Memory continue to increase memory leak is suspected </p>"},{"location":"Architecture/CA250801/","title":"Process","text":"<p>Priority Code whatever Detailed Info </p> <p>\uc6b0\uc120 \uc21c\uc704 \uc124\uc815 / \uc2e4\uc2dc\uac04 \ub192\uc74c \ub192\uc740 \uc6b0\uc120 \uc21c\uc704 \ubcf4\ud1b5 \ub0ae\uc740 \uc6b0\uc120 \uc21c\uc704 \ub0ae\uc74c </p> <p>\uc120\ud638\ub3c4 \uc124\uc815 exe \ub97c \uc2e4\ud589\ud560 \uc218 \uc788\ub294 \ud504\ub85c\uc138\uc11c CPU 0 ~ CPU ? \ucd5c\ub300 \uac1c\uc218  </p> <p>STL is originally heavy.  Several wrapped functions inside.  However, these wrapping will be optimized in release mode Compile.  If STL gets inline STL is fast too. </p> <p>Memory access near previous value means more Cache hit likelihood. Further memory means more likelihood of cache miss.  L1 L2 L3 Caches also have miss potential.  The L1 Cache miss and L2 Cache miss has about twice speed difference. </p> <p>Data Structure Stack size will also change performance  Stack LIFO increase sequentially from down to up, so cache miss at the first try is likely inevitable, but after than it gets 100% hit mostly.  Queue has different input and output location FIFO so it has  different input space and output stace so that cache miss is  more likely than stack.  CPU Preference, attach certain process / thread into certain CPU Core,  so that external interruption is minimized during benchmark. </p> <p>Intel CPU all Core share L3 Cache AMD CPU has L3 Cache per each Core  </p>"},{"location":"Architecture/CA250801/#flood-fill","title":"Flood Fill","text":"<p>Pathfinding </p> <p>DFS go to the straignt place so it is hard to find minimum distance by DFS only,  but finding path itself might be quicker than BFS, but more efficient to find shortest path.  Dijakstra includes weight for path finding to figure out more efficient direction,  including weight per each node. </p> <p>A Star is BFS based </p>"},{"location":"Architecture/CA250801/#cache","title":"Cache","text":"<p>One CPU includes multiple cores  Bigger Cache memory means more expensive.  Cache memory size is decided per each architecture. </p> <p>Intel 13th CPU began to have  low electricity Core (Efficiency Core) and  High performance Core. </p> <p>Latest Intel CPUS have sometimes over 20 cores, but it includes  multiple efficiency cores. </p> <p>Threads created through programming also swaps  between performance core and efficiency core. </p> <p>There exists function to let core use high performance, or  give priority. </p> <p>Intel CPU Cores share L3 Cache. they take a look at L1, L2 and L3  when all of them result in miss then it is finally Cache miss. </p> <p>First time read variable from RAM, then it will let L1 L2 L3 Cache  to load the data from RAM to Cache, then CPU register will take  data from Cache. </p> <p>Calculation and measurement of Cache Hit is very challenging,  so realistically watching and measuring L1 Cache Hit only is enough at first. </p> <p>L1 Cache Hit and L3 Cache hit has about over 2 times performance speed difference.  Thus, minimizing L1 Cache miss is the final goal. </p> <p>Cache Miss 100% probability is guaranteed,  However Cache 100% Hit is unlikely due to the multithreading, but see the probability. </p> <p>Temporal Locality - Recently used data is more likely to cache hit  Spacial Locality - Data near previously used data is more likely to cache hit </p> <p>Spacial locality  Memory drag data then drag cache line too.  Cache Line is 64 Byte. Even though only 1 byte is read still  unit is 64 Bytes. When int a and int b exist and read a and b then  if data line including a is dragged then b is also likely to be in cache. </p> <p>Every data should pass Cache to enter CPU register </p> <p>Some devices pass to the RAM without CPU  But not multithreading C++ programming perspective. </p> <p>Non Cache Memory </p> <p>Some people misunderstand that <code>volatile</code> access by direct RAM without cache,  but it is completely false. </p>"},{"location":"Architecture/CA250801/#alignasint-function","title":"<code>alignas(int)</code> function","text":"<p>Waste of Cache Memory </p> <p>Cache Line Function </p> <p>alignas is not often used </p>"},{"location":"Architecture/CA250804/","title":"Cache Memory","text":"<p>The basic transfer unit of a CPU cache is called a cache line,  and its size is typically 64 bytes. This takes advantage of spatial locality,  as the cache loads an entire 64-byte block from RAM at once.</p> <p>Go to \uc791\uc5c5 \uad00\ub9ac\uc790 / \uc131\ub2a5 / CPU  Check L1 Cache Status. For instance, </p> <ul> <li>L1  256 KB </li> <li>L2 1024 KB = 1 MB </li> <li>L3 6000 KB = 6 MB </li> </ul> <p>Hyperthreading Core / Logic Processor (Thread)  One Core is displayed like two Cores, but not actually two. </p> <p>Cache Line is Unit of 64 Byte Size.  </p> <p>Example: L1 Cache = 256 KB Cache Line Size = 64 Bytes  </p> <p>Number of Cache Lines = [ \\frac{256 \\times 1024}{64} = 4096 \\text{ lines} ]</p> <p>L1 Cache Lines Saved  L1 Cache in this CPU can be perceived as having 4096 Cache Lines.  Or, it can be considered like <code>CacheLines[4096]</code> in total. </p> <p>Then, HOW to bring data from Cache Memory?  Brute-forcing through all 4096 cache lines? Of course not.  That would be highly inefficient.</p> <p>Hash Function is not bad try, still there exists better approach.  The lower bits of the memory address are divided into the offset  (to locate the exact byte within a cache line) and the index  (to determine the specific cache set).  The remaining higher bits are used as the tag.</p> <p>Why last parts? because first parts are generally same values.  Generally Stack memory have about few bytes difference, meaning that  their lower bits are different while higher bits generally never change.  <pre><code>|00 00 00 00 00 00 00|00 00 00 00 00 00 00 00 00  \n\\____________________/\n  12 Bits Index &amp; Offset \n</code></pre> If index and offset become higher bits,  it means that lower 20 bits should be changed to change upper bit Offset,  and 26 bits should be changed to change index.  \\(2^{20} = 2097152 = 2\\) MB, $ 2^{26} = 134217728 = 128$ MB.  Thus, using upper bits means Cache will be in no overlap when about  memory access jumping about 128MB in default should happen, meaning  it is very unlikely. </p> <p>Using the lower 12 bits for offset and index is completely valid. Given that  access to some memory regions happen very frequently, inside about 64 KB in  this CPU, the Cache Hit will happen theoretically always (although OS context  switching will not guarantee 100% Cache Hit), maximizing performance of CPU Cache Memory. </p>"},{"location":"Architecture/CA250804/#cache-memory-calculation","title":"Cache Memory Calculation","text":"<p>Calculate How Computer Cache Memory operates, and able to calculate it.  </p> <p>Download tools like <code>CPUZ</code> to check detailed CPU Cache information.  (Download CPU-Z in CPUID)[https://www.cpuid.com/softwares/cpu-z.html] </p> <p>For instance, if L1 Cache is 256KB and physical Core is 4, then  L1 Cache will be distributed 64KB per each core.  It is not always 1 : 1 ratio, but in this example suppose that  Instruction Cache is 32 KB and Data Cache iw 32 KB. </p> <p>Since Cache Line Size is 64 Bytes, 32KB Cache can save 32 X 1024 / 64 = 512 Cache Lines.  This Cache structure can also be described as structure of  Cache_Lines[512]; With 512 Index numbers to access Cache Lines.  Then, how would Cache find out existence of address?  Brute Force from 0 to all 512 existing Cache Lines is very inefficient  and not likely. </p> <p>Suppose 32 Bit Operating System, with 32 Bit Virtual Address. </p> <pre><code>|00 00 00 00 00 00 00 00 00 00|00 00 00|00 00 00| \n \\___________________________/ \\______/ \\______/\n            20 bit              6 bit     6 bit \n               tag              index     offset    \n</code></pre> <p>64 Bit OS will be just more bytes in front.  Technically 32 Bits more tag, but actually about 16 More bits since  address of 512Tb is still far more than enough and 32 more bits is  tremeondously huge numbers. </p> <pre><code>[ 32-bit Address ]\n|  Tag (20b) | Index (6b) | Offset (6b) |\n|___________|____________|_____________|\n            |            \\-&gt; Which Set?\n            \\-&gt; Which Memory Block?\n</code></pre> <p>Since Cache Line is 64 Bytes, 6 Bit Offset is required to represent  all address from 0 to \\(2^6 = 64\\) possible detailed addresses inside  one Cache Line. </p>"},{"location":"Architecture/CA250804/#cache-mapping","title":"Cache Mapping","text":"<p>Cache Collision and N-Way Set Assosiative Cache </p> <p>Direct Mapped Cache </p> <p>One Dimensional Array of Cache sets  Each Cache set include Cache Line, Tag value, and valid bit  1 : 1 Mapping, one cache line assigned to one memory block </p> <p>However, any single cache collision will reset cache.  In function using stack memory only it might be useful,  but modern programming that access heap, .data .rodata .bss etc ...  will result in countless cache miss, as they access  different virtual addresses far away from each other. </p> <p>Fully Associative Cache </p> <p>Letting every cache lines, or 64 bit blocks can be inside Cache Memory,  and perform search for all cache hit check.  This is unrealistic in moder CPU. If really trying to implement this kind of computer organization, very complicated algorithm to check cache hit with  complicated circuit will be required, which is quite unlikely. </p> <p>Set Associative Cache </p> <p>Since fully associative Cache is unlikely to implement algorithm and circuit,  and direct memory access is also inefficient due to the modern programming language  that access stack, heap, data, etc creating several cache collision,  more alternative approach is required nowadays. </p> <p>If Cache with Same Offset can be saved multiple times, like 8 times for each  same offset, so that one Index can save multiple value of addresses, then  Each Index of L1 Cache Memory will save maximum N times (8 in here) of different  addresses with same Index variable. </p> <pre><code>[0] ---- Index [0] Cache Line 0X1F2D3000 // Stack  \n[1]  \\-- Index [1] Cache Line 0X3F4D3000 // Heap\n[2]   \\- Index [2] Cache Line 0X0F123000 // Data \n...      ...   [N] Whatever \n[63]\n</code></pre> <p>This kind of multiple Cache Line save per each Cache Index might be possible.  Then, instead of Direct Memory Access with about 512 KB per each Core,  This Set Associative Cache will have \\(512 / 8 = 64\\) Sets.  This means 64 index, so less bits per each index.  Instead, same index several Memory blocks will be saved without collision. In this case, 8 is <code>ways</code>, so <code>L1</code> will be 64KB 8 Ways Cache.  </p> <p>It means smaller size of cache memory space in linear perspective,  but maximum 8 allowed cache memory save with same offset and index will be allowed. </p> <p>Considering that this same index and offset is very likely when accessing </p>"},{"location":"Architecture/CA250804/#paging-and-cache-memory","title":"Paging and Cache Memory","text":"<p>However, even considering usage of several Memory regions like Heap and .data,  it seems too much to have about 8 ways with 64 KB Cache only per each core,  even though bigger Cache capacity will increase performance. </p> <p>Memory conversion from virtual to physical is through MMU.  TLB (Translation Lookaside Buffer) is a cache to contain mapping information  between virtual and physical address inside MMU. </p> <p>Then how does Cache Memory Saved? Physical Address or Virtual Address?  Virtual Address Based Mapping do NOT require address conversion, but  the problem is that several processes might use same virtual address. </p> <p>Physical Address Based Mapping guarantees uniquity of address, but it enforces  virtual address to physical address conversion for every cache memory data access. </p> <p>Modern CPU combines both physical address and virtual address.  VIPT(Virtually-Indexed, Physically-Tagged). In detail, virtual address is used to find cache index and offset,  while cache hit is checked by physical address tag check.  </p>"},{"location":"Architecture/CA250804/#page-offset","title":"Page Offset","text":"<p>Virtual Memory and Physical Memory Mapping Unit is \\(2^{12} = 4096 = 4\\) KB.  This inner offset is same in both virtual and physical memory .  Thus, if index and offset bit are in the page offset range,  Cache location is detectable without virtual to physical address conversion.  Then, use physical address uppper bits as <code>tags</code> to check it is target data or not. </p> <p>Paging Unit from Virtual Memory to Physical Memory in RAM is always  different and unpredictable. </p> <p>Actually, there is one more crucial reason why modern CPU currently get stuck  in 64KB Cache Memory size which seems not big in several ways.  Virtual Memory and Physical Memory are connected by Paging method. </p> <p>Cache Memory, despite its size gets bigger, maintains maximum 64 Cache Lines per  each L1 Cache, without increasing index from 64 to 128 or 256.  This is mainly due to the Page Offset 4KB, 12 Bit. </p> <p>So, what if Index, aka Set, increases with same Page Offset 4 KB 12 Bit?  If index and offset are handled Inside 12 Bit, data processing is possible  without MMU. </p> <p>However, if index became 7 bits, total index + offset gets bigger than page offset,  so it could consider DIFFERENT physical Frame Addresses mapped from Virtual  Page Addresses would be unpredictable, existing TWO Frames.  Thus, either MMU pass would be necessary, or virtual memory based  index calculation will result in unpredictable behavior between two  different Physical RAM Frames mapped from one virtual page. </p> <p>In the future, it will happen simultaneously that </p> <ul> <li>Page Offset 4 KB to 8 KB </li> <li>Cache Line Maximum Index 64 to 128 </li> </ul>"},{"location":"Architecture/CA250804/#vocabulary","title":"Vocabulary","text":"<p>Cache Line </p> <ul> <li>Cache Memory Basic Transfer Unit of 64 Bytes </li> <li>One Memory access bring 64 Bytes Unit, Spacial Locality </li> </ul> <p>Frame </p> <ul> <li>Physical Memory Unit Maximum  4 KB, 4096 Bytes </li> <li>Mapped to Virtual Memory </li> </ul> <p>Page Offset </p> <ul> <li>Bytes location inside Page </li> <li>Virtual Memory Page Unit Maximum 4 KB, 4096 Bytes </li> <li>Virtual Memory and Physical Memory Low 12 Bits are Same </li> </ul> <p>Index (Set) </p> <ul> <li>Cache Data input expected Cache Set </li> <li>\\(2^{index_bits}\\) number of Sets(index) exists </li> <li>Each set has one Cache Line in Direct Mapped Cache </li> <li>Each set has several Cache Lines in N-Way Set Assosiative Cache </li> </ul> <p>Tag </p> <ul> <li>Check Data saved in Cache is what block </li> <li>Use upper bit address index </li> <li>Except Index and OFfset </li> </ul> <p>Way (N-Way) </p> <ul> <li>Cache Lines per each Set (Index) </li> <li>For instance, 4-Way, one index set 8 cache lines savable </li> <li>Used in Set Associative Cache </li> </ul> <p>TLB (Translation Lookaside Buffer) </p> <ul> <li>Address Virtual to Physical Conversion Cache in MMU </li> <li>Quickly switch virtual address to frequently used Physical Address </li> </ul> <p>Locality  - Temporal Locality : Recently used data likely to be reused  - Spatial  Locality : Access to address likely to cache hit recent address, Cache Line </p>"},{"location":"Architecture/CA250806/","title":"CPU Cache Memory Simulator","text":"<p>Cache Architecture </p> <ul> <li>Cache Line  = \\(2^6 = 64\\) Bytes </li> <li>Cache Index = \\(2^6 = 64\\)  Sets </li> <li>Cache Ways  = (Cache Size) / (Cache Line Size X Sets Num)</li> </ul> <p>Address Composition </p> <p>Page Offset = \\(2^{12} = 4\\) KB. </p> <p>Virtual Memory to Physical Memory Conversion is through  MMU (Memory Management Unit) and TLB  (Tranlation Lookaside Buffer) is a cache used for  Mapping Virtual Address to Physical RAM Address. </p> <p>Cache Hit Simulator </p>"},{"location":"Architecture/CA250806/#reasons-of-cache-miss-and-solution","title":"Reasons of Cache Miss and Solution","text":"<p>Same index collision.  For instance, every element with 4KB distance will collide. </p> <p>Also, too much access to different Cache Lines,  or variable access not considering spacial locality so much that  data is not continuous. </p> <p>This can be solved by  decreasing index collision, memory location adjustment  struct replacement by using <code>alignas(size_t bytes)</code>. </p> <p>Data Oriented Design (DOD), placing close data nearby, so that it is  more computer efficient in cache access.  It is opposite of Object Oriented Programming (OOP) that is human friendly. </p> <p>CPU popeline and asynchronous command processing </p> <p>CPU Pipeline 5 Steps  Fetch Decode Execute Write Commit </p> <p>Superscalar  Process several commands simultaneously  Run 8 instead of 5 steps simultaneously in CPU. </p> <p>Out of Order Execution (OoOE) (\ube44\uc21c\ucc28\uc801 \uba85\ub839\uc5b4 \ucc98\ub9ac) CPU execute commands different order of the input </p>"},{"location":"Architecture/CA250806/#cache-write-policy","title":"Cache Write Policy","text":"<p>Write Back </p> <p>Write on Cache First, than later write on RAM When address is removed from Cache. </p> <p>Write Through </p> <p>Write on Cache and simultaneously Write on RAM too. </p> <p>Modern CPU  Instruction Cache -&gt; Write Through  Data Cache -&gt; Write Back </p> <p>L1 L2 are Core dependent.  L3 is shared for Intel, while independent and linked by circuits in AMD  Cache Synchronization is done by MESI Cache Protocol </p> <ul> <li>M Modified : Data Changed, not same as RAM </li> <li>E Exclusive : Only in Cache, Same as RAM </li> <li>S Shared : Several Caches accessing, Same as RAM </li> <li>I Invalid : Not valid, not used </li> </ul> <p>MESI status unit is Cache Line 64 Bytes.  When multiple cores cache same address, synchronization process happens.  When Shared Cache Line is Modified by one Core of CPU, </p> <ol> <li>Shared Cache Line is accessed by one CPU Core </li> <li>Cache Line in Shared State Change into Exclusive State </li> <li>Other Cache Line Loaded onto other CPU Core L1 L2 Cache became Invalid </li> <li>Cache is finally written from Core to L3, so turn into Shared State after Writing </li> </ol>"},{"location":"Architecture/CA250806/#simulate-cache-memory","title":"Simulate Cache Memory","text":"<p>Calculate Cache Hit and Miss Rates </p> <p>Default Info</p> <p>Modern CPU Cache Memory Status </p> <p>Cache Line Size: 64 Bytes </p> <p>L1 Inst Cache Size per Core : 32 KB X 8 Ways  L1 Data Cache Size per Core : 32 KB X 8 Ways </p> <p>Testing Environment Check </p> <p>Since OS might have context switching, 100% Cache Hit Rate is not possible. However, Cache Miss Rate 100% is possible. </p> <pre><code>#include &lt;iostream&gt;\n#include &lt;windows.h&gt;\n#include &lt;intrin.h&gt;\n\nusing namespace std;\n\nconstexpr UINT WAYS_NUM = 8; // 8 ways \nconstexpr UINT LINE_SIZE = 64; // 64 bytes \nstruct CacheLine \n{\n    uintptr_t ptr[WAYS_NUM] = { 0, }; // Pointer \n    __int64 stamp[WAYS_NUM] = { 0, }; // Time Stamp \n\n    BOOL hit (uintptr_t addr)\n    {\n        UINT lowest_idx = 0;\n        for (UINT i = 0; i &lt; WAYS_NUM; ++i)\n        {\n            if ((ptr[i] &gt;&gt; 6) == (addr &gt;&gt; 6))\n            {\n                stamp[i] = __rdtsc(); \n                return TRUE; \n            } \n            else if (stamp[i] &lt; stamp[lowest_idx])\n            {   // Less recently used, smallest timestamp \n                lowest_idx = i; \n            }\n        }\n        ptr  [lowest_idx] = addr; \n        stamp[lowest_idx] = __rdtsc(); \n        return FALSE; \n    }\n}; \n</code></pre> <p>Based on this Cache Simulator,  LRU (Least Recently Used) Cache Algorithm Usage is optimized.  Time measurement was based on <code>__rdtsc()</code> value that return <code>__int64</code>.  This function is perfect to measure passed time in process. </p> <pre><code>class Cache\n{\nprivate: \n    CacheLine cache[LINE_SIZE];\n    UINT  hit_count[LINE_SIZE] = { 0, }; \n    UINT miss_count[LINE_SIZE] = { 0, }; \n\n    Cache(const Cache&amp;) = delete; // No copy constructor\n    Cache&amp; operator=(const Cache&amp;) = delete; // No assignment operator\n    Cache () = default; \n    ~Cache() = default; \n\npublic: \n    static Cache&amp; getInstance()\n    {\n        static Cache instance;\n        return instance;\n    }\n\n    void check(uintptr_t addr)\n    {\n        UINT index = (addr &gt;&gt; 6) &amp; 0x3f; \n        if (cache[index].hit(addr)) hit_count[index]++;\n        else miss_count[index]++;         \n    }\n}; \n</code></pre> <p>Cache Simulator was implemented by Singleton Design Pattern. Test result is following. </p> <pre><code>   n =      16, n^2  =     256\nHits =     244, Miss =      12, Ratio = 95.312500\nHits =     256, Miss =       0, Ratio = 100.000000\n   n =      32, n^2  =    1024\nHits =    1257, Miss =      23, Ratio = 98.203125\nHits =    1024, Miss =       0, Ratio = 100.000000\n   n =      64, n^2  =    4096\nHits =    5057, Miss =      63, Ratio = 98.769531\nHits =    4096, Miss =       0, Ratio = 100.000000\n   n =     128, n^2  =   16384\nHits =   20208, Miss =     272, Ratio = 98.671875\nHits =   16384, Miss =       0, Ratio = 100.000000\n   n =     192, n^2  =   36864\nHits =   52850, Miss =     398, Ratio = 99.252556\nHits =   36533, Miss =     331, Ratio = 99.102104\n   n =     256, n^2  =   65536\nHits =  101261, Miss =    1139, Ratio = 98.887695\nHits =   64463, Miss =    1073, Ratio = 98.362732\n   n =     320, n^2  =  102400\nHits =  165332, Miss =    2604, Ratio = 98.449409\nHits =   96800, Miss =    5600, Ratio = 94.531250\n   n =     384, n^2  =  147456\nHits =  241949, Miss =    7907, Ratio = 96.835381\nHits =  121809, Miss =   25647, Ratio = 82.607018\n   n =     448, n^2  =  200704\nHits =  319356, Miss =   28804, Ratio = 91.726791\nHits =   35647, Miss =  165057, Ratio = 17.760981\n   n =     512, n^2  =  262144\nHits =  293706, Miss =  169142, Ratio = 63.456253\nHits =  105603, Miss =  156541, Ratio = 40.284348\n   n =     640, n^2  =  409600\nHits =  508715, Miss =  163029, Ratio = 75.730484\nHits =   64839, Miss =  344761, Ratio = 15.829834\n   n =     768, n^2  =  589824\nHits =  645327, Miss =  354097, Ratio = 64.569893\nHits =   14187, Miss =  575637, Ratio =  2.405294\n   n =     896, n^2  =  802816\nHits =  804318, Miss =  588322, Ratio = 57.754913\nHits =       0, Miss =  802816, Ratio =  0.000000\n   n =     960, n^2  =  921600\nHits =  907056, Miss =  817360, Ratio = 52.600765\nHits =     930, Miss =  920670, Ratio =  0.100911\n   n =    1024, n^2  = 1048576\nHits = 1032967, Miss =  937209, Ratio = 52.430191\nHits =    6024, Miss = 1042552, Ratio =  0.574493\n   n =    1088, n^2  = 1183744\nHits = 1171108, Miss = 1061212, Ratio = 52.461475\nHits =       0, Miss = 1183744, Ratio =  0.000000\n   n =    2048, n^2  = 4194304\nHits = 4128429, Miss = 1249619, Ratio = 76.764450\nHits =   37269, Miss = 4157035, Ratio =  0.888562\n   n =    4096, n^2  = 16777216\nHits = 16551401, Miss = 4420119, Ratio = 78.923233\nHits =   64309, Miss = 16712907, Ratio =  0.383312\n   n =    8192, n^2  = 67108864\nHits =66121214, Miss = 17764866, Ratio = 78.822632\nHits =  109299, Miss = 66999565, Ratio =  0.162868\n</code></pre>"},{"location":"Architecture/CA250811/","title":"Hash Function","text":"<p>Input Output  Asynchronous I O </p> <p>Overlapped I/O is designed to return function very quickly  returning the function before I/O is complete.  I/O is done by Device, rather than OS. </p> <p>CoRoutine is NOT Completion Routine of Overlapped Non-Blocking I/O </p> <p>Virtual Allocation </p> <p><code>VirtualAlloc</code> <code>HeapAlloc</code> </p> <p>C Style Casting </p> <p><code>static_cast</code> <code>dynamic_cast</code> </p> <p>Operator priority </p> <p>SleepEx </p> <p>Alertable</p> <p>All Threads attached to different Core use different cache data.  Data inside Cache is managed by cache lin eunit. </p> <p>If there are two close variables inside one cache line 64KB  and get modified by each different thread, it might be problematic.  Suppose <code>struct Type {int a, int b};</code>. This data is  very likely to be inside same cache line. </p> <p>Core 1 Reads a only  Core 2 Reads b only </p> <p>When Write happens, among MESI  One cache line that is written by Core 1, then  That cache line will become exclusive, and the same address cache line  existing in Core 2 will become invalid.  Core 2 will wait for that cache line becoming shared status again until  that Cache Line is rewritten completely. </p> <p>Cache Line 64 Byte size based <code>struct</code> is made to test Cache Line MESI. </p> <pre><code>struct Point {\n    volatile int x; \n    alignas(64) // Ensure that the structure is aligned to a 64-byte boundary\n    // char padding[64 - sizeof(int)];\n    volatile int y;\n};\n\nPoint g_point; // Global Variable \n</code></pre> <p>Test function for the thread is following. </p> <pre><code>static unsigned int __stdcall testa(void*) { \n    SetThreadAffinityMask(GetCurrentThread(), 0x2);\n    ULONGLONG dwStart = GetTickCount64();\n    LARGE_INTEGER start, end, frequency;\n    QueryPerformanceFrequency(&amp;frequency);\n\n    for (size_t i = 0; i &lt; ((size_t)2 &lt;&lt; 8); ++i) {\n        QueryPerformanceCounter(&amp;start);\n        for (size_t i = 0; i &lt; ((size_t)2 &lt;&lt; 20); ++i) g_point.x++;\n        QueryPerformanceCounter(&amp;end);\n        double elapsed = (double)(end.QuadPart - start.QuadPart) * 1000.0 / frequency.QuadPart;\n        printf(\"Thread A inner loop took %.3f ms\\n\", elapsed);\n    }\n\n    ULONGLONG   dwEnd = GetTickCount64();\n    Sleep(100); // Ensure that thread A has time to run\n    printf(\"Thread A: %llu ms\\n\", dwEnd - dwStart); \n    printf(\"Pointer A: %p, B: %p\\n\", &amp;g_point.x, &amp;g_point.y);\n    return 0;\n}\n</code></pre> <p>Reading Function is implemented to check Cache Line  </p> <pre><code>static unsigned int __stdcall testr(void*) {\n    SetThreadAffinityMask(GetCurrentThread(), 0x3);\n    ULONGLONG dwStart = GetTickCount64();\n    LARGE_INTEGER start, end, frequency; \n\n    volatile int* c = &amp;g_point.y; \n    volatile int dummy = 0;\n\n    QueryPerformanceFrequency(&amp;frequency);\n    for (size_t i = 0; i &lt; ((size_t)2 &lt;&lt; 8); ++i) {\n        QueryPerformanceCounter(&amp;start);\n        for (size_t i = 0; i &lt; ((size_t)2 &lt;&lt; 20); ++i) {\n            dummy += *c;\n        }\n        QueryPerformanceCounter(&amp;end);\n        double elapsed = (double)(end.QuadPart - start.QuadPart) * 1000.0 / frequency.QuadPart;\n        printf(\"Thread R inner loop took %.3f ms\\n\", elapsed);\n    }\n\n    ULONGLONG   dwEnd = GetTickCount64();\n    Sleep(100); // Ensure that thread B has time to run\n    printf(\"Thread R: %llu ms\\n\", dwEnd - dwStart);\n    printf(\"Pointer A: %p, B: %p\\n\", &amp;g_point.x, &amp;g_point.y); \n    printf(\"Pointer C: %p\\n\", c);\n    return 0;\n}\n</code></pre> <p>Main function is following. </p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;process.h&gt; \n#include &lt;iostream&gt;\n\nusing namespace std; \n\nint main(int argc, char* argv[])\n{\n    HANDLE* hThreads = new HANDLE[2];\n\n    unsigned int threadAID; \n    unsigned int threadBID;\n\n    hThreads[0] = (HANDLE)_beginthreadex(\n        NULL, 0, &amp;testa, NULL, 0, &amp;threadAID\n    ); \n\n    if (hThreads[0] == NULL) {\n        printf(\"Error creating thread A: %d\\n\", GetLastError());\n        return 1;\n    }\n\n    hThreads[1] = (HANDLE)_beginthreadex(\n        NULL, 0, &amp;testr, NULL, 0, &amp;threadBID\n    ); \n\n    if (hThreads[1] == NULL) {\n        printf(\"Error creating thread B: %d\\n\", GetLastError());\n        return 1;\n    }\n\n    WaitForMultipleObjects(\n        2, hThreads, TRUE, INFINITE\n    );\n\n    CloseHandle(hThreads[0]);\n    CloseHandle(hThreads[1]);\n\n    delete [] hThreads; \n\n    return 0;\n}\n</code></pre>"},{"location":"Architecture/Exam/1/","title":"1","text":""},{"location":"Architecture/Exam/1/#_1","title":"\ud575\uc2ec \uc694\uc57d: \uc5b4\uc148\ube14\ub9ac \ubc0f \uba54\ubaa8\ub9ac \uad6c\uc870 \ud83d\udcdd","text":"<p>\uc774 \ub178\ud2b8\ub294 Windows OS\uc758 \uc2a4\ud0dd \uba54\ubaa8\ub9ac, CPU\uc758 \ub3d9\uc791 \uc6d0\ub9ac, \uc5b4\uc148\ube14\ub9ac\uc5b4\uc758 \uae30\ubcf8 \uac1c\ub150\uc744 \uc815\ub9ac\ud55c \ub0b4\uc6a9\uc785\ub2c8\ub2e4. \ud2b9\ud788 C/C++ \ud504\ub85c\uadf8\ub7a8\uc774 \ucef4\ud30c\uc77c\ub418\uc5b4 \uc2e4\uc81c \uae30\uacc4\uc5b4(\uc5b4\uc148\ube14\ub9ac\uc5b4)\ub85c \uc5b4\ub5bb\uac8c \ubcc0\ud658\ub418\uace0 \uc2e4\ud589\ub418\ub294\uc9c0\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd94\uace0 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/1/#1-windows-os","title":"1. Windows OS\uc640 \uc2a4\ud0dd","text":"<ul> <li>\uc2a4\ud0dd \ud06c\uae30: Windows OS\uc5d0\uc11c \uc2a4\ud0dd \uba54\ubaa8\ub9ac\uc758 \uae30\ubcf8 \ud06c\uae30\ub294 1MB \uc785\ub2c8\ub2e4. \uc774 \ud06c\uae30\ub97c \ucd08\uacfc\ud558\uba74 \uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0(Stack Overflow) \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li>\uc2a4\ud0dd\uc758 \uc5ed\ud560: \uc2a4\ud0dd\uc740 \ud568\uc218 \ud638\ucd9c \uc2dc \uc9c0\uc5ed \ubcc0\uc218, \ub9e4\uac1c\ubcc0\uc218, \ubcf5\uadc0 \uc8fc\uc18c \ub4f1\uc744 \uc800\uc7a5\ud558\ub294 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc785\ub2c8\ub2e4. \ud568\uc218\uac00 \ud638\ucd9c\ub418\uba74 \uc2a4\ud0dd\uc5d0 \uc313\uc774\uace0, \ud568\uc218\uac00 \uc885\ub8cc\ub418\uba74 \ud574\ub2f9 \uc2a4\ud0dd \ud504\ub808\uc784\uc740 \uc18c\uba78\ub429\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/1/#2-cpu","title":"2. CPU\uc640 \uba54\ubaa8\ub9ac \uacc4\uce35","text":"<ul> <li>CPU \uc5f0\uc0b0: CPU\ub294 \uc624\uc9c1 \ub808\uc9c0\uc2a4\ud130(Register)\uc5d0 \uc788\ub294 \uac12\ub9cc \uc5f0\uc0b0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. RAM, SSD \ub4f1 \ub2e4\ub978 \ubcf4\uc870 \uba54\ubaa8\ub9ac\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub294 \uc5f0\uc0b0 \uc804\uc5d0 \ubc18\ub4dc\uc2dc \ub808\uc9c0\uc2a4\ud130\ub85c \uc62e\uaca8\uc640\uc57c \ud569\ub2c8\ub2e4.</li> <li>\uba54\ubaa8\ub9ac \uacc4\uce35: CPU\ub294 \uc5f0\uc0b0 \uc18d\ub3c4 \uc21c\uc11c\ub300\ub85c \ub808\uc9c0\uc2a4\ud130 -&gt; \uce90\uc2dc -&gt; RAM -&gt; SSD \uc21c\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc8fc\uace0\ubc1b\uc2b5\ub2c8\ub2e4. \uc774\ub4e4 \uc0ac\uc774\uc758 \ub370\uc774\ud130 \ud1b5\uc2e0\uc740 \ubc84\uc2a4(BUS)\ub97c \ud1b5\ud574 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</li> <li>CPU \uba85\ub839\uc5b4: CPU\ub294 \uc218\ubc31 \uac00\uc9c0\uc758 \ub2e8\uc21c\ud55c \uae30\uacc4\uc5b4(0\uacfc 1) \uba85\ub839\uc5b4\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uae30\uacc4\uc5b4\ub97c \uc0ac\ub78c\uc774 \uc774\ud574\ud558\uae30 \uc27d\uac8c \ub9cc\ub4e0 \uc5b8\uc5b4\uac00 \ubc14\ub85c \uc5b4\uc148\ube14\ub9ac\uc5b4\uc785\ub2c8\ub2e4. </li> </ul>"},{"location":"Architecture/Exam/1/#3","title":"3. \uc5b4\uc148\ube14\ub9ac\uc5b4\uc758 \uc774\ud574","text":"<ul> <li>\ud559\uc2b5 \ubaa9\ud45c: \uc5b4\uc148\ube14\ub9ac \ucf54\ub529\uc774 \uc544\ub2c8\ub77c \ub3c5\ud574(\uc77d\uae30)\uac00 \ubaa9\ud45c\uc785\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc744 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \uc9c1\uc811 \uad6c\ud604\ud558\ub294 \uac83\uc740 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0, C/C++ \ucf54\ub4dc\uac00 \uc5b4\ub5a4 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ubcc0\ud658\ub418\ub294\uc9c0 \uc774\ud574\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.</li> <li>32\ube44\ud2b8 vs. 64\ube44\ud2b8: \ud559\uc2b5\uc6a9\uc73c\ub85c\ub294 32\ube44\ud2b8 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \uc2dc\uc791\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4. 64\ube44\ud2b8 \ucef4\ud30c\uc77c\ub7ec\ub294 \uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \uc704\ud574 \ucf54\ub4dc\ub97c \ub354 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>\ub808\uc9c0\uc2a4\ud130 \uc774\ub984:<ul> <li>e\ub85c \uc2dc\uc791: 32\ube44\ud2b8 \ub808\uc9c0\uc2a4\ud130 (eax, ebx, ecx \ub4f1)</li> <li>r\ub85c \uc2dc\uc791: 64\ube44\ud2b8 \ub808\uc9c0\uc2a4\ud130 (rax, rbx, rcx \ub4f1)</li> <li>\ud558\uc704 \ud638\ud658\uc131\uc744 \uc704\ud574 64\ube44\ud2b8 CPU\uc5d0\uc11c\ub3c4 32, 16, 8\ube44\ud2b8 \ub808\uc9c0\uc2a4\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> </li> <li>\uc8fc\uc694 \ub808\uc9c0\uc2a4\ud130:<ul> <li>ebp (Extended Base Pointer): \ud604\uc7ac \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. \ud568\uc218 \ub0b4\ubd80\uc758 \uc9c0\uc5ed \ubcc0\uc218 \uc704\uce58\ub97c \uacc4\uc0b0\ud558\ub294 \uae30\uc900\uc810\uc774 \ub429\ub2c8\ub2e4.</li> <li>esp (Extended Stack Pointer): \ud604\uc7ac \uc2a4\ud0dd\uc758 \ucd5c\uc0c1\ub2e8 \uc8fc\uc18c\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. \uc2a4\ud0dd\uc5d0 \ub370\uc774\ud130\uac00 \uc313\uc774\uac70\ub098(push) \uc81c\uac70\ub420 \ub54c(pop) \uc774 \uac12\uc774 \ubcc0\ud569\ub2c8\ub2e4.</li> <li>eax, ecx, esi, edi: \uc6a9\ub3c4\uac00 \uc815\ud574\uc838 \uc788\uc9c0\ub9cc, \ubc94\uc6a9\uc801\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub808\uc9c0\uc2a4\ud130\uc785\ub2c8\ub2e4.<ul> <li>ecx: <code>rep</code>\ub098 <code>loop</code> \uac19\uc740 \ubc18\ubcf5\ubb38 \uad00\ub828 \uba85\ub839\uc5b4\uc5d0\uc11c \uce74\uc6b4\ud130 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.</li> <li>esi, edi: \uc8fc\ub85c \uba54\ubaa8\ub9ac \ubcf5\uc0ac \uc791\uc5c5 \uc2dc \uc0ac\uc6a9\ub429\ub2c8\ub2e4. <code>esi</code>\ub294 \uc18c\uc2a4(Source), <code>edi</code>\ub294 \ubaa9\uc801\uc9c0(Destination)\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Architecture/Exam/1/#4","title":"4. \ud568\uc218 \ud638\ucd9c\uacfc \uc2a4\ud0dd \ud504\ub808\uc784","text":"<ul> <li>\uc9c0\uc5ed \ubcc0\uc218 \uc800\uc7a5: \ud568\uc218\uc758 \uc9c0\uc5ed \ubcc0\uc218\ub294 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub418\uba70, \ud568\uc218 \uc885\ub8cc \uc2dc \uc790\ub3d9\uc73c\ub85c \uc18c\uba78\ub429\ub2c8\ub2e4.</li> <li>\uc808\ub300 \uc8fc\uc18c vs. \uc0c1\ub300 \uc8fc\uc18c:<ul> <li>\uc804\uc5ed \ubcc0\uc218: \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \ub0b4\ub0b4 \uc8fc\uc18c\uac00 \uace0\uc815\ub418\uc5b4 \uc788\uc5b4 \uc808\ub300 \uc8fc\uc18c\ub85c \uc811\uadfc\ud569\ub2c8\ub2e4.</li> <li>\uc9c0\uc5ed \ubcc0\uc218: \ud568\uc218\uac00 \uc5b8\uc81c \ud638\ucd9c\ub418\ub290\ub0d0\uc5d0 \ub530\ub77c \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\ub294 \uc704\uce58\uac00 \ub2ec\ub77c\uc9c0\ubbc0\ub85c \uc0c1\ub300 \uc8fc\uc18c\ub85c\ub9cc \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc2a4\ud0dd \ud504\ub808\uc784: \ud568\uc218\ub294 \uc790\uc2e0\uc758 \uc2a4\ud0dd \ud504\ub808\uc784(ebp\ubd80\ud130 esp\uae4c\uc9c0\uc758 \uc601\uc5ed)\uc744 \uae30\uc900\uc73c\ub85c \uc9c0\uc5ed \ubcc0\uc218\uc758 \uc704\uce58\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.</li> </ul> </li> <li>\uc2a4\ud0dd \uacf5\uac04 \ud655\ubcf4: \ucef4\ud30c\uc77c\ub7ec\ub294 \ud568\uc218 \uc9c4\uc785 \uc2dc \ud544\uc694\ud55c \uc9c0\uc5ed \ubcc0\uc218 \uc804\uccb4 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\uc5ec <code>sub esp, [\ud06c\uae30]</code> \uba85\ub839\uc5b4\ub85c \ud55c \ubc88\uc5d0 \uc2a4\ud0dd \uacf5\uac04\uc744 \ud655\ubcf4\ud569\ub2c8\ub2e4. \ubcc0\uc218\uac00 1\uac1c\ub4e0 1,000\uac1c\ub4e0 \ud655\ubcf4\ud558\ub294 \uc2dc\uac04\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4.</li> <li>\ub514\ubc84\uadf8 \ubaa8\ub4dc: \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \ucf54\ub4dc \uc218\uc815 \ub4f1\uc744 \uc704\ud574 \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \uc2a4\ud0dd \uacf5\uac04\uc744 \ubbf8\ub9ac \ub9ce\uc774 \ud655\ubcf4\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/1/#5","title":"5. \uc5b4\uc148\ube14\ub9ac\uc5b4 \uba85\ub839\uc5b4","text":"<ul> <li><code>mov</code>: \ub808\uc9c0\uc2a4\ud130 \uac04 \ub610\ub294 \ub808\uc9c0\uc2a4\ud130\uc640 \uba54\ubaa8\ub9ac \uac04\uc758 \uac12\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4.</li> <li><code>lea</code> (Load Effective Address): \uc8fc\uc18c\ub97c \uacc4\uc0b0\ud558\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. <code>mov</code>\uc640 \uc720\uc0ac\ud558\uc9c0\ub9cc, \uacc4\uc0b0\ub41c \uac12\uc744 \uc8fc\uc18c\ub85c \uc778\uc2dd\ud558\uc5ec \ub300\uc785\ud569\ub2c8\ub2e4. \uac00\ub3c5\uc131\uc744 \uc704\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> <li><code>push</code>: \uc2a4\ud0dd\uc5d0 \ub370\uc774\ud130\ub97c \ub123\uace0 <code>esp</code>\ub97c \uc790\ub3d9\uc73c\ub85c \uac10\uc18c\uc2dc\ud0b5\ub2c8\ub2e4. (32\ube44\ud2b8 \uae30\uc900 4\ubc14\uc774\ud2b8, 64\ube44\ud2b8 \uae30\uc900 8\ubc14\uc774\ud2b8 \ub2e8\uc704)</li> <li><code>pop</code>: \uc2a4\ud0dd\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ube7c\uace0 <code>esp</code>\ub97c \uc790\ub3d9\uc73c\ub85c \uc99d\uac00\uc2dc\ud0b5\ub2c8\ub2e4.</li> <li><code>[ ]</code> (\ub300\uad04\ud638): \ud3ec\uc778\ud130 \uc5ed\ucc38\uc870\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. <code>mov eax, [ebp]</code>\ub294 <code>ebp</code>\uac00 \uac00\ub9ac\ud0a4\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc758 \uac12\uc744 <code>eax</code>\uc5d0 \uac00\uc838\uc624\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/1/#6","title":"6. \ub514\ubc84\uae45 \ud301","text":"<ul> <li>Visual Studio \ub514\ubc84\uae45:<ul> <li>F9: \ube0c\ub808\uc774\ud06c \ud3ec\uc778\ud2b8 \uc124\uc815</li> <li>F5: \ub514\ubc84\uadf8 \uc2dc\uc791</li> <li><code>Ctrl + Alt + D</code>: \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d \uc5f4\uae30</li> <li>\ub514\ubc84\uadf8 \ubaa8\ub4dc\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\uba74\uc11c \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d\uc744 \ub744\uc6cc C/C++ \ucf54\ub4dc\uac00 \uc5b4\ub5a4 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ubcc0\ud658\ub418\ub294\uc9c0 \ub208\uc73c\ub85c \uc9c1\uc811 \ud655\uc778\ud558\ub294 \uc5f0\uc2b5\uc744 \ud558\uba74 \uc88b\uc2b5\ub2c8\ub2e4.</li> </ul> </li> </ul> <p>\uc774 \ub178\ud2b8\ub97c \ud1b5\ud574 \uc5b4\uc148\ube14\ub9ac\uc640 \uba54\ubaa8\ub9ac \uad6c\uc870\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \ub192\uc774\uace0, \uc2e4\uc81c \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \ucef4\ud4e8\ud130 \uad6c\uc870 \uc0ac\uc774\uc758 \uc5f0\uacb0\uace0\ub9ac\ub97c \ud30c\uc545\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub418\uae38 \ubc14\ub78d\ub2c8\ub2e4. \ud83d\udcbb\ud83e\udd13</p>"},{"location":"Architecture/Exam/2/","title":"2","text":""},{"location":"Architecture/Exam/2/#_1","title":"\ud575\uc2ec \uc694\uc57d: \ucef4\ud30c\uc77c\ub7ec, \uc2a4\ud0dd, \ub514\ubc84\uae45 \ud83d\udee0\ufe0f","text":"<p>\uc774 \ub178\ud2b8\ub294 \ucef4\ud30c\uc77c \uacfc\uc815, \uc2a4\ud0dd \uba54\ubaa8\ub9ac \uad00\ub9ac, \uadf8\ub9ac\uace0 \ub514\ubc84\uae45\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc744 \ub2e4\ub8f9\ub2c8\ub2e4. \ud2b9\ud788 C/C++ \ucf54\ub4dc\uc5d0\uc11c \ubcc0\uc218 \uc120\uc5b8, \ud568\uc218 \ud638\ucd9c, \uc870\uac74\ubb38 \ub4f1\uc774 \uc5b4\ub5bb\uac8c \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub85c \ubcc0\ud658\ub418\uace0 \uc2e4\ud589\ub418\ub294\uc9c0\uc5d0 \ub300\ud55c \uc2ec\ub3c4 \uc788\ub294 \ub0b4\uc6a9\uc744 \ub2f4\uace0 \uc788\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/2/#1","title":"1. \ucef4\ud30c\uc77c\ub7ec\uc640 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4","text":"<ul> <li>\ucef4\ud30c\uc77c\ub7ec\uc758 \uc5ed\ud560: \uae30\ubcf8\uc801\uc778 \ucef4\ud30c\uc77c \uacfc\uc815(\uc804\ucc98\ub9ac, \ucef4\ud30c\uc77c, \ub9c1\ud0b9)\uc744 \uc774\ud574\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. \uc624\ub958 \ubc1c\uc0dd \uc2dc \uc5b4\ub290 \ub2e8\uacc4\uc5d0\uc11c \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0 \ud310\ub2e8\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4.</li> <li>\uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4: \uac8c\uc784 \uac1c\ubc1c \ub4f1\uc5d0\uc11c \ubc29\ub300\ud55c \uc591\uc758 \ub85c\uc9c1\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uad6c\ud604\ud558\uae30 \uc704\ud574 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4(Scriptor)\uac00 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\ub294 \uc0ac\uc2e4\uc0c1 \uc778\ud130\ud504\ub9ac\ud130 \uc5b8\uc5b4\ub85c, \ucf54\ub4dc\ub97c \ud55c \uc904\uc529 \uc2e4\ud589\ud558\uba70 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc758\uc874\ud558\uc5ec \uc791\ub3d9\ud569\ub2c8\ub2e4.<ul> <li>\uc608\uc2dc: JavaScript, C# (.NET \ud504\ub808\uc784\uc6cc\ud06c), Java (JVM), Lua \ub4f1.</li> </ul> </li> <li>\uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4\uc758 \uc774\uc810: \ud504\ub85c\uadf8\ub798\uba38\uac00 C/C++\ub85c \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc744 \ubaa8\ub450 \uc9dc\ub294 \ub300\uc2e0, \uae30\ud68d\uc790\uac00 \uc774\ud574\ud558\uae30 \uc26c\uc6b4 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4\ub85c \uac8c\uc784 \ucf58\ud150\uce20(\ub300\uc0ac, \uc774\ubca4\ud2b8 \ub4f1)\ub97c \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4.</li> <li>\uc8fc\uc758: \uc9c1\uc811 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4\ub97c \ub9cc\ub4dc\ub294 \uac83\uc740 \uc7ac\ubbf8\uc788\uc744 \uc218 \uc788\uc73c\ub098, \ud604\uc7ac\ub85c\uc11c\ub294 \ubd88\ud544\uc694\ud558\uba70 \uad8c\uc7a5\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/2/#2","title":"2. \uc2a4\ud0dd \uba54\ubaa8\ub9ac \uad00\ub9ac \ubc0f \uc9c0\uc5ed \ubcc0\uc218","text":"<ul> <li><code>esp</code> (Stack Pointer): \uc9c0\uc5ed \ubcc0\uc218 \ud560\ub2f9\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. <code>esp</code> \uac12\uc744 \uc904\uc5ec(\ube7c\uae30 \uc5f0\uc0b0) \uacf5\uac04\uc744 \ud655\ubcf4\ud558\uba70, \uc774\ub294 \uc9c0\uc5ed \ubcc0\uc218 \ubc0f \ucef4\ud30c\uc77c\ub7ec\uac00 \ud544\uc694\ud558\ub2e4\uace0 \ud310\ub2e8\ud558\ub294 \uc815\ubcf4(\uc608: \uc784\uc2dc \ubcc0\uc218)\ub97c \uc800\uc7a5\ud558\ub294 \ub370 \uc4f0\uc785\ub2c8\ub2e4.</li> <li>\uc9c0\uc5ed \ubcc0\uc218: \ud568\uc218 \uc9c4\uc785 \uc2dc \uc2a4\ud0dd\uc5d0 \uacf5\uac04\uc774 \uc77c\uad04 \ud655\ubcf4\ub429\ub2c8\ub2e4. \ubcc0\uc218 \uc120\uc5b8 \uc2dc\uc810\uacfc \uad00\uacc4\uc5c6\uc774 \ud568\uc218 \uc2dc\uc791 \uc2dc\uc810\uc5d0 \ud544\uc694\ud55c \ucd1d \uacf5\uac04\uc774 \uacb0\uc815\ub429\ub2c8\ub2e4.<ul> <li>\uc608\uc2dc: <code>int a = 0; int b; b = 0;</code> \uc640 \uac19\uc774 \uc120\uc5b8\ub9cc \ud558\ub294 \uacbd\uc6b0, \uc2e4\uc81c \uba54\ubaa8\ub9ac \uacf5\uac04 \ud655\ubcf4\ub294 \ud568\uc218 \uc9c4\uc785 \uc2dc \ud55c \ubc88\uc5d0 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uc870\uac74\ubb38 \uc548\uc5d0\uc11c\uc758 \ubcc0\uc218 \uc120\uc5b8\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4.</li> </ul> </li> <li>\ud3ec\uc778\ud130\uc640 \uc2a4\ud0dd: \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \ucef4\ud30c\uc77c\ub7ec\ub294 \uc2a4\ud0dd \ud504\ub808\uc784 \uc8fc\ubcc0\uc5d0 \ucd94\uac00\uc801\uc778 \uacf5\uac04\uc744 \ud655\ubcf4\ud558\uc5ec \uc548\uc804\uc7a5\uce58\ub97c \ub9c8\ub828\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ubcc0\uc218 \uce68\ubc94\uc744 \ubc29\uc9c0\ud558\uace0 \ub514\ubc84\uae45\uc744 \uc6a9\uc774\ud558\uac8c \ud569\ub2c8\ub2e4. (\uc608: <code>0xcccccccc</code>\ub85c \uba54\ubaa8\ub9ac \ucd08\uae30\ud654)</li> </ul>"},{"location":"Architecture/Exam/2/#3","title":"3. \ub808\uc9c0\uc2a4\ud130 \uc0ac\uc6a9 \ubc0f \ubcf5\uc6d0","text":"<ul> <li>\ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130: <code>eax</code>, <code>ecx</code>\uc640 \uac19\uc740 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130\ub294 \uc790\uc720\ub86d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc2a4\ud0dd \ud504\ub808\uc784 \uad00\ub828 \ub808\uc9c0\uc2a4\ud130: <code>ebp</code>\uc640 <code>esp</code>\ub294 \ud568\uc218\uc758 \uc2a4\ud0dd \ud504\ub808\uc784\uc744 \uad00\ub9ac\ud558\ubbc0\ub85c, \ud568\uc218 \uc885\ub8cc \uc2dc \ubc18\ub4dc\uc2dc \ubcf5\uc6d0\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.</li> <li>\ub2e4\ub978 \ub808\uc9c0\uc2a4\ud130 \ubcf5\uc6d0: <code>eax</code>\uc640 \uac19\uc740 \ub2e4\ub978 \ub808\uc9c0\uc2a4\ud130\uc758 \uacbd\uc6b0, \uc77c\ubc18\uc801\uc73c\ub85c \ud568\uc218 \uc885\ub8cc \ud6c4 \ubcf5\uc6d0\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ucef4\ud30c\uc77c\ub7ec\ub294 \ucd5c\uc801\ud654\ub97c \uc704\ud574 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \uc720\uc9c0\ud558\uac70\ub098 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> <li><code>push</code>/<code>pop</code>: <code>push</code>\ub294 \uc2a4\ud0dd\uc5d0 \uac12\uc744 \ub123\uace0 <code>esp</code>\ub97c \uc904\uc774\uba70, <code>pop</code>\uc740 \uc2a4\ud0dd\uc5d0\uc11c \uac12\uc744 \ube7c\uace0 <code>esp</code>\ub97c \ub298\ub9bd\ub2c8\ub2e4.</li> <li>\uc2a4\ud0dd \uc815\ub9ac \ubc29\uc2dd: \ud568\uc218 \uc885\ub8cc \uc2dc \uc2a4\ud0dd\uc744 \uc815\ub9ac\ud558\ub294 \ubc29\uc2dd\uc740 \ub450 \uac00\uc9c0\uc785\ub2c8\ub2e4.<ol> <li><code>add esp, [\ud06c\uae30]</code> \uba85\ub839\uc5b4\ub85c \ud655\ubcf4\ud588\ub358 \uacf5\uac04\uc744 \ub418\ub3cc\ub9bd\ub2c8\ub2e4.</li> <li><code>mov esp, ebp</code> \uba85\ub839\uc5b4\ub85c <code>esp</code>\ub97c <code>ebp</code> \uac12\uc73c\ub85c \ub418\ub3cc\ub9bd\ub2c8\ub2e4.</li> </ol> </li> </ul>"},{"location":"Architecture/Exam/2/#4","title":"4. \uc5b4\uc148\ube14\ub9ac\uc5b4 \ub514\ubc84\uae45","text":"<ul> <li>\ub514\ubc84\uae45 \ub3c4\uad6c: Visual Studio\uc758 \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d, \uba54\ubaa8\ub9ac \ucc3d, \ud638\ucd9c \uc2a4\ud0dd, \uc870\uc0ac\uc2dd \ub4f1\uc744 \ud65c\uc6a9\ud569\ub2c8\ub2e4.</li> <li>\ud575\uc2ec \ubaa9\ud45c: \ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\uae30 \uc804\uc5d0 \uacb0\uacfc\ub97c \uc608\uce21\ud558\uace0, \uc2e4\ud589 \ud6c4 \uc608\uce21\uc774 \ub9de\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub2e8\uc21c\ud788 \ub208\uc73c\ub85c \uac12\uc744 \uc77d\ub294 \uac83\uc744 \ub118\uc5b4, \uac01 \ub2e8\uacc4\ubcc4 \ub808\uc9c0\uc2a4\ud130\uc640 \uba54\ubaa8\ub9ac \uac12\uc758 \ubcc0\ud654\ub97c \uc608\uce21\ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.</li> <li>\uba54\ubaa8\ub9ac \ucc3d: \ub808\uc9c0\uc2a4\ud130 \uac12(<code>ebp</code>, <code>esp</code> \ub4f1)\uc744 \uc785\ub825\ud558\uc5ec \ud574\ub2f9 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc758 \uac12\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>0xcccccccc</code>: \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc2a4\ud0dd \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 \ub098\ud0c0\ub0b4\ub294 \uac12\uc785\ub2c8\ub2e4.</li> <li><code>0xdddddddd</code>: \ub3d9\uc801 \ud560\ub2f9 \uc2dc <code>malloc</code>\uc758 \ucd08\uae30\uac12\uc785\ub2c8\ub2e4.</li> <li>Endianness:<ul> <li>Big Endian: \ub370\uc774\ud130\uc758 \uac00\uc7a5 \ud070 \ubc14\uc774\ud2b8\uac00 \uac00\uc7a5 \ub0ae\uc740 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. (\ub124\ud2b8\uc6cc\ud06c \uc7a5\ube44 \ub4f1)</li> <li>Little Endian: \ub370\uc774\ud130\uc758 \uac00\uc7a5 \uc791\uc740 \ubc14\uc774\ud2b8\uac00 \uac00\uc7a5 \ub0ae\uc740 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. (\ub300\ubd80\ubd84\uc758 PC \uc2dc\uc2a4\ud15c)</li> </ul> </li> <li>\ub514\ubc84\uae45 \uc2dc \uc8fc\uc758\uc0ac\ud56d:<ul> <li><code>esp</code> \uac12 \uc704\uc758 \uba54\ubaa8\ub9ac\ub294 \uc4f0\ub808\uae30\uac12\uc77c \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4.</li> <li>\ud568\uc218 \ud638\ucd9c \uc2a4\ud0dd\uc774 \uae68\uc9c0\uba74(Stack Frame \uc624\uc5fc), \ub514\ubc84\uae45\uc774 \uc5b4\ub824\uc6cc\uc9d1\ub2c8\ub2e4. \uc774\ub54c\ub294 \uc5b4\uc148\ube14\ub9ac \ub514\ubc84\uae45\uc744 \ud1b5\ud574 \uc5ed\ucd94\uc801\ud574\uc57c \ud569\ub2c8\ub2e4.</li> <li><code>jne esperror</code>\uc640 \uac19\uc740 \ucf54\ub4dc\ub294 <code>esp</code> \ub610\ub294 <code>ebp</code>\uac00 \ube44\uc815\uc0c1\uc801\uc778 \uacbd\uc6b0 \uc624\ub958 \ucc98\ub9ac \ud568\uc218\ub85c \ubd84\uae30\ud558\ub294 \uc548\uc804\uc7a5\uce58\uc785\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/2/#5","title":"5. \uae30\ud0c0","text":"<ul> <li>Word \ud06c\uae30: CPU \uc6cc\ub4dc(Word)\ub294 \uc77c\ubc18\uc801\uc73c\ub85c 2\ubc14\uc774\ud2b8\ub97c \uc758\ubbf8\ud558\uc9c0\ub9cc, CPU \uc544\ud0a4\ud14d\ucc98\uc5d0 \ub530\ub77c \ucc98\ub9ac \ub2e8\uc704\uac00 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4 (32\ube44\ud2b8 CPU\ub294 4\ubc14\uc774\ud2b8, 64\ube44\ud2b8 CPU\ub294 8\ubc14\uc774\ud2b8).</li> <li>Segment \ubc29\uc2dd: \uacfc\uac70 16\ube44\ud2b8 \ud658\uacbd\uc5d0\uc11c \uba54\ubaa8\ub9ac \uc8fc\uc18c \ud655\uc7a5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub41c \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ud604\ub300\uc801\uc778 32\ube44\ud2b8/64\ube44\ud2b8 \ud658\uacbd\uc5d0\uc11c\ub294 \ud398\uc774\uc9d5 \ubc29\uc2dd\uc73c\ub85c \ub300\uccb4\ub418\uc5c8\uc9c0\ub9cc, \ud558\uc704 \ud638\ud658\uc131\uc774\ub098 \ud2b9\uc815 \uc6a9\ub3c4\ub85c \uc5ec\uc804\ud788 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>UTF-8 vs. CHAR: UTF-8\uc740 \uac00\ubcc0 \uae38\uc774 \ubb38\uc790 \uc778\ucf54\ub529\uc774\uba70, CHAR\ub294 \uc77c\ubc18\uc801\uc73c\ub85c 1\ubc14\uc774\ud2b8\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</li> </ul> <p>\uc774 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \ubd84\uc11d \ub2a5\ub825\uc744 \ud0a4\uc6b0\uace0, \ub514\ubc84\uae45 \uc2dc \ubb38\uc81c \ud574\uacb0 \ub2a5\ub825\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4. \ud83d\udcaa</p>"},{"location":"Architecture/Exam/3/","title":"3","text":""},{"location":"Architecture/Exam/3/#_1","title":"\ud575\uc2ec \uc694\uc57d: \uc6b4\uc601\uccb4\uc81c, \ucef4\ud30c\uc77c\ub7ec \ubc0f \uc5b4\uc148\ube14\ub9ac \ud83d\udcbb","text":"<p>\uc774 \ub178\ud2b8\ub294 \uc6b4\uc601\uccb4\uc81c \uba54\ubaa8\ub9ac \uad00\ub9ac, \ucef4\ud30c\uc77c\ub7ec\uc758 \ub3d9\uc791 \ubc29\uc2dd, \uadf8\ub9ac\uace0 C/C++ \ucf54\ub4dc\uac00 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ubcc0\ud658\ub418\ub294 \uacfc\uc815\uc744 \uae4a\uc774 \uc788\uac8c \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/3/#1","title":"1. \uc6b4\uc601\uccb4\uc81c\uc640 \uc2a4\ub808\ub4dc","text":"<ul> <li>PCB/TCB: \uc6b4\uc601\uccb4\uc81c\uc758 CPU \uc790\uc6d0(\ud558\ub4dc\uc6e8\uc5b4\uc801 \uc2a4\ub808\ub4dc) \ud560\ub2f9\uc740 \ud56d\uc0c1 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc2a4\ub808\ub4dc \ub2e8\uc704\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.</li> <li>\uc2a4\ud0dd \uba54\ubaa8\ub9ac: \uc2a4\ud0dd\uc740 \ud568\uc218 \ud638\ucd9c \uc2dc \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc800\uc7a5\ud558\uba70, <code>esp</code>(\uc2a4\ud0dd \ud3ec\uc778\ud130)\ub97c \uc870\uc815\ud558\uc5ec \uacf5\uac04\uc744 \ud655\ubcf4\ud569\ub2c8\ub2e4.<ul> <li><code>esp</code>\ub97c \uc774\uc6a9\ud55c \uacf5\uac04 \ud655\ubcf4\ub294 \uc624\uc9c1 \uc9c0\uc5ed \ubcc0\uc218\uc640 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc790\uccb4\uc801\uc73c\ub85c \ud544\uc694\ud558\ub2e4\uace0 \ud310\ub2e8\ud558\ub294 \uc815\ubcf4\uc5d0\ub9cc \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> </ul> </li> <li>\uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0: \uc2a4\ud0dd\uc758 \uae30\ubcf8 \ud06c\uae30(Windows \uae30\uc900 1MB)\ub97c \ucd08\uacfc\ud558\uba74 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/3/#2","title":"2. \ucef4\ud30c\uc77c\ub7ec\uc640 \ub9c1\ucee4","text":"<ul> <li>\ucef4\ud30c\uc77c \uacfc\uc815: \uc18c\uc2a4 \ucf54\ub4dc\ub294 \uc804\ucc98\ub9ac \u2192 \ucef4\ud30c\uc77c(\uc5b4\uc148\ube14\ub9ac\uc5b4 \ubcc0\ud658) \u2192 \ub9c1\ud0b9 \uacfc\uc815\uc744 \uac70\uccd0 \uc2e4\ud589 \ud30c\uc77c\uc774 \ub429\ub2c8\ub2e4. \uc774 \ub2e8\uacc4\ub4e4\uc744 \uc774\ud574\ud558\uba74 \uc5d0\ub7ec\uc758 \uc6d0\uc778(\uc804\ucc98\ub9ac, \ucef4\ud30c\uc77c, \ub9c1\ud0b9 \uc5d0\ub7ec)\uc744 \ud30c\uc545\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4.</li> <li>\ucef4\ud30c\uc77c \uc5b8\uc5b4 vs. \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4:<ul> <li>\ucef4\ud30c\uc77c \uc5b8\uc5b4(C/C++): \uae30\uacc4\uc5b4\ub85c \ubcc0\ud658\ub418\uc5b4 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc2e4\ud589\ub418\ub294 \ud30c\uc77c(.bin)\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.</li> <li>\uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4(JavaScript, Python \ub4f1): \uac00\uc0c1 \uba38\uc2e0(VM)\uc774\ub098 \uc778\ud130\ud504\ub9ac\ud130 \uc704\uc5d0\uc11c \ud55c \uc904\uc529 \uc2e4\ud589\ub429\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/3/#3","title":"3. \uc5b4\uc148\ube14\ub9ac\uc5b4 \uc2ec\ud654","text":"<ul> <li>\ub808\uc9c0\uc2a4\ud130: CPU \ub0b4\ubd80\uc5d0 \uc788\ub294 \uace0\uc18d \uba54\ubaa8\ub9ac\ub85c, \uc5f0\uc0b0\uc740 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc788\ub294 \uac12\uc73c\ub85c\ub9cc \uac00\ub2a5\ud569\ub2c8\ub2e4.<ul> <li><code>ebp</code>(\ubca0\uc774\uc2a4 \ud3ec\uc778\ud130): \ud604\uc7ac \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc2dc\uc791 \uc8fc\uc18c</li> <li><code>esp</code>(\uc2a4\ud0dd \ud3ec\uc778\ud130): \ud604\uc7ac \uc2a4\ud0dd\uc758 \ucd5c\uc0c1\ub2e8 \uc8fc\uc18c</li> <li><code>ecx</code>: \ubc18\ubcf5\ubb38 \uce74\uc6b4\ud130</li> <li><code>eax</code>, <code>esi</code>, <code>edi</code>: \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130</li> </ul> </li> <li><code>rep stos</code>: <code>ecx</code>\uc5d0 \uc788\ub294 \ud69f\uc218\ub9cc\ud07c <code>edi</code> \uc8fc\uc18c\ub97c <code>eax</code> \uac12\uc73c\ub85c \ucc44\uc6b0\ub294 \ubc18\ubcf5\ubb38 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4.</li> <li>\uba54\ubaa8\ub9ac \uac12: \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04\uc774 <code>0xcccccccc</code> (\uc2a4\ud0dd) \ub610\ub294 <code>0xdddddddd</code> (\ud799)\uc640 \uac19\uc740 \ud2b9\uc815 \uac12\uc73c\ub85c \ucc44\uc6cc\uc838 \ub514\ubc84\uae45\uc744 \ub3d5\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/3/#4","title":"4. \uba54\ubaa8\ub9ac \uad6c\uc870\uc640 \ubcc0\uc218","text":"<ul> <li>\uba54\ubaa8\ub9ac \uc601\uc5ed: \ud504\ub85c\uadf8\ub7a8\uc740 \ucf54\ub4dc(Code), \uc77d\uae30 \uc804\uc6a9(Read-only), \ub370\uc774\ud130(Data), \uc2a4\ud0dd(Stack), \ud799(Heap) \uc601\uc5ed\uc73c\ub85c \ub098\ub269\ub2c8\ub2e4.</li> <li>\uc804\uc5ed \ubcc0\uc218:<ul> <li>\ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218: \ucef4\ud30c\uc77c \uc2dc\uc810\uc5d0 \uc2e4\ud589 \ud30c\uc77c(.exe) \ub0b4\uc5d0 \ud3ec\ud568\ub429\ub2c8\ub2e4. \uc2e4\ud589 \ud30c\uc77c\uc758 \ud06c\uae30\uac00 \ucee4\uc9d1\ub2c8\ub2e4.</li> <li>\ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218: \ub7f0\ud0c0\uc784\uc5d0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub420 \ub54c \uc0dd\uc131\ub429\ub2c8\ub2e4.</li> </ul> </li> <li><code>const</code> \ud0a4\uc6cc\ub4dc:<ul> <li>\uc9c0\uc5ed \ubcc0\uc218: \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\uba70, <code>const</code>\ub294 \uc5b8\uc5b4\uc801 \ucc28\uc6d0\uc758 \uc81c\uc57d\uc785\ub2c8\ub2e4. \ud3ec\uc778\ud130 \uac15\uc81c \uce90\uc2a4\ud305\uc73c\ub85c \uac12\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc804\uc5ed \ubcc0\uc218: \uc77d\uae30 \uc804\uc6a9(Read-only) \uc601\uc5ed\uc5d0 \uc800\uc7a5\ub418\uc5b4 \ubb3c\ub9ac\uc801\uc73c\ub85c \uc4f0\uae30\uac00 \ubd88\uac00\ub2a5\ud558\ubbc0\ub85c, \ud3ec\uc778\ud130\ub85c \uac12\uc744 \ubcc0\uacbd\ud558\ub824 \ud558\uba74 \uc4f0\uae30 \uc561\uc138\uc2a4 \uc704\ubc18 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> </ul> </li> <li><code>volatile</code> \ud0a4\uc6cc\ub4dc:<ul> <li>\ucef4\ud30c\uc77c\ub7ec\uc758 \ucd5c\uc801\ud654\ub97c \ub9c9\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.</li> <li>\uc8fc\ub85c \uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd\uc774\ub098 \ud558\ub4dc\uc6e8\uc5b4 \uc9c1\uc811 \uc81c\uc5b4 \uc2dc \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> <li>\uc77c\ubc18\uc801\uc73c\ub85c \uc54c\ub824\uc9c4 \"\uce90\uc2dc\ub97c \ubb34\uc2dc\ud558\uace0 \ub7a8\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uac8c \ud55c\ub2e4\"\ub294 \uc124\uba85\uc740 \uc624\ud574\uc758 \uc18c\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. <code>volatile</code>\uc740 \uc5b8\uc5b4\uc801 \ud0a4\uc6cc\ub4dc\uc77c \ubfd0, OS\ub098 \uc2dc\uc2a4\ud15c \uc218\uc900\uc758 \uba54\ubaa8\ub9ac \uc811\uadfc \uc81c\uc5b4\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/3/#5","title":"5. \ub514\ubc84\uae45 \uae30\ubc95","text":"<ul> <li>Visual Studio \ub514\ubc84\uac70:<ul> <li><code>F5</code>: \ub514\ubc84\uadf8 \uc2dc\uc791</li> <li><code>F9</code>: \ube0c\ub808\uc774\ud06c \ud3ec\uc778\ud2b8 \uc124\uc815</li> <li><code>F10</code>: \ud55c \uc904\uc529 \uc2e4\ud589 (\uc18c\uc2a4 \ucf54\ub4dc \uae30\uc900)</li> <li><code>F11</code>: \ud568\uc218 \ub0b4\ubd80 \uc9c4\uc785</li> <li>\ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d(<code>Ctrl + Alt + D</code>): \uc18c\uc2a4 \ucf54\ub4dc\ub97c \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ubcc0\ud658\ud558\uc5ec \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.</li> <li>\uba54\ubaa8\ub9ac \ucc3d: \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc758 \uc2e4\uc81c \uac12\uc744 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ud638\ucd9c \uc2a4\ud0dd: \ud568\uc218\uac00 \ud638\ucd9c\ub41c \uacbd\ub85c\ub97c \ucd94\uc801\ud558\uc5ec \uc5d0\ub7ec \ubc1c\uc0dd \uc704\uce58\ub97c \ud30c\uc545\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> </li> <li>\uc608\uce21\ud558\uba70 \ub514\ubc84\uae45: \ub514\ubc84\uae45\uc744 \ud1b5\ud574 \ucf54\ub4dc\uac00 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0 \uc608\uce21\ud558\uace0, \uc608\uce21\uc774 \ub9de\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud6c8\ub828\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/3/#6","title":"6. \uae30\ud0c0 \uac1c\ub150","text":"<ul> <li>\uc5d4\ub514\uc5b8(Endian): \uba54\ubaa8\ub9ac\uc5d0 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\ub294 \uc21c\uc11c.<ul> <li>\ube45 \uc5d4\ub514\uc5b8(Big Endian): \ud070 \ub2e8\uc704\ubd80\ud130 \uc800\uc7a5 (\ub124\ud2b8\uc6cc\ud06c \ud45c\uc900)</li> <li>\ub9ac\ud2c0 \uc5d4\ub514\uc5b8(Little Endian): \uc791\uc740 \ub2e8\uc704\ubd80\ud130 \uc800\uc7a5 (\ub300\ubd80\ubd84\uc758 PC)</li> </ul> </li> <li>CISC vs. RISC: \uba85\ub839\uc5b4 \uc138\ud2b8\uc758 \ubcf5\uc7a1\uc131 \ucc28\uc774. <code>x86</code>\uc740 CISC \ubc29\uc2dd\uc774\ub77c \uba85\ub839\uc5b4 \uae38\uc774\uac00 \uac00\ubcc0\uc801\uc774\uc5b4\uc11c \ub514\ubc84\uae45 \uc2dc \uc5ed\ubc29\ud5a5\uc73c\ub85c \ucf54\ub4dc\ub97c \uc77d\uc744 \ub54c \uaf2c\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>extern</code>: \ub2e4\ub978 \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc815\uc758\ub41c \ubcc0\uc218\ub098 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \uc120\uc5b8\ud558\ub294 \ud0a4\uc6cc\ub4dc\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/4/","title":"4","text":""},{"location":"Architecture/Exam/4/#_1","title":"\ud575\uc2ec \uc694\uc57d: \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654, \uba54\ubaa8\ub9ac, \uadf8\ub9ac\uace0 \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d","text":"<p>\uc774 \ub178\ud2b8\ub294 \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654\uc758 \ud568\uc815\uacfc \ub514\ubc84\uae45\uc758 \uc5b4\ub824\uc6c0, \uadf8\ub9ac\uace0 \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ub2e4\uc591\ud55c \uac1c\ub150\ub4e4\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/4/#1","title":"1. \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654\uc640 \ub514\ubc84\uae45","text":"<ul> <li>\ucd5c\uc801\ud654\uc758 \uc591\uba74\uc131: \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654\ub294 \ub9b4\ub9ac\uc988 \ube4c\ub4dc \uc2dc 30~40%\uc758 \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uac00\uc838\uc624\uc9c0\ub9cc, \ucf54\ub4dc \uc21c\uc11c\ub97c \ubc14\uafb8\uac70\ub098 \ubd88\ud544\uc694\ud55c \ubcc0\uc218\ub97c \uc81c\uac70\ud558\uc5ec \ub514\ubc84\uae45\uc744 \ub9e4\uc6b0 \uc5b4\ub835\uac8c \ub9cc\ub4ed\ub2c8\ub2e4. \ud2b9\ud788 \uc11c\ubc84\uc758 \uba54\ubaa8\ub9ac \ub364\ud504 \ubd84\uc11d \uc2dc, \ubcc0\uc218\ub098 \ud568\uc218 \ud638\ucd9c \uc2a4\ud0dd\uc774 \uc0ac\ub77c\uc838 \uc6d0\uc778 \ud30c\uc545\uc774 \ubd88\uac00\ub2a5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>volatile</code> \ud0a4\uc6cc\ub4dc: \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \ud574\ub2f9 \ubcc0\uc218\uc5d0 \ub300\ud55c \ucd5c\uc801\ud654\ub97c \ud558\uc9c0 \ub9d0\ub77c\uace0 \uba85\uc2dc\uc801\uc73c\ub85c \uc9c0\uc2dc\ud569\ub2c8\ub2e4. \uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd \ub4f1\uc5d0\uc11c \ubcc0\uc218 \uac12\uc774 \uc608\uc0c1\uce58 \ubabb\ud558\uac8c \ubcc0\uacbd\ub420 \uc218 \uc788\ub294 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc774 \ud0a4\uc6cc\ub4dc\ub9cc\uc73c\ub85c\ub294 \ud568\uc218 \uc778\ub77c\uc778\ud654 \ub4f1\uc744 \ub9c9\uc744 \uc218 \uc5c6\uc5b4, \uc5ec\uc804\ud788 \uc5b4\uc148\ube14\ub9ac \ubd84\uc11d\uc774 \ud544\uc694\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>noinline</code> \ud0a4\uc6cc\ub4dc: MSVC\uc5d0\uc11c\ub294 <code>__declspec(noinline)</code>\uc744, C++20 \ud45c\uc900\uc5d0\uc11c\ub294 <code>[[noinline]]</code>\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud2b9\uc815 \ud568\uc218\uac00 \uc778\ub77c\uc778 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub3c4\ub85d \uac15\uc81c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uad8c\uc7a5 \uac1c\ubc1c \ud658\uacbd: \ub514\ubc84\uadf8 \ube4c\ub4dc \ud658\uacbd\uc5d0\uc11c \uac1c\ubc1c\ud558\uba74 \ub9b4\ub9ac\uc988 \ube4c\ub4dc\uc5d0\uc11c \ubc1c\uacac\ub418\uc9c0 \uc54a\ub294 \uba54\ubaa8\ub9ac \uad00\ub828 \ubc84\uadf8(\uc608: \ub315\uae00\ub9c1 \ud3ec\uc778\ud130)\ub97c \ub193\uce60 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub9b4\ub9ac\uc988 \ubaa8\ub4dc\uc5d0\uc11c \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c \uc635\uc158\uc744 \ub048 \uc0c1\ud0dc\ub97c \uae30\ubcf8 \uac1c\ubc1c \ud658\uacbd\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/4/#2-ipc","title":"2. \ud504\ub85c\uc138\uc2a4 \uac04 \ud1b5\uc2e0 (IPC)","text":"<ul> <li>IPC\uc758 \ubaa9\uc801: \uc11c\ub85c \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8(\ud504\ub85c\uc138\uc2a4) \uac04\uc758 \ub370\uc774\ud130 \uad50\ub958\uc785\ub2c8\ub2e4. \uc8fc\ub85c \uae30\ub2a5 \ubd84\ub9ac, \uc548\uc815\uc131 \ud655\ubcf4 \ub4f1\uc744 \uc704\ud574 \uc0ac\uc6a9\ub418\uc9c0\ub9cc, \ubb3c\ub9ac\uc801\uc778 \uc11c\ubc84 \ubd84\uc0b0\uc744 \uc704\ud574\uc11c\ub294 \ub124\ud2b8\uc6cc\ud06c \ud1b5\uc2e0\uc774 \ub354 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.</li> <li>IPC\uc758 \uc2e4\uc6a9\uc131: \uac8c\uc784 \uc11c\ubc84 \uac1c\ubc1c\uc5d0\uc11c\ub294 \ubd80\ud558 \ubd84\uc0b0\uc744 \uc704\ud574 \ubb3c\ub9ac\uc801 \uc11c\ubc84 \ubd84\uc0b0(\ub124\ud2b8\uc6cc\ud06c \ud1b5\uc2e0)\uc774 \uc8fc \ubaa9\ud45c\uc774\ubbc0\ub85c, \ud30c\uc774\ud504(Pipe), \uba54\uc77c\uc2ac\ub86f(MailSlot) \uac19\uc740 \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8 \uae30\ubc18\uc758 IPC\ub294 \uc2e4\ubb34\uc5d0\uc11c \uac70\uc758 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uae4a\uc774 \uacf5\ubd80\ud558\ub294 \uac83\uc740 \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/4/#3-cpu","title":"3. CPU\uc640 \uba54\ubaa8\ub9ac","text":"<ul> <li>CISC vs. RISC:<ul> <li>CISC(x86): \ubcf5\uc7a1\ud558\uace0 \ub2e4\uc591\ud55c \uae38\uc774\uc758 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> <li>RISC(ARM \ub4f1): \ub2e8\uc21c\ud558\uace0 \uace0\uc815\ub41c \uae38\uc774\uc758 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba70 \uc804\ub825 \ud6a8\uc728\uc774 \ub192\uc2b5\ub2c8\ub2e4. x86 \uc544\ud0a4\ud14d\ucc98\ub294 CISC \ubc29\uc2dd\uc785\ub2c8\ub2e4.</li> </ul> </li> <li>2\uc758 \ubcf4\uc218: \ucef4\ud4e8\ud130\uc5d0\uc11c \uc74c\uc218\ub97c \ud45c\ud604\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, <code>char</code> \ubcc0\uc218\uc5d0\uc11c <code>0xFF</code>\ub294 \uc774\uc9c4\uc218\ub85c <code>11111111</code>\uc774\uba70, \ubd80\ud638 \uc788\ub294(signed) \ud0c0\uc785\uc73c\ub85c \ud574\uc11d\ud558\uba74 <code>-1</code>, \ubd80\ud638 \uc5c6\ub294(unsigned) \ud0c0\uc785\uc73c\ub85c \ud574\uc11d\ud558\uba74 <code>255</code>\uac00 \ub429\ub2c8\ub2e4. \uc774\ub294 \uc778\uac04\uc758 \ud574\uc11d \ucc28\uc774\uc77c \ubfd0, \uc2e4\uc81c \uba54\ubaa8\ub9ac \uac12\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4.</li> <li>\ubcc0\uc218 \ud06c\uae30: 64\ube44\ud2b8 \uc6b4\uc601\uccb4\uc81c\uc5d0\uc11c\ub3c4 <code>long</code>\uc758 \ud06c\uae30\ub294 \ud50c\ub7ab\ud3fc\ub9c8\ub2e4 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4 (Windows\ub294 4\ubc14\uc774\ud2b8, Linux/macOS\ub294 8\ubc14\uc774\ud2b8). \uac8c\uc784 \uac1c\ubc1c \uc2dc \ub3c8, \uacbd\ud5d8\uce58 \ub4f1\uc740 \ub098\uc911\uc5d0 21\uc5b5(32\ube44\ud2b8 \uc815\uc218 \ucd5c\ub300)\uc744 \ub118\uc744 \uac00\ub2a5\uc131\uc774 \uc788\uc73c\ubbc0\ub85c <code>long long</code> (64\ube44\ud2b8) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc548\uc804\ud569\ub2c8\ub2e4.</li> <li><code>const</code>\uc640 <code>volatile</code>\uc758 \ucc28\uc774:<ul> <li><code>const</code>: \uc5b8\uc5b4\uc801 \ucc28\uc6d0\uc758 \uc81c\uc57d\uc785\ub2c8\ub2e4. \uc804\uc5ed \ubcc0\uc218\uc5d0 \uc0ac\uc6a9\ud558\uba74 \uc77d\uae30 \uc804\uc6a9 \uc601\uc5ed\uc5d0 \uc800\uc7a5\ub418\uc9c0\ub9cc, \uc9c0\uc5ed \ubcc0\uc218\uc5d0 \uc0ac\uc6a9\ud558\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub418\uc5b4 \ud3ec\uc778\ud130\ub85c \uac12\uc744 \ubc14\uafc0 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>volatile</code>: \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654 \ubc29\uc9c0\ub97c \uc704\ud55c \ud0a4\uc6cc\ub4dc\uc785\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/4/#4","title":"4. \uae30\ud0c0 \uac1c\ubc1c \uc9c0\uc2dd","text":"<ul> <li>C/C++ \ub7f0\ud0c0\uc784 \ub77c\uc774\ube0c\ub7ec\ub9ac: \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc640 \ub9b4\ub9ac\uc988 \ubaa8\ub4dc\ub294 \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ub7f0\ud0c0\uc784 \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \uc124\uc815\uc774 \ub2ec\ub77c \ubc84\uadf8\uac00 \ub2e4\ub974\uac8c \ub098\ud0c0\ub0a0 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704: <code>*</code>, <code>/</code>, <code>%</code> \u2192 <code>+</code>, <code>-</code> \u2192 <code>&lt;&lt;</code>, <code>&gt;&gt;</code> \u2192 \ube44\uad50 \uc5f0\uc0b0\uc790(<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>) \u2192 \ube44\ud2b8 \uc5f0\uc0b0\uc790(<code>&amp;</code>, <code>^</code>, <code>|</code>) \u2192 \ub17c\ub9ac \uc5f0\uc0b0\uc790(<code>&amp;&amp;</code>, <code>||</code>) \uc21c\uc73c\ub85c \ud3c9\uac00\ub429\ub2c8\ub2e4.</li> <li>\ucde8\uc5c5 \uc2dc\uc7a5: \uac8c\uc784 \uc11c\ubc84 \uac1c\ubc1c \ubd84\uc57c\ub294 \uc2e4\ub825\ub9cc \uc788\ub2e4\uba74 \ucde8\uc5c5\uc774 \uc798 \ub418\ub294 \ud3b8\uc785\ub2c8\ub2e4. \ud3ec\ud2b8\ud3f4\ub9ac\uc624\ub97c \uc704\ud55c \uacfc\uc81c \uc804\ud615\uc744 \ud1b5\uacfc\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/5/","title":"5","text":""},{"location":"Architecture/Exam/5/#_1","title":"\ud575\uc2ec \uc694\uc57d: \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d \uc2ec\ud654 \ubc0f \ucef4\ud30c\uc77c\ub7ec \ub3d9\uc791 \uc6d0\ub9ac \ud83d\udcbb","text":"<p>\uc774 \ub178\ud2b8\ub294 C/C++ \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uae4a\uc740 \uac1c\ub150\uacfc \ucef4\ud30c\uc77c\ub7ec\uc758 \ucd5c\uc801\ud654 \ubc29\uc2dd, \uadf8\ub9ac\uace0 \uba54\ubaa8\ub9ac \ubc0f \uc5b4\uc148\ube14\ub9ac\uc5b4\uc758 \uc138\ubd80 \ub3d9\uc791\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/5/#1-","title":"1. \uc804\uc704/\ud6c4\uc704 \uc5f0\uc0b0\uc790 (++, --)\uc640 \ucd5c\uc801\ud654","text":"<ul> <li>\uc804\uc704/\ud6c4\uc704 \uc5f0\uc0b0\uc758 \ucc28\uc774: \uc804\uc704 \uc5f0\uc0b0\uc790(<code>++a</code>)\ub294 \uac12\uc744 \uc99d\uac00\uc2dc\ud0a8 \ud6c4 \uadf8 \uac12\uc744 \ubc18\ud658\ud558\uace0, \ud6c4\uc704 \uc5f0\uc0b0\uc790(<code>a++</code>)\ub294 \uac12\uc744 \ubc18\ud658\ud55c \ud6c4 \uc99d\uac00\uc2dc\ud0b5\ub2c8\ub2e4. \ud6c4\uc704 \uc5f0\uc0b0\uc740 \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud558\ubbc0\ub85c \uc804\uc704 \uc5f0\uc0b0\ubcf4\ub2e4 \ub290\ub9b4 \uac00\ub2a5\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654: \ub2e8\uc21c \ubc18\ubcf5\ubb38(<code>for(int i = 0; ...; ++i)</code>)\uc758 \uacbd\uc6b0 \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd5c\uc801\ud654\ud558\uc5ec \uc804\uc704/\ud6c4\uc704 \uc5f0\uc0b0\uc790 \uac04\uc758 \uc131\ub2a5 \ucc28\uc774\uac00 \uac70\uc758 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ubcf5\ud569\uc801\uc778 \ub300\uc785 \uc5f0\uc0b0\uc5d0\uc11c\ub294 \ucc28\uc774\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/5/#2","title":"2. \ube44\ud2b8 \uc5f0\uc0b0\uc790","text":"<ul> <li>\uc885\ub958: <code>&amp;</code>(AND), <code>|</code>(OR), <code>^</code>(XOR), <code>~</code>(NOT), <code>&lt;&lt;</code>(Shift Left), <code>&gt;&gt;</code>(Shift Right).</li> <li>\ud65c\uc6a9:<ul> <li>\ub9c8\uc2a4\ud0b9: <code>&amp;</code> \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud2b9\uc815 \ube44\ud2b8\ub9cc \ucd94\ucd9c\ud558\uac70\ub098 \ud655\uc778\ud569\ub2c8\ub2e4. (\uc608: <code>a &amp; 0xF0</code>\ub85c \uc0c1\uc704 4\ube44\ud2b8 \ucd94\ucd9c)</li> <li>\ud569\uce58\uae30: <code>|</code> \uc5f0\uc0b0\uc790\ub85c \uc11c\ub85c \ub2e4\ub978 \uc601\uc5ed\uc758 \ube44\ud2b8\ub97c \ud569\uce69\ub2c8\ub2e4.</li> <li>XOR: \uac19\uc740 \uac12\uc740 0, \ub2e4\ub978 \uac12\uc740 1\uc774 \ub429\ub2c8\ub2e4. \uac04\ub2e8\ud55c \uc554\ud638\ud654\ub098 \uadf8\ub798\ud53d \ucc98\ub9ac(\uadf8\ub9bc \ubcf5\uc6d0)\uc5d0 \uc0ac\uc6a9\ub418\uba70, <code>XOR eax, eax</code> \uc640 \uac19\uc774 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 0\uc73c\ub85c \ub9cc\ub4dc\ub294 \ub370 \ub9e4\uc6b0 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.</li> </ul> </li> <li>Shift \uc5f0\uc0b0\uc790:<ul> <li><code>&lt;&lt;</code>: \uacf1\ud558\uae30(<code>*2</code>, <code>*4</code>...) \ud6a8\uacfc\ub97c \ub0c5\ub2c8\ub2e4.</li> <li><code>&gt;&gt;</code>: \ub098\ub204\uae30(<code>/2</code>, <code>/4</code>...) \ud6a8\uacfc\ub97c \ub0c5\ub2c8\ub2e4.</li> <li>\uc8fc\uc758: \ubd80\ud638 \uc788\ub294(<code>signed</code>) \ubcc0\uc218\uc5d0 \ub300\ud55c \uc2dc\ud504\ud2b8 \uc5f0\uc0b0\uc740 \ucef4\ud30c\uc77c\ub7ec \uacbd\uace0\uac00 \ubc1c\uc0dd\ud558\ubbc0\ub85c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uad8c\uc7a5\ub429\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/5/#3","title":"3. \ucef4\ud30c\uc77c\ub7ec\uc640 \uba54\ubaa8\ub9ac \uad6c\uc870","text":"<ul> <li><code>map</code> \ud30c\uc77c: \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0dd\uc131\ud558\ub294 \ud30c\uc77c\ub85c, \ud568\uc218\uc640 \ubcc0\uc218\ub4e4\uc758 \uba54\ubaa8\ub9ac \uc8fc\uc18c \ubc0f \uae38\uc774\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4.</li> <li><code>VMMap</code>: Windows Sysinternals \ub3c4\uad6c\ub85c, \ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac \uc0ac\uc6a9 \ud604\ud669(\ud799, \ub9e4\ud551\ub41c \ud30c\uc77c \ub4f1)\uc744 \uc2dc\uac01\uc801\uc73c\ub85c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.</li> <li>C/C++\uc758 \uba54\ubaa8\ub9ac \uc601\uc5ed: \ucf54\ub4dc(Code), \uc77d\uae30 \uc804\uc6a9(Read-only), \ub370\uc774\ud130(Data), \uc2a4\ud0dd(Stack), \ud799(Heap)\uc73c\ub85c \ub098\ub258\uc9c0\ub9cc, <code>VMMap</code>\uc5d0\uc11c\ub294 <code>Private Data</code> \uc640 \uac19\uc774 \ub354 \ucd94\uc0c1\uc801\uc778 \uc774\ub984\uc73c\ub85c \ub098\ud0c0\ub0a9\ub2c8\ub2e4.</li> <li><code>sizeof</code>: \ucef4\ud30c\uc77c \uc2dc\uc810\uc5d0 \ubcc0\uc218\ub098 \uc790\ub8cc\ud615\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\uc5ec \uc5b4\uc148\ube14\ub9ac\uc5b4\uc5d0 \uc0c1\uc218 \uac12\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. \ub7f0\ud0c0\uc784 \uc2dc\uc810\uc5d0\ub294 <code>sizeof</code>\ub85c \uac1d\uccb4\uc758 \ud06c\uae30\ub97c \uc54c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/5/#4","title":"4. \uc870\uac74\ubb38\uacfc \ucd5c\uc801\ud654","text":"<ul> <li><code>if-else</code> vs. <code>switch-case</code>:<ul> <li><code>if-else</code>: \uc21c\ucc28\uc801\uc73c\ub85c \uc870\uac74\uc744 \ube44\uad50(<code>cmp</code> \uba85\ub839\uc5b4)\ud558\uc5ec \uc131\ub2a5\uc774 \uc800\ud558\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>switch-case</code>: <code>case</code> \uac12\uc774 \uc5f0\uc18d\uc801\uc774\uac70\ub098 \uc77c\uc815\ud55c \uaddc\uce59\uc744 \uac00\uc9c0\ub294 \uacbd\uc6b0, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc810\ud504 \ud14c\uc774\ube14\uc744 \uc0dd\uc131\ud558\uc5ec <code>case</code> \uac12\uc5d0 \ub9de\ub294 \ucf54\ub4dc\ub85c \ud55c \ubc88\uc5d0 \uc774\ub3d9\ud569\ub2c8\ub2e4. \uc774\ub294 <code>if-else</code> \ubb38\ubcf4\ub2e4 \ud6e8\uc52c \ube60\ub985\ub2c8\ub2e4.</li> </ul> </li> <li>\uc810\ud504 \ud14c\uc774\ube14\uc758 \uc870\uac74: <code>case</code> \ubb38\uc774 3\uac1c \uc774\ud558\uc77c \uacbd\uc6b0 <code>if-else</code>\ucc98\ub7fc \ub3d9\uc791\ud560 \uc218 \uc788\uc73c\uba70, <code>case</code> \uac12\uc774 \ubd88\uc5f0\uc18d\uc801\uc774\uac70\ub098 \ubb34\uc791\uc704\uc778 \uacbd\uc6b0 \ucef4\ud30c\uc77c\ub7ec\ub294 \uc810\ud504 \ud14c\uc774\ube14 \ub300\uc2e0 \ub2e4\ub978 \ubc29\uc2dd(\uc608: \uc778\ub371\uc2a4 \ubcc0\ud658 \ud14c\uc774\ube14)\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 <code>if-else</code>\ucc98\ub7fc \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/5/#5","title":"5. \uae30\ud0c0 \uc6a9\uc5b4","text":"<ul> <li><code>.bss</code> (Block Started by Symbol): \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed/\uc815\uc801 \ubcc0\uc218\uac00 \ud560\ub2f9\ub418\ub294 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc785\ub2c8\ub2e4.</li> <li>IP(Instruction Pointer): \ub2e4\uc74c\uc5d0 \uc2e4\ud589\ud560 \uba85\ub839\uc5b4\uc758 \uc8fc\uc18c\ub97c \uac00\ub9ac\ud0a4\ub294 \ub808\uc9c0\uc2a4\ud130\ub85c, <code>PC(Program Counter)</code>\uc640 \ub3d9\uc77c\ud55c \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.</li> <li><code>e</code> (x86 32\ube44\ud2b8), <code>r</code> (x86 64\ube44\ud2b8): \ub808\uc9c0\uc2a4\ud130 \uc774\ub984\uc758 \uc811\ub450\uc0ac\ub85c, CPU \uc544\ud0a4\ud14d\ucc98\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4.</li> <li><code>Dangling Pointer</code>: \ud574\uc81c\ub41c \uba54\ubaa8\ub9ac\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \uc624\ub958\uac00 \uc989\uc2dc \ubc1c\uc0dd\ud558\uc9c0\ub9cc, \ub9b4\ub9ac\uc988 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \uc6b0\uc5f0\ud788 \uc791\ub3d9\ud558\uc5ec \ubc84\uadf8\ub97c \ucc3e\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4ed\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/6/","title":"6","text":""},{"location":"Architecture/Exam/6/#_1","title":"\ud575\uc2ec \uc694\uc57d: \ud504\ub85c\uc138\uc2a4, \ud638\ucd9c \uaddc\uc57d, \uadf8\ub9ac\uace0 \ucf54\ub4dc \ucd5c\uc801\ud654","text":"<p>\uc774 \ub178\ud2b8\ub294 \ud504\ub85c\uc138\uc2a4 \ub3d9\uc791 \ubc29\uc2dd, \ud568\uc218 \ud638\ucd9c \uaddc\uc57d, \uadf8\ub9ac\uace0 \uc2e4\uc6a9\uc801\uc778 \ucf54\ub4dc \uc791\uc131 \uae30\ubc95\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc744 \ub2f4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc2dc\ud5d8 \uacf5\ubd80\uc5d0 \ub3c4\uc6c0\uc774 \ub418\ub3c4\ub85d \uac04\uacb0\ud558\uac8c \uc815\ub9ac\ud588\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/6/#1","title":"1. \ud504\ub85c\uc138\uc2a4\uc640 \ud578\ub4e4","text":"<ul> <li>\ud578\ub4e4 \uc0c1\uc18d: \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \uc0dd\uc131\ub41c \ud578\ub4e4\uc740 \uc0c1\uc18d\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \uc124\uc815\ub41c \uacbd\uc6b0, \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub3c4 \ub3d9\uc77c\ud55c \ud578\ub4e4 \uac12\uc744 \uacf5\uc720\ud558\uac8c \ub429\ub2c8\ub2e4.</li> <li>\uba40\ud2f0 \ud504\ub85c\uc138\uc2a4 \ub514\ubc84\uae45: \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 <code>CreateProcess</code>\ub85c \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub97c \uc0dd\uc131\ud560 \ub54c, \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0 \ub514\ubc84\uac70\ub97c \uc5f0\uacb0\ud558\uc5ec \uac1c\ubcc4\uc801\uc73c\ub85c \ub514\ubc84\uae45\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/6/#2","title":"2. \ud568\uc218 \ud638\ucd9c \uaddc\uc57d\uacfc \ub514\ubc84\uae45","text":"<ul> <li>\ud568\uc218 \ud638\ucd9c \ubc29\uc2dd:<ul> <li>\ub9b4\ub9ac\uc988 \ubaa8\ub4dc: \ucef4\ud30c\uc77c\ub7ec\ub294 \ud568\uc218\ub97c \uc9c1\uc811 \ud638\ucd9c\ud558\ub294 <code>jmp</code> \uba85\ub839\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud569\ub2c8\ub2e4.</li> <li>\ub514\ubc84\uadf8 \ubaa8\ub4dc: \uc99d\ubd84 \ub9c1\ud06c \uae30\ub2a5\uc744 \uc704\ud574 \ub450 \ubc88\uc758 <code>jmp</code> \ub97c \uac70\uce69\ub2c8\ub2e4. \uc774\ub294 \ucf54\ub4dc \uc218\uc815 \uc2dc \uc804\uccb4\ub97c \ub2e4\uc2dc \ub9c1\ud06c\ud558\uc9c0 \uc54a\uace0 \ud2b9\uc815 \ubd80\ubd84\ub9cc \ube60\ub974\uac8c \ubcc0\uacbd\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</li> </ul> </li> <li><code>call</code> \uba85\ub839\uc5b4\uc758 \uc791\ub3d9 \uc6d0\ub9ac:<ul> <li><code>call</code> \uba85\ub839\uc5b4\ub294 \ub2e4\uc74c \uba85\ub839\uc5b4\uc758 \uc8fc\uc18c(\ub3cc\uc544\uc62c \uc8fc\uc18c)\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.</li> <li>\uc774\ud6c4 \ud568\uc218\uac00 \uc2dc\uc791\ub418\ub294 \uc8fc\uc18c\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4.</li> <li>\ud568\uc218 \uc2e4\ud589\uc774 \ub05d\ub09c \ud6c4 <code>ret</code> \uba85\ub839\uc5b4\ub97c \ub9cc\ub098\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc8fc\uc18c\ub97c \uaebc\ub0b4 \uc6d0\ub798 \uc704\uce58\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4.</li> </ul> </li> <li>\ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec: 32\ube44\ud2b8 \ud658\uacbd\uc5d0\uc11c \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub294 \uc2a4\ud0dd\uc5d0 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd \uc21c\uc11c(Right to Left)\ub85c <code>push</code>\ub418\uc5b4 \uc804\ub2ec\ub429\ub2c8\ub2e4.</li> <li>\ud638\ucd9c \uaddc\uc57d:<ul> <li><code>__cdecl</code>: \ud638\ucd9c\ud558\ub294 \ucabd(Caller)\uc774 \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc815\ub9ac\ud569\ub2c8\ub2e4. \uac00\ubcc0 \uc778\uc790\ub97c \ubc1b\ub294 \ud568\uc218(<code>printf</code>)\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li><code>__stdcall</code>: \ud638\ucd9c\ubc1b\ub294 \ucabd(Callee)\uc774 \uc2a4\ud0dd\uc744 \uc815\ub9ac\ud569\ub2c8\ub2e4. Windows API\uc5d0\uc11c \uc8fc\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li><code>__fastcall</code>: \uc77c\ubd80 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub808\uc9c0\uc2a4\ud130\ub85c \uc804\ub2ec\ud558\uc5ec \uc131\ub2a5\uc744 \ub192\uc785\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/6/#3","title":"3. \ucf54\ub4dc \uc791\uc131 \uae30\ubc95\uacfc \ub9e4\ud06c\ub85c","text":"<ul> <li>\ub9e4\ud06c\ub85c \ud568\uc218\uc640 <code>;</code> \ubb38\uc81c:<ul> <li>\ub9e4\ud06c\ub85c \ud568\uc218\ub97c \uc791\uc131\ud560 \ub54c \uc5ec\ub7ec \uc904\uc758 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud558\uba74 <code>if-else</code>\ubb38 \ub4f1\uc5d0\uc11c \uc138\ubbf8\ucf5c\ub860(;) \ub54c\ubb38\uc5d0 \uad6c\ubb38 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 <code>do { ... } while(0)</code> \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub9e4\ud06c\ub85c\ub97c \ud558\ub098\uc758 \ubb38\uc7a5\ucc98\ub7fc \ub9cc\ub4ed\ub2c8\ub2e4.</li> </ul> </li> <li><code>try-catch</code> \uc8fc\uc758\uc810:<ul> <li><code>try-catch</code>\ub294 \uc608\uc678\uc801\uc778 \uc0c1\ud669(<code>null</code> \ud3ec\uc778\ud130 \uc811\uadfc \ub4f1)\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \uac83\uc774\uba70, \uc77c\ubc18\uc801\uc778 \ub85c\uc9c1 \ud750\ub984 \uc81c\uc5b4\uc5d0\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> <li>OS\uac00 \uac1c\uc785\ud558\ubbc0\ub85c \uc131\ub2a5 \uc624\ubc84\ud5e4\ub4dc\uac00 \ub9e4\uc6b0 \ud07d\ub2c8\ub2e4.</li> </ul> </li> <li><code>switch-case</code> \ucd5c\uc801\ud654:<ul> <li><code>switch-case</code>\ubb38\uc740 <code>if-else</code>\uc758 \ub2e8\uc21c \ubc18\ubcf5\uc774 \uc544\ub2d9\ub2c8\ub2e4.</li> <li><code>case</code> \uac12\ub4e4\uc774 \uc5f0\uc18d\uc801\uc774\uac70\ub098 \ud2b9\uc815 \uaddc\uce59\uc744 \uac00\uc9c0\uba74, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc810\ud504 \ud14c\uc774\ube14\uc744 \ub9cc\ub4e4\uc5b4 \uc989\uc2dc \ud574\ub2f9 \ucf54\ub4dc\ub85c \uc810\ud504\ud569\ub2c8\ub2e4. \uc774\ub294 <code>if-else</code>\ubcf4\ub2e4 \ud6e8\uc52c \ube60\ub985\ub2c8\ub2e4.</li> <li>\ub2e4\ub9cc, <code>case</code> \uac12\ub4e4\uc774 \ubd88\uaddc\uce59\uc801\uc73c\ub85c \ud769\uc5b4\uc838 \uc788\uc73c\uba74 <code>if-else</code>\uc640 \uc720\uc0ac\ud558\uac8c \ub3d9\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/6/#4","title":"4. \uae30\ud0c0 \uac1c\ub150","text":"<ul> <li>\ubb38\uc790\uc5f4: <code>wchar</code> \ub97c \uc0ac\uc6a9\ud55c \uba40\ud2f0\ubc14\uc774\ud2b8(\uc720\ub2c8\ucf54\ub4dc) \ubb38\uc790\uc5f4\uc774 \ud604\uc7ac \ud45c\uc900\uc774\uba70, \uacfc\uac70\uc758 <code>tchar</code> \ub294 \uacfc\ub3c4\uae30\uc801 \uc720\ubb3c\uc785\ub2c8\ub2e4.</li> <li>\uba54\ubaa8\ub9ac \uc5f0\uc0b0: <code>x86</code> \uc544\ud0a4\ud14d\ucc98\ub294 \ub450 \uba54\ubaa8\ub9ac \uc8fc\uc18c \uac04\uc758 \uc9c1\uc811\uc801\uc778 \ube44\uad50 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubc18\ub4dc\uc2dc \ud55c\ucabd \uac12\uc744 \ub808\uc9c0\uc2a4\ud130\ub85c \uc62e\uaca8\uc11c \ube44\uad50\ud574\uc57c \ud569\ub2c8\ub2e4.</li> <li>\ud074\ub9b0 \ucf54\ub4dc: \uac1d\uccb4\uc9c0\ud5a5 \uc124\uacc4\ub294 \uc911\uc694\ud558\uc9c0\ub9cc, MMORPG\uc640 \uac19\uc740 \ubcf5\uc7a1\ud558\uace0 \ubcc0\ud654\uac00 \ub9ce\uc740 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \ud604\uc2e4\uc801\uc778 \ud0c0\ud611\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/7/","title":"7","text":""},{"location":"Architecture/Exam/7/#_1","title":"\ud575\uc2ec \uc694\uc57d: \ud568\uc218, \uc790\ub8cc\uad6c\uc870, \uadf8\ub9ac\uace0 \uc5b4\uc148\ube14\ub9ac \ubd84\uc11d","text":"<p>\uc774 \ub178\ud2b8\ub294 \ud568\uc218 \ud638\ucd9c\uc758 \uc138\ubd80 \uc6d0\ub9ac\uc640 \uba54\ubaa8\ub9ac\uc5d0\uc11c\uc758 \uad6c\uc870\uccb4 \ub3d9\uc791 \ubc29\uc2dd, \uadf8\ub9ac\uace0 \ucef4\ud30c\uc77c\ub7ec \uacbd\uace0\uc758 \uc911\uc694\uc131\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/7/#1","title":"1. \ud568\uc218 \ud638\ucd9c\uacfc \ubc18\ud658 \uac12","text":"<ul> <li><code>eax</code> \ub808\uc9c0\uc2a4\ud130: \ud568\uc218\uc758 \ubc18\ud658 \uac12\uc740 <code>eax</code> \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \uc18c\uc2a4 \ucf54\ub4dc\uac00 \uc5c6\ub294 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac(<code>WinAPI</code>)\ub97c \ub514\ubc84\uae45\ud560 \ub54c, <code>eax</code>\uc758 \uac12\uc744 \ud1b5\ud574 \ud568\uc218\uc758 \ubc18\ud658 \uac12\uc744 \ucd94\ub860\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uacbd\uace0(<code>Warning</code>)\uc758 \uc911\uc694\uc131: <code>int</code> \ud0c0\uc785 \ud568\uc218\uc5d0 <code>return</code> \ubb38\uc774 \uc5c6\ub294 \uacbd\uc6b0(<code>warning C4715</code>), \ucef4\ud30c\uc77c\ub7ec\ub294 \uc624\ub958\ub97c \ub0b4\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 <code>eax</code> \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc774\uc804\uc5d0 \uc2e4\ud589\ub41c \ub2e4\ub978 \ud568\uc218\uc758 \ubc18\ud658 \uac12(\uc608: <code>printf</code>\uac00 \ubc18\ud658\ud55c \ubb38\uc790 \uac1c\uc218)\uc774 \ub0a8\uc544\uc788\uc5b4 \uc608\uae30\uce58 \uc54a\uc740 \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e8 \ud55c \uac1c\uc758 \uacbd\uace0\ub3c4 \ub0a8\uae30\uc9c0 \uc54a\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/7/#2","title":"2. \uad6c\uc870\uccb4\uc640 \uba54\ubaa8\ub9ac","text":"<ul> <li>\uad6c\uc870\uccb4 \uba64\ubc84 \uc811\uadfc: \uad6c\uc870\uccb4 \uba64\ubc84\ub294 \uad6c\uc870\uccb4 \uc2dc\uc791 \uc8fc\uc18c\ub97c \uae30\uc900\uc73c\ub85c \ud55c \uc624\ud504\uc14b(offset)\uc73c\ub85c \uc811\uadfc\ub429\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac\uc5b4\uc5d0\uc11c\ub294 <code>mov ptr[ebp-8]</code>\uc640 \uac19\uc774 \uc624\ud504\uc14b\uc744 \ud65c\uc6a9\ud569\ub2c8\ub2e4.</li> <li>\uad6c\uc870\uccb4 \ubcf5\uc0ac:<ul> <li><code>DATA b = d;</code>\uc640 \uac19\uc774 \uad6c\uc870\uccb4\ub97c \ud1b5\uc9f8\ub85c \ubcf5\uc0ac\ud558\uba74, \ucef4\ud30c\uc77c\ub7ec\ub294 <code>rep movs</code>\uc640 \uac19\uc740 \ubc18\ubcf5\uc801\uc778 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc744 \uc0dd\uc131\ud558\uc5ec \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \ubcf5\uc0ac\ub97c \uc218\ud589\ud569\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc740 \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uba40\ud2f0\uc2a4\ub808\ub529 \ud658\uacbd\uc5d0\uc11c \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \ub370\uc774\ud130\ub97c \uc4f0\ub294 \ub3c4\uc911 \ubc14\uc774\ud2b8 \ub2e8\uc704\ub85c \uc77d\uc5b4\uc624\uba74, \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc774\uc0c1\ud55c \uac12\uc774 \ub098\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> </li> <li>\ub9e4\uac1c\ubcc0\uc218 \ubc0f \ubc18\ud658 \uac12\uc73c\ub85c \uc0ac\uc6a9: \ud06c\uae30\uac00 \ud070 \uad6c\uc870\uccb4\ub97c \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uac70\ub098 \ubc18\ud658 \uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74, \ub9e4\ubc88 \uc804\uccb4 \uad6c\uc870\uccb4\uac00 \uc2a4\ud0dd\uc5d0 \ubcf5\uc0ac\ub418\uc5b4 \uc131\ub2a5 \uc800\ud558\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc804\ub2ec\ud558\ub294 \uac83\uc774 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/7/#3-rand","title":"3. \ub09c\uc218(<code>rand</code>)\uc640 \uc5b4\uc148\ube14\ub9ac \ubd84\uc11d","text":"<ul> <li>\uc758\uc0ac \ub09c\uc218: <code>rand()</code> \ud568\uc218\ub294 \uc9c4\uc815\ud55c \uc758\ubbf8\uc758 \ub09c\uc218\uac00 \uc544\ub2cc \uc758\uc0ac \ub09c\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. <code>srand()</code> \ud568\uc218\ub85c \uc2dc\ub4dc(seed) \uac12\uc744 \uc8fc\uc5b4 \ub09c\uc218 \uc0dd\uc131 \ud328\ud134\uc744 \ucd08\uae30\ud654\ud560 \uc218 \uc788\uc73c\uba70, \uc77c\ubc18\uc801\uc73c\ub85c <code>time(nullptr)</code>\uc744 \uc2dc\ub4dc\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> <li><code>rand()</code>\uc758 \ub3d9\uc791 \uc6d0\ub9ac: \uc5b4\uc148\ube14\ub9ac \ubd84\uc11d\uc744 \ud1b5\ud574 <code>rand()</code>\uac00 \uc2dc\ub4dc \uac12\uc5d0 \ud2b9\uc815 \uc0c1\uc218\ub4e4\uc744 \uacf1\ud558\uace0 \ub354\ud558\ub294 \ub2e8\uc21c\ud55c \uc5f0\uc0b0\uc744 \ubc18\ubcf5\ud568\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc554\ud638\ud559\uc801\uc73c\ub85c \uc548\uc804\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> <li>\uc628\ub77c\uc778 \uac8c\uc784\uc5d0\uc11c\uc758 \ub09c\uc218: \uc628\ub77c\uc778 \uac8c\uc784\uc5d0\uc11c\ub294 \uc11c\ubc84\uc640 \ud074\ub77c\uc774\uc5b8\ud2b8 \uac04\uc758 \uc0c1\ud0dc\ub97c \uc77c\uce58\uc2dc\ud0a4\uae30 \uc704\ud574 \ub3d9\uc77c\ud55c \ub09c\uc218 \ud328\ud134\uc744 \ubcf4\uc7a5\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc11c\ubc84\uc640 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ub3d9\uc77c\ud55c \ub09c\uc218 \uc54c\uace0\ub9ac\uc998\uacfc \uc2dc\ub4dc\uac12\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/7/#4","title":"4. \ud568\uc218 \ud638\ucd9c \uaddc\uc57d \uc2ec\ud654 \ubc0f \ucd5c\uc801\ud654","text":"<ul> <li><code>__fastcall</code>: \ub9e4\uac1c\ubcc0\uc218\ub97c \uc2a4\ud0dd\uc774 \uc544\ub2cc \ub808\uc9c0\uc2a4\ud130\ub85c \uc804\ub2ec\ud558\uc5ec \ud568\uc218 \ud638\ucd9c \uc624\ubc84\ud5e4\ub4dc\ub97c \uc904\uc774\ub294 \uaddc\uc57d\uc785\ub2c8\ub2e4.</li> <li><code>switch-case</code>\uc640 \ud568\uc218 \ud3ec\uc778\ud130: <code>switch-case</code> \ubb38\uc774 \ub9e4\uc6b0 \ucee4\uc9c8 \uacbd\uc6b0, <code>case</code> \uac12\uc5d0 \ub530\ub77c \ubd84\uae30\ud558\ub294 \ub300\uc2e0 \ud568\uc218 \ud3ec\uc778\ud130 \ubc30\uc5f4\uc774\ub098 <code>map</code>\uacfc \uac19\uc740 \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc5ec \uba54\uc2dc\uc9c0 \ubc88\ud638\uc640 \ud568\uc218\ub97c \uc5f0\uacb0\ud558\uba74 \uc131\ub2a5\uc744 \ucd5c\uc801\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. <code>switch-case</code>\ub294 \ub514\ubc84\uae45\uc5d0\ub294 \ub354 \uc9c1\uad00\uc801\uc774\ub77c\ub294 \uc7a5\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\uc678\ubd80 \ucf54\ub4dc \ub514\ubc84\uae45: \uc18c\uc2a4 \ucf54\ub4dc\uac00 \uc5c6\ub294 \ub7f0\ud0c0\uc784 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 API\ub97c \ub514\ubc84\uae45\ud560 \ub54c, \uc2ec\ubcfc \ud30c\uc77c\uc744 \ub85c\ub4dc\ud558\uc5ec \ud568\uc218 \uc774\ub984\uc744 \ud655\uc778\ud558\uace0 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub97c \ubd84\uc11d\ud558\uc5ec \ub3d9\uc791\uc744 \ud30c\uc545\ud574\uc57c \ud569\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/8/","title":"8","text":""},{"location":"Architecture/Exam/8/#_1","title":"\ud575\uc2ec \uc694\uc57d: \uc4f0\ub808\ub4dc, \uc7ac\uadc0, \uadf8\ub9ac\uace0 \uc2a4\ud0dd \uc624\uc5fc \ud83e\udde0","text":"<p>\uc774\ubc88 \ub178\ud2b8\ub294 \uc6b4\uc601\uccb4\uc81c\uc758 \uc4f0\ub808\ub4dc \ub3d9\uc791 \ubc29\uc2dd, \uc7ac\uadc0 \ud568\uc218\uc758 \uc704\ud5d8\uc131, \uadf8\ub9ac\uace0 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc624\uc5fc \ubb38\uc81c\ub97c \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/8/#1-vs","title":"1. \uc4f0\ub808\ub4dc \uac1c\ub150\uc758 \uc7ac\uc815\ub9bd: \ucee4\ub110 vs. \uc720\uc800 \ub808\ubca8","text":"<ul> <li>\uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\ub294 \uc4f0\ub808\ub4dc: C++ \ub4f1\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uc4f0\ub808\ub4dc\ub294 \ub300\ubd80\ubd84 \ucee4\ub110 \ub808\ubca8 \uc4f0\ub808\ub4dc\uc785\ub2c8\ub2e4. OS\uac00 \uc9c1\uc811 \uc2a4\ucf00\uc904\ub9c1\ud558\uba70, \uba40\ud2f0\ucf54\uc5b4 CPU\ub97c \ud65c\uc6a9\ud574 \ubcd1\ub82c \ucc98\ub9ac\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.</li> <li>\uc720\uc800 \ub808\ubca8 \uc4f0\ub808\ub4dc: \ud30c\uc774\ubc84(Fiber), \ucf54\ub8e8\ud2f4(Coroutine) \ub4f1\uc774 \uc774\uc5d0 \ud574\ub2f9\ud569\ub2c8\ub2e4. \ud558\ub098\uc758 \ucee4\ub110 \uc4f0\ub808\ub4dc \uc704\uc5d0\uc11c \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uc5d0 \uc758\ud574 \uc2e4\ud589\ub429\ub2c8\ub2e4.<ul> <li>\ud2b9\uc9d5: OS\uc758 \uac1c\uc785 \uc5c6\uc774 \ucf54\ub4dc \ub0b4\ubd80\uc5d0\uc11c \uc9c1\uc811 \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li>\ubaa9\uc801: \ubcd1\ub82c \ucc98\ub9ac\uac00 \uc544\ub2cc, \ud558\ub098\uc758 \ucee4\ub110 \uc4f0\ub808\ub4dc \ub0b4\uc5d0\uc11c \uc5ec\ub7ec \uc791\uc5c5\uc744 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li>\uc608\uc2dc: \uc720\ub2c8\ud2f0 \uc5d4\uc9c4\uacfc \uac19\uc774 \uc2f1\uae00 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \ube44\ub3d9\uae30 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \ub300\uc548\uc73c\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> </ul> </li> <li>\ube14\ub85c\ud0b9\uacfc \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d:<ul> <li><code>CRITICAL_SECTION</code>\uacfc \uac19\uc740 \ub77d\uc5d0 \uc758\ud574 \ucee4\ub110 \ub808\ubca8 \uc4f0\ub808\ub4dc\uac00 \ub9c9\ud788\uba74 \ud574\ub2f9 \uc4f0\ub808\ub4dc\ub9cc \uba48\ucd94\uace0 \ub2e4\ub978 \ucee4\ub110 \uc4f0\ub808\ub4dc\ub294 \uacc4\uc18d \uc2e4\ud589\ub429\ub2c8\ub2e4.</li> <li>\uc720\uc800 \ub808\ubca8 \uc4f0\ub808\ub4dc\uac00 \ucee4\ub110 \uac1d\uccb4(\uc608: \ud30c\uc77c I/O) \ub54c\ubb38\uc5d0 \ube14\ub85c\ud0b9\ub418\uba74 \ud574\ub2f9 \ud504\ub85c\uc138\uc2a4\ub97c \ub2f4\uace0 \uc788\ub294 \ucee4\ub110 \uc4f0\ub808\ub4dc \uc804\uccb4\uac00 \uc911\ub2e8\ub429\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/8/#2","title":"2. \uc7ac\uadc0 \ud568\uc218\uc640 \uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0","text":"<ul> <li>\uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0: \uc7ac\uadc0 \ud568\uc218\ub294 \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \uc2a4\ud0dd\uc5d0 \uc0c8\ub85c\uc6b4 \ud504\ub808\uc784\uc744 \uc313\uc2b5\ub2c8\ub2e4. \ubb34\ud55c \uc7ac\uadc0 \ub610\ub294 \uc7ac\uadc0 \uae4a\uc774\uac00 \uc9c0\ub098\uce58\uac8c \uae4a\uc5b4\uc9c0\uba74 \uc2a4\ud0dd\uc758 \uc81c\ud55c\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ucd08\uacfc\ud558\uc5ec \uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li>\ub514\ubc84\uadf8 vs. \ub9b4\ub9ac\uc988: \ub514\ubc84\uadf8 \ubaa8\ub4dc\ub294 \ub9b4\ub9ac\uc988 \ubaa8\ub4dc\ubcf4\ub2e4 \uc2a4\ud0dd \ud06c\uae30\uac00 \uc791\uc544 \uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ub354 \uc27d\uac8c \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li>\uc548\uc804\uc131: \uc7ac\uadc0\ub294 \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0 \uc704\ud5d8\ud55c \uac83\uc740 \uc544\ub2c8\uba70, \ud2b8\ub9ac \uc790\ub8cc\uad6c\uc870\uc640 \uac19\uc774 \uc7ac\uadc0 \uae4a\uc774\uac00 \uc798 \uc81c\uc5b4\ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 \ud6a8\uc728\uc801\uc778 \uad6c\ud604 \ubc29\ubc95\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/8/#3","title":"3. \uc2a4\ud0dd \ud504\ub808\uc784 \uc624\uc5fc\uacfc \ubc29\uc5b4 \uae30\ubc95","text":"<ul> <li>\uc2a4\ud0dd \ud504\ub808\uc784: \ud568\uc218\uac00 \ud638\ucd9c\ub420 \ub54c \uc2a4\ud0dd\uc5d0 \uc313\uc774\ub294 \ub370\uc774\ud130 \uad6c\uc870\ub85c, \uc9c0\uc5ed \ubcc0\uc218, \uc774\uc804 <code>ebp</code> \uac12, \uadf8\ub9ac\uace0 \ubc18\ud658 \uc8fc\uc18c(<code>ret ip</code>) \ub4f1\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4.</li> <li>\uc624\uc5fc\uc758 \uc6d0\uc778: \ubc84\ud37c \uc624\ubc84\ub7f0\uacfc \uac19\uc740 \uba54\ubaa8\ub9ac \uc811\uadfc \uc624\ub958\ub85c \uc778\ud574 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub41c \uc9c0\uc5ed \ubcc0\uc218 \uc601\uc5ed\uc744 \ub118\uc5b4 \ub2e4\ub978 \uc911\uc694\ud55c \ub370\uc774\ud130(\uc774\uc804 <code>ebp</code>, \ubc18\ud658 <code>ip</code>)\ub97c \ub36e\uc5b4\uc4f0\uac8c \ub420 \ub54c \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li>\uc624\uc5fc\uc758 \uacb0\uacfc:<ul> <li>\uc989\uac01\uc801\uc778 \uc624\ub958: \ubc18\ud658 <code>ip</code>\uac00 \ub36e\uc5b4\uc4f0\uc5ec \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \ud750\ub984\uc774 \uc5c9\ub6b1\ud55c \uacf3\uc73c\ub85c \uc810\ud504\ud558\uc5ec \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub429\ub2c8\ub2e4.</li> <li>\ucd5c\uc545\uc758 \uacbd\uc6b0: <code>ebp</code>\uac00 \ub36e\uc5b4\uc4f0\uc5ec \ubd80\ubaa8 \ud568\uc218\uc758 \uc9c0\uc5ed \ubcc0\uc218\uc5d0 \uc798\ubabb \uc811\uadfc\ud558\uac70\ub098, \ub370\uc774\ud130\uac00 \uc624\uc5fc\ub418\ub294 \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uc774\ub294 \ud504\ub85c\uadf8\ub7a8\uc774 \ub2f9\uc7a5 \uba48\ucd94\uc9c0 \uc54a\uace0 \uc798\ubabb\ub41c \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\uac8c \ub9cc\ub4e4\uc5b4 \ub354 \ud070 \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> </li> <li>\ubc29\uc5b4 \uae30\ubc95:<ul> <li>\uc2a4\ud0dd \ucfe0\ud0a4(<code>__security_cookie</code>): \ucef4\ud30c\uc77c\ub7ec\ub294 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc911\uc694 \ub370\uc774\ud130\uac00 \uc624\uc5fc\ub418\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud574 \uc9c0\uc5ed \ubcc0\uc218\uc640 \uc800\uc7a5\ub41c <code>ebp</code> \uc0ac\uc774\uc5d0 \ucfe0\ud0a4 \uac12\uc744 \uc0bd\uc785\ud569\ub2c8\ub2e4.</li> <li>\uc791\ub3d9 \ubc29\uc2dd: \ud568\uc218 \uc885\ub8cc \uc2dc \uc774 \ucfe0\ud0a4 \uac12\uc774 \ubcc0\uacbd\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uc5ec, \ubcc0\uc870\uac00 \uac10\uc9c0\ub418\uba74 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589\uc744 \uc911\ub2e8\uc2dc\ud0b5\ub2c8\ub2e4.</li> <li>\ud55c\uacc4: \ub9cc\uc57d \ucfe0\ud0a4 \uc601\uc5ed\uc744 \uac74\ub108\ub6f0\uace0 \ubc14\ub85c <code>ebp</code>\ub97c \ub36e\uc5b4\uc4f0\ub294 \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud558\uba74 \uc774 \ubc29\uc5b4 \uae30\ubc95\uc73c\ub85c\ub3c4 \ub9c9\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/9/","title":"9","text":""},{"location":"Architecture/Exam/9/#_1","title":"\ud575\uc2ec \uc694\uc57d: \uba54\ubaa8\ub9ac, \uc4f0\ub808\ub4dc, \uadf8\ub9ac\uace0 \uc2a4\ud0dd \ud504\ub808\uc784 \uc624\uc5fc","text":"<p>\uc774 \ub178\ud2b8\ub294 \ud504\ub85c\uc138\uc2a4\uc640 \uc4f0\ub808\ub4dc\uc758 \uba54\ubaa8\ub9ac \ub3d9\uc791 \ubc29\uc2dd, \uc2a4\ud0dd \uc624\uc5fc\uc758 \uc6d0\uc778\uacfc \ucd94\uc801 \ubc29\ubc95, \uadf8\ub9ac\uace0 \ud06c\ub798\uc2dc \ub364\ud504 \ubd84\uc11d\uc5d0 \ub300\ud55c \ub0b4\uc6a9\uc744 \ub2e4\ub8f9\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/9/#1","title":"1. \uba54\ubaa8\ub9ac \uc2e4\ud589 \uc18d\uc131 \ubc0f \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d","text":"<ul> <li>\uba54\ubaa8\ub9ac \uc2e4\ud589 \uc18d\uc131: 64\ube44\ud2b8 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 CPU\uac00 \ud398\uc774\uc9c0 \ud14c\uc774\ube14\uc758 <code>Execute</code> \uc18d\uc131\uc744 \uc9c1\uc811 \uad00\ub9ac\ud558\uc5ec \ube44\uc2e4\ud589 \uba54\ubaa8\ub9ac(\uc608: \uc2a4\ud0dd, \ud799)\uc5d0\uc11c \ucf54\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \uac83\uc744 \ub9c9\uc2b5\ub2c8\ub2e4. 32\ube44\ud2b8 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \uc6b4\uc601\uccb4\uc81c\uac00 \uc774 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.</li> <li>\ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d:<ul> <li>\ud504\ub85c\uc138\uc2a4 \uac04 \uc2a4\uc704\uce6d: \uce90\uc2dc \uba54\ubaa8\ub9ac\ub97c \ud50c\ub7ec\uc2dc\ud558\uace0 \uc0c8\ub85c\uc6b4 \ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac\ub97c \ub85c\ub4dc\ud574\uc57c \ud558\ubbc0\ub85c \ub290\ub9bd\ub2c8\ub2e4.</li> <li>\uc4f0\ub808\ub4dc \uac04 \uc2a4\uc704\uce6d: \uac19\uc740 \ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac\ub97c \uacf5\uc720\ud558\ubbc0\ub85c \uce90\uc2dc\ub97c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4 \ube60\ub985\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/9/#2","title":"2. \uc4f0\ub808\ub4dc \uc0dd\uc131\uacfc \uc2a4\ud0dd \ud504\ub808\uc784","text":"<ul> <li>\ub3c5\ub9bd\uc801\uc778 \uba54\ubaa8\ub9ac \ud560\ub2f9: <code>_beginthreadex</code>\uc640 \uac19\uc740 \uc77c\ubd80 \uc4f0\ub808\ub4dc \uc0dd\uc131 \ud568\uc218\ub294 \uc2a4\ud0dd \uc678\uc5d0 \ud45c\uc900 C \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\uac00 \uc4f0\ub808\ub4dc\ubcc4\ub85c \ub3c5\ub9bd\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubcc4\ub3c4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud569\ub2c8\ub2e4. \uc774\ub294 \uba40\ud2f0\uc4f0\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc548\uc804\ud558\uac8c \uc0ac\uc6a9\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</li> <li>\uc2a4\ud0dd \ud504\ub808\uc784 \ubcc0\uc218 \uc21c\uc11c: \uc9c0\uc5ed \ubcc0\uc218\ub294 \uc120\uc5b8 \uc21c\uc11c\ub300\ub85c \uc2a4\ud0dd\uc5d0 \ubc30\uce58\ub418\uc9c0 \uc54a\uc73c\uba70, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc784\uc758\ub85c \uc21c\uc11c\ub97c \uacb0\uc815\ud569\ub2c8\ub2e4. \ubc30\uc5f4\uc740 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \ucd5c\uc0c1\ub2e8(\uc2a4\ud0dd\uc758 \uac00\uc7a5 \ub0ae\uc740 \uc8fc\uc18c)\uc5d0 \ubc30\uce58\ub418\uc5b4 \uc5b8\ub354\ud50c\ub85c\uc6b0 \ubc1c\uc0dd \uc2dc \uc0c1\uc704 \uc2a4\ud0dd\uc744 \uce68\ubc94\ud560 \uc704\ud5d8\uc774 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul>"},{"location":"Architecture/Exam/9/#3","title":"3. \uc2a4\ud0dd \uc624\uc5fc \ucd94\uc801 \ubc0f \ubd84\uc11d","text":"<ul> <li>\uc2a4\ud0dd \ud504\ub808\uc784 \uc624\uc5fc \uc6d0\uc778: <code>scanf</code>\uc640 \uac19\uc740 \ud568\uc218\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \uac00\uc7a5 \ud754\ud55c \uc6d0\uc778\uc785\ub2c8\ub2e4. \ubc30\uc5f4\uc758 \uacbd\uacc4\ub97c \ub118\uc5b4 \ub370\uc774\ud130\ub97c \uc4f0\uba74, \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \ub2e4\ub978 \ubcc0\uc218\ub4e4\uacfc <code>ebp</code>(Base Pointer), \uc2ec\uc9c0\uc5b4\ub294 \ubc18\ud658 \uc8fc\uc18c(<code>return IP</code>)\uae4c\uc9c0 \ub36e\uc5b4\uc4f0\uac8c \ub429\ub2c8\ub2e4.</li> <li>\uc624\uc5fc\ub41c <code>ebp</code>:<ul> <li>\uc99d\uc0c1: \ud568\uc218\uc758 \uc9c0\uc5ed \ubcc0\uc218\uac00 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc740 \uac12\uc73c\ub85c \ubcc0\ud558\uac70\ub098, \ud568\uc218 \ubc18\ud658 \ud6c4 \ud638\ucd9c\uc790 \ud568\uc218\uc758 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc774 \uc5c9\ub6b1\ud55c \uac12\uc744 \uac00\ub9ac\ud0b5\ub2c8\ub2e4.</li> <li>\ud2b9\uc9d5: <code>ebp</code>\uac00 \uc624\uc5fc\ub41c \ud568\uc218\ub294 \uc815\uc0c1\uc801\uc73c\ub85c \uc2e4\ud589\ub420 \uc218 \uc788\uc9c0\ub9cc, \ud568\uc218\uac00 \ubc18\ud658\ub420 \ub54c \ube44\uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc744 \uc720\ubc1c\ud558\uc5ec \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud55c \uc704\uce58\uc640 \uc624\ub958\uac00 \uac10\uc9c0\ub41c \uc704\uce58\uac00 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> </li> <li>\uc624\uc5fc\ub41c <code>IP</code>:<ul> <li>\uc99d\uc0c1: \ubc18\ud658 \uc8fc\uc18c\uac00 \ub36e\uc5b4\uc4f0\uc5ec \ud568\uc218\uac00 \ubc18\ud658\ub420 \ub54c \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub85c \uc810\ud504\ud558\uc5ec \"\uc561\uc138\uc2a4 \uc704\ubc18\"\uacfc \uac19\uc740 \uce58\uba85\uc801\uc778 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</li> <li>\ubd84\uc11d \uc5b4\ub824\uc6c0: <code>IP</code>\uac00 \uc624\uc5fc\ub418\uba74 \ucf5c \uc2a4\ud0dd\uc774 \uae68\uc838 \ub514\ubc84\uac70\uc5d0\uc11c \uc720\uc6a9\ud55c \uc815\ubcf4\ub97c \uc5bb\uae30 \uc5b4\ub835\uc2b5\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/9/#4","title":"4. \ub514\ubc84\uae45 \uae30\ubc95 \ubc0f \ub364\ud504 \ud30c\uc77c \ud65c\uc6a9","text":"<ul> <li>\ub364\ud504 \ud30c\uc77c(<code>.DMP</code>): \ud2b9\uc815 \uc2dc\uc810\uc758 \ud504\ub85c\uc138\uc2a4 \uba54\ubaa8\ub9ac \uc0c1\ud0dc\ub97c \uc800\uc7a5\ud55c \uc2a4\ub0c5\uc0f7 \ud30c\uc77c\uc785\ub2c8\ub2e4. <code>task manager</code> \ub610\ub294 \ucf54\ub4dc \ub0b4\uc5d0\uc11c <code>__debugbreak()</code>\uc640 \uac19\uc740 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li>\ub364\ud504 \ud30c\uc77c \ubd84\uc11d: Visual Studio\uc5d0\uc11c <code>.DMP</code> \ud30c\uc77c\uc744 \uc5f4\uc5b4 \ud06c\ub798\uc2dc \ubc1c\uc0dd \uc2dc\uc810\uc758 \ub808\uc9c0\uc2a4\ud130, \uc2a4\ud0dd, \ud799 \uc0c1\ud0dc \ub4f1\uc744 \ud655\uc778\ud558\uc5ec \ubb38\uc81c\ub97c \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> <li><code>ebp</code> \uc624\uc5fc \ud655\uc778:<ul> <li>\ub364\ud504 \ud30c\uc77c\uc5d0\uc11c \uc2a4\ud0dd\uc744 \uc9c1\uc811 \ud655\uc778\ud558\uc5ec \uc800\uc7a5\ub41c <code>ebp</code> \uac12(<code>old ebp</code>)\uc774 \uc624\uc5fc\ub418\uc5c8\ub294\uc9c0 \uac80\uc0ac\ud569\ub2c8\ub2e4.</li> <li>\uc624\ub958\uc758 \uc99d\uc0c1\uacfc \uc6d0\uc778\uc744 \ubc18\ub4dc\uc2dc \uc9c1\uc811 \uc99d\uba85\ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e8\uc21c\ud788 \ucf54\ub4dc\ub97c \uc218\uc815\ud558\uace0 \ubb38\uc81c\uac00 \uc0ac\ub77c\uc84c\ub2e4\uace0 \ud574\uc11c \ud574\uacb0\ub41c \uac83\uc774 \uc544\ub2d9\ub2c8\ub2e4.</li> </ul> </li> <li>IP \uc624\uc5fc \ud655\uc778:<ul> <li><code>IP</code> \ub808\uc9c0\uc2a4\ud130\uc758 \uac12\uc774 \uc720\ud6a8\ud55c \uc8fc\uc18c\uc778\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.</li> <li><code>ret</code> \uba85\ub839\uc5b4 \uc9c1\uc804\uc758 \uc2a4\ud0dd \uc0c1\ud0dc\ub97c \ud655\uc778\ud558\uc5ec \ubc18\ud658 \uc8fc\uc18c\uac00 \uc720\ud6a8\ud55c\uc9c0 \uac80\uc99d\ud569\ub2c8\ub2e4.</li> </ul> </li> <li>\uc548\uc804\ud55c \ubc84\uadf8 \ud574\uacb0:<ul> <li>\ubb38\uc81c\uc758 \uc7ac\ud604 \uc870\uac74\uc744 \ucc3e\uc544\uc57c \ud569\ub2c8\ub2e4.</li> <li><code>__debugbreak()</code> \ub4f1\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud2b9\uc815 \uc870\uac74\uc5d0\uc11c \uc758\ub3c4\uc801\uc73c\ub85c \ud06c\ub798\uc2dc\ub97c \ubc1c\uc0dd\uc2dc\ucf1c \ub364\ud504 \ud30c\uc77c\uc744 \ud655\ubcf4\ud558\ub294 \uac83\uc774 \ud6a8\uacfc\uc801\uc785\ub2c8\ub2e4.</li> <li>\ub370\uc774\ud130 \uc624\uc5fc\uc740 \ud06c\ub798\uc2dc\ubcf4\ub2e4 \uc704\ud5d8\ud558\ubbc0\ub85c, \uc774\uc0c1\uc9d5\ud6c4\uac00 \ubc1c\uacac\ub418\uba74 \uc989\uc2dc \ud504\ub85c\uc138\uc2a4\ub97c \uc885\ub8cc\ud558\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1\ud569\ub2c8\ub2e4.</li> </ul> </li> </ul>"},{"location":"Architecture/Exam/e1/","title":"E1","text":"<p>\uc800\ubc88 \ubb38\uc81c\ub4e4\uc774 \ud5f7\uac08\ub9ac\uac8c \ub290\uaef4\uc84c\ub2e4\uba74 \uc8c4\uc1a1\ud569\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \uae30\uc874\uc5d0 \uc0ac\uc6a9\ud588\ub358 \ub2e8\uc5b4\uc640 \ub9e5\ub77d\uc744 \uc720\uc9c0\ud558\uba74\uc11c, \ud559\uc2b5 \ub0b4\uc6a9\uc744 \ub354 \uba85\ud655\ud788 \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \ubb38\uc81c\ub97c \uc218\uc815\ud558\uc5ec \ub2e4\uc2dc \ub0b4\ub4dc\ub9b4\uac8c\uc694. </p>"},{"location":"Architecture/Exam/e1/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 \uc9c0\ub09c \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4. \uae30\uc874 \ub178\ud2b8\uc5d0\uc11c \ub2e4\ub8e8\uc5c8\ub358 \uc6a9\uc5b4\uc640 \uac1c\ub150\uc744 \uc911\uc2ec\uc73c\ub85c \ubb38\uc81c\ub97c \ub9cc\ub4e4\uc5c8\uc73c\ub2c8, \ud3b8\uc548\ud558\uac8c \ud480\uc5b4\ubcf4\uc138\uc694.</p> <ol> <li> <p>\uc2a4\ud0dd \ud504\ub808\uc784\uacfc \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. 32\ube44\ud2b8 \ud658\uacbd\uc5d0\uc11c \ud568\uc218\uac00 \ubc18\ud658\ub420 \ub54c, EBP \ub808\uc9c0\uc2a4\ud130\uc640 ESP \ub808\uc9c0\uc2a4\ud130\uc758 \uc5ed\ud560\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) EBP\ub294 \ud568\uc218 \ubc18\ud658\uac12\uc744 \uc800\uc7a5\ud558\uace0, ESP\ub294 \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc800\uc7a5\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.     b) EBP\ub294 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uae30\uc900\uc810 \uc5ed\ud560\uc744 \ud558\uace0, ESP\ub294 \uc2a4\ud0dd\uc758 \uac00\uc7a5 \uc704\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4.     c) EBP\ub294 \ud638\ucd9c\uc790\uc758 \uc2a4\ud0dd \uc8fc\uc18c\ub97c \uc800\uc7a5\ud558\uace0, ESP\ub294 \ud604\uc7ac \ud568\uc218\uc758 \uc2a4\ud0dd \uc8fc\uc18c\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4.     d) EBP\uc640 ESP\ub294 \ub458 \ub2e4 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc800\uc7a5\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</p> </li> <li> <p>\ud568\uc218 \ubc18\ud658\uac12\uacfc \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>int func()</code>\uc640 \uac19\uc774 \uc815\uc218\ud615 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\uc5d0\uc11c <code>return</code> \ubb38\uc774 \uc5c6\ub294 \uc2e4\ud589 \uacbd\ub85c\uac00 \uc788\uc744 \uacbd\uc6b0, \ud574\ub2f9 \ud568\uc218\uac00 \ubc18\ud658\ud558\ub294 \uac12\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud56d\uc0c1 0\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.     b) \ucef4\ud30c\uc77c\ub7ec\uac00 \uc784\uc758\uc758 \uc4f0\ub808\uae30 \uac12\uc744 EAX \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub123\uc2b5\ub2c8\ub2e4.     c) \ud568\uc218\ub97c \ud638\ucd9c\ud55c \ucabd\uc5d0\uc11c EAX \ub808\uc9c0\uc2a4\ud130\uc758 \uc774\uc804 \uac12\uc744 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4.     d) <code>printf()</code>\uc640 \uac19\uc740 \uc774\uc804 \ud568\uc218\uc758 \ubc18\ud658\uac12\uc774 EAX \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub0a8\uc544\uc788\uc5b4 \ud574\ub2f9 \uac12\uc774 \ubc18\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\uad6c\uc870\uccb4 \uba54\ubaa8\ub9ac \uad00\ub9ac\uc640 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uac70\ub300\ud55c \uad6c\uc870\uccb4\ub97c \ud568\uc218\uc5d0 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 \ub54c, \uc131\ub2a5 \uc800\ud558\ub97c \ub9c9\uae30 \uc704\ud55c \uac00\uc7a5 \uc88b\uc740 \ubc29\ubc95\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uad6c\uc870\uccb4\ub97c \uc804\uc5ed \ubcc0\uc218\ub85c \uc120\uc5b8\ud558\uc5ec \ubaa8\ub4e0 \ud568\uc218\uc5d0\uc11c \uc9c1\uc811 \uc811\uadfc\ud558\uac8c \ud569\ub2c8\ub2e4.     b) \uad6c\uc870\uccb4\uc758 \uba64\ubc84 \ubcc0\uc218 \uc21c\uc11c\ub97c \ubc14\uafb8\uc5b4 \ud328\ub529\uc744 \ucd5c\uc18c\ud654\ud569\ub2c8\ub2e4.     c) \uad6c\uc870\uccb4\uc758 \ubcf5\uc0ac\ubcf8 \ub300\uc2e0 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uc804\ub2ec\ud558\uc5ec \ubd88\ud544\uc694\ud55c \uba54\ubaa8\ub9ac \ubcf5\uc0ac\ub97c \ubc29\uc9c0\ud569\ub2c8\ub2e4.     d) \uad6c\uc870\uccb4\ub97c \uc5ec\ub7ec \uac1c\uc758 \uc791\uc740 \uad6c\uc870\uccb4\ub85c \ubd84\ub9ac\ud558\uc5ec \uc804\ub2ec\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc2a4\ud0dd \uc624\uc5fc\uacfc \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ub2e4\uc74c \uc911 \uc2a4\ud0dd \uc624\uc5fc\uc73c\ub85c \uc778\ud574 \ud504\ub85c\uadf8\ub7a8\uc774 \uc989\uc2dc \ube44\uc815\uc0c1 \uc885\ub8cc\ub418\ub294 \uacbd\uc6b0\uc640 \uac00\uc7a5 \uad00\ub828\uc774 \uae4a\uc740 \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) EBP \ub808\uc9c0\uc2a4\ud130\uac00 \uc624\uc5fc\ub418\uc5b4 \uc9c0\uc5ed \ubcc0\uc218\uc5d0 \uc798\ubabb \uc811\uadfc\ud560 \ub54c     b) \ud568\uc218\uac00 <code>return</code>\ud558\uae30 \uc804, \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \ub9ac\ud134 \uc8fc\uc18c(return address)\uac00 \uc624\uc5fc\ub420 \ub54c     c) \ud568\uc218\uac00 <code>return</code> \uc5c6\uc774 \uc885\ub8cc\ub418\uc5b4 EAX \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc4f0\ub808\uae30 \uac12\uc774 \ub0a8\uc744 \ub54c     d) \ub3d9\uc801 \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac(\ud799)\uc5d0\uc11c \ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud560 \ub54c</p> </li> <li> <p>\ub09c\uc218 \uc0dd\uc131\uacfc \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>rand()</code>\uc640 <code>srand()</code>\ub97c \uc0ac\uc6a9\ud55c \uc758\uc0ac \ub09c\uc218 \uc0dd\uc131 \uc2dc\uc2a4\ud15c\uc5d0\uc11c, \ub3d9\uc77c\ud55c \ub09c\uc218\uc5f4\uc744 \ud56d\uc0c1 \uc7ac\ud604\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>srand()</code> \ud568\uc218\ub97c \ub9e4\ubc88 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.     b) <code>time(nullptr)</code> \ub300\uc2e0 \uace0\uc815\ub41c \uc2dc\ub4dc(seed) \uac12\uc744 <code>srand()</code>\uc5d0 \uc804\ub2ec\ud569\ub2c8\ub2e4.     c) \ub09c\uc218 \uc0dd\uc131 \ub85c\uc9c1\uc744 \uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \ubd84\ub9ac\ud569\ub2c8\ub2e4.     d) <code>rand()</code>\ub97c \ud638\ucd9c\ud558\uae30 \uc804\uc5d0 \ud56d\uc0c1 <code>srand()</code>\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc640 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. 32\ube44\ud2b8 \ud658\uacbd\uc5d0\uc11c \ud568\uc218\uac00 \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc704\ud574 \uc2a4\ud0dd \uacf5\uac04\uc744 \ud560\ub2f9\ud560 \ub54c, \ucef4\ud30c\uc77c\ub7ec\ub294 \uc8fc\ub85c \uc5b4\ub5a4 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub098\uc694?     a) <code>push eax</code>     b) <code>add esp, [\ud06c\uae30]</code>     c) <code>sub esp, [\ud06c\uae30]</code>     d) <code>mov esp, [\ud06c\uae30]</code></p> </li> </ol> <p>\uc815\ub2f5 \ubc0f \ud574\uc124</p> <ol> <li> <p>\uc815\ub2f5: b) EBP(Extended Base Pointer)\ub294 \ud568\uc218 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uae30\uc900\uc810 \uc5ed\ud560\uc744 \ud558\uc5ec \uc9c0\uc5ed \ubcc0\uc218\ub098 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc0c1\ub300 \uc8fc\uc18c\ub85c \uc811\uadfc\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. ESP(Extended Stack Pointer)\ub294 \uc2a4\ud0dd\uc758 \uac00\uc7a5 \uc704(Top)\ub97c \uac00\ub9ac\ud0a4\uba70, <code>push</code>, <code>pop</code>, <code>sub</code> \ub4f1\uc758 \uba85\ub839\uc5b4\ub85c \uc2a4\ud0dd \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \ubc18\ud658\ud560 \ub54c \uac12\uc774 \ubcc0\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: d) <code>int</code> \ud568\uc218\uc5d0 <code>return</code> \ubb38\uc774 \uc5c6\ub294 \uc2e4\ud589 \uacbd\ub85c\uac00 \uc788\uc744 \uacbd\uc6b0, \ucef4\ud30c\uc77c\ub7ec\ub294 EAX \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub0a8\uc544\uc788\ub294 \ub9c8\uc9c0\ub9c9 \uac12\uc744 \uadf8\ub300\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uadf8 \uc9c1\uc804\uc5d0 <code>printf()</code>\uc640 \uac19\uc740 \ud568\uc218\uac00 \ud638\ucd9c\ub418\uc5c8\ub2e4\uba74, EAX\uc5d0\ub294 <code>printf()</code>\uc758 \ubc18\ud658\uac12(\ucd9c\ub825\ub41c \ubb38\uc790\uc5f4\uc758 \uac1c\uc218)\uc774 \ub0a8\uc544\uc788\uac8c \ub429\ub2c8\ub2e4. \uc774\ub294 \uc608\uce21 \ubd88\uac00\ub2a5\ud55c \ubc84\uadf8\uc758 \uc6d0\uc778\uc774 \ub420 \uc218 \uc788\uc73c\ubbc0\ub85c, \ucef4\ud30c\uc77c\ub7ec\ub294 \ubcf4\ud1b5 \uc774\ub7f0 \uacbd\uc6b0 \uacbd\uace0(Warning)\ub97c \ub744\uc6c1\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) C++\uc5d0\uc11c \uad6c\uc870\uccb4\ub97c \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uba74 \ud568\uc218 \ud638\ucd9c \uc2dc \ud574\ub2f9 \uad6c\uc870\uccb4 \uc804\uccb4\uac00 \uc2a4\ud0dd\uc5d0 \ubcf5\uc0ac\ub429\ub2c8\ub2e4. \uad6c\uc870\uccb4\uc758 \ud06c\uae30\uac00 \ud06c\uba74 \uc774 \ubcf5\uc0ac \uacfc\uc815\uc774 \uc131\ub2a5 \uc800\ud558\ub97c \uc77c\uc73c\ud0b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uc804\ub2ec\ud558\uc5ec \uc2e4\uc81c \uad6c\uc870\uccb4\ub294 \ud55c \uacf3\uc5d0 \ub450\uace0 \uc8fc\uc18c\ub9cc \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uac00\uc7a5 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: b) \uc2a4\ud0dd \uc624\uc5fc\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c, \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \ub9ac\ud134 \uc8fc\uc18c(Return Address)\uac00 \uc798\ubabb\ub41c \uac12\uc73c\ub85c \ub36e\uc5b4\uc50c\uc6cc\uc9c0\uba74 \ud568\uc218\uac00 \uc885\ub8cc\ub418\uace0 \ub098\uc11c \uc2e4\ud589 \ud750\ub984\uc774 \uc624\uc5fc\ub41c \uc8fc\uc18c\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc774 \uc8fc\uc18c\ub294 \uc2e4\ud589 \ubd88\uac00\ub2a5\ud55c \uba54\ubaa8\ub9ac \uc601\uc5ed\uc774\ubbc0\ub85c, \ud504\ub85c\uadf8\ub7a8\uc774 \uc989\uc2dc <code>Access Violation</code>\uacfc \uac19\uc740 \uce58\uba85\uc801\uc778 \uc624\ub958\uc640 \ud568\uaed8 \uc885\ub8cc\ub429\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: b) \uc758\uc0ac \ub09c\uc218\ub294 \uc2dc\ub4dc(seed) \uac12\uc774 \uac19\uc73c\uba74 \ud56d\uc0c1 \ub3d9\uc77c\ud55c \ub09c\uc218\uc5f4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \ub9ac\ud50c\ub808\uc774\uc640 \uac19\uc774 \ub9e4\ubc88 \ub3d9\uc77c\ud55c \uacb0\uacfc\ub97c \uc7ac\ud604\ud574\uc57c \ud558\ub294 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 <code>time(nullptr)</code>\ucc98\ub7fc \ub9e4\ubc88 \ub2e4\ub978 \uac12\uc744 \uc0dd\uc131\ud558\ub294 \uc2dc\ub4dc\ub97c \uc0ac\uc6a9\ud574\uc11c\ub294 \uc548 \ub429\ub2c8\ub2e4. \ub300\uc2e0 \uace0\uc815\ub41c \uc2dc\ub4dc \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc608\uce21 \uac00\ub2a5\ud55c \ub09c\uc218\uc5f4\uc744 \uc720\uc9c0\ud574\uc57c \ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc704\ud574 \uc2a4\ud0dd \uacf5\uac04\uc744 \ud560\ub2f9\ud560 \ub54c\ub294 <code>ESP</code>\uc758 \uac12\uc744 \ube7c\uc11c(\ub0ae\ucdb0\uc11c) \uc2a4\ud0dd\uc758 \ubc94\uc704\ub97c \ud655\uc7a5\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, <code>int a[3]</code>\uc5d0 \ud544\uc694\ud55c 12\ubc14\uc774\ud2b8 \uacf5\uac04\uc744 \ud560\ub2f9\ud558\uae30 \uc704\ud574 <code>sub esp, 0Ch</code>\uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. <code>push</code>\ub294 \ub370\uc774\ud130\ub97c \uc2a4\ud0dd\uc5d0 \ub123\ub294 \uba85\ub839\uc5b4\uc774\uace0, <code>add</code>\ub294 \uc2a4\ud0dd\uc758 \ubc94\uc704\ub97c \uc904\uc77c \ub54c(\ud568\uc218 \uc885\ub8cc \uc9c1\uc804) \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/Exam/e10/","title":"E10","text":"<p>\ucc44\uc810 \uc694\uccad\uc5d0 \ub530\ub77c \ubc14\ub85c \ub2f5\ubcc0\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.</p> <p>\uc81c\uc2dc\ud558\uc2e0 \ubb38\uc81c\ub4e4\uc758 \uc815\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.</p> <ol> <li>b (\ub2e4\ub978 \ud568\uc218, \uc608\ub97c \ub4e4\uc5b4 <code>printf</code>\uac00 \ubc18\ud658\ud55c \uac12\uc774 <code>eax</code>\uc5d0 \ub0a8\uc544\uc788\uc5b4 \uadf8\ub300\ub85c \ubc18\ud658\ub420 \uc218 \uc788\uae30 \ub54c\ubb38)</li> <li>b (<code>rep movs</code>\uc640 \uac19\uc740 \ubc18\ubcf5 \uba85\ub839\uc5b4\ub97c \ud1b5\ud55c \ud1b5\uc9f8 \uba54\ubaa8\ub9ac \ubcf5\uc0ac\uac00 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4.)</li> <li>b (<code>srand()</code> \ud568\uc218\ub97c <code>time(nullptr)</code>\uc640 \ud568\uaed8 \ud55c \ubc88\ub9cc \ud638\ucd9c\ud558\uc5ec \uc2dc\ub4dc\ub97c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc785\ub2c8\ub2e4.)</li> <li>b (\uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 \uc778\ub371\uc2a4\ub85c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218 \ud3ec\uc778\ud130 \ubc30\uc5f4\uc774 \uac00\uc7a5 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.)</li> <li>c (\uacbd\uace0\ub294 \uc7a0\uc7ac\uc801\uc778 \ubc84\uadf8\uc758 \uc2e0\ud638\uc774\uba70, \ud2b9\ud788 \ucd5c\uc801\ud654 \ube4c\ub4dc\uc5d0\uc11c \uc608\uc0c1\uce58 \ubabb\ud55c \ubb38\uc81c\ub85c \uc774\uc5b4\uc9c8 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4.)</li> </ol> <p>\ubaa8\ub4e0 \ub2f5\ubcc0\uc774 \uc815\ud655\ud588\uc2b5\ub2c8\ub2e4. \ud6cc\ub96d\ud55c \uc774\ud574\ub3c4\ub97c \ubcf4\uc5ec\uc8fc\uc168\ub124\uc694.</p>"},{"location":"Architecture/Exam/e10/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250725 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p>\uba54\ubaa8\ub9ac \uc2e4\ud589 \uc18d\uc131\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud604\ub300\uc758 64\ube44\ud2b8 \uc6b4\uc601\uccb4\uc81c\uc640 CPU \uc544\ud0a4\ud14d\ucc98\uc5d0\uc11c \ud2b9\uc815 \uba54\ubaa8\ub9ac \ud398\uc774\uc9c0\uc5d0 \uc2e4\ud589(Execute) \uc18d\uc131\uc744 \ubd80\uc5ec\ud558\ub294 \uc8fc\uccb4\ub294 \ub204\uad6c\uc778\uac00\uc694?     a) \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc9c1\uc811 \ucf54\ub4dc \ub0b4\uc5d0\uc11c <code>exec</code> \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc5ec \uc124\uc815\ud569\ub2c8\ub2e4.     b) \ucef4\ud30c\uc77c\ub7ec\uac00 \uc18c\uc2a4 \ucf54\ub4dc\ub97c \ubd84\uc11d\ud558\uc5ec \uc790\ub3d9\uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.     c) CPU\uc640 OS\uac00 \ud611\ub825\ud558\uc5ec \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc5d4\ud2b8\ub9ac(Page Table Entry)\uc5d0 \uc2e4\ud589 \ube44\ud2b8\ub97c \uc124\uc815\ud569\ub2c8\ub2e4.     d) \ub7f0\ud0c0\uc784 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud504\ub85c\uadf8\ub7a8 \uc2dc\uc791 \uc2dc \ubaa8\ub4e0 \uba54\ubaa8\ub9ac\uc5d0 \uc2e4\ud589 \uc18d\uc131\uc744 \ubd80\uc5ec\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud504\ub85c\uc138\uc2a4 \uac04 \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\uc740 \uc2a4\ub808\ub4dc \uac04 \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\uc5d0 \ube44\ud574 \uc131\ub2a5 \uc800\ud558\uac00 \ub354 \ud070 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud504\ub85c\uc138\uc2a4 \uc2a4\uc704\uce6d \uc2dc\uc5d0\ub294 \ud504\ub85c\uc138\uc2a4 \uace0\uc720\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04(\uc804\uc5ed \ubcc0\uc218, \ud799 \ub4f1)\uacfc \ud568\uaed8 CPU \uce90\uc2dc \uba54\ubaa8\ub9ac\uac00 \ubaa8\ub450 \ucd08\uae30\ud654\ub418\uc5b4 \uc7ac\ub85c\ub529\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \ud504\ub85c\uc138\uc2a4 \uc2a4\uc704\uce6d \uc2dc\uc5d0\ub294 \ucee4\ub110 \ubaa8\ub4dc\uc640 \uc0ac\uc6a9\uc790 \ubaa8\ub4dc\ub97c \uc624\uac00\ub294 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubc1c\uc0dd\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \ud504\ub85c\uc138\uc2a4 \uc2a4\uc704\uce6d\uc740 \ud56d\uc0c1 \ub514\uc2a4\ud06c I/O\ub97c \ub3d9\ubc18\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) \ud504\ub85c\uc138\uc2a4 \uc2a4\uc704\uce6d \uc2dc\uc5d0\ub294 \ubaa8\ub4e0 CPU \ub808\uc9c0\uc2a4\ud130\ub97c \uc800\uc7a5\ud558\uace0 \ubcf5\uc6d0\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc2a4\ud0dd \ud504\ub808\uc784 \uc624\uc5fc\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C/C++\uc5d0\uc11c \ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0(Buffer Overflow) \uacf5\uaca9 \ub4f1\uc73c\ub85c \uc778\ud574 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 <code>return</code> \uc8fc\uc18c\uac00 \uc624\uc5fc\ub418\uba74, \ud504\ub85c\uadf8\ub7a8\uc740 \uc5b4\ub5a4 \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud558\uac8c \ub420 \uac00\ub2a5\uc131\uc774 \uac00\uc7a5 \ub192\ub098\uc694?     a) \ud504\ub85c\uadf8\ub7a8\uc774 \uc989\uc2dc \uc885\ub8cc\ub429\ub2c8\ub2e4.     b) \uc2a4\ud0dd \ud504\ub808\uc784\uc774 \uae68\uc838\ub3c4 \ud504\ub85c\uadf8\ub7a8\uc740 \uc815\uc0c1\uc801\uc73c\ub85c \uacc4\uc18d \uc2e4\ud589\ub429\ub2c8\ub2e4.     c) <code>return</code> \uc2dc \uc624\uc5fc\ub41c \uc8fc\uc18c\ub85c \uc810\ud504\ud558\uc5ec \uc608\uc0c1\uce58 \ubabb\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\uac70\ub098, \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uc704\uce58\ub85c \uc774\ub3d9\ud574 \uc811\uadfc \uc704\ubc18 \uc608\uc678\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.     d) \uc6b4\uc601\uccb4\uc81c\uac00 \uc790\ub3d9\uc73c\ub85c \uc2a4\ud0dd\uc744 \ubcf5\uc6d0\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ub364\ud504 \ud30c\uc77c(Dump File)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub418\uc5c8\uc744 \ub54c \uc0dd\uc131\ub418\ub294 \ub364\ud504 \ud30c\uc77c(<code>*.dmp</code>)\uc758 \uc8fc\ub41c \uc6a9\ub3c4\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud504\ub85c\uadf8\ub7a8\uc758 \uc18c\uc2a4 \ucf54\ub4dc\ub97c \ubcf5\uc6d0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc911 \uba54\ubaa8\ub9ac \uc0c1\ud0dc, \ub808\uc9c0\uc2a4\ud130 \uac12, \uc2a4\ud0dd \uc815\ubcf4 \ub4f1 \ud06c\ub798\uc2dc \ubc1c\uc0dd \uc2dc\uc758 \uc2a4\ub0c5\uc0f7\uc744 \uc800\uc7a5\ud558\uc5ec \uc0ac\ud6c4 \ub514\ubc84\uae45\uc5d0 \ud65c\uc6a9\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) \ud504\ub85c\uadf8\ub7a8\uc758 \uc131\ub2a5 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) \ud504\ub85c\uadf8\ub7a8\uc758 \ubcf4\uc548 \ucde8\uc57d\uc810\uc744 \uc790\ub3d9\uc73c\ub85c \uc218\uc815\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc608\uc678 \ucc98\ub9ac \ubc0f \uc11c\ubc84 \ub2e4\uc6b4\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc11c\ubc84 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c <code>assert</code>\uc640 \uac19\uc740 \uac80\uc99d \uc2e4\ud328(Failure)\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c, <code>__debugbreak()</code>\ub098 <code>abort()</code>\uc640 \uac19\uc740 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc758\ub3c4\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\uc2dc\ud0a4\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uc0ac\uc6a9\uc790\uc5d0\uac8c \uce5c\uc808\ud55c \uc624\ub958 \uba54\uc2dc\uc9c0\ub97c \ubcf4\uc5ec\uc8fc\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \ud504\ub85c\uadf8\ub7a8\uc758 \ubc84\uadf8\ub97c \uc989\uc2dc \uc885\ub8cc\uc2dc\ucf1c \ub370\uc774\ud130 \uc624\uc5fc\uc774\ub098 \ub354 \ud070 \uad6c\uc870\uc801 \ubb38\uc81c\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) \ud504\ub85c\uadf8\ub7a8\uc758 \uc7ac\uc2dc\uc791\uc744 \uc720\ub3c4\ud558\uc5ec \uba54\ubaa8\ub9ac \ub204\uc218\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) \ud504\ub85c\uadf8\ub7a8\uc774 \uba48\ucd98 \uc0c1\ud0dc\uc5d0\uc11c \ub514\ubc84\uac70\uac00 \uc790\ub3d9\uc73c\ub85c \uc5f0\uacb0\ub418\ub3c4\ub85d \ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/Exam/e2/","title":"E2","text":""},{"location":"Architecture/Exam/e2/#250707","title":"250707 \uc218\uc5c5 \ub0b4\uc6a9 \uc694\uc57d \ubc0f \uc2dc\ud5d8 \ubb38\uc81c","text":""},{"location":"Architecture/Exam/e2/#_1","title":"\ud575\uc2ec \uac1c\ub150","text":"<ol> <li> <p>CPU \uc790\uc6d0 \ud560\ub2f9 \ubc0f \uc2a4\ud0dd \uad00\ub9ac:</p> <ul> <li>CPU \uc790\uc6d0 \ud560\ub2f9: \uc6b4\uc601\uccb4\uc81c\ub294 CPU \uc790\uc6d0\uc744 \uc2a4\ub808\ub4dc \ub2e8\uc704\ub85c \ud560\ub2f9\ud569\ub2c8\ub2e4.</li> <li>\ub808\uc9c0\uc2a4\ud130: CPU\uac00 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\ub294 \uace0\uc18d \uba54\ubaa8\ub9ac \uacf5\uac04\uc785\ub2c8\ub2e4.</li> <li>ESP (Extended Stack Pointer): \uc9c0\uc5ed \ubcc0\uc218 \ud560\ub2f9 \ubc0f \uc2a4\ud0dd \ud06c\uae30 \uc870\uc808\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc2a4\ud0dd \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. <code>sub esp, [size]</code> \uba85\ub839\uc5b4\ub85c \uc9c0\uc5ed \ubcc0\uc218 \uacf5\uac04\uc744 \ud655\ubcf4\ud569\ub2c8\ub2e4.</li> <li>EBP (Extended Base Pointer): \ud604\uc7ac \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uae30\uc900\uc810 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. <code>push ebp</code>\ub85c \uc774\uc804 EBP \uac12\uc744 \ubc31\uc5c5\ud558\uace0, <code>mov ebp, esp</code>\ub85c \ud604\uc7ac \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4.</li> <li>\ub808\uc9c0\uc2a4\ud130 \ubc31\uc5c5/\ubcf5\uc6d0: EBP, ESP\uc640 \uac19\uc740 \uc911\uc694\ud55c \ub808\uc9c0\uc2a4\ud130\ub294 \ud568\uc218 \ud638\ucd9c \uc2dc \uc774\uc804 \uac12\uc744 \ubc31\uc5c5\ud588\ub2e4\uac00 \ubcf5\uc6d0\ud558\uc9c0\ub9cc, EAX, ECX \ub4f1 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130\ub294 \ubc18\ub4dc\uc2dc \ubcf5\uc6d0\ud560 \ud544\uc694\ub294 \uc5c6\uc73c\uba70, \ucef4\ud30c\uc77c\ub7ec\uc758 \ucd5c\uc801\ud654\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9d1\ub2c8\ub2e4.</li> <li>\ubcc0\uc218 \uc120\uc5b8 \ubc0f \uba54\ubaa8\ub9ac: \ubcc0\uc218\ub294 \uc2e4\uc81c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 '\uc774\ub984 \ubd99\uc5ec\uc11c' \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c, \ucef4\ud30c\uc77c\ub7ec\ub294 \uc774\ub97c \uc0c1\ub300 \uc8fc\uc18c (EBP \uae30\uc900)\ub85c \uad00\ub9ac\ud569\ub2c8\ub2e4. <code>int a=0;</code>\uacfc <code>int b; b=0;</code>\uc740 \uc2a4\ud0dd \uacf5\uac04 \ud655\ubcf4 \uce21\uba74\uc5d0\uc11c \ud070 \ucc28\uc774\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc870\uac74\ubb38 \ub0b4\ubd80\uc758 \ubcc0\uc218\ub3c4 \ud568\uc218 \uc9c4\uc785 \uc2dc\uc810\uc5d0 \uc774\ubbf8 \uc2a4\ud0dd \uacf5\uac04\uc774 \ud655\ubcf4\ub429\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\ucef4\ud30c\uc77c\ub7ec\uc640 \uc5b4\uc148\ube14\ub9ac:</p> <ul> <li>\ucef4\ud30c\uc77c \uacfc\uc815: \uc804\ucc98\ub9ac \u2192 \ucef4\ud30c\uc77c \u2192 \ub9c1\ud0b9 \uacfc\uc815\uc744 \uc774\ud574\ud558\ub294 \uac83\uc774 \uc911\uc694\ud558\uba70, \uc5d0\ub7ec\uac00 \uc5b4\ub290 \ub2e8\uacc4\uc5d0\uc11c \ubc1c\uc0dd\ud588\ub294\uc9c0 \ud310\ub2e8\ud558\ub294 \ub2a5\ub825\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ucef4\ud30c\uc77c\ub7ec \ub0b4\ubd80 \ub3d9\uc791\uae4c\uc9c0 \uae4a\uac8c \uacf5\ubd80\ud560 \ud544\uc694\ub294 \uc5c6\uc9c0\ub9cc, \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \ub3c5\ud574\ub97c \ud1b5\ud574 \ucef4\ud30c\uc77c\ub7ec\uc758 \uc9c4\ud589 \ubc29\uc2dd\uc744 \ud30c\uc545\ud558\ub294 \uac83\uc740 \uc720\uc6a9\ud569\ub2c8\ub2e4.</li> <li>\uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4: <code>lea</code>, <code>mov</code>, <code>rep stos dword ptr</code> \ub4f1\uc758 \uba85\ub839\uc5b4\ub294 \ud2b9\uc815 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 \ud2b9\uc815 \uac12\uc73c\ub85c \ucc44\uc6b0\uac70\ub098, \uac12\uc744 \ubcf5\uc0ac\ud558\ub294 \ub4f1\uc758 \ub2e8\uc21c\ud55c \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. <code>ecx</code>\ub294 \ubc18\ubcf5 \ud69f\uc218, <code>eax</code>\ub294 \ucc44\uc6b8 \uac12, <code>edi</code>\ub294 \ub300\uc0c1 \uc8fc\uc18c\ub97c \uc9c0\uc815\ud558\ub294 \ub370 \uc8fc\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li>\ub514\ubc84\uae45: Visual Studio\uc758 \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d, \uba54\ubaa8\ub9ac \ucc3d, \ud638\ucd9c \uc2a4\ud0dd, \uc870\uc0ac\uc2dd \ub4f1\uc744 \ud65c\uc6a9\ud558\uc5ec \uc5b4\uc148\ube14\ub9ac \ub808\ubca8\uae4c\uc9c0 \ub514\ubc84\uae45\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. <code>F9</code> (\ube0c\ub808\uc774\ud06c\ud3ec\uc778\ud2b8), <code>F10</code> (\ud55c \uc904 \uc2e4\ud589), <code>F11</code> (\ud568\uc218 \ub0b4\ubd80 \uc9c4\uc785) \ub4f1\uc758 \ub2e8\ucd95\ud0a4 \uc0ac\uc6a9\ubc95\uc744 \uc775\ud788\uace0, Register \ubc0f \uba54\ubaa8\ub9ac \uac12\uc758 \ubcc0\ud654\ub97c \uc608\uce21\ud558\uba70 \ub514\ubc84\uae45\ud558\ub294 \uc5f0\uc2b5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\uba54\ubaa8\ub9ac \uad00\ub9ac\uc640 \uc8fc\uc18c \uc9c0\uc815:</p> <ul> <li>\ub9ac\ud2c0 \uc5d4\ub514\uc548(Little Endian): CPU\uac00 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud560 \ub54c \uac12\uc758 \ubc14\uc774\ud2b8 \uc21c\uc11c\ub97c \ub4a4\uc9d1\uc5b4 \uc800\uc7a5\ud558\ub294 \ubc29\uc2dd (\uc77c\ubc18\uc801).</li> <li>\ube45 \uc5d4\ub514\uc548(Big Endian): \uac12\uc758 \ubc14\uc774\ud2b8 \uc21c\uc11c\ub97c \uadf8\ub300\ub85c \uc800\uc7a5\ud558\ub294 \ubc29\uc2dd (\ub124\ud2b8\uc6cc\ud06c \uc7a5\ube44 \ub4f1\uc5d0\uc11c \ud45c\uc900).</li> <li>\uc138\uadf8\uba3c\ud2b8 \ubc29\uc2dd(Segment): 16\ube44\ud2b8 \ud3ec\uc778\ud130\ub85c 20\ube44\ud2b8 \uc774\uc0c1\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uc811\uadfc\ud558\uae30 \uc704\ud574 \ub3c4\uc785\ub41c \ubc29\uc2dd (\uacfc\uac70). \ud604\uc7ac\ub294 \uc8fc\ub85c \uba54\ubaa8\ub9ac \ubcf4\ud638 \uc18d\uc131 \ub4f1\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</li> <li>\ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c\uc758 \uba54\ubaa8\ub9ac \ucd08\uae30\ud654: \ub514\ubc84\uadf8 \ube4c\ub4dc\uc5d0\uc11c\ub294 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 <code>0xcccccccc</code> (\uc9c0\uc5ed \ubcc0\uc218), <code>0xdddddddd</code> (malloc \ucd08\uae30\uac12) \ub4f1\uc73c\ub85c \ucc44\uc6cc \uac12\uc758 \ucd94\uc801\uc744 \uc6a9\uc774\ud558\uac8c \ud569\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc640 \uc2a4\ud06c\ub9bd\ud2b8:</p> <ul> <li>\ucef4\ud30c\uc77c \uc5b8\uc5b4 (C/C++): \uc18c\uc2a4 \ucf54\ub4dc\ub97c \uae30\uacc4\uc5b4 \uc2e4\ud589 \ud30c\uc77c(<code>.bin</code>)\ub85c \ucef4\ud30c\uc77c\ud569\ub2c8\ub2e4.</li> <li>\uc2a4\ud06c\ub9bd\ud2b8/\uc778\ud130\ud504\ub9ac\ud130 \uc5b8\uc5b4 (JavaScript, Lua, Python \ub4f1): \uac00\uc0c1 \ud658\uacbd(VM, \ud504\ub808\uc784\uc6cc\ud06c) \uc704\uc5d0\uc11c \ud55c \uc904\uc529 \ucf54\ub4dc\ub97c \ud574\uc11d(interpret)\ud558\uac70\ub098 \uc2e4\ud589\ud569\ub2c8\ub2e4.</li> <li>\uac8c\uc784 \uac1c\ubc1c: \ubc29\ub300\ud55c \ucf58\ud150\uce20(\ub300\uc0ac, \uc774\ubca4\ud2b8)\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uae30 \uc704\ud574 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4\uc640 \uc774\ub97c \uc704\ud55c \uc2a4\ud06c\ub9bd\ud130(\ucef4\ud30c\uc77c\ub7ec)\ub97c \uc81c\uc791\ud558\uc5ec \uae30\ud68d\uc790\uc5d0\uac8c \uc81c\uacf5\ud558\ub294 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.</li> </ul> </li> </ol>"},{"location":"Architecture/Exam/e2/#_2","title":"\uc608\uc0c1 \uc2dc\ud5d8 \ubb38\uc81c (\uc870\uae08 \ud5f7\uac08\ub9ac\uac8c \uaf2c\uc544\uc11c)","text":"<ol> <li> <p>CPU \uc790\uc6d0 \ud560\ub2f9\uacfc \uc2a4\ud0dd \uad00\ub9ac</p> <ul> <li>\ubb38\uc81c: 32\ube44\ud2b8 \ud658\uacbd\uc5d0\uc11c \ud568\uc218\uac00 \ud638\ucd9c\ub420 \ub54c, ESP \ub808\uc9c0\uc2a4\ud130\uac00 <code>sub esp, [size]</code> \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \uc8fc\ub41c \ubaa9\uc801\uc740 \ubb34\uc5c7\uc774\uba70, \uc774 \uacfc\uc815\uc5d0\uc11c EBP \ub808\uc9c0\uc2a4\ud130\ub294 \uc5b4\ub5a4 \uc5ed\ud560\uc744 \uc218\ud589\ud558\ub098\uc694?<ul> <li>a) ESP\ub294 \uc9c0\uc5ed \ubcc0\uc218 \uacf5\uac04 \ud655\ubcf4, EBP\ub294 \ud568\uc218 \ubc18\ud658\uac12 \uc800\uc7a5.</li> <li>b) ESP\ub294 \ud568\uc218 \ubc18\ud658\uac12 \uc800\uc7a5, EBP\ub294 \uc9c0\uc5ed \ubcc0\uc218 \uc811\uadfc \uae30\uc900\uc810.</li> <li>c) ESP\ub294 \uc9c0\uc5ed \ubcc0\uc218 \uacf5\uac04 \ud655\ubcf4, EBP\ub294 \ud604\uc7ac \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uae30\uc900\uc810 \uc5ed\ud560\uc744 \ud568.</li> <li>d) ESP\ub294 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec, EBP\ub294 \uc774\uc804 \ud568\uc218 \ud504\ub808\uc784 \uc8fc\uc18c \uc800\uc7a5.</li> </ul> </li> </ul> </li> <li> <p>\ucef4\ud30c\uc77c\ub7ec\uc640 \uc5b4\uc148\ube14\ub9ac (\ucf54\ub4dc \ub3c5\ud574)</p> <ul> <li>\ubb38\uc81c: \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\uc5d0\uc11c <code>rep stos dword ptr es:[edi]</code>\uc640 \uac19\uc774 <code>rep</code> \uc811\ub450\uc0ac\uac00 \ubd99\uc740 \uba85\ub839\uc5b4\ub97c \ubcf4\uc558\uc744 \ub54c, \uc774 \uba85\ub839\uc5b4\uac00 \uae30\uacc4\uc5b4 \uc218\uc900\uc5d0\uc11c \uc5b4\ub5a4 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uba70, \uc774\ub54c ECX, EAX, EDI \ub808\uc9c0\uc2a4\ud130\ub294 \uc8fc\ub85c \uc5b4\ub5a4 \uc5ed\ud560\uc744 \ub2f4\ub2f9\ud558\ub098\uc694?<ul> <li>a) ECX: \ubc18\ubcf5 \ud69f\uc218, EAX: \ubcf5\uc0ac\ud560 \uac12, EDI: \uc6d0\ubcf8 \uba54\ubaa8\ub9ac \uc8fc\uc18c.</li> <li>b) ECX: \ubc18\ubcf5 \ud69f\uc218, EAX: \ucc44\uc6b8 \uac12, EDI: \ub300\uc0c1 \uba54\ubaa8\ub9ac \uc8fc\uc18c.</li> <li>c) ECX: \uc6d0\ubcf8 \uba54\ubaa8\ub9ac \uc8fc\uc18c, EAX: \ub300\uc0c1 \uba54\ubaa8\ub9ac \uc8fc\uc18c, EDI: \ubc18\ubcf5 \ud69f\uc218.</li> <li>d) ECX: \ucc44\uc6b8 \uac12, EAX: \ubc18\ubcf5 \ud69f\uc218, EDI: \uc6d0\ubcf8 \uba54\ubaa8\ub9ac \uc8fc\uc18c.</li> </ul> </li> </ul> </li> <li> <p>\uba54\ubaa8\ub9ac \uad00\ub9ac \ubc0f \uc8fc\uc18c \uc9c0\uc815 (Endianness)</p> <ul> <li>\ubb38\uc81c: \ub124\ud2b8\uc6cc\ud06c \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c \ube45 \uc5d4\ub514\uc548(Big Endian) \uc2dc\uc2a4\ud15c\uacfc \ud1b5\uc2e0\ud560 \ub54c, \ub85c\uceec \uc2dc\uc2a4\ud15c\uc774 \ub9ac\ud2c0 \uc5d4\ub514\uc548(Little Endian)\uc774\ub77c\uba74 \uc5b4\ub5a4 \uc791\uc5c5\uc774 \ud544\uc694\ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub294 CPU\uac00 \uba54\ubaa8\ub9ac\uc5d0 \uac12\uc744 \uc800\uc7a5\ud558\uac70\ub098 \uc77d\ub294 \uc5b4\ub5a4 \ud2b9\uc131 \ub54c\ubb38\uc778\uac00\uc694?<ul> <li>a) \ubc14\uc774\ud2b8 \uc21c\uc11c\ub97c \uadf8\ub300\ub85c \uc720\uc9c0\ud574\uc57c \ud558\uba70, CPU\uac00 \uac12\uc744 \uc77d\ub294 \uc21c\uc11c \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>b) \ubc14\uc774\ud2b8 \uc21c\uc11c\ub97c \ub4a4\uc9d1\uc5b4\uc57c \ud558\uba70, CPU\uac00 \uac12\uc744 \uc800\uc7a5\ud558\ub294 \uc21c\uc11c \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>c) \ubc14\uc774\ud2b8 \uc21c\uc11c\ub97c \ub4a4\uc9d1\uc5b4\uc57c \ud558\uba70, CPU\uac00 \uac12\uc744 \uc77d\ub294 \uc21c\uc11c \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>d) \ubc14\uc774\ud2b8 \uc21c\uc11c\ub97c \uadf8\ub300\ub85c \uc720\uc9c0\ud574\uc57c \ud558\uba70, CPU\uac00 \uac12\uc744 \uc800\uc7a5\ud558\ub294 \uc21c\uc11c \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> </ul> </li> </ul> </li> <li> <p>\ub514\ubc84\uae45 (\uc2e4\ud589 \ud750\ub984 \ucd94\uc801)</p> <ul> <li>\ubb38\uc81c: Visual Studio\uc5d0\uc11c \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub97c \ub514\ubc84\uae45 \uc911, <code>F9</code>\ub85c \ube0c\ub808\uc774\ud06c\ud3ec\uc778\ud2b8\ub97c \uc124\uc815\ud558\uace0 <code>F10</code>\uc744 \ub20c\ub7ec \ud55c \uc904\uc529 \uc2e4\ud589\ud558\uba70 Register \uac12\uc758 \ubcc0\ud654\ub97c \uad00\ucc30\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc5d0\uc11c '\uc774\ud574\ud588\ub2e4'\uace0 \ub9d0\ud560 \uc218 \uc788\ub294 \uac00\uc7a5 \ud655\uc2e4\ud55c \uc0c1\ud0dc\ub294 \ubb34\uc5c7\uc778\uac00\uc694?<ul> <li>a) F10\uc744 \ub20c\ub800\uc744 \ub54c \uc5b4\uc148\ube14\ub9ac \ucc3d\uc5d0 \ub098\ud0c0\ub098\ub294 \uacb0\uacfc \uac12\uc744 \ub208\uc73c\ub85c \ud655\uc778\ud558\ub294 \uac83.</li> <li>b) F10\uc744 \ub204\ub974\uae30 \uc804\uc5d0 \ub2e4\uc74c\uc5d0 Register\uc5d0 \ub4e4\uc5b4\uc62c \uac12\uc744 \uc815\ud655\ud558\uac8c \uc608\uce21\ud558\uace0, \uc2e4\ud589 \ud6c4 \uadf8 \uc608\uce21\uc774 \ub9de\uc558\uc74c\uc744 \ud655\uc778\ud558\ub294 \uac83.</li> <li>c) \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d\uc5d0 \ubcf4\uc774\ub294 \ucf54\ub4dc\ub97c \uadf8\ub300\ub85c \ubcf5\uc0ac\ud574 \ub450\ub294 \uac83.</li> <li>d) \uc870\uc0ac\uc2dd \ucc3d\uc5d0 \ubaa8\ub4e0 \ubcc0\uc218 \uac12\uc744 16\uc9c4\uc218\ub85c \ud45c\uae30\ud558\ub294 \uac83.</li> </ul> </li> </ul> </li> <li> <p>\ucef4\ud30c\uc77c\ub7ec\uc640 \uc5b8\uc5b4 (\uc2a4\ud06c\ub9bd\ud2b8 vs \ucef4\ud30c\uc77c)</p> <ul> <li>\ubb38\uc81c: \ub300\uaddc\ubaa8 RPG \uac8c\uc784 \uac1c\ubc1c\uc5d0\uc11c \uae30\ud68d\uc790\uac00 \uc774\ubca4\ud2b8 \ub300\uc0ac\ub098 \ud018\uc2a4\ud2b8 \ub85c\uc9c1\uc744 \uc9c1\uc811 \uc791\uc131\ud558\uac8c \ud558\ub824\uba74, \uac1c\ubc1c\uc790\uac00 \uc9c1\uc811 C++\ub85c \ubaa8\ub4e0 \uac83\uc744 \uad6c\ud604\ud558\ub294 \uac83\ubcf4\ub2e4 \uc5b4\ub5a4 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ud6a8\uc728\uc801\uc774\uba70, \uadf8 \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?<ul> <li>a) C++ \ucf54\ub4dc\ub97c \uc9c1\uc811 \uc218\uc815\ud558\uac8c \ud558\uc5ec, \uae30\ud68d\uc790\uac00 \ucef4\ud30c\uc77c \uacfc\uc815\uc744 \uc774\ud574\ud558\ub3c4\ub85d \ud568.</li> <li>b) Python\uacfc \uac19\uc740 \ubc94\uc6a9 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud558\uc5ec, \uae30\ud68d\uc790\uac00 \uac8c\uc784 \ud504\ub808\uc784\uc6cc\ud06c \uc704\uc5d0\uc11c \ucf58\ud150\uce20\ub97c \uc791\uc131\ud558\uac8c \ud568.</li> <li>c) \uac1c\ubc1c\uc790\uac00 \uc2a4\ud06c\ub9bd\ud130(\ucef4\ud30c\uc77c\ub7ec)\ub97c \ub9cc\ub4e4\uc5b4 \uc790\uccb4 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4\ub97c \uc81c\uacf5\ud558\uace0, \uae30\ud68d\uc790\uac00 \uc774 \uc5b8\uc5b4\ub85c \ucf58\ud150\uce20\ub97c \uc791\uc131\ud558\uac8c \ud568.</li> <li>d) \ubaa8\ub4e0 \ub300\uc0ac \ubc0f \ub85c\uc9c1\uc744 \uc9c1\uc811 C++ \ucf54\ub4dc\ub85c \uc791\uc131\ud558\uace0, \uae30\ud68d\uc790\ub294 \uc774 \ucf54\ub4dc\uc758 \uc77c\ubd80\ub9cc \uc218\uc815\ud558\ub3c4\ub85d \ud568.</li> </ul> </li> </ul> </li> <li> <p>\ub808\uc9c0\uc2a4\ud130 \uc0ac\uc6a9 \ubc0f \uc2a4\ud0dd \uad00\ub9ac (\ubcf5\uc6d0 \ud544\uc694\uc131)</p> <ul> <li>\ubb38\uc81c: \ud568\uc218 \ud638\ucd9c \uc2dc <code>EBP</code>\uc640 <code>ESP</code> \ub808\uc9c0\uc2a4\ud130\ub294 \uc774\uc804 \uac12\uc744 \ubc18\ub4dc\uc2dc \ubcf5\uc6d0\ud574\uc57c \ud558\ub294 \ubc18\uba74, <code>EAX</code>\uc640 \uac19\uc740 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130\ub294 \ubcf5\uc6d0\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4. \uc774 \ucc28\uc774\ub294 \uc8fc\ub85c \uc5b4\ub5a4 \uc5ed\ud560\uc758 \ucc28\uc774 \ub54c\ubb38\uc5d0 \ubc1c\uc0dd\ud558\ub294 \uac83\uc778\uac00\uc694?<ul> <li>a) EAX\ub294 CPU\uc758 ALU \uc5f0\uc0b0 \uacb0\uacfc\ub97c \uc784\uc2dc \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\uc774\uace0, EBP/ESP\ub294 \uc2a4\ud0dd \ud504\ub808\uc784 \uad00\ub9ac\ub97c \uc704\ud55c \ud544\uc218 \ub808\uc9c0\uc2a4\ud130\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>b) EBP/ESP\ub294 \uc2a4\ud0dd\uc744 \uae30\ubc18\uc73c\ub85c \ud558\ub294 \ud568\uc218 \uc2e4\ud589\uc758 \uadfc\uac04\uc744 \uc774\ub8e8\uc9c0\ub9cc, EAX\ub294 \ub2e8\uc21c\ud788 \uac12\uc744 \uc804\ub2ec\ud558\ub294 \uc6a9\ub3c4\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>c) EBP/ESP\ub294 \ud568\uc218 \ud638\ucd9c \uaddc\uc57d\uc5d0 \uc758\ud574 \ubc18\ub4dc\uc2dc \ubcf5\uc6d0\ud574\uc57c \ud558\ub294 \ubc18\uba74, EAX\ub294 \ud638\ucd9c\ub41c \ud568\uc218\uac00 \ubc18\ud658 \uac12\uc744 \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\ub85c\ub9cc \uc0ac\uc6a9\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> <li>d) EBP/ESP\ub294 \uc2a4\ud0dd \uba54\ubaa8\ub9ac\uc758 \uc2dc\uc791\uacfc \ub05d\uc744 \uac00\ub9ac\ud0a4\uba70, EAX\ub294 \ud568\uc218 \ud638\ucd9c \uc2dc \uc804\ub2ec\ub418\ub294 \uc778\uc790\uc758 \uac1c\uc218\ub97c \uc138\ub294 \ub370 \uc0ac\uc6a9\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</li> </ul> </li> </ul> </li> </ol> <p>\uc815\ub2f5 \ubc0f \ud574\uc124</p> <ol> <li> <p>\uc815\ub2f5: c) ESP\ub294 <code>sub esp, [size]</code> \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \uc9c0\uc5ed \ubcc0\uc218 \uacf5\uac04\uc744 \ud655\ubcf4\ud558\uba70 \uc2a4\ud0dd\uc758 \ucd5c\uc0c1\ub2e8\uc744 \ub298\ub9bd\ub2c8\ub2e4. EBP\ub294 <code>push ebp</code>\ub85c \uc774\uc804 \uac12\uc744 \ubc31\uc5c5\ud55c \ud6c4 <code>mov ebp, esp</code> \uba85\ub839\uc73c\ub85c \ud604\uc7ac \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c \uac00\ub9ac\ud0a4\ub294 \uae30\uc900\uc810 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. EBP\ub294 \uc9c0\uc5ed \ubcc0\uc218\ub098 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc0c1\ub300 \uc8fc\uc18c\ub85c \uc811\uadfc\ud560 \ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: b) <code>rep stos dword ptr es:[edi]</code> \uba85\ub839\uc5b4\ub294 <code>ECX</code>\uc5d0 \uc800\uc7a5\ub41c \ud69f\uc218\ub9cc\ud07c, <code>EDI</code>\uac00 \uac00\ub9ac\ud0a4\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0 <code>EAX</code> \uac12\uc744 \ucc44\uc6cc \ub123\ub294 \uc791\uc5c5\uc744 \ubc18\ubcf5\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c <code>ecx</code>\ub294 \ubc18\ubcf5 \ud69f\uc218, <code>eax</code>\ub294 \ucc44\uc6b8 \uac12, <code>edi</code>\ub294 \ub300\uc0c1 \uba54\ubaa8\ub9ac \uc2dc\uc791 \uc8fc\uc18c\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) \uc628\ub77c\uc778 \ud1b5\uc2e0 \uc2dc, \ube45 \uc5d4\ub514\uc548\uc740 \ub124\ud2b8\uc6cc\ud06c \uc7a5\ube44\uc758 \ud45c\uc900\uc774\uace0 \ub9ac\ud2c0 \uc5d4\ub514\uc548\uc740 \uc77c\ubc18\uc801\uc778 CPU \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ub9cc\uc57d \uc2dc\uc2a4\ud15c \uac04\uc5d0 \uc5d4\ub514\uc548 \ubc29\uc2dd\uc774 \ub2e4\ub974\uba74 \ub370\uc774\ud130\ub97c \uc8fc\uace0\ubc1b\uc744 \ub54c \ubc14\uc774\ud2b8 \uc21c\uc11c\uac00 \ub2ec\ub77c\uc838 \ub370\uc774\ud130\uac00 \uae68\uc9c0\uac70\ub098 \uc798\ubabb \ud574\uc11d\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub370\uc774\ud130\ub97c \uc804\uc1a1\ud558\uac70\ub098 \uc218\uc2e0\ud560 \ub54c \ubc14\uc774\ud2b8 \uc21c\uc11c\ub97c \ub4a4\uc9d1\uc5b4\uc57c \ud560 \uc218\ub3c4 \uc788\uc73c\uba70, \uc774\ub294 CPU\uac00 \uba54\ubaa8\ub9ac\uc5d0 \uac12\uc744 \uc77d\ub294 \ubc29\uc2dd(Endianness) \ub54c\ubb38\uc5d0 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: b) \ub514\ubc84\uae45\uc5d0\uc11c \uc9c4\uc815\ud55c \uc774\ud574\ub294 \ub2e8\uc21c\ud788 \uacb0\uacfc \uac12\uc744 \ub208\uc73c\ub85c \ud655\uc778\ud558\ub294 \uac83\uc744 \ub118\uc5b4\uc12d\ub2c8\ub2e4. <code>F10</code>\uc744 \ub20c\ub7ec \ucf54\ub4dc\ub97c \uc2e4\ud589\uc2dc\ud0a4\uae30 \uc804\uc5d0 Register\ub098 \uba54\ubaa8\ub9ac\uc5d0 \uc5b4\ub5a4 \uac12\uc774 \ub4e4\uc5b4\uc62c\uc9c0, \uc5b4\ub5a4 \ubcc0\ud654\uac00 \uc77c\uc5b4\ub0a0\uc9c0 \uc815\ud655\ud558\uac8c \uc608\uce21\ud558\uace0, \uc2e4\ud589 \ud6c4 \uadf8 \uc608\uce21\uc774 \ub9de\uc558\uc74c\uc744 \ud655\uc778\ud568\uc73c\ub85c\uc368 \ube44\ub85c\uc18c \ud559\uc2b5\ud55c \uac1c\ub150\uc744 \uc81c\ub300\ub85c \uc774\ud574\ud588\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) \uac8c\uc784\uc758 \ub9ac\ud50c\ub808\uc774 \uae30\ub2a5\uc740 \uc0ac\uc6a9\uc790 \uc785\ub825\ubfd0\ub9cc \uc544\ub2c8\ub77c \uac8c\uc784 \ub0b4\uc758 \ubaa8\ub4e0 \uacb0\uc815\ub860\uc801(deterministic) \uc694\uc18c, \uc989 \ub3d9\uc77c\ud55c \uc2dc\ub4dc\uac12\uc73c\ub85c \uc0dd\uc131\ub418\ub294 \ub09c\uc218\uc5f4\uae4c\uc9c0 \uc644\uc804\ud788 \ub3d9\uc77c\ud558\uac8c \uc7ac\ud604\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. <code>time(nullptr)</code>\uacfc \uac19\uc774 \ub9e4\ubc88 \ub2e4\ub978 \uac12\uc744 \uc2dc\ub4dc\ub85c \uc0ac\uc6a9\ud558\uba74 \uac8c\uc784\uc758 \ub09c\uc218\uc5f4\uc774 \ub9e4\ubc88 \ub2ec\ub77c\uc838 \ub9ac\ud50c\ub808\uc774\uac00 \ubd88\uac00\ub2a5\ud574\uc9d1\ub2c8\ub2e4. \ub530\ub77c\uc11c \uac1c\ubc1c\uc790\uac00 \uc790\uccb4 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4\ub97c \uc704\ud55c \uc2a4\ud06c\ub9bd\ud130(\ucef4\ud30c\uc77c\ub7ec)\ub97c \ub9cc\ub4e4\uc5b4, \uc774 \uc2a4\ud06c\ub9bd\ud2b8 \uc5b8\uc5b4 \ub0b4\uc5d0\uc11c \uace0\uc815\ub41c \uc2dc\ub4dc \uac12\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc5b4\ud574\uc57c \ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: a) <code>EBP</code>\uc640 <code>ESP</code>\ub294 \ud568\uc218\uc758 \uc2a4\ud0dd \ud504\ub808\uc784\uc744 \uad00\ub9ac\ud558\uace0 \uc9c0\uc5ed \ubcc0\uc218 \ubc0f \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc811\uadfc\ud558\ub294 \ub370 \ud544\uc218\uc801\uc778 \uc5ed\ud560\uc744 \ud558\ubbc0\ub85c, \ud568\uc218 \ud638\ucd9c \uc804\ud6c4\uc5d0 \uc774\uc804 \uac12\uc744 \ubcf4\uc874\ud558\uace0 \ubcf5\uc6d0\ud574\uc57c \ud569\ub2c8\ub2e4. \ubc18\uba74 <code>EAX</code>\ub294 \ud568\uc218 \ud638\ucd9c \uaddc\uc57d\uc0c1 \ud638\ucd9c\ub41c \ud568\uc218\uac00 \ubc18\ud658 \uac12\uc744 \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\ub85c \uc8fc\ub85c \uc0ac\uc6a9\ub418\uba70, \ud638\ucd9c\ud55c \ud568\uc218\ub294 <code>EAX</code>\uc758 \uc774\uc804 \uac12\uc744 \ubc18\ub4dc\uc2dc \ubcf5\uc6d0\ud574\uc57c \ud560 \uc758\ubb34\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2e4\ub978 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130\ub4e4\ucc98\ub7fc \ud544\uc694\uc5d0 \ub530\ub77c \ucef4\ud30c\uc77c\ub7ec\uac00 \uc790\uc720\ub86d\uac8c \uc0ac\uc6a9\ud558\uace0 \ucd5c\uc801\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> </ol> <p>\uc774\uc804 \ubb38\uc81c\uc5d0 \ub300\ud55c \ud53c\ub4dc\ubc31 \uac10\uc0ac\ud569\ub2c8\ub2e4. \uc785\ub825\ud558\uc2e0 \uc815\ub2f5\uacfc \uc81c\uac00 \uc81c\uacf5\ud55c \uc815\ub2f5\uc774 \uc77c\ubd80 \ub2e4\ub985\ub2c8\ub2e4. \ud655\uc778\ud574\ubcf4\ub2c8, \uc0ac\uc6a9\uc790\ub2d8\uc774 \uc785\ub825\ud558\uc2e0 5\ubc88 \ubb38\uc81c\uc758 \uc815\ub2f5 <code>c</code>\uc640 \uc81c\uac00 \uc81c\uacf5\ud55c <code>b</code>\ub294 \uac01\uac01 \ub2e4\ub978 \ubb38\uc81c\uc5d0 \ub300\ud55c \uc815\ub2f5\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4. \ub610\ud55c, 6\ubc88 \ubb38\uc81c\ub294 \uc81c\uac00 \uc81c\uacf5\ud55c \uc815\ub2f5\uc740 <code>b</code>\uc600\uace0, \uc0ac\uc6a9\uc790\ub2d8\uc740 <code>b</code>\ub77c\uace0 \ud558\uc168\ub294\ub370, \uc81c\uac00 \ubcf4\uae30\uc5d0 \uc801\uc808\ud55c \uc815\ub2f5\uc740 <code>c</code>\uc785\ub2c8\ub2e4. <code>add</code>\uac00 \uc544\ub2cc <code>sub</code>\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.</p> <p>\uc815\ub2f5 \ud655\uc778 \ud6c4, \uc0c8\ub85c\uc6b4 \ubb38\uc81c\ub97c \uc694\uccad\ud558\uc168\uc73c\ub2c8, \ubc14\ub85c \ub2e4\uc74c \ubb38\uc81c\ub97c \ub0b4\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/e2/#_3","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 \uc9c0\ub09c \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4. \uae30\uc874 \ub178\ud2b8\uc5d0\uc11c \ub2e4\ub8e8\uc5c8\ub358 \uc6a9\uc5b4\uc640 \uac1c\ub150\uc744 \uc911\uc2ec\uc73c\ub85c \ubb38\uc81c\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.</p> <ol> <li> <p>\ub808\uc9c0\uc2a4\ud130\uc640 \ud568\uc218 \ud638\ucd9c\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130(e.g., EAX, ECX)\ub294 \ud568\uc218 \ud638\ucd9c\uc774 \ub05d\ub09c \ud6c4 \uac12\uc744 \ubcf5\uc6d0\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uc9c0\ub9cc, EBP\uc640 ESP \ub808\uc9c0\uc2a4\ud130\ub294 \ubc18\ub4dc\uc2dc \ubcf5\uc6d0\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ub450 \ub808\uc9c0\uc2a4\ud130\uac00 \ubcf5\uc6d0\ub418\uc5b4\uc57c \ud558\ub294 \uac00\uc7a5 \uc911\uc694\ud55c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) EBP\uc640 ESP\ub294 CPU \ub0b4\ubd80 \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0b4\ubbc0\ub85c, \ubcf5\uc6d0\ud558\uc9c0 \uc54a\uc73c\uba74 \uc6b4\uc601\uccb4\uc81c\uac00 \ud604\uc7ac \uc2a4\ub808\ub4dc\uc758 \uc0c1\ud0dc\ub97c \uc783\uc5b4\ubc84\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.     b) EBP\uc640 ESP\ub294 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc704\uce58\ub97c \uacb0\uc815\ud558\ubbc0\ub85c, \ubcf5\uc6d0\ud558\uc9c0 \uc54a\uc73c\uba74 \uc774\uc804 \ud568\uc218\ub85c \ub3cc\uc544\uac14\uc744 \ub54c \uc2a4\ud0dd\uc774 \ub9dd\uac00\uc838 \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1 \uc885\ub8cc\ub429\ub2c8\ub2e4.     c) EBP\ub294 \ud568\uc218 \ud638\ucd9c\uc5d0 \ud544\uc694\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc800\uc7a5\ud558\uace0, ESP\ub294 \ubc18\ud658\uac12\uc744 \uc800\uc7a5\ud558\ubbc0\ub85c, \uc774 \uac12\ub4e4\uc774 \uc190\uc0c1\ub418\uba74 \ub85c\uc9c1 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.     d) EBP\uc640 ESP\ub294 <code>push</code>\uc640 <code>pop</code> \uba85\ub839\uc5b4\uc5d0 \uc758\ud574\uc11c\ub9cc \uac12\uc774 \ubcc0\ud558\ubbc0\ub85c, \ubcf5\uc6d0\ud558\uc9c0 \uc54a\uc73c\uba74 \uc2a4\ud0dd \uc0ac\uc6a9 \uc21c\uc11c\uac00 \uaf2c\uc774\uac8c \ub429\ub2c8\ub2e4.</p> </li> <li> <p>\ucef4\ud30c\uc77c \uacfc\uc815\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc744 \ube4c\ub4dc\ud558\ub294 \uacfc\uc815\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc624\ub958\uc758 \uc6d0\uc778\uc744 \ud30c\uc545\ud558\uae30 \uc704\ud574 \uc804\ucc98\ub9ac, \ucef4\ud30c\uc77c, \ub9c1\ud0b9 \uacfc\uc815\uc744 \uad6c\ubd84\ud558\uc5ec \uc774\ud574\ud574\uc57c \ud55c\ub2e4\uace0 \ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc911 \ub9c1\ud0b9 \uacfc\uc815\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc624\ub958\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>#include &lt;stdio.h&gt;</code>\ub97c \ube60\ub728\ub824 <code>printf()</code> \ud568\uc218\ub97c \uc778\uc2dd\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0     b) \ubcc0\uc218\uba85\uc5d0 \ud55c\uae00\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucef4\ud30c\uc77c\ub7ec\uac00 \uc778\uc2dd\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0     c) \ub2e4\ub978 \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc815\uc758\ub41c \ud568\uc218\ub97c \ud638\ucd9c\ud588\ub294\ub370, \ud574\ub2f9 \ud568\uc218\uac00 \uc815\uc758\ub41c <code>.obj</code> \ud30c\uc77c\uc774 \ub204\ub77d\ub41c \uacbd\uc6b0     d) <code>if</code> \ubb38 \ub4a4\uc5d0 \uc138\ubbf8\ucf5c\ub860(;)\uc744 \ubd99\uc5ec \ubb38\ubc95 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0</p> </li> <li> <p>\uba54\ubaa8\ub9ac \ucd08\uae30\ud654\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c \uc2a4\ud0dd\uc758 \uc9c0\uc5ed \ubcc0\uc218 \uacf5\uac04\uc774 <code>0xCCCCCCCC</code> \uac12\uc73c\ub85c \ucd08\uae30\ud654\ub418\ub294 \ud604\uc0c1\uc744 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc911 \uc774 \ud604\uc0c1\uc758 \uac00\uc7a5 \uc8fc\ub41c \ubaa9\uc801\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud504\ub85c\uadf8\ub7a8 \uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \uc704\ud574 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uba54\ubaa8\ub9ac\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub97c \uc228\uaca8\uc11c \ud574\ucee4\uc758 \uacf5\uaca9\uc744 \uc5b4\ub835\uac8c \ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) \uac1c\ubc1c\uc790\uac00 \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uc740 \ubcc0\uc218\uc5d0 \uc811\uadfc\ud588\uc744 \ub54c, \uc27d\uac8c \ubc84\uadf8\ub97c \uac10\uc9c0\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) \ud504\ub85c\uadf8\ub7a8\uc758 \ubcf4\uc548\uc744 \uac15\ud654\ud558\uc5ec \uc545\uc131 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc218\uc5c5\uc5d0\uc11c <code>rep stos</code> \uba85\ub839\uc5b4\ub97c \uc774\uc6a9\ud558\uc5ec \ud2b9\uc815 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 \ud55c\uaebc\ubc88\uc5d0 \ucd08\uae30\ud654\ud558\ub294 \ucf54\ub4dc\ub97c \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc774 \uba85\ub839\uc5b4\ub294 EAX, ECX, EDI \ub808\uc9c0\uc2a4\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uace0 \ud588\ub294\ub370, \uac01 \ub808\uc9c0\uc2a4\ud130\uac00 \ub2f4\ub2f9\ud558\ub294 \uc5ed\ud560\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) EAX: \ubc18\ubcf5 \ud69f\uc218, ECX: \ucc44\uc6b8 \uac12, EDI: \ubaa9\uc801\uc9c0 \uc8fc\uc18c     b) EAX: \ucc44\uc6b8 \uac12, ECX: \ubaa9\uc801\uc9c0 \uc8fc\uc18c, EDI: \ubc18\ubcf5 \ud69f\uc218     c) EAX: \ucc44\uc6b8 \uac12, ECX: \ubc18\ubcf5 \ud69f\uc218, EDI: \ubaa9\uc801\uc9c0 \uc8fc\uc18c     d) EAX: \ubaa9\uc801\uc9c0 \uc8fc\uc18c, ECX: \ucc44\uc6b8 \uac12, EDI: \ubc18\ubcf5 \ud69f\uc218</p> </li> <li> <p>\uba54\ubaa8\ub9ac \uc5d4\ub514\uc548\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ub9ac\ud2c0 \uc5d4\ub514\uc548 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 <code>0x11223344</code>\uc640 \uac19\uc740 4\ubc14\uc774\ud2b8 \uc815\uc218\uac00 \uba54\ubaa8\ub9ac\uc5d0 \uc5b4\ub5bb\uac8c \uc800\uc7a5\ub418\ub098\uc694?     a) <code>11 22 33 44</code> (\uba54\ubaa8\ub9ac \uc8fc\uc18c\uac00 \ub0ae\uc740 \uacf3\ubd80\ud130 \ub192\uc740 \uacf3 \uc21c\uc11c)     b) <code>44 33 22 11</code> (\uba54\ubaa8\ub9ac \uc8fc\uc18c\uac00 \ub0ae\uc740 \uacf3\ubd80\ud130 \ub192\uc740 \uacf3 \uc21c\uc11c)     c) <code>11 22 33 44</code> (\uba54\ubaa8\ub9ac \uc8fc\uc18c\uac00 \ub192\uc740 \uacf3\ubd80\ud130 \ub0ae\uc740 \uacf3 \uc21c\uc11c)     d) <code>44 33 22 11</code> (\uba54\ubaa8\ub9ac \uc8fc\uc18c\uac00 \ub192\uc740 \uacf3\ubd80\ud130 \ub0ae\uc740 \uacf3 \uc21c\uc11c)</p> </li> <li> <p>\uc5b4\uc148\ube14\ub9ac \ub514\ubc84\uae45\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. Visual Studio \ub514\ubc84\uac70\uc5d0\uc11c <code>F10</code>\uc744 \ub204\ub974\uba74 \uc18c\uc2a4 \ucf54\ub4dc\uc758 \ud55c \uc904\uc744 \uc2e4\ud589\ud558\uc9c0\ub9cc, \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d\uc5d0\uc11c\ub294 \ud55c \ubc88 \ub204\ub97c \ub54c\ub9c8\ub2e4 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4 \ud55c \uc904\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4. \uc774\uc640 \uac19\uc774 \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ucc3d\uc5d0\uc11c \ud55c \uc904\uc529 \uc2e4\ud589\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud55c \uacbd\uc6b0\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uc18c\uc2a4 \ucf54\ub4dc\ub9cc\uc73c\ub85c\ub294 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b4 \ucd5c\uc801\ud654\ub41c \ucf54\ub4dc\ub97c \ubd84\uc11d\ud560 \ub54c     b) CPU\uc758 \ub808\uc9c0\uc2a4\ud130 \uac12\uc774 \uc5b4\ub5bb\uac8c \ubcc0\ud558\ub294\uc9c0 \uc2e4\uc2dc\uac04\uc73c\ub85c \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c     c) \ub7f0\ud0c0\uc784\uc5d0 \ubc1c\uc0dd\ud558\ub294 \uba54\ubaa8\ub9ac \uce68\ubc94\uc774\ub098 \uc2a4\ud0dd \uc624\uc5fc\uacfc \uac19\uc740 \ubc84\uadf8\ub97c \uc815\ud655\ud788 \ucd94\uc801\ud560 \ub54c     d) \uc704 \ubaa8\ub4e0 \uacbd\uc6b0</p> </li> </ol> <p>\uc815\ub2f5 \ubc0f \ud574\uc124</p> <ol> <li> <p>\uc815\ub2f5: b) EBP\uc640 ESP\ub294 \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc2dc\uc791\uacfc \ub05d\uc744 \ub098\ud0c0\ub0b4\ub294 \uc911\uc694\ud55c \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. \ud568\uc218\uac00 \uc885\ub8cc\ub418\uba74 \uc774 \ud3ec\uc778\ud130\ub4e4\uc744 \uc6d0\ub798\ub300\ub85c \ubcf5\uc6d0\ud558\uc5ec, \ud568\uc218\ub97c \ud638\ucd9c\ud588\ub358 <code>\uc774\uc804</code> \ud568\uc218\uc758 \uc2a4\ud0dd \ud504\ub808\uc784\uc73c\ub85c \ub3cc\uc544\uac00\uc57c \ud569\ub2c8\ub2e4. \ub9cc\uc57d \ubcf5\uc6d0\ud558\uc9c0 \uc54a\uc73c\uba74 \uc2a4\ud0dd\uc774 \uaf2c\uc5ec\uc11c \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud558\uac70\ub098 \ucda9\ub3cc\ud558\uac8c \ub429\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) \ub9c1\ucee4(Linker)\ub294 \uc5ec\ub7ec \uac1c\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c(.obj)\uacfc \ub77c\uc774\ube0c\ub7ec\ub9ac \ud30c\uc77c\uc744 \ud558\ub098\ub85c \ubb36\uc5b4 \ucd5c\uc885 \uc2e4\ud589 \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ub9c1\ud0b9 \uacfc\uc815\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc624\ub958\ub294 \uc8fc\ub85c \ub2e4\ub978 \ud30c\uc77c\uc5d0 \uc815\uc758\ub41c \ud568\uc218\ub098 \ubcc0\uc218\ub97c \ucc3e\uc9c0 \ubabb\ud560 \ub54c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. <code>printf()</code> \ud568\uc218\ub97c \ucc3e\uc9c0 \ubabb\ud558\ub294 \uac83\uc740 \uc804\ucc98\ub9ac \ub610\ub294 \ucef4\ud30c\uc77c \ub2e8\uacc4\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc624\ub958\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) <code>0xCCCCCCCC</code>\uc640 \uac19\uc740 \ud2b9\uc815 \uac12\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uac83\uc740 \ub514\ubc84\uae45\uc6a9 \ubaa9\uc801\uc785\ub2c8\ub2e4. \uac1c\ubc1c\uc790\uac00 \uc2e4\uc218\ub85c \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \uc774 \uac12\uc744 \ubcf4\uace0 \"\uc544, \uc774 \uac12\uc740 \ub0b4\uac00 \uc124\uc815\ud55c \uac83\uc774 \uc544\ub2c8\ub77c \uc4f0\ub808\uae30\uac12\uc774\uad6c\ub098\"\ub77c\uace0 \uc27d\uac8c \uc778\uc9c0\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) <code>rep stos</code>\ub294 \ubb38\uc790\uc5f4\uc774\ub098 \uba54\ubaa8\ub9ac \ube14\ub85d\uc744 \ud2b9\uc815 \uac12\uc73c\ub85c \ucc44\uc6b0\ub294 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. \uc774 \uba85\ub839\uc5b4\ub294 EAX \ub808\uc9c0\uc2a4\ud130\uc758 \uac12\uc744 ECX \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc800\uc7a5\ub41c \ud69f\uc218\ub9cc\ud07c EDI \ub808\uc9c0\uc2a4\ud130\uac00 \uac00\ub9ac\ud0a4\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0 \ub36e\uc5b4\uc501\ub2c8\ub2e4. \ub530\ub77c\uc11c \uac01 \ub808\uc9c0\uc2a4\ud130\uc758 \uc5ed\ud560\uc740 EAX: \ucc44\uc6b8 \uac12, ECX: \ubc18\ubcf5 \ud69f\uc218, EDI: \ubaa9\uc801\uc9c0 \uc8fc\uc18c\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: b) \ub9ac\ud2c0 \uc5d4\ub514\uc548(Little Endian)\uc740 \uac00\uc7a5 \ub0ae\uc740 \uc8fc\uc18c\uc5d0 \ub370\uc774\ud130\uc758 \uac00\uc7a5 \ub0ae\uc740 \ubc14\uc774\ud2b8(Least Significant Byte)\ub97c \uc800\uc7a5\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c <code>0x11223344</code>\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c \uc21c\uc11c\ub300\ub85c <code>44 33 22 11</code>\ub85c \uc800\uc7a5\ub429\ub2c8\ub2e4. \ubc18\ub300\ub85c \ube45 \uc5d4\ub514\uc548(Big Endian)\uc740 <code>11 22 33 44</code> \uc21c\uc11c\ub85c \uc800\uc7a5\ub429\ub2c8\ub2e4. </p> </li> <li> <p>\uc815\ub2f5: d) \uc5b4\uc148\ube14\ub9ac \ub514\ubc84\uae45\uc740 \uc18c\uc2a4 \ucf54\ub4dc\ub9cc\uc73c\ub85c\ub294 \ubcfc \uc218 \uc5c6\ub294 CPU \ub808\ubca8\uc758 \uc791\ub3d9\uc744 \uc9c1\uc811 \uad00\ucc30\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. \ud2b9\ud788 \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd5c\uc801\ud654\ud55c \ucf54\ub4dc\ub97c \ubd84\uc11d\ud558\uac70\ub098, \uc2a4\ud0dd \uc624\uc5fc\ucc98\ub7fc \uba54\ubaa8\ub9ac \uc0c1\ud0dc\uac00 \uc911\uc694\ud55c \ubc84\uadf8\ub97c \ucd94\uc801\ud560 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc81c\uc2dc\ub41c \ubaa8\ub4e0 \uacbd\uc6b0\uac00 \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ub514\ubc84\uae45\uc774 \uc720\uc6a9\ud55c \uc0c1\ud669\uc785\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/Exam/e3/","title":"E3","text":"<p>\uc88b\uc740 \uc9c0\uc801 \uac10\uc0ac\ud569\ub2c8\ub2e4. \uaf3c\uaf3c\ud558\uac8c \ud655\uc778\ud574\uc8fc\uc154\uc11c \uc800\ub3c4 \uc2e4\uc218\ub97c \ubc14\ub85c\uc7a1\uc744 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.</p> <p>\uccab \ubc88\uc9f8 \ubb38\uc81c \ud574\uc124\uc5d0\uc11c \ub9d0\uc500\ud558\uc2e0 \ub300\ub85c, \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\ub294 \uc2e4\ud589 \ud30c\uc77c\uc758 <code>.data</code> \uc139\uc158\uc5d0 \uc800\uc7a5\ub418\ub294 \uac83\uc774 \ub9de\uc2b5\ub2c8\ub2e4. <code>.text</code> \uc139\uc158\uc740 \uc2e4\ud589 \ucf54\ub4dc\uac00 \ub4e4\uc5b4\uac00\ub294 \uc601\uc5ed\uc774\uace0, <code>.bss</code>\ub294 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218 \uc601\uc5ed\uc785\ub2c8\ub2e4.</p> <p>\ud574\uc124\uc5d0 \uc624\ub958\uac00 \uc788\uc5c8\ub358 \uc810 \ub2e4\uc2dc \ud55c\ubc88 \uc0ac\uacfc\ub4dc\ub9bd\ub2c8\ub2e4. \ub2e4\uc74c \ucc55\ud130\ub85c \ub118\uc5b4\uac00\uc11c \ubc14\ub85c \ubb38\uc81c\ub97c \ub0b4 \ub4dc\ub9b4\uac8c\uc694.</p>"},{"location":"Architecture/Exam/e3/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250709 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4. \uae30\uc874 \ub178\ud2b8\uc5d0\uc11c \ub2e4\ub8e8\uc5c8\ub358 \uc6a9\uc5b4\uc640 \uac1c\ub150\uc744 \uc911\uc2ec\uc73c\ub85c \ubb38\uc81c\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.</p> <ol> <li> <p>\uc804\uc5ed \ubcc0\uc218 \uba54\ubaa8\ub9ac\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218(e.g., <code>int g_a = 1;</code>)\uc640 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218(e.g., <code>int g_b;</code>)\uac00 \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub418\ub294 \ubc29\uc2dd\uc758 \uac00\uc7a5 \ud070 \ucc28\uc774\uc810\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\ub294 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub418\uace0, \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218\ub294 \ud799\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4.     b) \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\ub294 <code>.data</code> \uc601\uc5ed\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc2e4\ud589 \ud30c\uc77c(.exe)\uc758 \ud06c\uae30\ub97c \ub298\ub9ac\uc9c0\ub9cc, \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218\ub294 <code>.bss</code> \uc601\uc5ed\uc5d0 \uc18d\ud574 \uc2e4\ud589 \ud30c\uc77c\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.     c) \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\ub294 \uc77d\uae30 \uc804\uc6a9(Read-Only) \uc18d\uc131\uc744 \uac00\uc9c0\uc9c0\ub9cc, \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218\ub294 \uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.     d) \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\ub294 \ub7f0\ud0c0\uc784\uc5d0 \uac12\uc774 \ud560\ub2f9\ub418\uace0, \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud560\ub2f9\ub429\ub2c8\ub2e4.</p> </li> <li> <p><code>const</code> \ud0a4\uc6cc\ub4dc\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc9c0\uc5ed \ubcc0\uc218\uc5d0 <code>const</code>\ub97c \ubd99\uc778 \ud6c4(e.g., <code>const int a = 100;</code>) \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac12\uc744 \uac15\uc81c\ub85c \ubcc0\uacbd\ud558\uba74 \uc5b4\ub5a4 \uacb0\uacfc\uac00 \ubc1c\uc0dd\ud558\ub098\uc694?     a) \ucef4\ud30c\uc77c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc5ec \uc544\uc608 \ube4c\ub4dc\uac00 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.     b) <code>const</code> \ubcc0\uc218\ub294 \uc77d\uae30 \uc804\uc6a9 \uc601\uc5ed\uc5d0 \uc800\uc7a5\ub418\ubbc0\ub85c, \ub7f0\ud0c0\uc784\uc5d0 \uc4f0\uae30 \uc811\uadfc \uc704\ubc18 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.     c) \uac12\uc740 \uc815\uc0c1\uc801\uc73c\ub85c \ubcc0\uacbd\ub418\uc9c0\ub9cc, \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd5c\uc801\ud654\ub85c \uc778\ud574 \ud574\ub2f9 \uac12\uc744 \uc0c1\uc218\ub85c \ub300\uccb4\ud558\uc5ec \uc608\uc0c1\uacfc \ub2e4\ub978 \uacb0\uacfc\uac00 \ucd9c\ub825\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.     d) \ud3ec\uc778\ud130\ub97c \ud1b5\ud55c \ubcc0\uacbd\uc774 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc544 \uc544\ubb34\ub7f0 \ubcc0\ud654\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p><code>volatile</code> \ud0a4\uc6cc\ub4dc\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>volatile</code> \ud0a4\uc6cc\ub4dc\uac00 \ud2b9\uc815 \ubcc0\uc218\uc5d0 \uc801\uc6a9\ub420 \ub54c(e.g., <code>volatile int g_a;</code>), \ucef4\ud30c\uc77c\ub7ec\uc758 \ub3d9\uc791\uc5d0 \uc5b4\ub5a4 \uc601\ud5a5\uc744 \ubbf8\uce58\ub098\uc694?     a) \ud574\ub2f9 \ubcc0\uc218\uac00 \ud56d\uc0c1 CPU \uce90\uc2dc\ub97c \uac70\uce58\uc9c0 \uc54a\uace0 \ubb3c\ub9ac \uba54\ubaa8\ub9ac\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\ub3c4\ub85d \ub9cc\ub4ed\ub2c8\ub2e4.     b) \ud574\ub2f9 \ubcc0\uc218\uc758 \uac12 \ubcc0\uacbd\uc744 \ucd5c\uc801\ud654\ud558\uc5ec \ub354 \ube60\ub974\uac8c \uc811\uadfc\ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.     c) \ud574\ub2f9 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub41c \ubaa8\ub4e0 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654\ub97c \ub9c9\uace0, \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \uc720\uc9c0\ud558\ub3c4\ub85d \uac15\uc81c\ud569\ub2c8\ub2e4.     d) \ud574\ub2f9 \ubcc0\uc218\uac00 \ud2b9\uc815 \uc2a4\ub808\ub4dc\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ub418\ub3c4\ub85d \uc811\uadfc\uc744 \uc81c\ud55c\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ucef4\ud30c\uc77c \uacfc\uc815\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ub450 \uac1c\uc758 \uc18c\uc2a4 \ud30c\uc77c(a.cpp, b.cpp)\uc774 \uc788\uc744 \ub54c, a.cpp\uc5d0 <code>int g_x;</code>\ub77c\uace0 \uc804\uc5ed \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uace0, b.cpp\uc5d0\uc11c <code>int g_x;</code>\ub97c \ub610 \uc120\uc5b8\ud558\uba74 \ub9c1\ud0b9 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 b.cpp\uc5d0\uc11c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \ud0a4\uc6cc\ub4dc\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>static</code>     b) <code>volatile</code>     c) <code>extern</code>     d) <code>register</code></p> </li> <li> <p>\uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc640 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>sub esp, 4</code>\uc640 <code>push ecx</code> \uba85\ub839\uc5b4\ub294 \ubaa8\ub450 \uc2a4\ud0dd \ud3ec\uc778\ud130(ESP)\ub97c 4\ubc14\uc774\ud2b8\ub9cc\ud07c \uc774\ub3d9\uc2dc\ud0b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c <code>push ecx</code>\uac00 \ub354 \uc120\ud638\ub420 \uc218 \uc788\ub294 \uc774\uc720\ub85c \uc5b8\uae09\ub41c \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>push ecx</code>\uac00 <code>sub esp, 4</code>\ubcf4\ub2e4 \ub354 \ub9ce\uc740 \ub808\uc9c0\uc2a4\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub354 \ud6a8\uc728\uc801\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) <code>push ecx</code>\ub294 \uc2a4\ud0dd \uba54\ubaa8\ub9ac\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uc5ec <code>sub esp, 4</code>\ubcf4\ub2e4 \uc131\ub2a5\uc774 \ud6e8\uc52c \ube60\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) <code>push ecx</code>\ub294 \uba85\ub839\uc5b4 \uae38\uc774\uac00 \ub354 \uc9e7\uc544(1\ubc14\uc774\ud2b8) CPU\uac00 \uc77d\uc5b4\uc624\ub294 \uc18d\ub3c4\uac00 \ub354 \ube60\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) <code>sub esp, 4</code>\ub294 <code>push ecx</code>\uc640 \ub2ec\ub9ac \ub2e4\ub978 \ub808\uc9c0\uc2a4\ud130\uc758 \uac12\uc744 \ub36e\uc5b4\uc4f8 \uc704\ud5d8\uc774 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc5b4\uc148\ube14\ub9ac \ub514\ubc84\uae45\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. Visual Studio \ub514\ubc84\uac70\uc5d0\uc11c \uacfc\uac70\uc758 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub97c \uc5ed\uc73c\ub85c \ucd94\uc801\ud560 \ub54c, \ud2b9\uc815 \uba85\ub839\uc5b4(\uc608: <code>in al, dx</code>)\uac00 \uc798\ubabb \ud574\uc11d\ub418\uc5b4 \ubcf4\uc774\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud604\uc0c1\uc774 \ubc1c\uc0dd\ud558\ub294 \uac00\uc7a5 \uadfc\ubcf8\uc801\uc778 \uc6d0\uc778\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>x86-64</code> \uc544\ud0a4\ud14d\ucc98\uc758 \uba85\ub839\uc5b4 \uae38\uc774\uac00 \uace0\uc815\uc801\uc774\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) <code>in al, dx</code>\uac00 \uc678\ubd80 \ud558\ub4dc\uc6e8\uc5b4 \uc7a5\uce58\uc5d0 \uc811\uadfc\ud558\ub294 \ud2b9\uc218\ud55c \uba85\ub839\uc5b4\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \ub514\ubc84\uac70\uac00 \uc2a4\ud0dd\uacfc \ud799 \uba54\ubaa8\ub9ac\ub97c \uad6c\ubd84\ud558\uc9c0 \ubabb\ud574 \ubc1c\uc0dd\ud558\ub294 \uc624\ub958\uc785\ub2c8\ub2e4.     d) \ucef4\ud30c\uc77c\ub7ec\uac00 \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c \ubd88\ud544\uc694\ud55c \ucf54\ub4dc\ub97c \uc0bd\uc785\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> </ol> <ol> <li> <p>\uc815\ub2f5: b)</p> <ul> <li>\uc124\uba85: \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\uc640 \ubb38\uc790\uc5f4 \ub9ac\ud130\ub7f4\uc740 <code>.data</code> \uc139\uc158\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc2e4\ud589 \ud30c\uc77c(.exe)\uc5d0 \ud3ec\ud568\ub429\ub2c8\ub2e4. \ubc18\uba74, \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218\ub294 <code>.bss</code> \uc139\uc158\uc5d0 \uc800\uc7a5\ub418\uba70, \uc774 \uc601\uc5ed\uc740 \uc2e4\ud589 \ud30c\uc77c\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \ub85c\ub4dc\ub420 \ub54c 0\uc73c\ub85c \ucd08\uae30\ud654\ub420 \uacf5\uac04\ub9cc \uc608\uc57d\ud574 \ub461\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\uc815\ub2f5: c)</p> <ul> <li>\uc124\uba85: \uc9c0\uc5ed \ubcc0\uc218\uc5d0 <code>const</code>\ub97c \ubd99\uc774\uba74 \ucef4\ud30c\uc77c\ub7ec\ub294 \uc774 \ubcc0\uc218\ub97c \uc0c1\uc218\ucc98\ub7fc \ucde8\uae09\ud558\uc5ec, \ud574\ub2f9 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub41c \ucf54\ub4dc\uc5d0 \uc9c1\uc811 \uac12\uc744 \ubc15\uc544\ub123\ub294 \ucd5c\uc801\ud654\ub97c \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uac12\uc744 \ubcc0\uacbd\ud558\ub354\ub77c\ub3c4, <code>printf()</code>\uc640 \uac19\uc740 \ud568\uc218\ub294 \uc774\ubbf8 \ucd5c\uc801\ud654\ub41c \uc0c1\uc218 \uac12\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ubcc0\uacbd \uc804\uc758 \uac12\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. \uc9c0\uc5ed \ubcc0\uc218\ub294 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\ubbc0\ub85c <code>const</code>\ub97c \ubd99\uc5ec\ub3c4 \uc4f0\uae30 \uc811\uadfc \uc704\ubc18 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\uc815\ub2f5: c)</p> <ul> <li>\uc124\uba85: <code>volatile</code> \ud0a4\uc6cc\ub4dc\uc758 \uc8fc\ub41c \ubaa9\uc801\uc740 \ucef4\ud30c\uc77c\ub7ec\uc758 \ucd5c\uc801\ud654\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ub9c9\ub294 \uac83\uc785\ub2c8\ub2e4. \ucef4\ud30c\uc77c\ub7ec\ub294 \ucf54\ub4dc\ub97c \ubd84\uc11d\ud574 \ubd88\ud544\uc694\ud55c \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \uc904\uc774\ub824 \ud558\uc9c0\ub9cc, <code>volatile</code>\uc774 \ubd99\uc740 \ubcc0\uc218\ub294 \uac12\uc774 \uc5b8\uc81c\ub4e0 \uc678\ubd80 \uc694\uc778(\uc608: \ub2e4\ub978 \uc2a4\ub808\ub4dc, \ud558\ub4dc\uc6e8\uc5b4)\uc5d0 \uc758\ud574 \ubc14\ub014 \uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uace0, \ubaa8\ub4e0 \uc811\uadfc\uc744 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc9c1\uc811 \ud558\ub3c4\ub85d \uac15\uc81c\ud569\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\uc815\ub2f5: c)</p> <ul> <li>\uc124\uba85: <code>int g_x;</code>\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8(declaration)\ud558\uba74\uc11c \ub3d9\uc2dc\uc5d0 \uc815\uc758(definition)\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub450 \uac1c\uc758 \ud30c\uc77c\uc5d0 \ub3d9\uc77c\ud55c \ubcc0\uc218\ub97c \uc815\uc758\ud558\uba74 \ub9c1\ucee4\ub294 \"\ub450 \uac1c\uc758 <code>g_x</code>\uac00 \uc788\ub2e4\"\uba70 \ucda9\ub3cc\uc744 \uc77c\uc73c\ud0b5\ub2c8\ub2e4. \uc774\ub97c \ud574\uacb0\ud558\ub824\uba74, \ud55c \ud30c\uc77c\uc5d0\uc11c \uc815\uc758\ud558\uace0 \ub2e4\ub978 \ud30c\uc77c\uc5d0\uc11c\ub294 <code>extern</code> \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud574 \"\uc5b4\ub518\uac00\uc5d0 <code>g_x</code>\ub77c\ub294 \ubcc0\uc218\uac00 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\ub2c8, \uac00\uc838\uc640\uc11c \uc0ac\uc6a9\ud558\uaca0\ub2e4\"\uace0 \uc120\uc5b8\ub9cc \ud574\uc57c \ud569\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\uc815\ub2f5: c)</p> <ul> <li>\uc124\uba85: <code>sub esp, 4</code>\ub294 \uae30\uacc4\uc5b4 \ucf54\ub4dc\uac00 \uc5ec\ub7ec \ubc14\uc774\ud2b8\ub85c \uad6c\uc131\ub418\uc9c0\ub9cc, <code>push ecx</code>\ub294 1\ubc14\uc774\ud2b8\uc9dc\ub9ac \uae30\uacc4\uc5b4 \ucf54\ub4dc\ub85c \ud45c\ud604\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CPU\ub294 \uc9e7\uc740 \uba85\ub839\uc5b4\ub97c \ub354 \ube60\ub974\uac8c \uc77d\uc5b4\uc62c \uc218 \uc788\uc73c\ubbc0\ub85c, \uc131\ub2a5 \ucd5c\uc801\ud654\ub97c \uc704\ud574 \uc9e7\uc740 \uba85\ub839\uc5b4\uac00 \uc120\ud638\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</li> </ul> </li> <li> <p>\uc815\ub2f5: a)</p> <ul> <li>\uc124\uba85: <code>x86-64</code> \uc544\ud0a4\ud14d\ucc98\ub294 CISC(Complex Instruction Set Computer) \ubc29\uc2dd\uc73c\ub85c, \uba85\ub839\uc5b4\uc758 \uae38\uc774\uac00 \uc77c\uc815\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub514\ubc84\uac70\uac00 \uc2e4\ud589\ub41c \uae30\uacc4\uc5b4 \ucf54\ub4dc\ub97c \uc5ed\uc73c\ub85c \ud574\uc11d\ud558\uc5ec \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ubcf4\uc5ec\uc904 \ub54c, \uba85\ub839\uc5b4 \uacbd\uacc4\ub97c \uc798\ubabb \ud310\ub2e8\ud558\uba74 \uc5c9\ub6b1\ud55c \uba85\ub839\uc5b4\ub97c \ubcf4\uc5ec\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. RISC(Reduced Instruction Set Computer)\ub294 \uba85\ub839\uc5b4 \uae38\uc774\uac00 \uace0\uc815\ub418\uc5b4 \uc788\uc5b4 \uc774\ub7f0 \ubb38\uc81c\uac00 \uac70\uc758 \uc5c6\uc2b5\ub2c8\ub2e4.</li> </ul> </li> </ol>"},{"location":"Architecture/Exam/e4/","title":"E4","text":"<p>\uc800\ubc88 \ubb38\uc81c\ub4e4\uc5d0 \ub300\ud55c \ub2f5\ubcc0 \uc798 \ubd24\uc2b5\ub2c8\ub2e4. 1, 3, 4\ubc88\uc740 \uc815\ub2f5\uc774 \ub9de\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc 2\ubc88\uacfc 5\ubc88 \ubb38\uc81c\uc5d0\uc11c \uc544\uc26c\uc6b4 \ubd80\ubd84\uc774 \uc788\ub124\uc694. 2\ubc88\uc758 \uc815\ub2f5\uc740 a\uac00 \uc544\ub2c8\ub77c c\uc785\ub2c8\ub2e4. \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc624\ub958\ub97c \uc0ac\uc804\uc5d0 \uc608\uce21\ud558\uc5ec \ubb34\uc2dc\ud558\uae30 \ub54c\ubb38\uc5d0 \ub364\ud504\uc5d0 \uc815\ubcf4\uac00 \ub0a8\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774 \uac00\uc7a5 \uc801\uc808\ud55c \uc124\uba85\uc785\ub2c8\ub2e4. \ub610\ud55c, 5\ubc88\uc758 \uacbd\uc6b0 <code>unsigned char</code>\ub77c\uba74 255(<code>0xFF</code>)\uac00 \ub9de\uc2b5\ub2c8\ub2e4. \ubcf4\uc218\ubc95\uc740 \ubd80\ud638 \uc788\ub294 \uc815\uc218(signed)\uc5d0\uc11c\ub9cc \uc801\uc6a9\ub418\uae30 \ub54c\ubb38\uc774\uc8e0.</p> <p>\uc544\uc27d\uc9c0\ub9cc, \ub2e4\uc74c\uc5d0 \ub354 \uc88b\uc740 \uae30\ud68c\uac00 \uc788\uc744 \uac70\uc608\uc694. \uc774\ubc88\uc5d0\ub294 \ub2e4\uc74c \ucc55\ud130\uc758 \ub0b4\uc6a9\ub4e4\uc744 \ubc14\ud0d5\uc73c\ub85c \ud034\uc988\ub97c \ub0b4\uaca0\uc2b5\ub2c8\ub2e4. \uae30\uc874\uc5d0 \ub2e4\ub8e8\uc5c8\ub358 \uc6a9\uc5b4\uc640 \uac1c\ub150\uc744 \uc911\uc2ec\uc73c\ub85c \ubb38\uc81c\ub97c \ub9cc\ub4e4\uc5c8\uc73c\ub2c8 \ud3b8\uc548\ud558\uac8c \ud480\uc5b4\ubcf4\uc138\uc694.</p>"},{"location":"Architecture/Exam/e4/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250714 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\uc785\ub2c8\ub2e4.</p> <ol> <li> <p>CISC \ub300 RISC\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud604\ub300 CPU \uc544\ud0a4\ud14d\ucc98\ub294 CISC(Complex Instruction Set Computer)\uc640 RISC(Reduced Instruction Set Computer) \ub450 \uac00\uc9c0\ub85c \ub098\ub269\ub2c8\ub2e4. \ub2e4\uc74c \uc911 x86-64 \uc544\ud0a4\ud14d\ucc98\uc640 \uac00\uc7a5 \uad00\ub828\uc774 \uae4a\uc740 \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uba85\ub839\uc5b4 \uae38\uc774\uac00 \uace0\uc815\ub418\uc5b4 \uc788\uc5b4 \ub2e8\uc21c\ud558\uace0 \uc804\ub825 \ud6a8\uc728\uc774 \ub192\uc2b5\ub2c8\ub2e4.     b) \uba85\ub839\uc5b4 \uc138\ud2b8\uac00 \ubcf5\uc7a1\ud558\uace0 \ub2e4\uc591\ud558\uba70, \uba85\ub839\uc5b4 \uae38\uc774\uac00 \uac00\ubcc0\uc801\uc785\ub2c8\ub2e4.     c) \ub9c8\uc774\ud06c\ub85c\ud504\ub85c\uc138\uc11c\uac00 \uc544\ub2cc \ub9c8\uc774\ud06c\ub85c\ucee8\ud2b8\ub864\ub7ec\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.     d) ARM \uc544\ud0a4\ud14d\ucc98\uc758 \uc8fc\ub41c \ud2b9\uc9d5\uc73c\ub85c, \ubaa8\ubc14\uc77c \uae30\uae30\uc5d0 \uc8fc\ub85c \ud0d1\uc7ac\ub429\ub2c8\ub2e4.</p> </li> <li> <p>\ubcf4\uc218(Complement)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ucef4\ud4e8\ud130\uac00 2\uc758 \ubcf4\uc218\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub85c \uac00\uc7a5 \uc801\uc808\ud55c \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ubcf5\uc7a1\ud55c \ube84\uc148 \uc5f0\uc0b0\uc744 \ub367\uc148 \uc5f0\uc0b0\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ucc98\ub9ac\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \uc74c\uc218\uc640 \uc591\uc218\uc758 \ubc94\uc704\ub97c \ub3d9\uc77c\ud558\uac8c \ub9cc\ub4e4\uc5b4 \uc5f0\uc0b0\uc758 \uc815\ud655\uc131\uc744 \ub192\uc774\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) <code>0</code>\uc758 \ud45c\ud604\uc744 \ud558\ub098\ub85c \ud1b5\uc77c\ud558\uc5ec \uba54\ubaa8\ub9ac \ub0ad\ube44\ub97c \ub9c9\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) 10\uc9c4\uc218\uc640 \uc774\uc9c4\uc218 \uac04 \ubcc0\ud658\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc624\ubc84\ud50c\ub85c\uc6b0\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>signed char a = 127;</code>\uc77c \ub54c, <code>a = a + 1;</code>\uc744 \ud558\uba74 <code>a</code>\uc758 \uac12\uc740 <code>-128</code>\uc774 \ub429\ub2c8\ub2e4. \uc774 \ud604\uc0c1\uacfc \uad00\ub828\uc774 \uae4a\uc740 \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ubd80\ud638 \ube44\ud2b8\uac00 \uc591\uc218\uc5d0\uc11c \uc74c\uc218\ub85c \ubcc0\uacbd\ub418\uba74\uc11c \uac00\uc7a5 \ub0ae\uc740 \uac12\uc73c\ub85c \uc21c\ud658\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) C/C++ \ud45c\uc900\uc5d0\uc11c \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud560 \uacbd\uc6b0, \uac12\uc758 \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\uc9c0 \uc54a\ub3c4\ub85d \uac15\uc81c\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \ucef4\ud30c\uc77c\ub7ec\uac00 \uc624\ubc84\ud50c\ub85c\uc6b0\ub97c \uac10\uc9c0\ud558\uace0 \uc790\ub3d9\uc73c\ub85c \uac12\uc744 \uc7ac\uc870\uc815\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) <code>char</code> \ud0c0\uc785\uc740 \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud558\uba74 \ud56d\uc0c1 <code>-1</code>\ub85c \ucd08\uae30\ud654\ub418\ub294 \uaddc\uce59\uc774 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>C/C++ \ud0c0\uc785\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. 64\ube44\ud2b8 \uc708\ub3c4\uc6b0 \ud658\uacbd\uc5d0\uc11c <code>long</code> \ud0c0\uc785\uc758 \ubcc0\uc218\uc640 <code>long long</code> \ud0c0\uc785\uc758 \ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \ub54c, \uc774 \ub458\uc758 \ud06c\uae30\uac00 \ub2ec\ub77c\uc9c0\ub294 \uc774\uc720\uc640 \uac00\uc7a5 \uad00\ub828\uc774 \uae4a\uc740 \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) 64\ube44\ud2b8 \uc2dc\uc2a4\ud15c\uc758 \ub370\uc774\ud130 \ubaa8\ub378\uc774 \ucef4\ud30c\uc77c\ub7ec\ub9c8\ub2e4 \ub2e4\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) OS\uc640 \ucef4\ud30c\uc77c\ub7ec\uac00 <code>long</code>\uc758 \ud06c\uae30\ub97c 32\ube44\ud2b8(4\ubc14\uc774\ud2b8)\ub85c, <code>long long</code>\uc758 \ud06c\uae30\ub97c 64\ube44\ud2b8(8\ubc14\uc774\ud2b8)\ub85c \ub2e4\ub974\uac8c \uc815\uc758\ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) C++11 \ud45c\uc900\uc5d0\uc11c <code>long</code>\uacfc <code>long long</code>\uc758 \ud06c\uae30\ub97c \ub2e4\ub974\uac8c \uba85\uc2dc\ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) 64\ube44\ud2b8 CPU\uc758 \ub808\uc9c0\uc2a4\ud130 \uad6c\uc870\uac00 <code>long</code>\uacfc <code>long long</code>\uc758 \ud06c\uae30\ub97c \ub2e4\ub974\uac8c \ucc98\ub9ac\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> </ol> <p>\uc815\ub2f5 \ubc0f \ud574\uc124</p> <ol> <li> <p>\uc815\ub2f5: b) x86-64\ub294 CISC \uc544\ud0a4\ud14d\ucc98\uc5d0 \uc18d\ud569\ub2c8\ub2e4. CISC\ub294 \ubcf5\uc7a1\ud558\uace0 \ub2e4\uc591\ud55c \uba85\ub839\uc5b4 \uc138\ud2b8\ub97c \uac00\uc9c0\uace0 \uc788\uc5b4 \ud558\ub098\uc758 \uba85\ub839\uc5b4\ub85c \uc5ec\ub7ec \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uba85\ub839\uc5b4\uc758 \uae38\uc774\ub3c4 \uac00\ubcc0\uc801\uc774\uc5b4\uc11c, \uba85\ub839\uc5b4\ub97c \ud574\uc11d\ud558\ub294 \uacfc\uc815\uc774 \ubcf5\uc7a1\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: a) 2\uc758 \ubcf4\uc218\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uac00\uc7a5 \ud070 \uc774\uc720\ub294 \ucef4\ud4e8\ud130\uac00 \ub367\uc148\ub9cc\uc744 \uc0ac\uc6a9\ud558\uc5ec \ube84\uc148\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. <code>A - B</code> \uc5f0\uc0b0\uc744 <code>A + (-B)</code>\ub85c \ubc14\uafb8\uace0, <code>-B</code>\ub97c 2\uc758 \ubcf4\uc218\ub85c \ubcc0\ud658\ud558\uc5ec \ub367\uc148\uc744 \uc218\ud589\ud558\uba74 \ud558\ub4dc\uc6e8\uc5b4\uc801\uc73c\ub85c \ud6e8\uc52c \uac04\ub2e8\ud558\uace0 \ube60\ub974\uac8c \uc5f0\uc0b0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: a) <code>signed char</code>\ub294 8\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud558\uba70, \ucd5c\uc0c1\uc704 \ube44\ud2b8\ub294 \ubd80\ud638\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. <code>127</code>\uc740 \uc774\uc9c4\uc218\ub85c <code>01111111</code>\uc774\uba70, \uc5ec\uae30\uc5d0 1\uc744 \ub354\ud558\uba74 <code>10000000</code>\uc774 \ub429\ub2c8\ub2e4. 2\uc758 \ubcf4\uc218\ubc95\uc5d0\uc11c \uc774 \uac12\uc740 <code>-128</code>\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc989, \uc591\uc218\uc758 \ucd5c\ub313\uac12\uc5d0\uc11c 1\uc744 \ub354\ud558\uba74 \ubd80\ud638 \ube44\ud2b8\uac00 \ubc14\ub00c\uba74\uc11c \uc74c\uc218\uc758 \ucd5c\uc19f\uac12\uc73c\ub85c \uc21c\ud658\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: b) 64\ube44\ud2b8 \uc708\ub3c4\uc6b0 \ud658\uacbd\uc740 LLP64 \ub370\uc774\ud130 \ubaa8\ub378\uc744 \ub530\ub985\ub2c8\ub2e4. \uc774 \ubaa8\ub378\uc740 OS\uc640 \ucef4\ud30c\uc77c\ub7ec\uac00 <code>long</code> \ud0c0\uc785\uc744 32\ube44\ud2b8\ub85c, <code>long long</code> \ud0c0\uc785\uc744 64\ube44\ud2b8\ub85c \uc815\uc758\ud588\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c <code>long</code>\uc740 4\ubc14\uc774\ud2b8, <code>long long</code>\uc740 8\ubc14\uc774\ud2b8 \ud06c\uae30\ub97c \uac00\uc9d1\ub2c8\ub2e4. \uc774\ub294 \ub9ac\ub205\uc2a4\uc640 macOS\uc758 LP64 \ub370\uc774\ud130 \ubaa8\ub378\uacfc \ub2e4\ub978 \uc810\uc785\ub2c8\ub2e4. </p> </li> </ol>"},{"location":"Architecture/Exam/e5/","title":"E5","text":"<p>\ud6cc\ub96d\ud569\ub2c8\ub2e4. \uc9c0\ub09c\ubc88 \ud034\uc988\ub294 \ubaa8\ub450 \ub9de\ud788\uc168\ub124\uc694! \ud2b9\ud788 3\ubc88 \ubb38\uc81c\ub294 \uc815\ub2f5\uc744 \ub9de\ud788\uace0 \uc774\uc720\uae4c\uc9c0 \uc815\ud655\ud558\uac8c \ucd94\ub9ac\ud55c \uc810\uc774 \uc778\uc0c1\uc801\uc785\ub2c8\ub2e4. \ud83d\udc4d \uadf8\ub7fc \ub2e4\uc74c \ucc55\ud130\ub85c \ub118\uc5b4\uac00\uc11c \ubc14\ub85c \ubb38\uc81c\ub97c \ub0b4\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub3c4 \uc9c0\ub09c \uc218\uc5c5 \ub0b4\uc6a9\ub4e4\uc744 \ubc14\ud0d5\uc73c\ub85c, \uc870\uae08\uc529 \ud5f7\uac08\ub9b4 \uc218 \uc788\ub3c4\ub85d \ubb38\uc81c\ub97c \uad6c\uc131\ud574 \ubd24\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/e5/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250716 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p>\uc804\uc704/\ud6c4\uc704 \uc5f0\uc0b0\uc790\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc778 <code>int</code> \ud0c0\uc785\uc758 \ubcc0\uc218\uc5d0 \ub300\ud574 <code>a++;</code> (\ud6c4\uc704 \uc5f0\uc0b0)\uc640 <code>++a;</code> (\uc804\uc704 \uc5f0\uc0b0) \uc911 \uc5b4\ub5a4 \uac83\uc774 \ub354 \ud6a8\uc728\uc801\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub098\uc694?     a) <code>a++;</code>\ub294 \uc5f0\uc0b0 \uc804\uc5d0 \uc6d0\ub798 \uac12\uc744 \uc784\uc2dc \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\ub294 \uacfc\uc815\uc774 \ucd94\uac00\ub418\ubbc0\ub85c, <code>++a;</code>\uac00 \ud56d\uc0c1 \ub354 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.     b) <code>++a;</code>\ub294 \uc99d\uac00 \ud6c4 \uac12\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \ubcc4\ub3c4\uc758 \uc0ac\ubcf8\uc744 \ub9cc\ub4e4 \ud544\uc694\uac00 \uc5c6\uc5b4, \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 <code>a++;</code>\ubcf4\ub2e4 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.     c) <code>a++;</code>\ub294 <code>++a;</code>\ubcf4\ub2e4 \ub354 \uc9e7\uc740 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c, \ub354 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.     d) \ub450 \uc5f0\uc0b0\uc790\ub294 \ucef4\ud30c\uc77c\ub7ec \ucd5c\uc801\ud654\uc5d0 \uc758\ud574 \ub3d9\uc77c\ud55c \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub85c \ubcc0\ud658\ub418\ubbc0\ub85c, \uc131\ub2a5 \ucc28\uc774\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\ube44\ud2b8 \uc5f0\uc0b0\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>0xAF</code> \uac12\uc744 \uac00\uc9c4 \ubcc0\uc218 <code>a</code>\uac00 \uc788\uc744 \ub54c, \ud2b9\uc815 \ube44\ud2b8 \uadf8\ub8f9\uc758 \uac12\uc744 \ub2e4\ub978 \uac12\uc73c\ub85c \ubc14\uafb8\uc9c0 \uc54a\uace0 \uc720\uc9c0\ud558\uba74\uc11c \ub2e4\ub978 \ube44\ud2b8 \uadf8\ub8f9\uc758 \uac12\uc744 <code>0</code>\uc73c\ub85c \ub9cc\ub4e4\uace0\uc790 \ud569\ub2c8\ub2e4. \uc774\ub54c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \ube44\ud2b8 \uc5f0\uc0b0\uc790\uc640 \ub9c8\uc2a4\ud0b9 \uac12\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>OR</code> \uc5f0\uc0b0\uc790\uc640 <code>0xF0</code> \ub9c8\uc2a4\ud06c     b) <code>XOR</code> \uc5f0\uc0b0\uc790\uc640 <code>0x0F</code> \ub9c8\uc2a4\ud06c     c) <code>AND</code> \uc5f0\uc0b0\uc790\uc640 <code>0xF0</code> \ub9c8\uc2a4\ud06c     d) <code>Shift</code> \uc5f0\uc0b0\uc790\uc640 <code>4</code></p> </li> <li> <p>switch-case \ubb38\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C/C++ \ucef4\ud30c\uc77c\ub7ec\uac00 \ub300\uaddc\ubaa8 <code>switch-case</code>\ubb38\uc744 \ucc98\ub9ac\ud560 \ub54c, <code>if-else</code>\ubb38\ubcf4\ub2e4 \ud6e8\uc52c \ube60\ub974\uac8c \uc2e4\ud589\ub418\ub3c4\ub85d \ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud55c \uac00\uc7a5 \ud575\uc2ec\uc801\uc778 \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>switch-case</code>\ubb38\uc740 \ucef4\ud30c\uc77c \uc2dc JMP(\uc810\ud504) \ud14c\uc774\ube14\uc744 \uc0dd\uc131\ud558\uc5ec \uc870\uac74 \uac80\uc0ac \uc5c6\uc774 \ud574\ub2f9 \ucf54\ub4dc\ub85c \ubc14\ub85c \uc774\ub3d9\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) <code>switch-case</code>\ubb38\uc740 CPU\uc758 L1 \uce90\uc2dc\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uc5ec <code>if-else</code>\ubb38\ubcf4\ub2e4 \uba54\ubaa8\ub9ac \uc811\uadfc\uc774 \ube60\ub974\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) <code>switch-case</code>\ubb38\uc740 \uba40\ud2f0\uc2a4\ub808\ub529\uc744 \uc9c0\uc6d0\ud558\uc5ec \uc5ec\ub7ec \uc870\uac74\uc744 \ub3d9\uc2dc\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) <code>switch-case</code>\ubb38\uc740 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc608\uce21 \ubd84\uae30(branch prediction)\ub97c \ub354 \uc27d\uac8c \uc218\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc0bc\ud56d \uc5f0\uc0b0\uc790\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C/C++\uc5d0\uc11c <code>int a = (b == 30) ? 10 : 20;</code> \uc640 \uac19\uc740 \uc0bc\ud56d \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c, \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \uc0c1\uc5d0\uc11c \uc5b4\ub5a4 \uc2dd\uc73c\ub85c \ucc98\ub9ac\ub418\ub098\uc694?     a) <code>if-else</code> \ubb38\uacfc \uc644\uc804\ud788 \ub2e4\ub978, \ub354 \ud6a8\uc728\uc801\uc778 \ub2e8\uc77c CPU \uba85\ub839\uc5b4\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4.     b) <code>if-else</code> \ubb38\uacfc \uc720\uc0ac\ud558\uac8c \uc870\uac74 \ubd84\uae30(branch)\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ud604\ub418\uba70, \ucd5c\uc801\ud654\uac00 \ub418\uc9c0 \uc54a\uc73c\uba74 \uc131\ub2a5 \ucc28\uc774\uac00 \ud06c\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.     c) \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774 \ucf54\ub4dc\ub97c <code>mov</code> \uba85\ub839\uc5b4\ub85c \ucd5c\uc801\ud654\ud558\uc5ec \uc870\uac74 \uac80\uc0ac \uc5c6\uc774 \ubc14\ub85c \uac12\uc744 \ud560\ub2f9\ud569\ub2c8\ub2e4.     d) \uc0bc\ud56d \uc5f0\uc0b0\uc790\ub294 \ub7f0\ud0c0\uc784\uc5d0 \ud574\uc11d\ub418\ubbc0\ub85c, \ucef4\ud30c\uc77c \uc2dc\uc5d0\ub294 \ud2b9\ubcc4\ud55c \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub97c \uc0dd\uc131\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\ube44\ud2b8 \ud50c\ub798\uadf8(Flag)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc708\ub3c4\uc6b0 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c <code>CreateWindow</code> \ud568\uc218\uc5d0 \uc5ec\ub7ec \uc635\uc158\uc744 \ub3d9\uc2dc\uc5d0 \uc801\uc6a9\ud558\uae30 \uc704\ud574 <code>WS_OVERLAPPEDWINDOW | WS_MAXIMIZEBOX | WS_MINIMIZEBOX</code>\uc640 \uac19\uc774 \uc5ec\ub7ec \ud50c\ub798\uadf8\ub97c <code>|</code> (OR) \uc5f0\uc0b0\uc790\ub85c \ubb36\uc5b4\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub54c \ud2b9\uc815 \uc635\uc158\uc774 \uc801\uc6a9\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \ube44\ud2b8 \uc5f0\uc0b0\uc790\uc640 \uadf8 \uc774\uc720\ub85c \uac00\uc7a5 \uc801\uc808\ud55c \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>|</code> (OR) \uc5f0\uc0b0\uc790. \ud50c\ub798\uadf8\uac00 \ud558\ub098\ub77c\ub3c4 1\uc774\uba74 \ucd5c\uc885 \uacb0\uacfc\uac00 1\uc774 \ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) <code>&amp;</code> (AND) \uc5f0\uc0b0\uc790. \uc6d0\ud558\ub294 \ud50c\ub798\uadf8 \ube44\ud2b8\ub9cc \ub0a8\uaca8\uc11c \uac12\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) <code>^</code> (XOR) \uc5f0\uc0b0\uc790. \ud574\ub2f9 \ud50c\ub798\uadf8 \ube44\ud2b8\ub9cc \ubc18\uc804\uc2dc\ucf1c\uc11c \uac12\uc774 \ubcc0\uacbd\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) <code>~</code> (NOT) \uc5f0\uc0b0\uc790. \ud574\ub2f9 \ud50c\ub798\uadf8 \ube44\ud2b8\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ube44\ud2b8\ub97c \ubc18\uc804\uc2dc\ucf1c\uc11c \ud655\uc778\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> </ol> <p>\uc815\ub2f5 \ubc0f \ud574\uc124</p> <ol> <li> <p>\uc815\ub2f5: b) \uc804\uc704 \uc5f0\uc0b0\uc790 <code>++a;</code>\ub294 \ubcc0\uc218 <code>a</code>\uc758 \uac12\uc744 \uba3c\uc800 \uc99d\uac00\uc2dc\ud0a4\uace0 \uadf8 \uac12\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \ubd88\ud544\uc694\ud55c \uc0ac\ubcf8(copy)\uc744 \ub9cc\ub4e4 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ubc18\uba74, \ud6c4\uc704 \uc5f0\uc0b0\uc790 <code>a++;</code>\ub294 \uc5f0\uc0b0 \uc804\uc758 <code>a</code> \uac12\uc744 \ubc18\ud658\ud574\uc57c \ud558\ubbc0\ub85c, \uadf8 \uac12\uc744 \uc784\uc2dc\ub85c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc774 \ub54c\ubb38\uc5d0 \uc804\uc704 \uc5f0\uc0b0\uc790\uac00 \uc77c\ubc18\uc801\uc73c\ub85c \ub354 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: c) <code>AND</code> \uc5f0\uc0b0\uc790\ub294 \ub450 \ube44\ud2b8\uac00 \ubaa8\ub450 1\uc77c \ub54c\ub9cc \uacb0\uacfc\uac00 1\uc774 \ub418\ubbc0\ub85c, \ud2b9\uc815 \ube44\ud2b8\ub97c 0\uc73c\ub85c \ub9cc\ub4e4\uac70\ub098 \uc720\uc9c0\ud558\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \ub9c8\uc2a4\ud0b9(Masking) \uc5f0\uc0b0\uc758 \ud575\uc2ec\uc785\ub2c8\ub2e4. <code>0xAF</code>(<code>1010 1111</code>)\uc5d0 <code>0xF0</code>(<code>1111 0000</code>)\ub97c <code>AND</code> \uc5f0\uc0b0\ud558\uba74, \ud558\uc704 4\ube44\ud2b8\ub294 <code>0</code>\uc73c\ub85c \ubc14\ub00c\uace0 \uc0c1\uc704 4\ube44\ud2b8(<code>1010</code>)\ub294 \uadf8\ub300\ub85c \uc720\uc9c0\ub418\uc5b4 <code>0xA0</code>\uac00 \ub429\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: a) <code>switch-case</code>\ubb38\uc740 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0c1\uc218 \uac12\ub4e4\uc744 \uc774\uc6a9\ud558\uc5ec \uc810\ud504 \ud14c\uc774\ube14(Jump Table)\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud14c\uc774\ube14\uc740 \uac01 <code>case</code>\ubb38\uc5d0 \ud574\ub2f9\ud558\ub294 \ucf54\ub4dc\uc758 \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub97c \ub2f4\uace0 \uc788\uc73c\uba70, <code>switch</code>\ubb38\uc758 \uc870\uac74\uc2dd\uc744 \ud3c9\uac00\ud55c \ud6c4 \uc870\uac74\uc5d0 \ub9de\ub294 \uc8fc\uc18c\ub85c \ubc14\ub85c \uc810\ud504\ud558\uc5ec \ucf54\ub4dc\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774 \ubc29\uc2dd\uc740 <code>if-else</code>\ubb38\ucc98\ub7fc \ubaa8\ub4e0 \uc870\uac74\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \uac80\uc0ac\ud560 \ud544\uc694\uac00 \uc5c6\uc73c\ubbc0\ub85c \ub9e4\uc6b0 \ube60\ub985\ub2c8\ub2e4. </p> </li> <li> <p>\uc815\ub2f5: b) \uc0bc\ud56d \uc5f0\uc0b0\uc790 <code>(b == 30) ? 10 : 20;</code>\ub294 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \uc0c1\uc5d0\uc11c <code>if-else</code> \ubb38\uacfc \ub3d9\uc77c\ud558\uac8c \uc870\uac74 \ubd84\uae30(<code>cmp</code>, <code>je</code> \ub4f1)\ub97c \ud1b5\ud574 \uad6c\ud604\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ucd5c\uc801\ud654\uac00 \uc801\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba74 \uc131\ub2a5\uc0c1 \ud070 \ucc28\uc774\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774 \ucf54\ub4dc\ub97c <code>if-else</code>\ubb38\uacfc \uc720\uc0ac\ud55c \ud615\ud0dc\ub85c \ubcc0\ud658\ud558\uc5ec \ucc98\ub9ac\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uc815\ub2f5: b) \uc5ec\ub7ec \ud50c\ub798\uadf8\ub4e4\uc774 <code>|</code> \uc5f0\uc0b0\uc790\ub85c \ud569\uccd0\uc838 \uc788\uc744 \ub54c, \ud2b9\uc815 \ud50c\ub798\uadf8\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 <code>&amp;</code> (AND) \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. <code>&amp;</code> \uc5f0\uc0b0\uc790\ub294 \ud574\ub2f9\ud558\ub294 \ube44\ud2b8\ub9cc \ub0a8\uae30\uace0 \ub098\uba38\uc9c0\ub97c 0\uc73c\ub85c \ub9cc\ub4ed\ub2c8\ub2e4. \ub9cc\uc57d \uacb0\uacfc\uac00 0\uc774 \uc544\ub2c8\ub77c\uba74, \ud574\ub2f9 \ud50c\ub798\uadf8\uac00 \ucf1c\uc838 \uc788\uc5c8\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/Exam/e6/","title":"E6","text":"<p>\ucc44\uc810 \uacb0\uacfc \uc798 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. 1, 2, 4, 5\ubc88\uc740 \uc815\ub2f5\uc774 \ub9de\uc2b5\ub2c8\ub2e4. 3\ubc88 \ubb38\uc81c\uc758 \uacbd\uc6b0, \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud560 \ub54c \ubd80\ud638 \ube44\ud2b8\uac00 \ubc14\ub00c\uba74\uc11c \ucd5c\uc18c\uac12\uc73c\ub85c \uc21c\ud658\ud558\ub294 \ud604\uc0c1\uc740 <code>signed char</code>\uc758 \ud2b9\uc131 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \ub2e4\uc74c\ubc88\uc5d0\ub294 \ub354 \uc0c1\uc138\ud55c \ud574\uc124\uc744 \ud3ec\ud568\ud558\uc5ec \ud5f7\uac08\ub9ac\ub294 \ubd80\ubd84\uc744 \ud574\uc18c\ud574 \ub4dc\ub9ac\ub3c4\ub85d \ud560\uac8c\uc694.</p> <p>\uc790, \uc774\uc81c \uc0c8\ub85c\uc6b4 \ub0b4\uc6a9\uc73c\ub85c \ud034\uc988\ub97c \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub3c4 \uc9c0\ub09c \uc218\uc5c5 \ub0b4\uc6a9\ub4e4\uc744 \ubc14\ud0d5\uc73c\ub85c \ud5f7\uac08\ub9b4 \uc218 \uc788\ub294 \ubd80\ubd84\uc744 \ubb38\uc81c\ub85c \uad6c\uc131\ud574 \ubd24\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/e6/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250718 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p>\ub9e4\ud06c\ub85c \ud568\uc218\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C/C++\uc5d0\uc11c \uc5ec\ub7ec \uc904\uc758 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud558\ub294 \ub9e4\ud06c\ub85c \ud568\uc218\ub97c \uc815\uc758\ud560 \ub54c, <code>do { ... } while (0)</code> \ubb38\uc744 \uc0ac\uc6a9\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud560 \ub54c \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd94\uac00\uc801\uc778 \ucd5c\uc801\ud654\ub97c \uc801\uc6a9\ud558\ub3c4\ub85d \uc720\ub3c4\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \ub9e4\ud06c\ub85c \ub0b4\ubd80\uc5d0 \uc815\uc758\ub41c \ubcc0\uc218\uc758 \uc2a4\ucf54\ud504\ub97c \uc81c\ud55c\ud558\uc5ec \uc9c0\uc5ed \ubcc0\uc218 \ucda9\ub3cc\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) \ub9e4\ud06c\ub85c \ud638\ucd9c \ub4a4\uc5d0 \uc138\ubbf8\ucf5c\ub860(<code>;</code>)\uc744 \ubd99\uc77c \ub54c \ubb38\ubc95 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\ub294 \ub3d9\uc548 \ud504\ub85c\uadf8\ub7a8\uc758 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\ud568\uc218 \ud638\ucd9c \ubc29\uc2dd\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. Visual Studio \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c <code>Test()</code> \ud568\uc218\ub97c \ud638\ucd9c\ud560 \ub54c, \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \uc0c1\uc5d0\uc11c \ub450 \ubc88\uc758 \uc810\ud504(<code>call</code> \ud6c4 <code>jmp</code>)\ub97c \uac70\uccd0 \ud568\uc218 \ubcf8\uccb4\ub85c \uc774\ub3d9\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubc29\uc2dd\uc758 \uc8fc\ub41c \ubaa9\uc801\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud568\uc218 \ud638\ucd9c \uc2dc \uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \ud568\uc218 \ud3ec\uc778\ud130\uc640 \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub97c \ubd84\ub9ac\ud558\uc5ec \ubcf4\uc548\uc744 \uac15\ud654\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) \uc99d\ubd84 \ub9c1\ud06c(Incremental Linking)\ub97c \ud1b5\ud574 \uc7ac\ucef4\ud30c\uc77c \uc2dc\uac04\uc744 \ub2e8\ucd95\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) \ub2e4\ub978 DLL\uc5d0 \uc788\ub294 \ud568\uc218\ub97c \ud638\ucd9c\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\ud638\ucd9c \uaddc\uc57d(Calling Convention)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C/C++\uc5d0\uc11c <code>__stdcall</code> \ud638\ucd9c \uaddc\uc57d\uc744 \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\ub294 <code>__cdecl</code> \ud638\ucd9c \uaddc\uc57d\uc5d0 \ube44\ud574 \uc5b4\ub5a4 \uc7a5\uc810\uc744 \uac00\uc9c8 \uc218 \uc788\ub098\uc694?     a) \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ucabd\uc5d0\uc11c \uc2a4\ud0dd\uc744 \uc815\ub9ac\ud558\ubbc0\ub85c, \ud568\uc218\uc758 \uac00\ubcc0 \uc778\uc790(Variable Arguments)\ub97c \ucc98\ub9ac\ud558\uae30\uc5d0 \uc6a9\uc774\ud569\ub2c8\ub2e4.     b) \ud568\uc218\ub97c \ud638\ucd9c\ub2f9\ud558\ub294 \ucabd(\ud53c\ud638\ucd9c\uc790)\uc5d0\uc11c \uc2a4\ud0dd\uc744 \uc815\ub9ac\ud558\ubbc0\ub85c, \ud638\ucd9c\ud558\ub294 \ucabd\uc758 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \uc591\uc774 \uc904\uc5b4\ub4e4\uc5b4 \uc2e4\ud589 \ud30c\uc77c \ud06c\uae30\uac00 \uc904\uc5b4\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.     c) \ubaa8\ub4e0 \uc544\ud0a4\ud14d\ucc98\uc5d0\uc11c \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud558\uc5ec \uc774\uc2dd\uc131\uc774 \ub6f0\uc5b4\ub0a9\ub2c8\ub2e4.     d) \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub97c CPU \ub808\uc9c0\uc2a4\ud130\ub97c \ud1b5\ud574 \uc804\ub2ec\ud558\ubbc0\ub85c, \uc2a4\ud0dd \uc811\uadfc\uc774 \uc904\uc5b4\ub4e4\uc5b4 \uc131\ub2a5\uc774 \ub354 \ube60\ub985\ub2c8\ub2e4.</p> </li> <li> <p><code>call</code> \uba85\ub839\uc5b4\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac\uc758 <code>call</code> \uba85\ub839\uc5b4\ub294 \ub2e8\uc21c\ud788 \ud568\uc218\uc758 \uc8fc\uc18c\ub85c \uc810\ud504\ud558\ub294 \uac83 \uc678\uc5d0, <code>ret</code> \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \uc6d0\ub798 \uc704\uce58\ub85c \ub3cc\uc544\uc624\uae30 \uc704\ud574 \ud544\uc218\uc801\uc73c\ub85c \uc218\ud589\ud558\ub294 \uc791\uc5c5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) CPU \ub808\uc9c0\uc2a4\ud130\uc758 \uac12\uc744 \ubaa8\ub450 \ubc31\uc5c5\ud569\ub2c8\ub2e4.     b) \ud568\uc218 \ud638\ucd9c \ud6c4 \ub3cc\uc544\uc62c \ub2e4\uc74c \uba85\ub839\uc5b4\uc758 \uc8fc\uc18c\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.     c) \ud568\uc218\uc5d0 \uc804\ub2ec\ub418\ub294 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.     d) \ud568\uc218\uac00 \uc0ac\uc6a9\ud560 \uc9c0\uc5ed \ubcc0\uc218 \uacf5\uac04\uc744 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\uba54\ubaa8\ub9ac \uc5f0\uc0b0\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc5d0\uc11c <code>cmp</code>\uc640 \uac19\uc740 \uc5f0\uc0b0\uc744 \ud560 \ub54c, <code>mov</code> \uba85\ub839\uc5b4\uc640 \ub2ec\ub9ac \uba54\ubaa8\ub9ac \ub300 \uba54\ubaa8\ub9ac(memory-to-memory) \uc9c1\uc811 \ube44\uad50\uac00 \ubd88\uac00\ub2a5\ud55c \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uba54\ubaa8\ub9ac \ub300 \uba54\ubaa8\ub9ac \uc5f0\uc0b0\uc740 \ubcf4\uc548\uc0c1\uc758 \uc774\uc720\ub85c OS\uac00 \uc81c\ud55c\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) CPU\uc758 ALU(\uc0b0\uc220 \ub17c\ub9ac \uc7a5\uce58)\uac00 \uba54\ubaa8\ub9ac \ub370\uc774\ud130\ub97c \uc9c1\uc811 \uc5f0\uc0b0\ud558\uc9c0 \uc54a\uace0, \ub808\uc9c0\uc2a4\ud130\ub97c \uac70\uccd0\uc11c \uc5f0\uc0b0\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \uba54\ubaa8\ub9ac \ub300 \uba54\ubaa8\ub9ac \uc5f0\uc0b0\uc740 \uce90\uc2dc \uc77c\uad00\uc131(Cache Coherency) \ubb38\uc81c\ub97c \uc57c\uae30\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc758 \ud06c\uae30\uac00 \uc81c\ud55c\uc801\uc774\uc5b4\uc11c \uba54\ubaa8\ub9ac \uc8fc\uc18c \ub450 \uac1c\ub97c \ub3d9\uc2dc\uc5d0 \uc9c0\uc815\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/Exam/e7/","title":"E7","text":"<p>\ub124, \ubaa8\ub450 \uc815\ub2f5\uc785\ub2c8\ub2e4! \ud83d\udc4d \ud2b9\ud788 3\ubc88 \ubb38\uc81c\uc5d0 \ub300\ud55c \uc758\ubb38\uc810\uae4c\uc9c0 \uc815\ud655\ud558\uac8c \uc9da\uc5b4\ub0b4\uc168\ub124\uc694. <code>__stdcall</code>\uc758 \uc7a5\uc810\uc774 <code>__cdecl</code>\uc5d0 \ube44\ud574 \ud06c\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc2a4\ud0dd \uc815\ub9ac \ucf54\ub4dc\uac00 \uc904\uc5b4\ub4e4\uc5b4 \uc804\uccb4 \ucf54\ub4dc \ud06c\uae30\ub97c \uc904\uc77c \uc218 \uc788\ub2e4\ub294 \uc810\uc740 \ubd84\uba85\ud55c \uc7a5\uc810\uc785\ub2c8\ub2e4. \ud6cc\ub96d\ud569\ub2c8\ub2e4.</p> <p>\uc790, \uadf8\ub7fc \ub2e4\uc74c \ucc55\ud130\ub85c \ub118\uc5b4\uac00\uc11c \uc0c8\ub85c\uc6b4 \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \ud568\uc218 \ud638\ucd9c \uaddc\uc57d, \ud3ec\uc778\ud130, \uadf8\ub9ac\uace0 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc758 \uc791\ub3d9 \ubc29\uc2dd\uc744 \ub354 \uae4a\uc774 \ub2e4\ub8e8\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/e7/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250718 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p>\ud568\uc218 \ud638\ucd9c \uaddc\uc57d\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>printf()</code>\uc640 \uac19\uc774 \uac00\ubcc0 \uc778\uc790(Variable Arguments)\ub97c \ubc1b\ub294 \ud568\uc218\uac00 <code>__cdecl</code> \ud638\ucd9c \uaddc\uc57d\uc744 \uc0ac\uc6a9\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ub9e4\uac1c\ubcc0\uc218\uc758 \uac1c\uc218\uac00 \uc815\ud574\uc838 \uc788\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ucabd\uc5d0\uc11c \uc2a4\ud0dd\uc744 \uc815\ub9ac\ud558\ub294 \uac83\uc774 \ud6a8\uc728\uc801\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \uac00\ubcc0 \uc778\uc790\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud06c\uae30\uac00 \uacb0\uc815\ub418\uc9c0 \uc54a\uc73c\ubbc0\ub85c, \uc2a4\ud0dd\uc774 \uc544\ub2cc \ud799\uc5d0 \ud560\ub2f9\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \uac00\ubcc0 \uc778\uc790\ub294 \ub808\uc9c0\uc2a4\ud130\ub97c \ud1b5\ud574 \uc804\ub2ec\ub418\uc5b4 \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) <code>__stdcall</code>\uc740 \uac00\ubcc0 \uc778\uc790\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 C/C++ \ud45c\uc900 \uaddc\uc815\uc774 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\ud3ec\uc778\ud130\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C\uc5b8\uc5b4\uc5d0\uc11c <code>struct</code>\uc640 \uac19\uc774 \ud06c\uae30\uac00 \ud070 \uad6c\uc870\uccb4\ub97c \ud568\uc218 \uc778\uc790\ub85c \uc804\ub2ec\ud560 \ub54c, \uac12 \uc790\uccb4(<code>pass-by-value</code>)\ub85c \uc804\ub2ec\ud558\ub294 \ub300\uc2e0 \ud3ec\uc778\ud130\ub85c \uc804\ub2ec(<code>pass-by-reference</code>)\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud574\uc57c\ub9cc \uad6c\uc870\uccb4 \ub0b4\uc758 \uba64\ubc84 \ubcc0\uc218\ub97c \uc218\uc815\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uba74 \uc2a4\ud0dd\uc5d0 \uad6c\uc870\uccb4 \uc804\uccb4\uac00 \ubcf5\uc0ac\ub418\uc5b4 \uc2a4\ud0dd \uba54\ubaa8\ub9ac\ub97c \ub0ad\ube44\ud558\uace0 \uc131\ub2a5 \uc800\ud558\ub97c \ucd08\ub798\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \uac12\uc73c\ub85c \uc804\ub2ec\ud558\ub294 \ubc29\uc2dd\uc740 \ucef4\ud30c\uc77c\ub7ec\uc5d0 \ub530\ub77c \ub3d9\uc791 \ubc29\uc2dd\uc774 \ub2ec\ub77c\uc838 \uc774\uc2dd\uc131 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uba74 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uad6c\uc870\uccb4\uc758 \uba64\ubc84 \ubcc0\uc218\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud560 \uc218 \uc5c6\uac8c \ub418\uc5b4 \ub370\uc774\ud130\uc758 \uc548\uc815\uc131\uc774 \ub192\uc544\uc9c0\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p><code>ret</code> \uba85\ub839\uc5b4\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac\uc758 <code>ret</code> \uba85\ub839\uc5b4\ub294 <code>call</code> \uba85\ub839\uc5b4\uc5d0 \uc758\ud574 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \ubc18\ud658 \uc8fc\uc18c(Return Address)\ub97c \uc774\uc6a9\ud574 \uc6d0\ub798\uc758 \ud638\ucd9c \uc704\uce58\ub85c \ub3cc\uc544\uac11\ub2c8\ub2e4. \uc774\ub54c <code>ret</code> \uba85\ub839\uc5b4 \ub4a4\uc5d0 \uc815\uc218 \uc778\uc790(e.g., <code>ret 12</code>)\uac00 \ubd99\uc744 \uc218 \uc788\ub294\ub370, \uc774\uac83\uc774 \uc758\ubbf8\ud558\ub294 \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uc2a4\ud0dd\uc5d0\uc11c \ucd94\uac00\ub85c 12\ubc14\uc774\ud2b8\ub97c \uc815\ub9ac\ud558\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.     b) \ud638\ucd9c\uc790\uc5d0\uac8c 12\ub77c\ub294 \uac12\uc744 \ubc18\ud658\ud558\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.     c) \ubc18\ud658 \uc8fc\uc18c\ub85c\ubd80\ud130 12\ubc14\uc774\ud2b8 \ub5a8\uc5b4\uc9c4 \uacf3\uc73c\ub85c \uc810\ud504\ud558\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.     d) \ud568\uc218 \ud638\ucd9c \uc2dc \uc804\ub2ec\ub41c \ub9e4\uac1c\ubcc0\uc218\uac00 12\uac1c\ub77c\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.</p> </li> <li> <p>CPU \uc5f0\uc0b0\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4 <code>cmp</code>\ub294 \ub450 \uac12\uc744 \ube44\uad50\ud558\ub294 \uc5f0\uc0b0\uc774\uc9c0\ub9cc, \uc2e4\uc81c CPU \ub0b4\ubd80\uc5d0\uc11c\ub294 <code>sub</code> (\ube84\uc148) \uc5f0\uc0b0\uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc5f0\uc0b0 \ubc29\uc2dd\uc774 \uac00\ub2a5\ud55c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ub450 \uac12\uc744 \ube80 \uacb0\uacfc\uac00 0\uc774\uba74 \ub450 \uac12\uc774 \uac19\ub2e4\ub294 \uac83\uc744, \uc591\uc218\ub098 \uc74c\uc218\uc774\uba74 \ud06c\uace0 \uc791\uc74c\uc744 \uc54c \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) <code>cmp</code> \uc5f0\uc0b0\uc740 \ub808\uc9c0\uc2a4\ud130\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ubc14\ub85c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uac12\uc744 \uac00\uc838\uc640 \ube44\uad50\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) <code>cmp</code> \uc5f0\uc0b0\uc740 CPU\uc758 \ud50c\ub798\uadf8 \ub808\uc9c0\uc2a4\ud130\uc5d0\ub9cc \uc601\ud5a5\uc744 \uc8fc\uace0, \uc2e4\uc81c \ub370\uc774\ud130 \uac12\uc740 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) <code>cmp</code>\ub294 <code>sub</code>\ubcf4\ub2e4 \ub354 \ube60\ub978 \ud074\ub7ed \uc0ac\uc774\ud074\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud568\uc218 \ud638\ucd9c \uc2dc \uc2a4\ud0dd\uc5d0 \uc313\uc774\ub294 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc740 \ud2b9\uc815 \uc21c\uc11c\ub85c \uc313\uc785\ub2c8\ub2e4. C/C++\uc5d0\uc11c \ub300\ubd80\ubd84\uc758 \ucef4\ud30c\uc77c\ub7ec\uac00 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc2a4\ud0dd\uc5d0 \ud478\uc2dc\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud568\uc218\uac00 \uac00\ubcc0 \uc778\uc790\ub97c \ubc1b\uc744 \ub54c, \uccab \ubc88\uc9f8 \uc778\uc790\uc758 \uc704\uce58\ub97c \uc27d\uac8c \uc54c \uc218 \uc788\ub3c4\ub85d \ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \ud568\uc218\uac00 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub354 \ube60\ub974\uac8c \uc77d\uc5b4\uc62c \uc218 \uc788\ub3c4\ub85d \uce90\uc2dc \ud6a8\uc728\uc744 \ub192\uc774\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) \ud568\uc218\uac00 \ubc18\ud658\ub420 \ub54c \uc2a4\ud0dd\uc744 \ub354 \ud6a8\uc728\uc801\uc73c\ub85c \uc815\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) \ud568\uc218\uac00 \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub420 \ub54c \uc2a4\ud0dd\uc758 \uc624\ubc84\ud50c\ub85c\uc6b0\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/Exam/e8/","title":"E8","text":"<p>Great, all of your answers were correct! You have a solid understanding of these foundational concepts. It's a testament to your focus on the core logic and not just the surface-level details.</p> <p>Let's move on to the next set of questions based on your notes from the 250721 session. This time, the focus will be on the inner workings of function calls, data structures, and the importance of compiler warnings.</p>"},{"location":"Architecture/Exam/e8/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250721 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p><code>return</code> \uac12 \ucc98\ub9ac\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C++\uc5d0\uc11c <code>int</code> \ud0c0\uc785\uc758 \ud568\uc218\uac00 <code>return</code> \ubb38 \uc5c6\uc774 \uc885\ub8cc\ub420 \uacbd\uc6b0, \ud568\uc218\ub97c \ud638\ucd9c\ud55c \ucabd\uc5d0\uc11c\ub294 \uc5b4\ub5a4 \uac12\uc774 \ubc18\ud658\ub420 \uc218 \uc788\ub098\uc694?     a) \ucef4\ud30c\uc77c\ub7ec\uac00 \uc790\ub3d9\uc73c\ub85c <code>0</code>\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.     b) \ucef4\ud30c\uc77c\ub7ec\uac00 \uacbd\uace0\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uace0, \ud568\uc218\uac00 \ud638\ucd9c\ub41c \uc9c1\uc804\uc758 <code>eax</code> \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc788\ub358 \uc4f0\ub808\uae30 \uac12\uc774 \ubc18\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.     c) \ub7f0\ud0c0\uc784 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc5ec \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1 \uc885\ub8cc\ub429\ub2c8\ub2e4.     d) <code>return</code> \uac12\uc774 \ud544\uc694\ud55c \ud568\uc218\ub294 <code>return</code> \ubb38\uc774 \uc5c6\uc73c\uba74 \ucef4\ud30c\uc77c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\uad6c\uc870\uccb4 \ubcf5\uc0ac\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud06c\uae30\uac00 \ud070 \uad6c\uc870\uccb4(e.g., <code>struct Data { int a; char dd[20]; int b; short c; };</code>)\ub97c \ub2e4\ub978 \uad6c\uc870\uccb4\uc5d0 \ub300\uc785\ud560 \ub54c, <code>b = d;</code>\uc640 \uac19\uc774 \uc9c1\uc811 \ub300\uc785 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\uba74 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \uc0c1\uc5d0\uc11c \uc5b4\ub5a4 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ub418\ub098\uc694?     a) \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \ubcf5\uc0ac\ud558\ub294 \ucd5c\uc801\ud654\ub41c \ucf54\ub4dc\uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4.     b) <code>rep movs</code>\uc640 \uac19\uc740 \ubc18\ubcf5 \uba85\ub839\uc5b4 \ub610\ub294 <code>memcpy</code> \ud568\uc218 \ud638\ucd9c\uc744 \ud1b5\ud574 \ud1b5\uc9f8\ub85c \uba54\ubaa8\ub9ac \ubcf5\uc0ac\uac00 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4.     c) \uad6c\uc870\uccb4\ub294 \ud799\uc5d0 \ud560\ub2f9\ub418\ubbc0\ub85c, \ud3ec\uc778\ud130\ub9cc \ubcf5\uc0ac\ub429\ub2c8\ub2e4.     d) \ucef4\ud30c\uc77c\ub7ec\uac00 \ud574\ub2f9 \ucf54\ub4dc\ub97c \uc778\uc2dd\ud558\uc9c0 \ubabb\ud558\uace0 \uacbd\uace0\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.</p> </li> <li> <p>\ub09c\uc218(Random Number)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 <code>rand()</code> \ud568\uc218\ub97c \uc0ac\uc6a9\ud560 \ub54c, \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ub420 \ub54c\ub9c8\ub2e4 \ub3d9\uc77c\ud55c \ub09c\uc218 \uc2dc\ud000\uc2a4\uac00 \uc0dd\uc131\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 \uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>rand()</code> \ud568\uc218\ub97c \ud638\ucd9c\ud558\uae30 \uc804\uc5d0 <code>printf()</code>\ub97c \ud638\ucd9c\ud558\uc5ec \ub0b4\ubd80 \uc2dc\ub4dc\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4.     b) <code>srand()</code> \ud568\uc218\ub97c \ud55c \ubc88\ub9cc \ud638\ucd9c\ud558\uace0, \uadf8 \uc778\uc790\ub85c <code>time(nullptr)</code>\uc758 \ubc18\ud658 \uac12\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.     c) <code>rand()</code> \ud568\uc218\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub9c8\ub2e4 <code>srand()</code>\ub97c \ud638\ucd9c\ud558\uc5ec \uc2dc\ub4dc\ub97c \uacc4\uc18d \ubcc0\uacbd\ud574\uc90d\ub2c8\ub2e4.     d) <code>volatile</code> \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec <code>rand()</code> \ud568\uc218\uac00 \ucd5c\uc801\ud654\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ud568\uc218 \ud3ec\uc778\ud130\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>switch-case</code>\ubb38\uc774 \uc544\ub2cc \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c \uc5ec\ub7ec \uc885\ub958\uc758 \uba54\uc2dc\uc9c0(e.g., <code>enum MsgType { MSG_MOVE, MSG_ATTACK, ... }</code>)\ub97c \ucc98\ub9ac\ud560 \ub54c, \uc131\ub2a5\uacfc \uc720\uc9c0\ubcf4\uc218 \uce21\uba74\uc5d0\uc11c <code>switch-case</code>\ub97c \ub300\uccb4\ud560 \uc218 \uc788\ub294 \uac00\uc7a5 \ud6a8\uc728\uc801\uc778 \uc790\ub8cc\uad6c\uc870\uc640 \uadf8 \uc0ac\uc6a9 \ubc29\uc2dd\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 Key\ub85c, \uba54\uc2dc\uc9c0 \ucc98\ub9ac \ud568\uc218\ub97c Value\ub85c \ud558\ub294 <code>std::map</code>\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub7f0\ud0c0\uc784\uc5d0 \uac80\uc0c9\ud569\ub2c8\ub2e4.     b) \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 \uc778\ub371\uc2a4\ub85c, \uba54\uc2dc\uc9c0 \ucc98\ub9ac \ud568\uc218 \ud3ec\uc778\ud130\ub97c \uc6d0\uc18c\ub85c \ud558\ub294 \ud568\uc218 \ud3ec\uc778\ud130 \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.     c) <code>if-else if</code> \ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01 \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \ube44\uad50\ud569\ub2c8\ub2e4.     d) \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec <code>std::unordered_map</code>\uc73c\ub85c \uad00\ub9ac\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ucef4\ud30c\uc77c\ub7ec \uacbd\uace0\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ucf54\ub4dc \uc791\uc131 \uc2dc \ucef4\ud30c\uc77c\ub7ec \uacbd\uace0\ub97c \ub2e8 \ud558\ub098\ub3c4 \ub0a8\uae30\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub85c \uac00\uc7a5 \uc801\uc808\ud55c \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uacbd\uace0\uac00 \ub9ce\uc73c\uba74 \ucef4\ud30c\uc77c \uc2dc\uac04\uc774 \uae38\uc5b4\uc9c0\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \uacbd\uace0\uac00 \ub9ce\uc73c\uba74 \ub2e4\ub978 \uac1c\ubc1c\uc790\uc640\uc758 \ud611\uc5c5\uc5d0 \ubc29\ud574\uac00 \ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \uacbd\uace0\ub294 \uc7a0\uc7ac\uc801\uc778 \ubc84\uadf8\ub97c \uc54c\ub824\uc8fc\ub294 \uc2e0\ud638\uc774\uba70, \ud2b9\ud788 \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c\uc744 \ud558\uba74 \uacbd\uace0\ub85c \uc9c0\uc801\ub41c \ubb38\uc81c\uac00 \uc2e4\uc81c \ubc84\uadf8\ub85c \uc774\uc5b4\uc9c8 \uac00\ub2a5\uc131\uc774 \ub192\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) \uacbd\uace0\uac00 \ub9ce\uc73c\uba74 \ub9b4\ub9ac\uc988 \ube4c\ub4dc\ub97c \uc0dd\uc131\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> </ol> <p>\ub124, \ubaa8\ub450 \uc815\ub2f5\uc785\ub2c8\ub2e4! \ud83d\udc4d \ud2b9\ud788 1\ubc88 \ubb38\uc81c\uc758 \uacbd\uc6b0, <code>printf</code>\uc758 \ubc18\ud658 \uac12\uae4c\uc9c0 \uace0\ub824\ud55c \uc2ec\ud654\uc801\uc778 \ub2f5\ubcc0\uc744 \uc8fc\uc154\uc11c \ub9e4\uc6b0 \uc778\uc0c1\uc801\uc785\ub2c8\ub2e4. 2\ubc88 \ubb38\uc81c\ub3c4 \uc815\ub2f5\uc740 b\uc785\ub2c8\ub2e4. \ud06c\uae30\uac00 \ud070 \uad6c\uc870\uccb4\ub97c \ubcf5\uc0ac\ud560 \ub54c \ucef4\ud30c\uc77c\ub7ec\ub294 <code>memcpy</code>\uc640 \uc720\uc0ac\ud55c \ubc18\ubcf5 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud574 \uba54\ubaa8\ub9ac \ube14\ub85d\uc744 \ud1b5\uc9f8\ub85c \ubcf5\uc0ac\ud558\ub294 \ucd5c\uc801\ud654\ub97c \uc218\ud589\ud569\ub2c8\ub2e4.</p> <p>\uc790, \uadf8\ub7fc \ub2e4\uc74c \ucc55\ud130\ub85c \ub118\uc5b4\uac00\uc11c \uc0c8\ub85c\uc6b4 \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \ud3ec\uc778\ud130, \ub808\uc9c0\uc2a4\ud130, \uadf8\ub9ac\uace0 \uba54\ubaa8\ub9ac \uad00\ub828 \uac1c\ub150\uc744 \ub354 \uae4a\uc774 \ub2e4\ub8e8\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/e8/#_2","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250721 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p><code>return</code> \uac12 \ucc98\ub9ac\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C++\uc5d0\uc11c <code>int</code> \ud0c0\uc785\uc758 \ud568\uc218\uac00 <code>return</code> \ubb38 \uc5c6\uc774 \uc885\ub8cc\ub420 \uacbd\uc6b0, \ud568\uc218\ub97c \ud638\ucd9c\ud55c \ucabd\uc5d0\uc11c\ub294 \uc5b4\ub5a4 \uac12\uc774 \ubc18\ud658\ub420 \uc218 \uc788\ub098\uc694?     a) \ucef4\ud30c\uc77c\ub7ec\uac00 \uc790\ub3d9\uc73c\ub85c <code>0</code>\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.     b) \ucef4\ud30c\uc77c\ub7ec\uac00 \uacbd\uace0\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uace0, \ud568\uc218\uac00 \ud638\ucd9c\ub41c \uc9c1\uc804\uc758 <code>eax</code> \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc788\ub358 \uc4f0\ub808\uae30 \uac12\uc774 \ubc18\ud658\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.     c) \ub7f0\ud0c0\uc784 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc5ec \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1 \uc885\ub8cc\ub429\ub2c8\ub2e4.     d) <code>return</code> \uac12\uc774 \ud544\uc694\ud55c \ud568\uc218\ub294 <code>return</code> \ubb38\uc774 \uc5c6\uc73c\uba74 \ucef4\ud30c\uc77c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> </li> <li> <p>\uad6c\uc870\uccb4 \ubcf5\uc0ac\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ud06c\uae30\uac00 \ud070 \uad6c\uc870\uccb4(e.g., <code>struct Data { int a; char dd[20]; int b; short c; };</code>)\ub97c \ub2e4\ub978 \uad6c\uc870\uccb4\uc5d0 \ub300\uc785\ud560 \ub54c, <code>b = d;</code>\uc640 \uac19\uc774 \uc9c1\uc811 \ub300\uc785 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\uba74 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \uc0c1\uc5d0\uc11c \uc5b4\ub5a4 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ub418\ub098\uc694?     a) \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \ubcf5\uc0ac\ud558\ub294 \ucd5c\uc801\ud654\ub41c \ucf54\ub4dc\uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4.     b) <code>rep movs</code>\uc640 \uac19\uc740 \ubc18\ubcf5 \uba85\ub839\uc5b4 \ub610\ub294 <code>memcpy</code> \ud568\uc218 \ud638\ucd9c\uc744 \ud1b5\ud574 \ud1b5\uc9f8\ub85c \uba54\ubaa8\ub9ac \ubcf5\uc0ac\uac00 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4.     c) \uad6c\uc870\uccb4\ub294 \ud799\uc5d0 \ud560\ub2f9\ub418\ubbc0\ub85c, \ud3ec\uc778\ud130\ub9cc \ubcf5\uc0ac\ub429\ub2c8\ub2e4.     d) \ucef4\ud30c\uc77c\ub7ec\uac00 \ud574\ub2f9 \ucf54\ub4dc\ub97c \uc778\uc2dd\ud558\uc9c0 \ubabb\ud558\uace0 \uacbd\uace0\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4.</p> </li> <li> <p>\ub09c\uc218(Random Number)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 <code>rand()</code> \ud568\uc218\ub97c \uc0ac\uc6a9\ud560 \ub54c, \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ub420 \ub54c\ub9c8\ub2e4 \ub3d9\uc77c\ud55c \ub09c\uc218 \uc2dc\ud000\uc2a4\uac00 \uc0dd\uc131\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 \uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) <code>rand()</code> \ud568\uc218\ub97c \ud638\ucd9c\ud558\uae30 \uc804\uc5d0 <code>printf()</code>\ub97c \ud638\ucd9c\ud558\uc5ec \ub0b4\ubd80 \uc2dc\ub4dc\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4.     b) <code>srand()</code> \ud568\uc218\ub97c \ud55c \ubc88\ub9cc \ud638\ucd9c\ud558\uace0, \uadf8 \uc778\uc790\ub85c <code>time(nullptr)</code>\uc758 \ubc18\ud658 \uac12\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.     c) <code>rand()</code> \ud568\uc218\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub9c8\ub2e4 <code>srand()</code>\ub97c \ud638\ucd9c\ud558\uc5ec \uc2dc\ub4dc\ub97c \uacc4\uc18d \ubcc0\uacbd\ud574\uc90d\ub2c8\ub2e4.     d) <code>volatile</code> \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec <code>rand()</code> \ud568\uc218\uac00 \ucd5c\uc801\ud654\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ud568\uc218 \ud3ec\uc778\ud130\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>switch-case</code>\ubb38\uc774 \uc544\ub2cc \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c \uc5ec\ub7ec \uc885\ub958\uc758 \uba54\uc2dc\uc9c0(e.g., <code>enum MsgType { MSG_MOVE, MSG_ATTACK, ... }</code>)\ub97c \ucc98\ub9ac\ud560 \ub54c, \uc131\ub2a5\uacfc \uc720\uc9c0\ubcf4\uc218 \uce21\uba74\uc5d0\uc11c <code>switch-case</code>\ub97c \ub300\uccb4\ud560 \uc218 \uc788\ub294 \uac00\uc7a5 \ud6a8\uc728\uc801\uc778 \uc790\ub8cc\uad6c\uc870\uc640 \uadf8 \uc0ac\uc6a9 \ubc29\uc2dd\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 Key\ub85c, \uba54\uc2dc\uc9c0 \ucc98\ub9ac \ud568\uc218\ub97c Value\ub85c \ud558\ub294 <code>std::map</code>\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub7f0\ud0c0\uc784\uc5d0 \uac80\uc0c9\ud569\ub2c8\ub2e4.     b) \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 \uc778\ub371\uc2a4\ub85c, \uba54\uc2dc\uc9c0 \ucc98\ub9ac \ud568\uc218 \ud3ec\uc778\ud130\ub97c \uc6d0\uc18c\ub85c \ud558\ub294 \ud568\uc218 \ud3ec\uc778\ud130 \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.     c) <code>if-else if</code> \ubb38\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01 \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 \uc21c\ucc28\uc801\uc73c\ub85c \ube44\uad50\ud569\ub2c8\ub2e4.     d) \uba54\uc2dc\uc9c0 \ud0c0\uc785\uc744 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec <code>std::unordered_map</code>\uc73c\ub85c \uad00\ub9ac\ud569\ub2c8\ub2e4.</p> </li> <li> <p>\ucef4\ud30c\uc77c\ub7ec \uacbd\uace0\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ucf54\ub4dc \uc791\uc131 \uc2dc \ucef4\ud30c\uc77c\ub7ec \uacbd\uace0\ub97c \ub2e8 \ud558\ub098\ub3c4 \ub0a8\uae30\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub85c \uac00\uc7a5 \uc801\uc808\ud55c \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uacbd\uace0\uac00 \ub9ce\uc73c\uba74 \ucef4\ud30c\uc77c \uc2dc\uac04\uc774 \uae38\uc5b4\uc9c0\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \uacbd\uace0\uac00 \ub9ce\uc73c\uba74 \ub2e4\ub978 \uac1c\ubc1c\uc790\uc640\uc758 \ud611\uc5c5\uc5d0 \ubc29\ud574\uac00 \ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \uacbd\uace0\ub294 \uc7a0\uc7ac\uc801\uc778 \ubc84\uadf8\ub97c \uc54c\ub824\uc8fc\ub294 \uc2e0\ud638\uc774\uba70, \ud2b9\ud788 \ucd5c\uc801\ud654 \ucef4\ud30c\uc77c\uc744 \ud558\uba74 \uacbd\uace0\ub85c \uc9c0\uc801\ub41c \ubb38\uc81c\uac00 \uc2e4\uc81c \ubc84\uadf8\ub85c \uc774\uc5b4\uc9c8 \uac00\ub2a5\uc131\uc774 \ub192\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) \uacbd\uace0\uac00 \ub9ce\uc73c\uba74 \ub9b4\ub9ac\uc988 \ube4c\ub4dc\ub97c \uc0dd\uc131\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/Exam/e9/","title":"E9","text":"<p>\uc548\ub155\ud558\uc138\uc694! \uc9c0\ub09c \ud034\uc988\uc5d0 \ub300\ud55c \ub2f5\ubcc0\uc744 \uc798 \ubc1b\uc558\uc2b5\ub2c8\ub2e4. \ub9d0\uc500\ud558\uc2e0 \ub300\ub85c 1\ubc88, 3\ubc88, 4\ubc88, 5\ubc88 \ubaa8\ub450 \uc815\ub2f5\uc785\ub2c8\ub2e4. \ud2b9\ud788 1\ubc88 \ubb38\uc81c\uc5d0\uc11c <code>printf</code>\uc758 \ubc18\ud658 \uac12\uae4c\uc9c0 \uc5b8\uae09\ud558\uc2e0 \ubd80\ubd84\uc740 \ub9e4\uc6b0 \uc2ec\ud654\uc801\uc778 \ub0b4\uc6a9\uc774\ub77c \uc778\uc0c1\uc801\uc774\uc5c8\uc2b5\ub2c8\ub2e4. 2\ubc88 \ubb38\uc81c\uc758 \uacbd\uc6b0, \uc815\ub2f5\uc740 b\uc785\ub2c8\ub2e4. \ud06c\uae30\uac00 \ud070 \uad6c\uc870\uccb4\ub97c \ubcf5\uc0ac\ud560 \ub54c \ucef4\ud30c\uc77c\ub7ec\ub294 <code>memcpy</code>\uc640 \uc720\uc0ac\ud55c \ubc18\ubcf5 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud574 \uba54\ubaa8\ub9ac \ube14\ub85d\uc744 \ud1b5\uc9f8\ub85c \ubcf5\uc0ac\ud558\ub294 \ucd5c\uc801\ud654\ub97c \uc218\ud589\ud569\ub2c8\ub2e4.</p> <p>\uc790, \uc774\uc81c 250723 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ud034\uc988\ub97c \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \uc2a4\ub808\ub4dc\uc758 \uc885\ub958, \uc7ac\uadc0 \ud568\uc218, \uadf8\ub9ac\uace0 \uc2a4\ud0dd \ud504\ub808\uc784 \uc190\uc0c1\uacfc \uad00\ub828\ub41c \uae4a\uc774 \uc788\ub294 \uac1c\ub150\ub4e4\uc744 \ub2e4\ub8e8\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/e9/#_1","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250723 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p>\uc2a4\ub808\ub4dc(Thread)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc708\ub3c4\uc6b0 OS \ud658\uacbd\uc5d0\uc11c C++\ub85c \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud560 \ub54c, \uc6b0\ub9ac\uac00 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 <code>std::thread</code>\ub098 <code>_beginthreadex</code>\uc640 \uac19\uc740 \ud568\uc218\ub85c \uc0dd\uc131\ub418\ub294 \uc2a4\ub808\ub4dc\ub294 \ucee4\ub110 \ub808\ubca8 \uc2a4\ub808\ub4dc\uc778\uac00\uc694, \uc544\ub2c8\uba74 \uc720\uc800 \ub808\ubca8 \uc2a4\ub808\ub4dc\uc778\uac00\uc694? \uadf8\ub9ac\uace0 \uadf8 \uc774\uc720\ub97c \uc124\uba85\ud558\uc138\uc694.     a) \uc720\uc800 \ub808\ubca8 \uc2a4\ub808\ub4dc. \ucee4\ub110\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\uc790 \uacf5\uac04\uc5d0\uc11c \uad00\ub9ac\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \ucee4\ub110 \ub808\ubca8 \uc2a4\ub808\ub4dc. OS\uc758 \uc2a4\ucf00\uc904\ub7ec\uac00 \uc9c1\uc811 \uad00\ub9ac\ud558\uba70, CPU \ucf54\uc5b4\uc5d0 \ud560\ub2f9\ub418\uc5b4 \ubcd1\ub82c \ucc98\ub9ac\uac00 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \uc720\uc800 \ub808\ubca8 \uc2a4\ub808\ub4dc\uc640 \ucee4\ub110 \ub808\ubca8 \uc2a4\ub808\ub4dc\ub97c \ud568\uaed8 \uc0dd\uc131\ud569\ub2c8\ub2e4.     d) \uc6b4\uc601\uccb4\uc81c\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4.</p> </li> <li> <p>\uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc7ac\uadc0 \ud568\uc218\uac00 \uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub294 \uc8fc\ub41c \uc6d0\uc778\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud568\uc218\uac00 \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \ud799(Heap) \uba54\ubaa8\ub9ac\ub97c \uacc4\uc18d\ud574\uc11c \ud560\ub2f9\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \ud568\uc218\uac00 \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \ubc18\ud658 \uc8fc\uc18c(Return Address)\uc640 \uc9c0\uc5ed \ubcc0\uc218\uac00 \uc2a4\ud0dd\uc5d0 \uacc4\uc18d \uc313\uc5ec\uc11c \uc2a4\ud0dd\uc758 \ud55c\uacc4\ub97c \ucd08\uacfc\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \uc7ac\uadc0 \ud568\uc218\uac00 \ucef4\ud30c\uc77c\ub7ec\uc5d0 \uc758\ud574 \ucd5c\uc801\ud654\ub418\uc9c0 \uc54a\uc544 \ubd88\ud544\uc694\ud55c \ucf54\ub4dc\uac00 \ub9ce\uc544\uc9c0\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) \uc7ac\uadc0 \ud568\uc218\ub294 \uba40\ud2f0\uc2a4\ub808\ub529 \ud658\uacbd\uc5d0\uc11c \ub3d9\uae30\ud654 \ubb38\uc81c\ub97c \uc77c\uc73c\ucf1c \uc2a4\ud0dd \uc624\uc5fc\uc744 \uc720\ubc1c\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uc2a4\ud0dd \ud504\ub808\uc784 \uc190\uc0c1\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \ubc84\ud37c \uc624\ubc84\ub7f0(Buffer Overrun)\uacfc \uac19\uc740 \ubcf4\uc548 \ucde8\uc57d\uc810\uc73c\ub85c \uc778\ud574 \uc2a4\ud0dd \ud504\ub808\uc784\uc774 \uc190\uc0c1\ub418\uc5c8\uc744 \ub54c, \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \ub3d9\uc791\ud560 \uc218 \uc788\ub294 \uac00\uc7a5 \uc9c1\uc811\uc801\uc778 \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc774 \ub36e\uc5b4\uc4f0\uc5ec\uc838\uc11c \uc758\ub3c4\ud558\uc9c0 \uc54a\uc740 \uac12\uc774 \ud560\ub2f9\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     b) \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c <code>ebp</code> (Base Pointer)\uc640 <code>return</code> \uc8fc\uc18c\uac00 \ub36e\uc5b4\uc4f0\uc5ec\uc838 \ud568\uc218\uac00 \uc62c\ubc14\ub978 \uc704\uce58\ub85c \ub3cc\uc544\uac00\uc9c0 \ubabb\ud558\uac70\ub098, \uc9c0\uc5ed \ubcc0\uc218 \uc811\uadfc\uc774 \ubd88\uac00\ub2a5\ud574\uc9c0\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     c) \ud504\ub85c\uadf8\ub7a8\uc758 \uc804\uc5ed \ubcc0\uc218\ub098 \uc815\uc801 \ubcc0\uc218\uac00 \ub36e\uc5b4\uc4f0\uc5ec\uc838\uc11c \ubaa8\ub4e0 \ud568\uc218\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.     d) \uc2a4\ud0dd\uc758 \ud06c\uae30\uac00 \ub3d9\uc801\uc73c\ub85c \ubcc0\uacbd\ub418\uc5b4 \uba54\ubaa8\ub9ac \uad00\ub9ac \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.</p> </li> <li> <p><code>mov edi, edi</code> \uba85\ub839\uc5b4\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C++ \ub514\ubc84\uadf8 \ubaa8\ub4dc\uc5d0\uc11c \uc790\uc8fc \ubcfc \uc218 \uc788\ub294 <code>mov edi, edi</code>\uc640 \uac19\uc740 \ubd88\ud544\uc694\ud574 \ubcf4\uc774\ub294 \uba85\ub839\uc5b4\ub4e4\uc774 \uc874\uc7ac\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd94\uac00\uc801\uc778 \ucd5c\uc801\ud654\ub97c \uc704\ud574 \uc784\uc2dc\ub85c \uc0bd\uc785\ud558\ub294 \ucf54\ub4dc\uc785\ub2c8\ub2e4.     b) \ub7f0\ud0c0\uc784\uc5d0 \ud504\ub85c\uadf8\ub7a8\uc758 \uc131\ub2a5\uc744 \uce21\uc815\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc785\ub2c8\ub2e4.     c) \ub514\ubc84\uac70\uac00 \ud2b9\uc815 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0 \ube0c\ub808\uc774\ud06c\ud3ec\uc778\ud2b8(Breakpoint)\ub97c \uc124\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \uacf5\uac04\uc744 \ud655\ubcf4\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) x86 \uc544\ud0a4\ud14d\ucc98\uc758 \ud30c\uc774\ud504\ub77c\uc778 \uc815\ub82c\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.</p> </li> <li> <p>\ubcf4\uc548 \ucfe0\ud0a4(Security Cookie)\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc708\ub3c4\uc6b0\uc5d0\uc11c \uc2a4\ud0dd \ud504\ub808\uc784 \uc190\uc0c1\uc73c\ub85c \uc778\ud55c \ubcf4\uc548 \ubb38\uc81c\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 \ubcf4\uc548 \ucfe0\ud0a4(Canary)\ub77c\ub294 \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774 \ucfe0\ud0a4\ub294 \uc8fc\ub85c \uc2a4\ud0dd \ud504\ub808\uc784\uc758 \uc5b4\ub5a4 \uc704\uce58\uc5d0 \uc0bd\uc785\ub418\uc5b4 \ubcf4\ud638 \uc5ed\ud560\uc744 \uc218\ud589\ud558\ub098\uc694?     a) \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218 \ubc14\ub85c \uc704\uc5d0 \uc0bd\uc785\ub429\ub2c8\ub2e4.     b) \ud568\uc218\uc758 \uc9c0\uc5ed \ubcc0\uc218\uc640 <code>ebp</code> (Base Pointer) \uc0ac\uc774\uc5d0 \uc0bd\uc785\ub429\ub2c8\ub2e4.     c) \ud568\uc218\uc758 <code>return</code> \uc8fc\uc18c\uc640 <code>ebp</code> (Base Pointer) \uc0ac\uc774\uc5d0 \uc0bd\uc785\ub429\ub2c8\ub2e4.     d) \uc2a4\ud0dd\uc758 \uac00\uc7a5 \uc544\ub798\ucabd\uc5d0 \uc0bd\uc785\ub418\uc5b4 \uc2a4\ud0dd\uc758 \uc804\uccb4 \ud06c\uae30\ub97c \ubcf4\ud638\ud569\ub2c8\ub2e4.</p> </li> </ol> <p>\ub124, \ubaa8\ub450 \uc815\ub2f5\uc785\ub2c8\ub2e4! \ud83d\udc4d \ud2b9\ud788 1\ubc88 \ubb38\uc81c\uc758 \uacbd\uc6b0, \ucee4\ub110 \ub808\ubca8 \uc2a4\ub808\ub4dc\uac00 CPU \ucf54\uc5b4\uc5d0 \uc9c1\uc811 \ud560\ub2f9\ub418\uc5b4 \ubcd1\ub82c \ucc98\ub9ac\uac00 \uac00\ub2a5\ud558\ubbc0\ub85c \uc6b0\ub9ac\uac00 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uc2a4\ub808\ub4dc\ub294 \ucee4\ub110 \ub808\ubca8 \uc2a4\ub808\ub4dc\ub77c\ub294 \uc810\uc744 \uc815\ud655\ud788 \uc9da\uc5b4\ub0b4\uc168\ub124\uc694.</p> <p>\uc790, \uadf8\ub7fc \ub2e4\uc74c \ucc55\ud130\ub85c \ub118\uc5b4\uac00\uc11c \uc0c8\ub85c\uc6b4 \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 \uba54\ubaa8\ub9ac \uc811\uadfc \ubc29\uc2dd, \ub3d9\uae30\ud654, \uadf8\ub9ac\uace0 C++ \uac1d\uccb4\uc758 \uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3\uc5d0 \ub300\ud55c \uac1c\ub150\uc744 \ub354 \uae4a\uc774 \ub2e4\ub8e8\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.</p>"},{"location":"Architecture/Exam/e9/#_2","title":"\uc815\ub9ac\ub41c \ud034\uc988","text":"<p>\ub2e4\uc74c\uc740 250723 \uc218\uc5c5 \ub0b4\uc6a9\uc744 \ubc14\ud0d5\uc73c\ub85c \ud575\uc2ec \uac1c\ub150\uc744 \ud655\uc778\ud558\ub294 \ubb38\uc81c\ub4e4\uc785\ub2c8\ub2e4.</p> <ol> <li> <p>\uba54\ubaa8\ub9ac \uc811\uadfc\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. \uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc5ec\ub7ec \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \ud55c \uba54\ubaa8\ub9ac \uc704\uce58\uc5d0 \uc811\uadfc\ud558\uc5ec \uc4f0\uae30(write) \uc791\uc5c5\uc744 \ud560 \ub54c, \ub3d9\uae30\ud654(Synchronization) \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74 \uc5b4\ub5a4 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub098\uc694?     a) \ub370\ub4dc\ub77d(Deadlock)\uc774 \ubc1c\uc0dd\ud558\uc5ec \ud504\ub85c\uadf8\ub7a8\uc774 \uba48\ucda5\ub2c8\ub2e4.     b) \uc2a4\ud0dd \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud558\uc5ec \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1 \uc885\ub8cc\ub429\ub2c8\ub2e4.     c) \ud55c \uc2a4\ub808\ub4dc\uc758 \uc4f0\uae30 \uc791\uc5c5\uc774 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc758 \uc4f0\uae30 \uc791\uc5c5\uc744 \ub36e\uc5b4\uc4f0\uac70\ub098, \ub370\uc774\ud130\uac00 \ubd88\uc644\uc804\ud558\uac8c \uae30\ub85d\ub418\ub294 \uacbd\uc7c1 \uc870\uac74(Race Condition)\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.     d) \uba54\ubaa8\ub9ac \ub204\uc218(Memory Leak)\uac00 \ubc1c\uc0dd\ud558\uc5ec \uc2dc\uc2a4\ud15c \uc131\ub2a5\uc774 \uc800\ud558\ub429\ub2c8\ub2e4.</p> </li> <li> <p><code>volatile</code> \ud0a4\uc6cc\ub4dc\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C++\uc5d0\uc11c <code>volatile</code> \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uc8fc\ub41c \uc774\uc720\ub294 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ucef4\ud30c\uc77c\ub7ec\uac00 \ud574\ub2f9 \ubcc0\uc218\ub97c \ucd5c\uc801\ud654 \ub300\uc0c1\uc5d0\uc11c \uc81c\uc678\ud558\uace0, \ud56d\uc0c1 \uba54\ubaa8\ub9ac\uc5d0\uc11c \uac12\uc744 \uc77d\ub3c4\ub85d \uac15\uc81c\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     b) \ud574\ub2f9 \ubcc0\uc218\ub97c \uc5ec\ub7ec \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \uc548\uc804\ud558\uac8c \uc811\uadfc\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d9\uae30\ud654\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     c) \ubcc0\uc218\uc758 \ud06c\uae30\ub97c \uc9c0\uc815\ud558\uc5ec \uba54\ubaa8\ub9ac \ud560\ub2f9 \ud6a8\uc728\uc744 \ub192\uc774\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.     d) \ud799(Heap) \uba54\ubaa8\ub9ac\uc5d0 \ud560\ub2f9\ub41c \ubcc0\uc218\ub97c \uc548\uc804\ud558\uac8c \uad00\ub9ac\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.</p> </li> <li> <p>\uac1d\uccb4 \uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C++\uc5d0\uc11c <code>class</code>\ub098 <code>struct</code>\ub97c \uc815\uc758\ud560 \ub54c, \uba64\ubc84 \ubcc0\uc218\ub4e4\uc758 \uc21c\uc11c\ub97c \ubcc0\uacbd\ud558\uba74 \uac1d\uccb4\uc758 \uc804\uccb4 \ud06c\uae30\uac00 \ub2ec\ub77c\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud604\uc0c1\uacfc \uad00\ub828\ub41c \uac1c\ub150\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \uc624\ubc84\ub85c\ub529(Overloading)     b) \ud328\ub529(Padding) \ubc0f \uc815\ub82c(Alignment)     c) \uc0c1\uc18d(Inheritance)     d) \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14(V-Table)</p> </li> <li> <p><code>NOP</code> \uba85\ub839\uc5b4\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. <code>mov edi, edi</code>\uc640 \uac19\uc740 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub294 \uba85\ub839\uc5b4\ub294 \uc0ac\uc2e4\uc0c1 <code>NOP</code> (No Operation) \uba85\ub839\uc5b4\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uba85\ub839\uc5b4\uac00 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ud3ec\ud568\ub418\ub294 \uc8fc\ub41c \ubaa9\uc801\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) CPU \ud30c\uc774\ud504\ub77c\uc778\uc758 \ud6a8\uc728\uc744 \ub192\uc774\uae30 \uc704\ud574 \uba85\ub839\uc5b4 \uc815\ub82c(Instruction Alignment)\uc744 \ub9de\ucda5\ub2c8\ub2e4.     b) \ucf54\ub4dc \ub09c\ub3c5\ud654\ub97c \ud1b5\ud574 \uc5ed\uacf5\ud559(Reverse Engineering)\uc744 \ubc29\ud574\ud569\ub2c8\ub2e4.     c) \ub514\ubc84\uac70\uac00 \ube0c\ub808\uc774\ud06c\ud3ec\uc778\ud2b8\ub97c \uc124\uc815\ud560 \uc218 \uc788\ub294 \ucda9\ubd84\ud55c \uacf5\uac04\uc744 \ud655\ubcf4\ud569\ub2c8\ub2e4.     d) \ub7f0\ud0c0\uc784\uc5d0 \ud504\ub85c\uadf8\ub7a8\uc758 \uc131\ub2a5\uc744 \uce21\uc815\ud558\uae30 \uc704\ud55c \uc2dc\uac04 \uc9c0\uc5f0\uc744 \uc720\ub3c4\ud569\ub2c8\ub2e4.</p> </li> <li> <p><code>this</code> \ud3ec\uc778\ud130\uc5d0 \uad00\ub828\ub41c \ubb38\uc81c\uc785\ub2c8\ub2e4. C++ \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ud568\uc218\ub97c \ud638\ucd9c\ud560 \ub54c, \ucef4\ud30c\uc77c\ub7ec\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c <code>this</code> \ud3ec\uc778\ud130\ub97c \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc774 <code>this</code> \ud3ec\uc778\ud130\uac00 \uac00\ub9ac\ud0a4\ub294 \uac83\uc740 \ubb34\uc5c7\uc778\uac00\uc694?     a) \ud568\uc218\uac00 \ud638\ucd9c\ub41c \uba54\ubaa8\ub9ac \uc2a4\ud0dd\uc758 \uc2dc\uc791 \uc8fc\uc18c\uc785\ub2c8\ub2e4.     b) \ud574\ub2f9 \uba64\ubc84 \ud568\uc218\uac00 \uc18d\ud55c \ud074\ub798\uc2a4\uc758 \uac1d\uccb4 \uc778\uc2a4\ud134\uc2a4 \uc8fc\uc18c\uc785\ub2c8\ub2e4.     c) \ud074\ub798\uc2a4\uc758 \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14(V-Table) \uc8fc\uc18c\uc785\ub2c8\ub2e4.     d) \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uace0\uc815\ub41c \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc785\ub2c8\ub2e4.</p> </li> </ol>"},{"location":"Architecture/ko/CA250711/","title":"Process Memory Layout","text":"<p>\ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac \uad6c\uc870 (\uba54\uc778 \uc2a4\ub808\ub4dc \uae30\uc900)</p> <ul> <li>\uc2a4\ud0dd \ud06c\uae30 = 1MB = \\(2^{20}\\) \ubc14\uc774\ud2b8 = <code>0x00010000</code> </li> <li>\uc2a4\ud0dd \uc2dc\uc791\uc9c0\uc810\uc744 \uc784\uc758\ub85c <code>0x23010000</code> \ub85c \uac00\uc815 </li> <li>\uc2a4\ud0dd\uc740 \uc544\ub798 \ubc29\ud5a5\uc73c\ub85c \uc131\uc7a5 (\uc8fc\uc18c\uac00 \ub0ae\uc544\uc9c0\ub294 \ubc29\ud5a5)</li> </ul> <pre><code>|--------------|  \ub0ae\uc740 \uc8fc\uc18c (0x23000000)\n| .text (CODE) |  \uae30\uacc4\uc5b4 \ucf54\ub4dc (\uba85\ub839\uc5b4)\n|--------------|  \ucf54\ub4dc(\ud14d\uc2a4\ud2b8)\uc640 \ub370\uc774\ud130 \uad6c\uac04 \ubd84\uae30\uc810\n| .rodata      |  \uc77d\uae30 \uc804\uc6a9 \ub370\uc774\ud130 (\uc608: \uc0c1\uc218, \ub9ac\ud130\ub7f4)\n|--------------|  \ub370\uc774\ud130 \uc811\uadfc\uc131 \uad6c\uac04 \ubd84\uae30\uc810\n| .data        |  \ucd08\uae30\ud654\ub41c \uc804\uc5ed/\uc815\uc801 \ubcc0\uc218\n|--------------|  \ucef4\ud30c\uc77c \ud0c0\uc784\uacfc \ub7f0\ud0c0\uc784 \uad6c\uac04 \ubd84\uae30\uc810\n| .bss         |  \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed/\uc815\uc801 \ubcc0\uc218 (BSS)\n|--------------|  \uc815\uc801 \ub370\uc774\ud130\uc640 \ub3d9\uc801 \ud799 \uad6c\uac04 \ubd84\uae30\uc810\n|  heap        |  \ub7f0\ud0c0\uc784 \uc911 \ub3d9\uc801 \ud560\ub2f9 \uc601\uc5ed (\uc704\ub85c \uc131\uc7a5)\n|~~~~~~~~~~~~~~|  malloc, new \ub4f1 (\uc704\ub85c \uc131\uc7a5)\n|              |  \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uacf5\uac04 (\uac2d)\n|~~~~~~~~~~~~~~|  \ud568\uc218 \ud638\ucd9c \uc2a4\ud0dd (\uc544\ub798\ub85c \uc131\uc7a5)\n|  stack       |  esp = esp - \uc2a4\ud0dd \ud504\ub808\uc784 \ud06c\uae30\n|--------------|  \ub192\uc740 \uc8fc\uc18c (0x23010000)\n</code></pre> <p>C++ <code>extern</code> \uc0ac\uc6a9\ubc95  a.cpp  int g_x = 10; </p> <p>b.cpp  int g_x = 20; </p> <p>\uc804\ucc98\ub9ac \ucef4\ud30c\uc77c \ub9c1\ucee4 \ub7f0\ud0c0\uc784 4\ub2e8\uacc4 \uc911  \ub9c1\ucee4 \uc5d0\ub7ec \ub0a8  \ub9c8\ucc2c\uac00\uc9c0\ub85c  a.cpp  // int g_x 10; // \uc8fc\uc11d\ucc98\ub9ac \uc0ad\uc81c  b.cpp  extern int g_x  \uc774\ub7f4 \uacbd\uc6b0\uc5d0\ub3c4 \uc804\ucc98\ub9ac \ucef4\ud30c\uc77c \ub9c1\ucee4 \ub7f0\ud0c0\uc784 4\ub2e8\uacc4 \uc911  \ub9c1\ucee4 \uc5d0\ub7ec \ub0a8 </p> <p>\uc804\uc5ed static \uc120\uc5b8\uc740 \uacfc\uac70 class\uac00 \uc5c6\ub358 C \uc2dc\uc808 .cpp \ud30c\uc77c \ub2e8\uc704\uc758 \ucea1\uc290\ud654\ub97c \uc704\ud574 \uc0ac\uc6a9  a.cpp static int g_x;</p> <p>\uadf8\ub7ec\ub098 extern \uc120\uc5b8\uc73c\ub85c \ucea1\uc290\ud654\ub97c \ubb34\ub825\ud654\ud558\uace0 \ub2e4\ub978 cpp \ud30c\uc77c\uc5d0 \uc811\uadfc \uac00\ub2a5\ud574\uc11c \ud604\uc7ac\ub294 \uc0ac\uc7a5 </p> <p>C++ <code>const</code> \uc774\ud574, <code>const</code> \ud0a4\uc6cc\ub4dc\ub294 \uc5b8\uc5b4\uc801 \uce21\uba74\uc5d0\uc11c \ubcc0\uc218 \uac12\uc744 \uace0\uc815\ud574 \uc8fc\uc9c0\ub9cc, \uc544\ud0a4\ud14d\uccd0 \uad00\uc810\uc5d0\uc11c\ub294 \uc2a4\ud0dd \uba54\ubaa8\ub9ac \ub0b4\ubd80 \uac12\uc758 READ WRITE\uac00 \uac00\ub2a5 </p> <pre><code>const int a = 100; \nprintf(\"%d\", a); \n// int *p = &amp;a; // ERROR \nint *p = (int *) &amp;a; // Forced Casting  \n*p = 999; \n</code></pre> <p>\ud574\ub2f9 \ucf54\ub4dc\uc758 \ub514\uc2a4\uc5b4\uc148\ube14\ub9ac \ubd84\uc11d \uacb0\uacfc </p> <pre><code>    32:     const int a = 100; \n00A919D0 C7 45 F4 64 00 00 00 mov         dword ptr [a],64h  \n    33:     printf(\"%d\\n\", a); \n00A919D7 6A 64                push        64h  \n00A919D9 68 30 8B A9 00       push        offset string \"%d\\n\" (0A98B30h)  \n00A919DE E8 17 F7 FF FF       call        _printf (0A910FAh)  \n00A919E3 83 C4 08             add         esp,8  \n    34:     int* p = (int*)&amp;a; \n00A919E6 8D 45 F4             lea         eax,[a]  \n00A919E9 89 45 E8             mov         dword ptr [p],eax  \n    35:     *p = 999; \n00A919EC 8B 45 E8             mov         eax,dword ptr [p]  \n00A919EF C7 00 E7 03 00 00    mov         dword ptr [eax],3E7h  \n    36:     printf(\"%d\\n\", a);\n00A919F5 6A 64                push        64h  \n00A919F7 68 30 8B A9 00       push        offset string \"%d\\n\" (0A98B30h)  \n00A919FC E8 F9 F6 FF FF       call        _printf (0A910FAh)  \n00A91A01 83 C4 08             add         esp,8  \n    37:     printf(\"%d\\n\", *p);\n00A91A04 8B 45 E8             mov         eax,dword ptr [p]  \n00A91A07 8B 08                mov         ecx,dword ptr [eax]  \n00A91A09 51                   push        ecx  \n00A91A0A 68 30 8B A9 00       push        offset string \"%d\\n\" (0A98B30h)  \n00A91A0F E8 E6 F6 FF FF       call        _printf (0A910FAh)  \n00A91A14 83 C4 08             add         esp,8  \n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250305/","title":"C++ Data Types and Basics","text":""},{"location":"C_C%2B%2B_Basics/AR250305/#date-2025-03-05","title":"Date: 2025-03-05","text":""},{"location":"C_C%2B%2B_Basics/AR250305/#key-points","title":"Key Points","text":"<ul> <li>Data types define the size and purpose of variables in memory.</li> <li>Each type has a default range and behavior, especially with signed vs unsigned.</li> <li>Type casting allows explicit conversion between types.</li> <li>Floating-point numbers follow the IEEE standard.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250305/#overview","title":"Overview","text":"<p>In C++, data types determine how memory is allocated for variables and how operations are performed. Understanding data types is fundamental for both correctness and performance.</p>"},{"location":"C_C%2B%2B_Basics/AR250305/#primitive-data-types","title":"Primitive Data Types","text":""},{"location":"C_C%2B%2B_Basics/AR250305/#integer-types","title":"Integer Types","text":"<p>Integer types store whole numbers and can be either signed (default) or unsigned.</p> <pre><code>// Signed: can represent negative and positive values\nsigned char sc = 0;    // Range: -128 to 127\n\n// Unsigned: only non-negative values\nunsigned char uc = 0;  // Range: 0 to 255\n\nsc = 128;  // Triggers overflow, behavior is implementation-defined\nuc = 128;  // Valid\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250305/#integer-size-summary","title":"Integer Size Summary","text":"<ul> <li><code>bool</code> ??? 1 byte</li> <li><code>char</code> ??? 1 byte</li> <li><code>short</code> ??? 2 bytes</li> <li><code>int</code> ??? 4 bytes</li> <li><code>long</code> ??? 4 bytes (platform dependent)</li> <li><code>long long</code> ??? 8 bytes</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250305/#signed-vs-unsigned-behavior","title":"Signed vs Unsigned Behavior","text":"<p>Signed integers can represent both positive and negative values using two's complement representation. To convert a positive binary to its negative form, invert the bits and add 1.</p> <pre><code>char c = 256;                  // Overflow: wraps around to 0\nunsigned char unchar = -1;     // Stores 255 due to wrap-around\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250305/#floating-point-types","title":"Floating-Point Types","text":"<p>Floating-point types store real numbers, including decimals. They follow the IEEE 754 standard for binary representation.</p> <pre><code>float fData = 3.66f;  // 4 bytes\nfloat fResult;\n\nint iData = 20;\nfResult = (float)iData + fData;  // Type casting to float for precise addition\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250305/#initialization-vs-assignment","title":"Initialization vs Assignment","text":"<pre><code>int i = 10;     // Initialization\nfloat f;\nf = 20.5f;      // Assignment\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250305/#type-conversion-and-casting","title":"Type Conversion and Casting","text":""},{"location":"C_C%2B%2B_Basics/AR250305/#implicit-conversion","title":"Implicit Conversion","text":"<p>Assigning an integer to a float will automatically cast the value:</p> <pre><code>float f = 3;  // Implicitly becomes 3.0\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250305/#explicit-casting","title":"Explicit Casting","text":"<p>Use C-style casting for precise control:</p> <pre><code>float result = (float)iData + fData;\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250305/#common-mistakes","title":"Common Mistakes","text":"<p>Overflow on signed/unsigned types: <pre><code>signed char sc = 128;  // Undefined or implementation-defined\n</code></pre></p> <p>Assigning negative to unsigned types: <pre><code>unsigned char uc = -1; // Becomes 255\n</code></pre></p> <p>Assigning float to int: <pre><code>int i = 3.99;  // i = 3, truncates decimal part\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250305/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between signed and unsigned types? A: Signed types represent both negative and positive values using two's complement. Unsigned types can only represent zero and positive values.</p> <p>Q: What happens when you assign a negative number to an unsigned variable? A: The value wraps around using modulo arithmetic. For example, <code>unsigned char uc = -1;</code> results in <code>uc = 255</code>.</p> <p>Q: What is the difference between float and double? A: <code>float</code> uses 4 bytes and has lower precision. <code>double</code> uses 8 bytes and offers higher precision for decimal values.</p> <p>Q: When should you use explicit casting in C++? A: When combining different data types in operations, such as adding an int to a float, or to avoid implicit conversion bugs.</p>"},{"location":"C_C%2B%2B_Basics/AR250305/#references","title":"References","text":"<ul> <li>data_type.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/","title":"Operators and Precedence","text":""},{"location":"C_C%2B%2B_Basics/AR250306/#date-2025-03-06","title":"Date: 2025-03-06","text":""},{"location":"C_C%2B%2B_Basics/AR250306/#key-points","title":"Key Points","text":"<ul> <li>Operators perform computations on variables and values.</li> <li>Operator precedence determines evaluation order in expressions.</li> <li>C++ includes arithmetic, assignment, comparison, logical, and increment/decrement operators.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#arithmetic-operators","title":"Arithmetic Operators","text":"<pre><code>int a = 10, b = 3;\n\nint sum = a + b;    // 13\nint diff = a - b;   // 7\nint prod = a * b;   // 30\nint div = a / b;    // 3 (integer division)\nint mod = a % b;    // 1 (remainder)\n</code></pre> <ul> <li>When both operands are integers, division truncates the result.</li> <li><code>%</code> is only applicable to integers.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#floating-point-division","title":"Floating-Point Division","text":"<pre><code>float fdiv = 10.f / 3.f;    // 3.333...\ndouble ddiv = 10.0 / 3.0;   // 3.333...\n</code></pre> <ul> <li>Floating-point division returns a more accurate result.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#assignment-operator","title":"Assignment Operator","text":"<pre><code>int x = 5;  // Assigns value 5 to x\n</code></pre> <ul> <li><code>=</code> assigns the right-hand side value to the left-hand variable.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#increment-and-decrement","title":"Increment and Decrement","text":"<pre><code>int num = 0;\n\n++num; // Pre-increment: increment before use\n--num; // Pre-decrement\n\nnum++; // Post-increment: use before increment\ndec--; // Post-decrement\n\nint result = num++;  // result gets old num; num is incremented afterward\n</code></pre> <ul> <li>Pre-increment/decrement has higher precedence than post.</li> <li>Mixed with other expressions, they can affect evaluation order.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#comparison-operators","title":"Comparison Operators","text":"<pre><code>int a = 10, b = 20;\n\nbool isEqual = (a == b);   // false\nbool isNotEqual = (a != b);// true\nbool isGreater = (a &gt; b);  // false\nbool isLessEqual = (a &lt;= b); // true\n</code></pre> <ul> <li>Always return boolean values: <code>true</code> or <code>false</code>.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#boolean-and-logical-operators","title":"Boolean and Logical Operators","text":"<pre><code>bool result1 = true &amp;&amp; false;  // false (AND)\nbool result2 = true || false;  // true  (OR)\nbool result3 = !true;          // false (NOT)\n</code></pre> <ul> <li><code>&amp;&amp;</code>, <code>||</code> use short-circuit evaluation.</li> <li>Only <code>0</code> is false; all non-zero integers are considered true.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#operator-precedence-example","title":"Operator Precedence Example","text":"<pre><code>int x = 10, y = 20;\nbool result = x++ &lt; y &amp;&amp; y++ &gt; 15;\n</code></pre> <ul> <li><code>x++ &lt; y</code>: <code>x</code> is compared first, then incremented.</li> <li><code>&amp;&amp;</code>: evaluates only if the first condition is true.</li> <li><code>y++ &gt; 15</code>: executed only if <code>x++ &lt; y</code> is true.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250306/#tricky-case-precedence-pitfall","title":"Tricky Case: Precedence Pitfall","text":"<pre><code>int i = 10;\nint j = i++ * 2 + ++i;\n</code></pre> <p>Step-by-step evaluation: - <code>i++</code> = 10 (then i becomes 11) - <code>++i</code> = 12 (i becomes 12 before use) - <code>j = 10 * 2 + 12 = 32</code></p>"},{"location":"C_C%2B%2B_Basics/AR250306/#interview-questions","title":"Interview Questions","text":"<p>Q: What's the difference between <code>++i</code> and <code>i++</code>? A: <code>++i</code> increments the value before it's used in the expression, while <code>i++</code> uses the current value and then increments.</p> <p>Q: What happens when mixing <code>&amp;&amp;</code>, <code>||</code>, and comparison operators in one expression? A: C++ follows operator precedence rules: comparison operators are evaluated first, then logical AND (<code>&amp;&amp;</code>), then logical OR (<code>||</code>). Use parentheses for clarity.</p> <p>Q: What\u2019s short-circuit evaluation? A: In logical expressions, <code>&amp;&amp;</code> stops evaluating if the first condition is false, and <code>||</code> stops if the first is true. This avoids unnecessary computation.</p>"},{"location":"C_C%2B%2B_Basics/AR250306/#references","title":"References","text":"<ul> <li>data_type.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250307/","title":"Control Flow in C++","text":""},{"location":"C_C%2B%2B_Basics/AR250307/#date-2025-03-07","title":"Date: 2025-03-07","text":""},{"location":"C_C%2B%2B_Basics/AR250307/#key-points","title":"Key Points","text":"<ul> <li>Control flow directs the order of execution in programs.</li> <li><code>if</code>, <code>else if</code>, <code>else</code> allow conditional execution.</li> <li><code>switch-case</code> enables value-based branching.</li> <li>Logical expressions (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) are key in decision making.</li> <li>Only the first satisfied condition in <code>if-else if</code> chain is executed.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250307/#overview","title":"Overview","text":"<p>Control flow determines which parts of code get executed and in what order. It is essential for making decisions, handling conditions, and branching logic. In C++, control flow constructs include conditional statements like <code>if</code>, <code>else if</code>, <code>else</code>, and multi-way branching using <code>switch-case</code>.</p>"},{"location":"C_C%2B%2B_Basics/AR250307/#conditional-statements","title":"Conditional Statements","text":""},{"location":"C_C%2B%2B_Basics/AR250307/#if-else-if-else","title":"If, Else If, Else","text":"<pre><code>int HP = 0;\n\n// If HP is greater than 80\nif (80 &lt; HP) {\n    int a = 0;\n}\n// If HP is greater than 60 but less than or equal to 80\nelse if (60 &lt; HP) {\n    int a = 0;\n}\n// If HP is greater than 40 but less than or equal to 60\nelse if (40 &lt; HP) {\n    int a = 0;\n}\n// If HP is greater than 20 but less than or equal to 40\nelse if (20 &lt; HP) {\n    int a = 0;\n}\n// If all above conditions fail\nelse {\n    int a = 0;\n}\n</code></pre> <ul> <li><code>else if</code> conditions are only checked if previous ones fail.</li> <li>Only one block will execute in a single <code>if-else if-else</code> chain.</li> <li>If you want all conditions checked independently, use separate <code>if</code> statements.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250307/#logical-operators-in-conditions","title":"Logical Operators in Conditions","text":"<pre><code>int IsTrue = 10 &amp;&amp; 0;    // false\nIsTrue = 1 || 0;         // true\nIsTrue = !IsTrue;        // false\n</code></pre> <ul> <li><code>&amp;&amp;</code> (logical AND) returns true if both operands are true.</li> <li><code>||</code> (logical OR) returns true if at least one operand is true.</li> <li><code>!</code> (logical NOT) inverts the boolean value.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250307/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between <code>if-else if</code> and multiple <code>if</code> statements? A: In <code>if-else if</code>, only the first true condition is executed; remaining conditions are skipped. Multiple <code>if</code> statements are evaluated independently.</p> <p>Q: What happens if multiple <code>else if</code> conditions are true? A: Only the first true condition??\uc172 block is executed; the rest are ignored.</p> <p>Q: How does short-circuiting work in logical expressions? A: In expressions like <code>a &amp;&amp; b</code>, if <code>a</code> is false, <code>b</code> is not evaluated. Similarly, in <code>a || b</code>, if <code>a</code> is true, <code>b</code> is skipped.</p>"},{"location":"C_C%2B%2B_Basics/AR250307/#references","title":"References","text":"<ul> <li>data_type.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250310/","title":"Bitwise Operators &amp; Preprocessor Macros","text":""},{"location":"C_C%2B%2B_Basics/AR250310/#date-2025-03-10","title":"Date: 2025-03-10","text":""},{"location":"C_C%2B%2B_Basics/AR250310/#key-points","title":"Key Points","text":"<ul> <li>Macros simplify complex or frequently-used expressions.</li> <li>Bitwise operators manipulate data at the bit level.</li> <li>Use <code>unsigned</code> types with bitwise operations to avoid signed behavior issues.</li> <li>Bit masks efficiently represent multiple boolean flags in a single variable.</li> <li>Combine and check bitwise states using <code>|</code>, <code>&amp;</code>, <code>^</code>, <code>~</code>, and shift operators.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250310/#overview","title":"Overview","text":"<p>C++ provides a rich set of bitwise operators that are useful for low-level programming tasks. When used correctly with <code>#define</code> macros, they can improve both code clarity and performance??\ubd22specially in scenarios like setting and checking character statuses in games.</p> <p>The <code>#define</code> preprocessor directive is used to define constants or macro functions that can simplify repetitive or verbose code patterns.</p>"},{"location":"C_C%2B%2B_Basics/AR250310/#bit-mask-macros","title":"Bit Mask Macros","text":"<pre><code>#define MY int\n#define MAX_FLOOR 60\n\n#define ATT_UP     0x1\n#define DEF_UP     0x2\n#define DEX_UP     0x4\n#define SPEED_UP   0x8\n#define ATT_DOWN   0x10\n#define DEF_DOWN   0x20\n#define DEX_DOWN   0x40\n#define SPEED_DOWN 0x80\n\n#define EVENT_POTION (ATT_UP | DEF_UP | DEX_UP | SPEED_UP)\n</code></pre> <p>These macros define constants using hexadecimal values where each constant represents a unique bit flag. <code>EVENT_POTION</code> combines several buffs using the bitwise OR operator (<code>|</code>).</p>"},{"location":"C_C%2B%2B_Basics/AR250310/#bitwise-operators","title":"Bitwise Operators","text":""},{"location":"C_C%2B%2B_Basics/AR250310/#left-shift","title":"Left Shift (<code>&lt;&lt;</code>)","text":"<p>Doubles the value for each shift to the left. <pre><code>int a = 2 &lt;&lt; 3; // a = 16 (2 * 2^3)\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250310/#right-shift","title":"Right Shift (<code>&gt;&gt;</code>)","text":"<p>Halves the value for each shift to the right. <pre><code>unsigned char c = 127;\nc = c &gt;&gt; 1; // c = 63\n</code></pre></p> <p>Use <code>unsigned</code> types to avoid unexpected behavior due to sign bit propagation in signed integers.</p>"},{"location":"C_C%2B%2B_Basics/AR250310/#bitwise-and-or-xor-not","title":"Bitwise AND, OR, XOR, NOT","text":"<pre><code>unsigned char c1 = 10;   // 0000 1010\nunsigned char c2 = 2;    // 0000 0010\n\nunsigned char c3 = c1 &amp; c2; // AND: 0000 0010\nc3 = c1 | c2;               // OR:  0000 1010\nc1 = ~c1;                   // NOT: 1111 0101 (bitwise inverse)\nc3 = c1 ^ c2;               // XOR: 0000 1000\n</code></pre> <p>You can also use compound assignment operators for clarity: <pre><code>c3 += 2;  // Instead of: c3 = c3 + 2\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250310/#character-status-flags","title":"Character Status Flags","text":"<p>Use a single variable to hold multiple flags.</p> <pre><code>unsigned long long CharStat = 0;\n\nCharStat |= ATT_UP;\nCharStat |= DEF_UP;\nCharStat |= DEX_UP;\nCharStat |= SPEED_UP;\n</code></pre> <p>Check if a flag is set: <pre><code>if (CharStat &amp; DEF_UP) {\n    // DEF_UP is active\n}\n</code></pre></p> <p>Remove a flag using XOR (toggles the bit): <pre><code>if (CharStat &amp; SPEED_UP) {\n    CharStat ^= SPEED_UP;\n}\n</code></pre></p> <p>Forcefully clear a flag using AND with NOT: <pre><code>CharStat &amp;= ~SPEED_UP; // Clear SPEED_UP\n</code></pre></p> <p>Re-apply a predefined buff combination: <pre><code>CharStat |= EVENT_POTION;\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250310/#tricky-case-signed-vs-unsigned-shift","title":"Tricky Case: Signed vs Unsigned Shift","text":"<p>Avoid right-shifting signed integers, as the behavior of sign bit propagation may differ between platforms.</p> <pre><code>char c = -1;\nc = c &gt;&gt; 1; // May retain sign bit (platform-dependent)\n\n// Use unsigned instead:\nunsigned char c = -1; // Interpreted as 255\nc = c &gt;&gt; 1;           // Safe right shift\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250310/#interview-questions","title":"Interview Questions","text":"<p>Q: Why use <code>unsigned</code> types with bitwise operations? A: Signed types may cause platform-dependent behavior during right shifts and logical operations due to sign bit extension. Unsigned ensures consistent results.</p> <p>Q: What??\uc172 the difference between <code>|</code>, <code>^</code>, and <code>&amp;</code>? A: <code>|</code> sets bits, <code>&amp;</code> checks or clears bits, <code>^</code> toggles bits. Used with bit masks to manipulate flags.</p> <p>Q: How do you clear a specific bit in a bitmask? A: Use <code>bitmask &amp;= ~BIT_FLAG;</code> to forcefully turn off the bit.</p> <p>Q: When should you use macros vs <code>const</code> or <code>enum</code>? A: Use macros for preprocessor control or platform-specific conditions. Prefer <code>const</code> or <code>enum class</code> for type safety in C++.</p>"},{"location":"C_C%2B%2B_Basics/AR250310/#visual-bit-flag-example","title":"Visual: Bit Flag Example","text":"<pre><code>Initial:        0000 0000\n+ATT_UP:        0000 0001\n+DEF_UP:        0000 0011\n+DEX_UP:        0000 0111\n+SPEED_UP:      0000 1111\n~SPEED_UP:      1111 0111 (Mask)\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250310/#references","title":"References","text":"<ul> <li>data_type.cpp</li> <li>bit_operator.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250311/","title":"Local Variables, Arrays, &amp; Loops","text":""},{"location":"C_C%2B%2B_Basics/AR250311/#date-2025-03-11","title":"Date: 2025-03-11","text":""},{"location":"C_C%2B%2B_Basics/AR250311/#key-points","title":"Key Points","text":"<ul> <li>Local variables are scoped to blocks and their lifetime ends with the block.</li> <li>Variable name collisions in nested scopes cause ambiguity.</li> <li>Arrays occupy continuous memory; their name points to the starting address.</li> <li>Use <code>sizeof()</code> to determine array size in memory.</li> <li>Loops allow repetitive execution of code blocks; be cautious of infinite loops.</li> <li><code>break</code> exits a loop immediately; <code>continue</code> skips the current iteration.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250311/#overview","title":"Overview","text":"<p>This example introduces basic concepts in C++, including: - Local variable scoping - Arrays and memory layout - Control flow using <code>while</code>, <code>for</code>, and nested loops</p> <p>We also touch on size evaluation using <code>sizeof()</code> and demonstrate a star-pattern using nested loops.</p>"},{"location":"C_C%2B%2B_Basics/AR250311/#local-variables-and-scope","title":"Local Variables and Scope","text":"<p>Variables declared inside functions are local. Re-declaring a variable name in a nested scope creates ambiguity if not managed properly:</p> <pre><code>int a1 = 0;\n{\n    int a1 = 0; // Hides outer a1\n    a1 = 10;\n    {\n        int a1 = 0; // Hides above a1\n    }\n}\na1 = 10; // Refers to the outermost a1\n</code></pre> <p>Variables declared in a scope are destroyed once the block ends, but the memory might not be immediately released.</p>"},{"location":"C_C%2B%2B_Basics/AR250311/#arrays-in-c","title":"Arrays in C++","text":"<p>Arrays consist of elements stored in contiguous memory. The array name represents the starting address.</p> <pre><code>int Arr[10] = {1, 2}; // Remaining elements initialized to 0\n\nArr[0] = 10;\nArr[1] = 20;\nArr[9] = 100;\n\nint data = Arr[9]; // Accessing the last element\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250311/#size-calculation","title":"Size Calculation","text":"<pre><code>int size = sizeof(Arr);             // Total byte size\nint ArrCount = sizeof(Arr) / sizeof(int); // Number of elements\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250311/#loops","title":"Loops","text":""},{"location":"C_C%2B%2B_Basics/AR250311/#while-loop","title":"While Loop","text":"<pre><code>int Count = 0;\nwhile (Count &lt; 4) {\n    ++Count;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250311/#infinite-loop-with-break","title":"Infinite Loop with <code>break</code>","text":"<pre><code>int C = 0;\nwhile (1) {\n    ++C;\n    if (C == 4) break;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250311/#for-loop-with-commented-game-logic","title":"For Loop with Commented Game Logic","text":"<pre><code>for (int Count = 0; Count &lt; 4; ++Count) {\n    // if (Object[Count]-&gt;IsMonster()) {\n    //     SetDamage(Object[Count]);\n    // } else {\n    //     continue;\n    // }\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250311/#populating-array-with-loop","title":"Populating Array with Loop","text":"<pre><code>for (int i = 0; i &lt; ArrCount; ++i) {\n    Arr[i] = (i + 1) * 10;\n    printf(\"Output\\n\");\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250311/#nested-loop-triangle-star-pattern","title":"Nested Loop: Triangle Star Pattern","text":"<p><pre><code>int Num = 5;\nfor (int j = 0; j &lt; Num; ++j) {\n    for (int i = 0; i &lt; (j + 1); ++i) {\n        printf(\"*\");\n    }\n    printf(\"\\n\");\n}\n</code></pre> This prints: <pre><code>*\n**\n***\n****\n*****\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250311/#homework-tip","title":"Homework Tip","text":"<p>Print a balanced tree star pattern using nested loops and space alignment: <pre><code>    *\n   * *\n  * * *\n * * * *\n* * * * *\n</code></pre> Use careful spacing before the <code>*</code> in each row.</p>"},{"location":"C_C%2B%2B_Basics/AR250311/#_1","title":"Local Variables, Arrays, &amp; Loops","text":"<p>Homework Code  <pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    unsigned int n = 10; \n    // std::cin &gt;&gt; n; \n\n    for (unsigned int i = 0; i &lt; n; ++i)\n    {\n        for (unsigned int j = 1; j &lt; n-i; ++j)\n        {\n            std::cout &lt;&lt; \" \";  \n        }\n\n        for (unsigned int j = 0; j &lt; i; ++j)\n        {\n            std::cout &lt;&lt; \" \";\n            std::cout &lt;&lt; \"*\";\n        }\n\n        std::cout &lt;&lt; \"\\n\";\n    }\n}\n</code></pre></p> <p>Works well. </p>"},{"location":"C_C%2B%2B_Basics/AR250311/#sample-interview-questions","title":"Sample Interview Questions","text":"<p>Q: What happens if you declare a variable with the same name in an inner scope? A: It hides the outer variable. Only the innermost declared variable is visible within its scope.</p> <p>Q: How do arrays behave in memory? A: Array elements are stored in contiguous memory blocks. The array name acts as the pointer to its first element.</p> <p>Q: What is the difference between <code>break</code> and <code>continue</code> in a loop? A: <code>break</code> exits the loop immediately; <code>continue</code> skips to the next iteration.</p> <p>Q: Why is <code>sizeof</code> useful in loops? A: It helps calculate the number of elements in a statically declared array, which avoids hardcoding loop limits.</p>"},{"location":"C_C%2B%2B_Basics/AR250311/#references","title":"References","text":"<ul> <li>Array_Iteration.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250312/","title":"Structs and Functions","text":""},{"location":"C_C%2B%2B_Basics/AR250312/#date-2025-03-12","title":"Date: 2025-03-12","text":""},{"location":"C_C%2B%2B_Basics/AR250312/#key-points","title":"Key Points","text":"<ul> <li>Structs in C++ can include both variables and functions.</li> <li><code>typedef</code> can simplify type declarations and increase readability.</li> <li>Structs can be nested to represent composite data.</li> <li>Functions modularize logic and support code reuse.</li> <li>Default function arguments simplify function calls.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250312/#overview","title":"Overview","text":"<p>Structs in C and C++ allow the creation of user-defined data types. C++ enhances struct capabilities by allowing member functions. Structs are crucial for organizing related variables under a single composite type.</p> <p>Functions in C++ help break down logic into reusable blocks. They support return types, parameters, and default arguments for flexible usage.</p> <pre><code>// Simple struct with member variables\nstruct MyType {\n    int I;\n    float F;\n};\n\n// Nested struct example\nstruct NewType {\n    MyType type;\n    int Age;\n    int Height;\n};\n\n// C-style struct with typedef\ntypedef struct Player {\n    int MaxHP;\n    int CurHP;\n    int Att;\n    int Def;\n    int Dex;\n    int Agi;\n    int Int;\n} PLAYER;\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250312/#typedef-and-aliasing","title":"Typedef and Aliasing","text":"<p><code>typedef</code> simplifies complex type declarations. It helps improve readability and maintainability.</p> <pre><code>typedef int INT;\ntypedef int SIZE;\ntypedef int TIME;\n\nINT a = 0;\nSIZE b = 0;\nTIME c = 0;\n</code></pre> <p>You can also typedef structs:</p> <pre><code>typedef struct Monster {\n    int i;\n    char c;\n    short s;\n} MONSTER;\n\nMonster n = {};\nMONSTER m = {};\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250312/#code-demonstration-struct-usage","title":"Code Demonstration: Struct Usage","text":"<pre><code>int main() {\n    struct Player p;   // C-style declaration\n    PLAYER p1;         // Typedef alias\n\n    struct MyType t1;\n    MyType t;\n\n    t.I = 100;\n    t.F = 1.1111f;\n\n    int size = sizeof(MyType);  // size of the struct\n\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250312/#functions-in-c","title":"Functions in C++","text":"<p>Functions modularize code, allowing you to write logic once and reuse it. Default parameters provide flexibility for function calls.</p> <pre><code>// Function with a default argument\nint Add(int _a, int _b, int _c = 0) {\n    int c = _a + _b;\n    return c;\n}\n\n// Function with void return type\nvoid TestFunc() {\n    return;  // ends function execution early\n}\n</code></pre> <p>Calling a function with fewer arguments uses the default:</p> <pre><code>int main() {\n    int Data = Add(10, 20);  // _c defaults to 0\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250312/#tricky-case-typedef-confusion","title":"Tricky Case: Typedef Confusion","text":"<p>Issue: Mixing C-style and C++-style struct names can confuse beginners.</p> <pre><code>typedef struct Monster {\n    int i;\n    char c;\n    short s;\n} MONSTER;\n\nMonster n = {};  // Using the struct name\nMONSTER m = {};  // Using the typedef alias\n</code></pre> <p>Both <code>Monster</code> and <code>MONSTER</code> refer to the same structure type, which can cause ambiguity in naming conventions.</p>"},{"location":"C_C%2B%2B_Basics/AR250312/#interview-questions","title":"Interview Questions","text":"<p>Q: What's the difference between <code>struct</code> in C and C++? A: In C, <code>struct</code> only supports data members. In C++, structs can have functions, constructors, destructors, and access specifiers (default is public).</p> <p>Q: What is the use of <code>typedef</code> in C++? A: It creates aliases for types, making code easier to read and manage, especially for complex types like structs or function pointers.</p> <p>Q: How do default arguments in functions work? A: They allow omission of arguments during function calls. Defaults must be provided from right to left in the parameter list.</p> <p>Q: Can <code>typedef</code> be replaced in modern C++? A: Yes, <code>using</code> is preferred in modern C++ for type aliasing.</p>"},{"location":"C_C%2B%2B_Basics/AR250312/#visual-struct-with-nested-members","title":"Visual: Struct with Nested Members","text":"<pre><code>MyType\n------\nI : int\nF : float\n\nNewType\n--------\ntype   : MyType\nAge    : int\nHeight : int\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250312/#references","title":"References","text":"<ul> <li>array_iteration.cpp</li> <li>switch_case.cpp</li> <li>struct.cpp</li> <li>function.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250313/","title":"Recursion and Function Mechanics","text":""},{"location":"C_C%2B%2B_Basics/AR250313/#date-2025-03-13","title":"Date: 2025-03-13","text":""},{"location":"C_C%2B%2B_Basics/AR250313/#key-points","title":"Key Points","text":"<ul> <li>Recursion involves a function calling itself.</li> <li>Recursive functions must include a termination condition to prevent infinite calls.</li> <li>Iterative approaches can replace recursion for performance.</li> <li>Local variables are stored in the stack during function calls.</li> <li>Stack overflow can occur if recursion is too deep or unbounded.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250313/#overview","title":"Overview","text":"<p>Functions in C++ are modular blocks of code that perform a specific task. Understanding how they work at runtime and how memory is allocated during execution is essential for debugging and optimizing performance. Recursive functions, in particular, are elegant for solving hierarchical problems but require careful handling.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#iterative-factorial-function","title":"Iterative Factorial Function","text":"<pre><code>// Calculates N! using iteration\nint Factorial(int _N)\n{\n    int Value = 1;\n\n    for (int i = 0; i &lt; _N - 1; ++i)\n    {\n        Value *= (i + 2);\n    }\n\n    return Value;\n}\n</code></pre> <p>This function computes factorial using a for-loop, multiplying from 2 to N. It avoids stack usage beyond the function call.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#recursive-factorial-function","title":"Recursive Factorial Function","text":"<pre><code>// Calculates N! using recursion\nint Factorial_Recursion(int _N)\n{\n    if (_N == 1)\n        return 1;\n\n    return Factorial_Recursion(_N - 1) * _N;\n}\n</code></pre> <p>This approach uses the call stack to solve the problem. It's more readable but can lead to stack overflow for large values.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#power-function-iterative","title":"Power Function (Iterative)","text":"<pre><code>int Pow(int _a, int _b)\n{\n    int Value = 1;\n\n    for (int i = 0; i &lt; _b; ++i)\n    {\n        Value *= _a;\n    }\n\n    return Value;\n}\n</code></pre> <p>Raises <code>_a</code> to the power <code>_b</code> using a loop. Simple and avoids recursive overhead.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#infinite-recursion-example-caution","title":"Infinite Recursion Example (Caution!)","text":"<pre><code>void NewFunc(int a)\n{\n    NewFunc(100);  // No termination -&gt; infinite recursion!\n}\n</code></pre> <p>This function continuously calls itself with a constant value. Without a base case, it causes a stack overflow.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#function-call-mechanics","title":"Function Call Mechanics","text":"<ul> <li>Each function call uses a new stack frame.</li> <li>Local variables reside in the stack.</li> <li>Stack grows with each recursive call until the base case is reached or overflow occurs.</li> </ul> <pre><code>int main()\n{\n    int i = Pow(2, 4);       // 16\n    i = Pow(10, 4);          // 10000\n\n    int c = 10;\n    c = 20;\n\n    NewFunc(100);            // Infinite recursion: stack overflow\n\n    return 0;\n}\n</code></pre> <p>Use breakpoints and step execution to observe the stack behavior during debugging.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#debugging-tips","title":"Debugging Tips","text":"<ul> <li>F5: Start/continue debugging</li> <li>F9: Toggle breakpoint</li> <li>F10: Step over (function as a block)</li> <li>F11: Step into (enter function call)</li> <li>Ctrl + Shift + F9: Clear all breakpoints</li> </ul> <p>These commands help you trace function execution and understand stack changes.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#interview-questions","title":"Interview Questions","text":"<p>Q: What is a recursive function? A: A function that calls itself to solve a subproblem.</p> <p>Q: What are the dangers of recursion? A: Infinite recursion can cause a stack overflow if there's no proper termination condition.</p> <p>Q: Can all recursive logic be written iteratively? A: Yes, but sometimes recursion improves readability, especially for tree and graph problems.</p> <p>Q: Why is the stack important in recursion? A: Each recursive call stores its context (variables, return address) on the stack.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#tricky-case-recursion-vs-iteration","title":"Tricky Case: Recursion vs Iteration","text":"<p>Recursive code: <pre><code>int Factorial_Recursion(int n) {\n    if (n == 1) return 1;\n    return Factorial_Recursion(n - 1) * n;\n}\n</code></pre></p> <p>Equivalent iterative code: <pre><code>int Factorial(int n) {\n    int result = 1;\n    for (int i = 2; i &lt;= n; ++i)\n        result *= i;\n    return result;\n}\n</code></pre></p> <p>Prefer the iterative approach if performance and stack safety are priorities.</p>"},{"location":"C_C%2B%2B_Basics/AR250313/#references","title":"References","text":"<ul> <li>array_iteration.cpp</li> <li>recursion.cpp</li> <li>function_call.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250317/","title":"Recursion and Static Variables","text":""},{"location":"C_C%2B%2B_Basics/AR250317/#date-2025-03-17","title":"Date: 2025-03-17","text":""},{"location":"C_C%2B%2B_Basics/AR250317/#key-points","title":"Key Points","text":"<ul> <li>Recursive functions must include a termination condition.</li> <li>Iterative and recursive versions of algorithms (e.g., Fibonacci) often differ in efficiency.</li> <li>Static variables inside functions retain values across calls.</li> <li>Global and local variables with the same name prioritize local scope.</li> <li>Use <code>::</code> to explicitly access global variables.</li> <li>Global, static, and external variables reside in the data segment, not on the stack.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250317/#overview","title":"Overview","text":"<p>This note covers fundamental concepts in C++ involving recursion, Fibonacci sequence implementations, and different types of variables (local, global, static, and extern). The examples illustrate usage patterns and potential tricky cases.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#recursive-function-example","title":"Recursive Function Example","text":"<p><pre><code>void TestFunc(int _a)\n{\n    if (_a == 1)    // Termination condition\n        return;\n\n    TestFunc(_a - 1);  // Recursive call\n}\n</code></pre> This simple recursive function calls itself until <code>_a</code> reaches 1.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#fibonacci-sequence","title":"Fibonacci Sequence","text":""},{"location":"C_C%2B%2B_Basics/AR250317/#iterative-version","title":"Iterative Version","text":"<p><pre><code>int Fibonacci(int _N)\n{\n    if (_N == 1 || _N == 2)\n        return 1;\n\n    int n1 = 1;\n    int n2 = 1;\n    int Value = 0;\n\n    for (int i = 0; i &lt; _N - 2; ++i)\n    {\n        Value = n1 + n2;\n        n1 = n2;\n        n2 = Value;\n    }\n    return Value;\n}\n</code></pre> The iterative version avoids stack overhead and performs better.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#recursive-version","title":"Recursive Version","text":"<p><pre><code>int Fibonacci_Re(int _N)\n{\n    if (_N == 1 || _N == 2)\n        return 1;\n\n    return Fibonacci_Re(_N - 1) + Fibonacci_Re(_N - 2);\n}\n</code></pre> This version is intuitive but inefficient due to repeated calculations.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#variable-scopes-and-types","title":"Variable Scopes and Types","text":""},{"location":"C_C%2B%2B_Basics/AR250317/#global-variable","title":"Global Variable","text":"<p><pre><code>int g_A = 0;  // Global variable declared in data segment\n</code></pre> Always exists during program execution. Avoid name collisions.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#static-variable-inside-function","title":"Static Variable Inside Function","text":"<p><pre><code>int Test()\n{\n    static int StaticParam = 0;  // Retains value across calls\n    ++StaticParam;\n    return StaticParam;\n}\n</code></pre> <code>StaticParam</code> is initialized once and keeps its value between function calls.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#local-vs-global-scope","title":"Local vs Global Scope","text":"<p><pre><code>int Test()\n{\n    int g_A = 0;      // Local variable with same name as global\n    g_A = 100;        // Refers to local g_A\n    ++::g_A;          // Refers to global g_A using scope resolution\n    return ::g_A;\n}\n</code></pre> Local variable hides the global one unless the global is explicitly accessed via <code>::</code>.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#tricky-case-static-variables-and-side-effects","title":"Tricky Case: Static Variables and Side Effects","text":"<p>Calling a function with static variables multiple times results in state accumulation:</p> <p><pre><code>Test();  // StaticParam becomes 1\nTest();  // StaticParam becomes 2\nint Count = Test();  // StaticParam becomes 3, Count = 3\n</code></pre> This makes functions impure and not thread-safe. Use caution in multithreaded or state-dependent scenarios.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between a static and global variable? A: Both are stored in the data segment and retain values for the program's lifetime, but static variables are only visible in the scope where they are declared.</p> <p>Q: How does tail recursion differ from regular recursion? A: In tail recursion, the recursive call is the last operation, allowing the compiler to optimize it into a loop.</p> <p>Q: What happens if a local variable has the same name as a global one? A: The local variable takes precedence. Use <code>::</code> to access the global variable explicitly.</p> <p>Q: Why avoid recursion for large inputs? A: Recursion can cause stack overflows and is generally less efficient than iteration for large input sizes.</p>"},{"location":"C_C%2B%2B_Basics/AR250317/#code-demonstration","title":"Code Demonstration","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint g_A = 0;\n\nint Test()\n{\n    static int StaticParam = 0;\n    ++StaticParam;\n    ++::g_A;\n    return ::g_A;\n}\n\nint main()\n{\n    int Arr[100] = {};\n    g_A = 20;\n\n    Test();  // g_A becomes 21\n    Test();  // g_A becomes 22\n    int Count = Test();  // g_A becomes 23, Count = 23\n\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250317/#visual-variable-scopes","title":"Visual: Variable Scopes","text":"Variable Type Memory Area Lifetime Scope Local Stack Until function ends Current function Global Data Segment Entire program All files (unless static) Static (local) Data Segment Entire program Declaring function only External Data Segment Entire program Across files (with <code>extern</code>)"},{"location":"C_C%2B%2B_Basics/AR250317/#references","title":"References","text":"<ul> <li>recursion2.cpp</li> <li>variable_types.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250318/","title":"Global and Static Variables","text":""},{"location":"C_C%2B%2B_Basics/AR250318/#date-2025-03-18","title":"Date: 2025-03-18","text":""},{"location":"C_C%2B%2B_Basics/AR250318/#key-points","title":"Key Points","text":"<ul> <li><code>extern</code> declares a global variable without defining it.</li> <li><code>static</code> at global scope makes the variable local to the file (translation unit).</li> <li>Duplicate global variable definitions across files cause linker errors.</li> <li>Global variables should be used carefully to avoid name conflicts and side effects.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250318/#overview","title":"Overview","text":"<p>This code sample illustrates how global and static variables behave across translation units in C++. It also covers the role of <code>extern</code>, the risks of duplicate global variable definitions, and file-local static global variables.</p>"},{"location":"C_C%2B%2B_Basics/AR250318/#header-file-funch","title":"Header File: <code>func.h</code>","text":"<pre><code>#pragma once\n\nint Add(int a, int b);\nint Sub(int a, int b);\nint Mul(int a, int b);\nint Div(int a, int b);\nint Func();\n\n// Declares that an int global variable named g_A exists somewhere.\nextern int g_A;\n\n// Defines a static global variable unique to each file including this header.\nstatic int g_NewStatic = 0;\n\n// Uncommenting the below line would define a global variable in every file including func.h, leading to linker errors.\n// int g_GlobalParam = 0;\n```~~~~\n\n### Source File 1: `func.cpp`\n\n```cpp\n#include \"func.h\"\n\n// File-local global variable\nstatic int g_Global = 0;\n\n// Use of externally declared variable\nextern int g_A;\n\nint Add(int a, int b)\n{\n    g_Global = 10; // modifies local static global\n    g_A = 200;     // modifies shared global declared with extern\n    return a + b;\n}\n\nint Sub(int a, int b) { return a - b; }\nint Mul(int a, int b) { return a * b; }\nint Div(int a, int b) { return a / b; }\nint Func() { return 0; }\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250318/#source-file-2-maincpp","title":"Source File 2: <code>main.cpp</code>","text":"<pre><code>#include \"func.h\"\n\n// File-local global\nstatic int g_Global = 0;\n\n// Definition of global variable declared with extern\nint g_A = 0;\n\nint main()\n{\n    // Local static variable: retains value across function calls\n    static int iStatic = 0;\n\n    g_Global = 200;  // refers to file-local static variable\n    // g_A = 100;    // modifies global variable shared across files\n\n    int i = 0;\n    i = Add(1, 9);\n    i = Sub(1, 9);\n    i = Mul(1, 9);\n    i = Div(1, 9);\n    Func();\n\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250318/#tricky-cases","title":"Tricky Cases","text":""},{"location":"C_C%2B%2B_Basics/AR250318/#1-static-global-variable","title":"1. Static Global Variable","text":"<p>A static global variable like <code>static int g_Global</code> is only visible to the file where it's defined. Both <code>func.cpp</code> and <code>main.cpp</code> have their own <code>g_Global</code>, which do not conflict.</p>"},{"location":"C_C%2B%2B_Basics/AR250318/#2-extern-global-variable","title":"2. Extern Global Variable","text":"<p><code>extern int g_A;</code> in <code>func.h</code> tells other files about a global variable defined elsewhere. In <code>main.cpp</code>, <code>int g_A = 0;</code> provides the actual definition. This shared global can be modified in any file including <code>func.h</code>.</p>"},{"location":"C_C%2B%2B_Basics/AR250318/#3-global-variable-in-header-file","title":"3. Global Variable in Header File","text":"<p>Declaring a global variable directly in a header like <code>int g_GlobalParam = 0;</code> (commented out in the sample) causes a new definition in every file that includes it?\ubd31esulting in multiple definitions and linker errors.</p>"},{"location":"C_C%2B%2B_Basics/AR250318/#sample-interview-questions","title":"Sample Interview Questions","text":"<p>Q: What does <code>static</code> do to a global variable? A: It limits the variable's linkage to the current translation unit (source file), making it file-local.</p> <p>Q: What happens if you define a global variable in a header file and include it in multiple source files? A: Each source file gets its own definition, leading to a multiple definition linker error.</p> <p>Q: How does <code>extern</code> help in managing global variables? A: <code>extern</code> declares a variable without defining it, allowing shared access across files if it's defined once elsewhere.</p> <p>Q: Can two source files define a static global variable with the same name? A: Yes, because each static global is local to its file; they won't interfere with each other.</p>"},{"location":"C_C%2B%2B_Basics/AR250318/#summary","title":"Summary","text":"<ul> <li>Use <code>extern</code> in headers for shared globals, define them only once in a <code>.cpp</code> file.</li> <li>Use <code>static</code> for file-local globals to avoid conflicts.</li> <li>Never define non-static globals directly in headers.</li> <li>Carefully manage visibility and linkage to prevent subtle bugs and linker errors.</li> </ul> <p>These behaviors are essential when working on large C++ projects with multiple source files.</p>"},{"location":"C_C%2B%2B_Basics/AR250318/#references","title":"References","text":"<ul> <li>func.cpp</li> <li>func.h</li> <li>main.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250319/","title":"Pointer Basics and Function Overloading","text":""},{"location":"C_C%2B%2B_Basics/AR250319/#date-2025-03-19","title":"Date: 2025-03-19","text":""},{"location":"C_C%2B%2B_Basics/AR250319/#key-points","title":"Key Points","text":"<ul> <li>Pointers store memory addresses; their size is typically 8 bytes on modern systems.</li> <li><code>&amp;</code> retrieves a variable's address, <code>*</code> dereferences a pointer.</li> <li><code>void*</code> is a generic pointer type, but cannot be dereferenced directly.</li> <li>Pointer arithmetic depends on the pointer's data type.</li> <li>Arrays and pointers are closely related; array indexing uses pointer arithmetic.</li> <li>Function overloading allows multiple functions with the same name but different signatures.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250319/#overview","title":"Overview","text":"<p>This code snippet covers fundamental C++ concepts including pointer usage, function overloading, pointer casting, and memory operations using external functions like <code>MemSet</code> and <code>MemMove</code>.</p> <p>Let's walk through the details.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#function-overloading-in-c","title":"Function Overloading in C++","text":"<p>Function overloading allows the same function name to be used with different parameter lists.</p> <pre><code>int Test(int _a) {\n    return 10;\n}\n\nvoid Test(float _f) {\n}\n\nvoid Test(int _a, int _b = 0) {\n}\n\nint main() {\n    Test(1.1f);    // Calls void Test(float)\n    Test(10, 20);  // Calls void Test(int, int)\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250319/#tricky-case-default-parameters-and-overloading","title":"Tricky Case: Default Parameters and Overloading","text":"<p>Be cautious when using default parameters with overloaded functions??\ubd33hey can lead to ambiguity.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#pointer-fundamentals","title":"Pointer Fundamentals","text":"<p>Pointers are variables that store memory addresses.</p> <pre><code>int i = 0;\nchar c = 0;\nshort s = 0;\n\nint*   pI = 0;\nchar*  pC = 0;\nshort* pS = 0;\n\npI = &amp;i;\npC = &amp;c;\npS = &amp;s;\n\n*pI = 10;\n*pC = 20;\n*pS = 30;\n</code></pre> <p>Declaring a pointer with a type (e.g., <code>int*</code>) defines how the memory at that address will be interpreted.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#pointer-casting","title":"Pointer Casting","text":"<pre><code>pI = (int*)&amp;c;\npC = (char*)&amp;i;\n</code></pre> <p>This forces interpretation of memory as another type. Use with caution??\ubd27t bypasses type safety.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#void-pointers","title":"Void Pointers","text":"<pre><code>void* pVoid = 0;\npVoid = &amp;i;\npVoid = &amp;c;\npVoid = &amp;s;\n</code></pre> <p><code>void*</code> can store any address but must be cast to another type before dereferencing.</p> <pre><code>// Invalid:\n// pS = pVoid;\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250319/#memory-utilities","title":"Memory Utilities","text":"<p>Assuming the following external functions:</p> <pre><code>void MemSet(void* _pData, int _Size);\nvoid MemMove(void* _pData, int _Size, void* _Src);\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250319/#example-usage","title":"Example Usage","text":"<pre><code>short arr[10];\nMemSet(arr, 20);\n\nint k;\nMemSet(&amp;k, sizeof(int));\n\nint iArr[10] = { 1,2,3,4,5,6,7,8,9,10 };\nint iArrOther[10] = {};\nMemMove(iArrOther, sizeof(int) * 10, iArr);\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250319/#pointer-arithmetic","title":"Pointer Arithmetic","text":"<pre><code>int* pInt = 0;\npInt += 1;  // Moves pointer by sizeof(int)\n\nshort* pShort = 0;\npShort += 1;  // Moves pointer by sizeof(short)\n</code></pre> <p>The increment steps over a number of bytes depending on the type.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#array-and-pointer-relationship","title":"Array and Pointer Relationship","text":"<pre><code>int iTest[5] = {};\npInt = iTest;\n\npInt[0] = 1;  // *(pInt + 0)\npInt[1] = 2;  // *(pInt + 1)\n</code></pre> <p>Array indexing is syntactic sugar for pointer arithmetic.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#interview-questions","title":"Interview Questions","text":"<p>Q: What is a pointer in C++? A: A pointer is a variable that stores the memory address of another variable.</p> <p>Q: Can you dereference a void pointer? A: No, a <code>void*</code> must first be cast to a specific type before dereferencing.</p> <p>Q: How is pointer arithmetic affected by the data type? A: The pointer moves in steps of the size of the data type it points to (e.g., <code>int*</code> moves 4 bytes, <code>short*</code> moves 2 bytes).</p> <p>Q: What's the relationship between arrays and pointers? A: An array name is effectively a pointer to its first element. Array indexing uses pointer arithmetic under the hood.</p> <p>Q: What is the purpose of function overloading? A: Function overloading allows multiple functions with the same name to coexist as long as their signatures differ.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#visual-pointer-arithmetic","title":"Visual: Pointer Arithmetic","text":"<pre><code>int* pInt = 0;\npInt += 1;\n\nBefore: pInt = 0x1000\nAfter : pInt = 0x1004 (assuming int = 4 bytes)\n</code></pre> <p>Keep these principles in mind when dealing with pointers.  They're powerful but error-prone if misused.  Use pointer casting and void pointers with caution,  and always be aware of type sizes when doing arithmetic.</p>"},{"location":"C_C%2B%2B_Basics/AR250319/#references","title":"References","text":"<ul> <li>pointer.cpp</li> <li>function_overloading.cpp</li> <li>MemSet.cpp</li> <li>HW250319.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250320/","title":"Constexpr, Const, Volatile, and Pointer Fundamentals","text":""},{"location":"C_C%2B%2B_Basics/AR250320/#date-2025-03-20","title":"Date: 2025-03-20","text":""},{"location":"C_C%2B%2B_Basics/AR250320/#key-points","title":"Key Points","text":"<ul> <li><code>const</code> prevents variable reassignment after initialization.</li> <li><code>volatile</code> disables compiler optimizations for variables that may change externally.</li> <li><code>constexpr</code> enforces compile-time constant evaluation.</li> <li>Modifying <code>const</code> or <code>constexpr</code> via pointer casting can lead to undefined behavior.</li> <li><code>nullptr</code> is a dedicated keyword for null pointers in C++.</li> <li>Double pointers allow pointer manipulation across functions.</li> <li><code>void*</code> pointers are type-agnostic and require size information for operations.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250320/#overview","title":"Overview","text":"<p>Understanding <code>const</code>, <code>constexpr</code>, and <code>volatile</code> is crucial for writing safe and optimized C++ code. These keywords provide control over variable mutability and evaluation timing, and interact closely with pointer semantics. This note also explores pointer-related concepts like null pointers, double pointers, and low-level memory manipulation with <code>MemSet</code> and <code>MemMove</code> functions.</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#const-volatile-and-constexpr","title":"Const, Volatile, and Constexpr","text":"<pre><code>volatile const int iConst = 100;\n//iConst = 200; // Error: cannot assign to a const\n\nvolatile const int* pData = &amp;iConst;\n//*pData = 200; // Error: pData is a pointer to const\n\nint* pData1 = (int*)&amp;iConst;\n*pData1 = 200; // Undefined behavior, bypasses const\n\nint k = iConst; // Might use cached register value if not volatile\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250320/#why-volatile-matters","title":"Why <code>volatile</code> Matters","text":"<p>The compiler might optimize access to <code>iConst</code>, assuming it doesn't change. Using <code>volatile</code> forces re-evaluation every time, useful when memory might be modified outside of program control (e.g., hardware registers).</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#constexpr-constants","title":"<code>constexpr</code> Constants","text":"<p><pre><code>volatile constexpr int iConstExpr = 100;\nint* pConstExpr = (int*)&amp;iConstExpr;\n*pConstExpr = 200; // Still undefined behavior\nint p = iConstExpr; // Always 100 at compile time\n</code></pre> <code>constexpr</code> requires compile-time evaluable expressions. It's stricter than <code>const</code> and allows compiler optimizations without runtime overhead.</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#null-pointer-boolean-macros-and-pointer-safety","title":"Null Pointer, Boolean Macros, and Pointer Safety","text":""},{"location":"C_C%2B%2B_Basics/AR250320/#null-pointers","title":"Null Pointers","text":"<p><pre><code>int* pData = nullptr; // Safe null initialization\n</code></pre> Use <code>nullptr</code> to represent a pointer to no object. Avoid using <code>0</code> or <code>NULL</code> in modern C++.</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#boolean-macros-c-style","title":"Boolean Macros (C-style)","text":"<p><pre><code>#define TRUE 1;\n#define FALSE 0;\n\nbool IsTrue = TRUE;\n</code></pre> C++ provides <code>true</code> and <code>false</code> as keywords. Macros like <code>TRUE</code>/<code>FALSE</code> are legacy from C.</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#tricky-case-pointer-passing-and-double-pointers","title":"Tricky Case: Pointer Passing and Double Pointers","text":""},{"location":"C_C%2B%2B_Basics/AR250320/#accessing-local-variables-in-other-functions","title":"Accessing Local Variables in Other Functions","text":"<pre><code>void Test(int* _Data) {\n    *_Data = 10;\n}\n\nint i = 0;\nTest(&amp;i); // i is now 10\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250320/#double-pointers-for-pointer-modification","title":"Double Pointers for Pointer Modification","text":"<p><pre><code>void Test(int** _Data) {\n    *_Data = nullptr;\n}\n\nint* pInt = (int*)1;\nTest(&amp;pInt); // pInt is now nullptr\n</code></pre> This is useful when you want to modify the pointer itself (not just the data it points to).</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#memory-initialization-and-movement-with-void","title":"Memory Initialization and Movement with <code>void*</code>","text":"<p><pre><code>typedef unsigned char BYTE;\n\nvoid MemSet(void* _pData, int _Size) {\n    BYTE* pData = (BYTE*)_pData;\n    for (int i = 0; i &lt; _Size; ++i) {\n        pData[i] = 0;\n    }\n}\n\nvoid MemMove(void* _Dest, int _Size, void* _Src) {\n    BYTE* pDest = (BYTE*)_Dest;\n    BYTE* pSrc = (BYTE*)_Src;\n    for (int i = 0; i &lt; _Size; ++i) {\n        pDest[i] = pSrc[i];\n    }\n}\n</code></pre> These utility functions show how <code>void*</code> enables flexible memory manipulation. Use with care, as type safety is lost.</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between <code>const</code> and <code>constexpr</code>? A: <code>const</code> applies at runtime and allows runtime-initialized values. <code>constexpr</code> requires compile-time evaluable expressions and provides stronger optimization.</p> <p>Q: Why use <code>volatile</code> with a <code>const</code> variable? A: It prevents the compiler from optimizing out reads to the variable, ensuring the program always fetches the latest value.</p> <p>Q: What does <code>nullptr</code> represent and why use it over <code>0</code>? A: <code>nullptr</code> is a type-safe null pointer constant in C++11+, unlike <code>0</code> which can be ambiguous in overload resolution.</p> <p>Q: Why are double pointers used in C++? A: Double pointers (<code>T**</code>) allow functions to modify the original pointer passed to them, useful for reassigning memory or nullifying pointers.</p> <p>Q: What are the risks of casting away <code>const</code> using a pointer? A: It results in undefined behavior if the object was originally declared as <code>const</code>. Compilers may optimize assuming immutability.</p>"},{"location":"C_C%2B%2B_Basics/AR250320/#visual-const-volatile-and-pointer-interaction","title":"Visual: Const, Volatile, and Pointer Interaction","text":"<pre><code>Original Const Variable\n------------------------\niConst = 100\n\nPointer Access\n--------------\npData -&gt; [100]   // Safe read\npData1 -&gt; [200]  // Forced overwrite (UB)\n\nEffect on Compiler\n------------------\nWith volatile: Always re-reads value\nWithout volatile: Might cache value\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250320/#references","title":"References","text":"<ul> <li>MemSet.cpp</li> <li>const, const pointer.cpp</li> <li>nullptr, double pointer.cpp</li> <li>pointer.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250320/#references_1","title":"References","text":"<ul> <li>const_const_pointer.cpp</li> <li>nullptr_double_pointer.cpp</li> <li>pointer_problem.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250321/","title":"C Memory Functions","text":""},{"location":"C_C%2B%2B_Basics/AR250321/#date-2025-03-21","title":"Date: 2025-03-21","text":""},{"location":"C_C%2B%2B_Basics/AR250321/#memset","title":"MemSet","text":"<p>Purpose: The <code>memset()</code> function sets a block of memory to a specific byte value. It is commonly used to initialize or clear memory.</p> <p>Prototype: <pre><code>void* memset(void* ptr, int value, size_t num);\n</code></pre></p> <ul> <li><code>ptr</code>: A pointer to the starting address of the memory block to be set.</li> <li><code>value</code>: The value to set each byte in the memory block to. This value is converted to an unsigned char.</li> <li><code>num</code>: The number of bytes to set.</li> </ul> <p>Usage Example: <pre><code>int arr[5];\nmemset(arr, 0, sizeof(arr)); // Set all bytes in arr to 0\n</code></pre></p> <p>Behavior: <code>memset()</code> sets the bytes in the memory block to the specified value. It operates byte-by-byte, making it suitable for initializing buffers, clearing memory, or filling structures with a default value.</p> <p>Code Implementation <pre><code>typedef unsigned char BYTE;\n\nvoid MemSet(void* _pData, int _Size) {\n    BYTE* pData = (BYTE*)_pData;\n    for (int i = 0; i &lt; _Size; ++i) {\n        *(pData + i) = 0;\n    }\n}\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250321/#memcpy","title":"MemCpy","text":"<p>Purpose: The <code>memcpy()</code> function copies a block of memory from one location to another. It does not handle overlapping memory regions.</p> <p>Prototype: <pre><code>void* memcpy(void* dest, const void* src, size_t num);\n</code></pre></p> <ul> <li><code>dest</code>: A pointer to the destination memory location.</li> <li><code>src</code>: A pointer to the source memory location.</li> <li><code>num</code>: The number of bytes to copy.</li> </ul> <p>Usage Example: <pre><code>char src[] = \"Hello\";\nchar dest[10];\nmemcpy(dest, src, 6); // Copies \"Hello\\0\" to dest\n</code></pre></p> <p>Behavior: <code>memcpy()</code> performs a fast copy of <code>num</code> bytes from the source to the destination. It assumes that the memory regions do not overlap and will behave incorrectly if they do.</p> <p>Note: If the source and destination memory regions overlap, the behavior is undefined, potentially causing data corruption.</p> <p>Code Implementation <pre><code>typedef unsigned char BYTE;\n\nvoid MemCopy(void* _Dest, int _Size, void* _Src) {\n    BYTE* pDest = (BYTE*)_Dest;\n    BYTE* pSrc = (BYTE*)_Src;\n    for (int i = 0; i &lt; _Size; ++i) {\n        pDest[i] = pSrc[i];\n    }\n}\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250321/#memmove","title":"MemMove","text":"<p>Purpose: The <code>memmove()</code> function copies a block of memory like <code>memcpy()</code>, but it safely handles overlapping memory regions.</p> <p>Prototype: <pre><code>void* memmove(void* dest, const void* src, size_t num);\n</code></pre></p> <ul> <li><code>dest</code>: A pointer to the destination memory location.</li> <li><code>src</code>: A pointer to the source memory location.</li> <li><code>num</code>: The number of bytes to copy.</li> </ul> <p>Usage Example: <pre><code>char data[] = \"123456789\";\nmemmove(&amp;data[2], &amp;data[0], 5); // Moves \"12345\" to position starting at index 2\n</code></pre></p> <p>Behavior: <code>memmove()</code> copies the bytes safely even when the source and destination memory regions overlap. It checks if the regions overlap and copies in the correct direction (either forward or backward) to prevent data corruption.</p> <p>Code Implementation <pre><code>typedef unsigned char BYTE;\n\nvoid MemMove(void* _Dest, int _Size, void* _Src) {\n    BYTE* pDest = (BYTE*)_Dest;\n    BYTE* pSrc = (BYTE*)_Src;\n\n    if (pDest &lt; pSrc || pDest &gt;= pSrc + _Size) {\n        for (int i = 0; i &lt; _Size; ++i) {\n            pDest[i] = pSrc[i];\n        }\n    } else {\n        for (int i = _Size - 1; i &gt;= 0; --i) {\n            pDest[i] = pSrc[i];\n        }\n    }\n}\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250321/#sample-code","title":"Sample Code","text":"<pre><code>#include &lt;iostream&gt;\n\ntypedef unsigned char BYTE;\n\nvoid MemSet(void* _pData, int _Size)\n{\n    BYTE* pData = (BYTE*)_pData;\n\n    for (int i = 0; i &lt; _Size; ++i)\n    {\n        *(pData + i) = 0;\n    }\n}\n\n// Goal : Copy data from one memory area to another\n\nvoid MemCopy(void* _Dest, int _Size, void* _Src) {\n    BYTE* pDest = (BYTE*)_Dest;\n    BYTE* pSrc = (BYTE*)_Src;\n    for (int i = 0; i &lt; _Size; ++i) {\n        pDest[i] = pSrc[i];\n    }\n}\n\n// Goal : Move data from one memory area to another \n// Note : The source and destination memory areas may overlap \n\nvoid MemMove(void* _Dest, int _Size, void* _Src)\n{\n    BYTE* pDest = (BYTE*)_Dest;\n    BYTE* pSrc = (BYTE*)_Src;\n\n    if (pDest &lt; pSrc || pDest &gt;= pSrc + _Size) \n    {\n    }\n\n    for (int i = 0; i &lt; _Size; ++i)\n    {\n        //*(pDest + i) = *(pSrc + i);\n        pDest[i] = pSrc[i];\n    }\n}\n\nint main(int argc, const char* argv[]) {\n\n    short arr[10];\n    MemSet(arr, 20); \n    for (unsigned int i = 0; i &lt; sizeof(arr)/sizeof(short); i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    int k;\n    MemSet(&amp;k, sizeof(int));\n\n    for (unsigned int i = 0; i &lt; sizeof(arr) / sizeof(short); i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    int iArr[10] = { 1,2,3,4,5,6,7,8,9,10 };\n    int iArrOther[10] = {};\n\n    MemMove(iArrOther, sizeof(int) * 10, iArr);\n\n    for (unsigned int i = 0; i &lt; sizeof(iArrOther) / sizeof(int); i++)\n    {\n        printf(\"%d \", iArrOther[i]);\n    }\n    printf(\"\\n\");\n\n    return 0; \n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250321/#why-use-byte-or-unsigned-char-for-memset-and-memmove","title":"Why Use <code>BYTE*</code> (or <code>unsigned char*</code>) for <code>MemSet</code> and <code>MemMove</code>?","text":"<p>In C (and C++ if templates aren't used), you often need a generic way to work with raw memory. This is where <code>void*</code> comes in, as it's a typeless pointer. However, when reading from or writing to that memory, it needs to be cast to a type that has a known size. That's why <code>BYTE*</code> (which is a typedef for <code>unsigned char*</code>) is commonly used.</p>"},{"location":"C_C%2B%2B_Basics/AR250321/#references","title":"References","text":"<ul> <li>const_const_pointer.cpp</li> <li>HW250319.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250324/","title":"Const Pointers and Type-Punning","text":""},{"location":"C_C%2B%2B_Basics/AR250324/#date-2025-03-24","title":"Date: 2025-03-24","text":""},{"location":"C_C%2B%2B_Basics/AR250324/#key-points","title":"Key Points","text":"<ul> <li><code>const int*</code> means a pointer to a constant value. You can read but not write.</li> <li><code>int* const</code> means a constant pointer to an int. You can modify the value but not reassign the pointer.</li> <li>When both <code>const</code> modifiers are used, the pointer cannot be reassigned or modify the target.</li> <li>Type punning using casts (<code>char*</code>, <code>int*</code>, etc.) must be done with caution due to strict aliasing rules.</li> <li>Use <code>const</code> correctness to ensure safer, more predictable code.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250324/#overview","title":"Overview","text":"<p>Understanding <code>const</code> with pointers is essential in modern C++ for writing safe and efficient code. It allows expressing intent clearly and protects against unintended modification. Pointers themselves can be constant or point to constant data, and the position of <code>const</code> determines the behavior.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#pointer-to-constant-value","title":"Pointer to Constant Value","text":"<pre><code>const int a = 10; // Constant integer value\nconst int* pInt = &amp;a; // Pointer to a constant int\n\n// *pInt = 100; // Error: cannot modify through pInt\npInt = nullptr; // Allowed: pointer can point elsewhere\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250324/#constant-pointer-to-variable","title":"Constant Pointer to Variable","text":"<pre><code>int j = 0;\nint* const pContInt = &amp;j; // Constant pointer to a variable\n\n*pContInt = 200; // Allowed: can modify the target\n// pContInt = nullptr; // Error: cannot change the pointer itself\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250324/#constant-pointer-to-constant-value","title":"Constant Pointer to Constant Value","text":"<pre><code>const int* const pCCInt = &amp;j; // Read-only pointer and value\n\n// *pCCInt = 300;     // Error\n// pCCInt = nullptr;  // Error\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250324/#const-safety-in-functions","title":"Const Safety in Functions","text":""},{"location":"C_C%2B%2B_Basics/AR250324/#safe-read-only-access","title":"Safe Read-Only Access","text":"<p><pre><code>void DataOutput(const int* _Data) {\n    printf(\"%d\\n\", *_Data);\n    // *_Data = 300; // Error: _Data points to a const\n}\n</code></pre> Passing a <code>const int*</code> ensures the function cannot modify the value it receives.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#type-punning-with-structs-and-pointers","title":"Type-Punning with Structs and Pointers","text":"<pre><code>struct MyType {\n    int   i;\n    short s;\n};\n\nMyType type = {10, 20};\nMyType* pType = &amp;type;\n\npType-&gt;i = 50;\npType-&gt;s = 60;\n</code></pre> <p>Accessing struct members through pointers is direct and efficient. Arrow <code>-&gt;</code> syntax is shorthand for dereferencing and accessing (<code>(*p).x</code>).</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#pointer-size-and-type-awareness","title":"Pointer Size and Type Awareness","text":"<pre><code>int* pInt = nullptr;\nchar* pChar = nullptr;\n\nint Size = sizeof(int*); // Pointer size is typically 8 bytes on 64-bit systems\n</code></pre> <p>Pointers, regardless of the type they point to, usually have the same size on a given architecture.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#tricky-case-pointer-arithmetic-and-type-punning","title":"Tricky Case: Pointer Arithmetic and Type-Punning","text":""},{"location":"C_C%2B%2B_Basics/AR250324/#casting-char-to-int","title":"Casting <code>char[]</code> to <code>int*</code>","text":"<p><pre><code>char arrData[10] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\nint* pData = (int*)arrData;\npData += 2; // Advances by 2 * sizeof(int) bytes\n\nchar* pChar = (char*)pData;\nchar a = *pChar;\n</code></pre> Pointer arithmetic on a casted pointer can easily misalign data and lead to undefined behavior. Be careful when casting <code>char[]</code> to <code>int*</code>, especially when accessing or modifying memory.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#signed-vs-unsigned-char-interpretation","title":"Signed vs Unsigned Char Interpretation","text":"<p><pre><code>char CharData = -1;\n\nunsigned char* pUChar = (unsigned char*)&amp;CharData;\nchar* pChar = &amp;CharData;\n\nint intData = *pUChar; // Value: 255 (unsigned interpretation)\nintData = *pChar;      // Value: -1 (signed interpretation)\n</code></pre> Casting a signed <code>char</code> to <code>unsigned char</code> reveals how the same memory is interpreted differently. This is useful in low-level programming but must be used carefully.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#common-mistakes","title":"Common Mistakes","text":"<p>Mistake: Modifying <code>const</code> value through cast <pre><code>const int Data = 100;\nint* p = (int*)&amp;Data;\n*p = 200; // Undefined behavior\n</code></pre> Modifying a <code>const</code> value using a cast is undefined behavior. Avoid this in production code.</p> <p>Mistake: Confusing pointer const-ness <pre><code>int* const ptr = &amp;x; // Cannot change ptr itself\nconst int* ptr2 = &amp;x; // Cannot modify *ptr2\n</code></pre> Understand which part is <code>const</code> ??the pointer or the value ??to avoid bugs.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#interview-questions","title":"Interview Questions","text":"<p>Q: What's the difference between <code>const int*</code> and <code>int* const</code>? A: - <code>const int*</code>: pointer to const int ??can't modify the value. - <code>int* const</code>: const pointer to int ??can't change the pointer.</p> <p>Q: Can you cast away <code>const</code> and modify the value? A: Technically yes using <code>(int*)</code>, but doing so leads to undefined behavior and must be avoided.</p> <p>Q: What is <code>nullptr</code>? Why not just use 0 or NULL? A: <code>nullptr</code> (C++11) is a type-safe null pointer constant. Prevents overload ambiguity and improves readability.</p> <p>Q: What does <code>const int* const ptr</code> mean? A: Pointer is constant and points to a constant value. Neither the address nor the value can be changed.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#summary-table","title":"Summary Table","text":"Declaration Can Change Value Can Reassign Pointer <code>const int* ptr</code> No Yes <code>int* const ptr</code> Yes No <code>const int* const ptr</code> No No <p>This guide covers core behavior of <code>const</code> with pointers and tricky memory manipulation patterns using pointer casting. Mastering these concepts gives a solid foundation for deeper system-level C++ work.</p>"},{"location":"C_C%2B%2B_Basics/AR250324/#references","title":"References","text":"<ul> <li>MemSet.cpp</li> <li>const_pointer2.cpp</li> <li>struct+pointer.cpp</li> <li>pointer_problem.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250325/","title":"Custom String Utilities","text":""},{"location":"C_C%2B%2B_Basics/AR250325/#date-2025-03-25","title":"Date: 2025-03-25","text":""},{"location":"C_C%2B%2B_Basics/AR250325/#key-points","title":"Key Points","text":"<ul> <li>Custom functions like <code>StringCopy</code>, <code>StringCat</code>, <code>StringLen</code> mimic standard C-string utilities.</li> <li>Null-termination (<code>\\0</code>) is critical for proper string manipulation.</li> <li><code>ItoA</code> and <code>AtoI</code> provide manual int-to-string and string-to-int conversions.</li> <li><code>const char*</code> string literals reside in read-only memory (ROM).</li> <li>Writing to ROM-located string literals causes runtime errors.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250325/#overview","title":"Overview","text":"<p>This study covers a set of hand-written C-style string utilities to better understand low-level memory manipulation and string processing in C++. These functions replicate behavior of standard C functions like <code>strcpy</code>, <code>strcat</code>, <code>strlen</code>, <code>itoa</code>, and <code>atoi</code>.</p>"},{"location":"C_C%2B%2B_Basics/AR250325/#implementations","title":"Implementations","text":""},{"location":"C_C%2B%2B_Basics/AR250325/#stringcopy","title":"<code>StringCopy</code>","text":"<p>Copies the content of <code>_Src</code> into <code>_Dest</code>, including the null terminator:</p> <pre><code>void StringCopy(char* _Dest, const char* _Src) {\n    int idx = 0;\n    while (_Src[idx] != 0) {\n        _Dest[idx] = _Src[idx];\n        ++idx;\n    }\n    _Dest[idx] = _Src[idx]; // Copy the null-terminator\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#stringlen","title":"<code>StringLen</code>","text":"<p>Calculates the length of a string by counting until the null character:</p> <pre><code>int StringLen(const char* _Src) {\n    int Len = 0;\n    while (_Src[Len] != 0) {\n        ++Len;\n    }\n    return Len;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#stringcat","title":"<code>StringCat</code>","text":"<p>Appends <code>_Src</code> to the end of <code>_Dest</code>:</p> <pre><code>void StringCat(char* _Dest, const char* _Src) {\n    int DestLen = StringLen(_Dest);\n    int SrcLen = StringLen(_Src);\n\n    for (int i = 0; i &lt; SrcLen; ++i) {\n        _Dest[i + DestLen] = _Src[i];\n    }\n\n    _Dest[DestLen + SrcLen] = 0; // Null-terminate result\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#itoa","title":"<code>ItoA</code>","text":"<p>Converts an integer to its ASCII string representation:</p> <pre><code>void ItoA(char* _Dest, int _Num) {\n    int Count = 0;\n    int Result = _Num;\n    while (true) {\n        Result /= 10;\n        ++Count;\n        if (Result == 0)\n            break;\n    }\n\n    for (int i = 0; i &lt; Count; ++i) {\n        _Dest[Count - (i + 1)] = (_Num % 10) + 48;\n        _Num /= 10;\n    }\n\n    _Dest[Count] = 0; // Null-terminate\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#atoi","title":"<code>AtoI</code>","text":"<p>Converts a numeric string to its integer representation:</p> <pre><code>int AtoI(const char* _Src) {\n    int Count = StringLen(_Src);\n    int Value = 0;\n    for (int i = 0; i &lt; Count; ++i) {\n        Value *= 10;\n        Value += (_Src[i] - 48);\n    }\n    return Value;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#common-mistakes","title":"Common Mistakes","text":"<p>Modifying string literals</p> <pre><code>const char* pString = \"abcdef\";\npString[0] = 'z'; // Runtime error: attempting to modify ROM\n</code></pre> <p>Forgetting null-termination</p> <pre><code>char str[4] = {'1', '2', '3'}; // Missing null terminator!\n// String functions like strlen or strcpy may read past the end.\n</code></pre> <p>Incorrect array sizing</p> <pre><code>char buffer[4] = \"abcd\"; // Buffer overflow: needs 5 bytes (4 chars + null)\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#tricky-case-literal-vs-writable-strings","title":"Tricky Case: Literal vs. Writable Strings","text":"<pre><code>const char* literal = \"hello\"; // Stored in ROM (read-only)\nchar buffer[] = \"hello\";       // Stored in RAM (writable)\n\nliteral[0] = 'H'; // ??Runtime crash\nbuffer[0] = 'H';  // ??OK\n</code></pre> <p>Understanding the storage location and mutability of strings is key in avoiding subtle bugs.</p>"},{"location":"C_C%2B%2B_Basics/AR250325/#interview-questions","title":"Interview Questions","text":"<p>Q: Why can't we modify <code>const char*</code> literals? A: String literals are stored in ROM, which is read-only. Attempting to write causes undefined behavior or runtime errors.</p> <p>Q: How does manual <code>ItoA</code> work? A: It repeatedly divides the number by 10 to count digits, then fills the array from the end with ASCII character equivalents (<code>+48</code>).</p> <p>Q: What's a common mistake with <code>StringCat</code>? A: Not ensuring that <code>_Dest</code> has enough space to hold the combined result, potentially causing buffer overflows.</p> <p>Q: Difference between <code>char[]</code> and <code>const char*</code>? A: <code>char[]</code> is a writable local array. <code>const char*</code> may point to a literal in ROM?\ubd31ead-only memory.</p>"},{"location":"C_C%2B%2B_Basics/AR250325/#code-demonstration","title":"Code Demonstration","text":"<pre><code>char szSrc[100] = \"Copy\";\nchar szDest[100] = \"\";\nStringCopy(szDest, szSrc); // szDest == \"Copy\"\n\nchar szSrc1[100] = \"defg\";\nchar szDest1[100] = \"abc\";\nStringCat(szDest1, szSrc1); // szDest1 == \"abcdefg\"\n\nchar szNum[100] = {};\nItoA(szNum, 72543); // szNum == \"72543\"\n\nint value = AtoI(\"2452\"); // value == 2452\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#visual-string-concatenation","title":"Visual: String Concatenation","text":"<pre><code>Before Cat:\nDest: \"abc\"\nSrc:  \"def\"\n\nAfter Cat:\nDest: \"abcdef\"\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250325/#summary","title":"Summary","text":"<p>These foundational string functions provide a great low-level look into memory layout, string processing, and manual type conversions in C++. Knowing their implementation helps reinforce understanding of pointers, arrays, and memory safety?\ubd22ssential skills for systems-level programming.</p>"},{"location":"C_C%2B%2B_Basics/AR250325/#references","title":"References","text":"<ul> <li>my_string.cpp</li> <li>my_string.h</li> <li>char_char_array.cpp</li> <li>char_and_pointer.cpp</li> <li>HW250325.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250326/","title":"Memory Layout and Static Variables","text":""},{"location":"C_C%2B%2B_Basics/AR250326/#date-2025-03-26","title":"Date: 2025-03-26","text":""},{"location":"C_C%2B%2B_Basics/AR250326/#key-points","title":"Key Points","text":"<ul> <li>Local variables reside in the stack segment.</li> <li>Global, static, and external variables live in the data segment.</li> <li><code>static</code> variables retain state across function calls.</li> <li>Heap memory is dynamically allocated during runtime.</li> <li>ROM includes constants, code, and string literals.</li> <li>Accessing static variables via pointers allows indirect manipulation.</li> <li>Dynamic allocation enables flexible memory usage.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250326/#overview","title":"Overview","text":"<p>Understanding how different types of variables are stored in memory is crucial for writing efficient and bug-free C/C++ code. This includes knowing the distinctions between stack, data, heap, and ROM segments.</p> <p>This example demonstrates the use of various storage classes: local, global, static, and dynamic memory allocation. It also shows how to indirectly modify <code>static</code> variables declared within a function using pointers.</p> <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\n// Global variable - stored in data segment\ntint global = 10;\nint g_Arr[10] = {}; // Global array - also in data segment\n\n// Custom data type defined by struct\nstruct MyDatType {\n    int arr[2];     // Two integer elements\n    float fArr[3];  // Three float elements\n};\n\n// Function that returns a pointer to a static variable\nint* Test() {\n    static int iStatic = 0; // Stored in data segment, retains value across calls\n\n    ++global;     // Modify global variable\n    ++iStatic;    // Modify static variable\n\n    return &amp;iStatic; // Return address to allow external modification\n}\n\nint main() {\n    // Accessing and modifying a static variable indirectly via pointer\n    int* pInt = Test();\n    *pInt = 100;  // Modifies the static variable directly\n    Test();       // Calls again to observe incremented behavior\n\n    ++global;     // Directly modify global variable\n\n    // Dynamic memory allocation happens in heap\n    // Enables allocation of memory at runtime\n\n    int Value = 10;         // Local variable - stack\n    int iArr[10];           // Local array - stack\n\n    MyDatType data = {};    // Struct instance - stack\n    data.arr[0];            // Accessing struct members\n    data.arr[1];\n    data.fArr[0];\n    data.fArr[1];\n    data.fArr[2];\n\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250326/#common-mistakes","title":"Common Mistakes","text":"<p>Trying to directly access a static variable outside its scope <pre><code>// ++iStatic; // Invalid - `iStatic` is local to Test(), cannot access directly\n</code></pre></p> <p>Forgetting to initialize dynamically allocated memory <pre><code>int* arr = (int*)malloc(10 * sizeof(int));\n// Always initialize or set the memory to avoid garbage values\nfree(arr); // Always remember to free dynamically allocated memory\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250326/#tricky-case-static-inside-function","title":"Tricky Case: Static Inside Function","text":"<p>Even though a <code>static</code> variable is local to a function, you can manipulate its value from outside by returning its address.</p> <pre><code>int* p = Test();\n*p = 42; // Updates the static variable inside Test()\n</code></pre> <p>The static variable is still not globally accessible, but its address can leak outside the function scope for controlled use.</p>"},{"location":"C_C%2B%2B_Basics/AR250326/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between <code>static</code> and <code>global</code> variables in C? A: Both are stored in the data segment, but <code>static</code> limits the scope to the defining function or file, while global variables are accessible across files.</p> <p>Q: What are the different memory segments in a C program? A: Stack (local variables), Heap (dynamic allocation), Data (global/static), ROM (constants, code).</p> <p>Q: Can you return a pointer to a local variable from a function? A: No. Local variables are destroyed after function returns. But returning the address of a <code>static</code> variable is valid since it lives beyond the function scope.</p> <p>Q: Why is heap allocation not related to the heap data structure? A: The term \"heap\" here refers to a memory region, not the data structure. Dynamic allocation uses this region but not the heap structure (min/max trees).</p>"},{"location":"C_C%2B%2B_Basics/AR250326/#visual-memory-segments","title":"Visual: Memory Segments","text":"<pre><code>Memory Segment     | Contents                      | Example\n------------------ | ----------------------------- | ----------------------\nStack              | Local variables               | int x;\nHeap               | Dynamically allocated memory  | malloc()\nData               | Static/Global variables       | static int i;\nROM (Text)         | Code, constants, literals     | \"Hello\" string\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250326/#summary","title":"Summary","text":"<p>This study explores how variable storage classes affect memory usage and lifetime. <code>static</code> variables are powerful tools when persistent state is needed within function scope, while dynamic memory allows flexibility at runtime. Being aware of memory segment layout is essential for low-level optimization and preventing memory issues.</p>"},{"location":"C_C%2B%2B_Basics/AR250326/#references","title":"References","text":"<ul> <li>my_string.cpp</li> <li>my_string.h</li> <li>dynamic_allocation</li> <li>char_char_array.cpp</li> <li>char_and_pointer.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250327/","title":"Dynamic Memory Allocation and Heap Management","text":""},{"location":"C_C%2B%2B_Basics/AR250327/#date-2025-03-27","title":"Date: 2025-03-27","text":""},{"location":"C_C%2B%2B_Basics/AR250327/#key-points","title":"Key Points","text":"<ul> <li><code>malloc()</code> allocates memory in the heap based on the byte size.</li> <li>Always <code>free()</code> dynamically allocated memory to prevent memory leaks.</li> <li>The return type of <code>malloc()</code> is <code>void*</code> because it doesn't assume the type of allocated memory.</li> <li>Heap corruption can occur if memory is accessed beyond the allocated bounds.</li> <li>Using structures like dynamic arrays requires careful memory management.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250327/#overview","title":"Overview","text":"<p>Dynamic memory allocation in C is a powerful tool that enables allocating memory at runtime using the heap. This is particularly useful for variable-sized data like dynamic arrays.</p> <p>The functions <code>malloc()</code> and <code>free()</code> are essential: - <code>malloc(size)</code> allocates <code>size</code> bytes and returns a pointer to the first byte. - <code>free(ptr)</code> deallocates memory previously allocated with <code>malloc()</code>.</p> <p>If memory is allocated and not freed, it leads to a memory leak, which can gradually consume all available memory.</p> <pre><code>#include &lt;stdlib.h&gt;\n\nint main()\n{\n    // Allocate 200 bytes in the heap\n    void* pData = malloc(200);\n\n    // Always free dynamically allocated memory\n    free(pData);\n\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250327/#dynamic-array-example","title":"Dynamic Array Example","text":"<p>This sample shows how a custom dynamic array is used via a user-defined structure and helper functions (<code>InitArr</code>, <code>PushBack</code>).</p> <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include \"Array.h\"\n\nint main()\n{\n    int iArr[10] = {}; // Static array\n\n    tArray arr = {};   // Custom dynamic array\n    InitArr(&amp;arr);     // Initialize dynamic array\n\n    // Push elements into dynamic array\n    PushBack(&amp;arr, 100);\n    PushBack(&amp;arr, 200);\n    PushBack(&amp;arr, 300);\n    PushBack(&amp;arr, 400);\n    PushBack(&amp;arr, 500);\n    PushBack(&amp;arr, 600);\n    PushBack(&amp;arr, 700);\n    PushBack(&amp;arr, 800);\n    PushBack(&amp;arr, 900);\n\n    // Print all elements\n    for (int i = 0; i &lt; arr.Size; ++i)\n    {\n        printf(\"%d\\n\", arr.pArr[i]);\n    }\n\n    // Free the allocated memory to avoid memory leak\n    free(arr.pArr);\n\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250327/#common-mistakes","title":"Common Mistakes","text":"<p>Memory Leak <pre><code>void* p = malloc(100);\n// forgot to free(p); -&gt; memory leak\n</code></pre></p> <p>Heap Corruption <pre><code>arr.pArr[1800] = 10; // Dangerous: Accessing memory beyond allocation\n</code></pre> Accessing beyond the allocated size may corrupt memory and lead to unpredictable behavior. It may or may not crash the program, making it hard to detect.</p>"},{"location":"C_C%2B%2B_Basics/AR250327/#tricky-case-void-pointer-and-casting","title":"Tricky Case: Void Pointer and Casting","text":"<p><code>malloc()</code> returns a <code>void*</code>, which must be cast to the appropriate type:</p> <p><pre><code>int* pData = (int*)malloc(sizeof(int));\n*pData = 10;\n</code></pre> This makes the allocation flexible but puts the responsibility of correct usage on the programmer.</p>"},{"location":"C_C%2B%2B_Basics/AR250327/#interview-questions","title":"Interview Questions","text":"<p>Q: Why does <code>malloc()</code> return <code>void*</code>? A: It returns <code>void*</code> to allow allocating memory for any data type. The caller casts the returned pointer to the appropriate type.</p> <p>Q: What happens if you forget to <code>free()</code> memory? A: It results in a memory leak ? memory stays allocated until the program terminates, reducing available memory over time.</p> <p>Q: How can you prevent heap corruption? A: Always ensure you access memory within the bounds of what you allocated. Use debugging tools like Valgrind or built-in runtime checks when available.</p> <p>Q: What's the difference between stack and heap allocation? A: Stack allocation is automatic and limited in size, suitable for small, fixed-size data. Heap allocation is manual and allows large or dynamic-sized data but must be freed manually.</p>"},{"location":"C_C%2B%2B_Basics/AR250327/#summary","title":"Summary","text":"<p>Dynamic memory is key to flexible C programs. Functions like <code>malloc()</code> and <code>free()</code> provide control but demand responsibility. Mismanagement leads to memory leaks or heap corruption. Understanding how and when to allocate/deallocate memory is essential to writing safe and efficient code.</p>"},{"location":"C_C%2B%2B_Basics/AR250327/#references","title":"References","text":"<ul> <li>dynamic_alloc_usage.cpp</li> <li>dynamic_alloc_apply.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250328/","title":"Linked List and Dynamic Array","text":""},{"location":"C_C%2B%2B_Basics/AR250328/#date-2025-03-28","title":"Date: 2025-03-28","text":""},{"location":"C_C%2B%2B_Basics/AR250328/#key-points","title":"Key Points","text":"<ul> <li>Linked lists enable constant time insertion at the front (<code>O(1)</code>), but traversal and indexing are linear (<code>O(N)</code>).</li> <li>Dynamic arrays allow fast indexing (<code>O(1)</code>), but insertion can require memory reallocation (<code>O(N)</code> worst case).</li> <li>Big-O notation is used to describe algorithm efficiency in terms of input size.</li> <li>Memory management is crucial: always <code>free()</code> dynamically allocated memory to avoid leaks.</li> <li>Debug flags like <code>_CRTDBG_LEAK_CHECK_DF</code> can help identify memory leaks in development.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250328/#overview","title":"Overview","text":"<p>This example demonstrates dynamic memory management through a basic implementation of a dynamic array and a singly linked list. Key focus areas include:</p> <ul> <li>Dynamic allocation using <code>malloc</code></li> <li>Linked list operations: <code>PushBack</code>, <code>PushFront</code>, and <code>Release</code></li> <li>Manual memory management and debugging practices</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250328/#dynamic-array","title":"Dynamic Array","text":"<p>The array expands dynamically when capacity is exceeded:</p> <pre><code>void PushBack(tArray* _pArr, int _Data) {\n    if (_pArr-&gt;Size == _pArr-&gt;Capacity) {\n        int* pNew = (int*)malloc(sizeof(int) * _pArr-&gt;Capacity * 2);\n        for (int i = 0; i &lt; _pArr-&gt;Size; ++i) {\n            pNew[i] = _pArr-&gt;pArr[i];\n        }\n        free(_pArr-&gt;pArr);\n        _pArr-&gt;pArr = pNew;\n        _pArr-&gt;Capacity *= 2;\n    }\n    _pArr-&gt;pArr[_pArr-&gt;Size++] = _Data;\n}\n</code></pre> <p>This ensures capacity is doubled when full, mimicking vector-like behavior.</p>"},{"location":"C_C%2B%2B_Basics/AR250328/#linked-list","title":"Linked List","text":"<p>The list supports inserting data at both the front and the back:</p> <pre><code>void PushBack(tList* _List, int _Data) {\n    tNode* pNode = (tNode*)malloc(sizeof(tNode));\n    pNode-&gt;Data = _Data;\n    pNode-&gt;pNext = nullptr;\n\n    if (_List-&gt;pHead == nullptr) {\n        _List-&gt;pHead = pNode;\n    } else {\n        tNode* pLast = _List-&gt;pHead;\n        while (pLast-&gt;pNext != nullptr) {\n            pLast = pLast-&gt;pNext;\n        }\n        pLast-&gt;pNext = pNode;\n    }\n    ++_List-&gt;Size;\n}\n</code></pre> <pre><code>void PushFront(tList* _List, int _Data) {\n    tNode* pNewNode = (tNode*)malloc(sizeof(tNode));\n    pNewNode-&gt;Data = _Data;\n    pNewNode-&gt;pNext = _List-&gt;pHead;\n    _List-&gt;pHead = pNewNode;\n    ++_List-&gt;Size;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250328/#memory-management","title":"Memory Management","text":"<p>Every dynamic allocation must be paired with a corresponding deallocation to prevent memory leaks:</p> <pre><code>void Release(tList* _List) {\n    tNode* pNode = _List-&gt;pHead;\n    while (pNode != nullptr) {\n        tNode* pNext = pNode-&gt;pNext;\n        free(pNode);\n        pNode = pNext;\n    }\n    _List-&gt;pHead = nullptr;\n    _List-&gt;Size = 0;\n}\n</code></pre> <p>Enable memory leak checks in Visual Studio with:</p> <pre><code>_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250328/#common-mistakes","title":"Common Mistakes","text":"<p>Accessing Freed Memory <pre><code>Release(&amp;list);\nlist.pHead-&gt;Data = 5;  // Undefined behavior!\n</code></pre> Always reset pointers after <code>free</code> or inside cleanup functions.</p> <p>Forgetting to Resize Dynamic Arrays <pre><code>// Incorrect usage - no resize logic\narr.pArr[arr.Size++] = 999;  // May cause heap corruption\n</code></pre> Always check and resize when adding elements.</p>"},{"location":"C_C%2B%2B_Basics/AR250328/#tricky-case-memory-debugging","title":"Tricky Case: Memory Debugging","text":"<p>When using <code>_CrtSetDbgFlag</code>, memory leaks are printed automatically at the end of program execution in debug mode. This is particularly useful when working with dynamic structures like linked lists.</p>"},{"location":"C_C%2B%2B_Basics/AR250328/#interview-questions","title":"Interview Questions","text":"<p>Q: When would you choose a linked list over a dynamic array? A: When frequent insertions/removals at the beginning or middle of the collection are required. Linked lists allow <code>O(1)</code> front insertion, unlike arrays which require shifting elements.</p> <p>Q: Why is it dangerous to access memory after freeing it? A: The memory region may be reassigned or invalidated, leading to undefined behavior or program crashes.</p> <p>Q: What happens when you forget to <code>free()</code> dynamically allocated memory? A: It results in a memory leak, which can cause performance degradation over time.</p> <p>Q: Why does <code>malloc</code> return <code>void*</code>? A: Because <code>malloc</code> doesn't know the target type. It returns a generic pointer that must be cast by the programmer.</p> <p>Q: What is the time complexity of inserting at the end of a singly linked list? A: <code>O(N)</code>, unless a tail pointer is maintained, in which case it becomes <code>O(1)</code>.</p>"},{"location":"C_C%2B%2B_Basics/AR250328/#code-demonstration-output","title":"Code Demonstration Output","text":"<pre><code>// list2 stores 300, 200, 100 via PushFront()\ntNode* pNode = list2.pHead;\nwhile (pNode) {\n    printf(\"%d\\n\", pNode-&gt;Data);\n    pNode = pNode-&gt;pNext;\n}\n</code></pre> <p>Expected output: <pre><code>300\n200\n100\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250328/#references","title":"References","text":"<ul> <li>dynamic_alloc_apply.cpp</li> <li>linked_list.cpp</li> <li>list.cpp</li> <li>list.h</li> <li>array.cpp</li> <li>array.h</li> <li>HW250328.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250331/","title":"Class vs Struct, Encapsulation, and Const-Correctness","text":""},{"location":"C_C%2B%2B_Basics/AR250331/#date-2025-03-31","title":"Date: 2025-03-31","text":""},{"location":"C_C%2B%2B_Basics/AR250331/#key-points","title":"Key Points","text":"<ul> <li>Both <code>class</code> and <code>struct</code> are user-defined types in C++, with default access specifiers differing.</li> <li>C++ <code>class</code> introduces object-oriented features: encapsulation, information hiding, inheritance, polymorphism, and abstraction.</li> <li>Use <code>private</code> to enforce data hiding and <code>public</code> to expose member functions.</li> <li>Const correctness (<code>const</code> after member functions) ensures safe access for constant objects.</li> <li>Member initialization for <code>const</code> variables must be done using initializer lists.</li> <li><code>this</code> pointer implicitly refers to the current object instance.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250331/#overview","title":"Overview","text":"<p>C++ builds upon C by introducing the concept of <code>class</code> with rich object-oriented features. While C relies on <code>struct</code> for custom data types, C++ uses both <code>class</code> and <code>struct</code>, with the key distinction being the default access specifier (<code>private</code> for <code>class</code>, <code>public</code> for <code>struct</code>).</p>"},{"location":"C_C%2B%2B_Basics/AR250331/#example-basic-struct-and-class","title":"Example: Basic struct and class","text":"<pre><code>struct MyData {\npublic:\n    int iData;\n};\n\nclass CMyData {\nprivate:\n    int iData;\n};\n\nint main() {\n    MyData data = {};\n    data.iData = 0; // OK: public access\n\n    CMyData CData = {};\n    // CData.iData = 0; // Error: private member\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250331/#common-mistakes","title":"Common Mistakes","text":"<p>Assuming structs are limited compared to classes <pre><code>struct S {\n    void func(); // Valid in C++\n};\n</code></pre> In C++, <code>struct</code> can have methods, constructors, destructors, inheritance, etc.</p> <p>Ignoring access specifier defaults <pre><code>struct S { int a; };  // a is public\nclass C { int a; };   // a is private\n</code></pre></p> <p>Failing to use initializer list for <code>const</code> members <pre><code>class C {\n    const int val;\npublic:\n    C() : val(10) {}  // Required for const\n};\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250331/#const-member-functions","title":"Const Member Functions","text":"<p>Member functions that do not modify the state of the object should be marked <code>const</code>. This ensures they can be safely called on constant objects or pointers to constant objects.</p> <pre><code>class CNewClass {\nprivate:\n    int m_i;\n    const int m_i2;\n\npublic:\n    int GetInt() const { return m_i; }\n    int GetInt2() const { return m_i2; }\n\n    void SetData(int _a) { m_i = _a; }\n\n    CNewClass() : m_i(200), m_i2(400) {}\n    ~CNewClass() {}\n};\n\nint main() {\n    const CNewClass obj;\n    int x = obj.GetInt();   // OK\n    int y = obj.GetInt2();  // OK\n    // obj.SetData(10);     // Error: cannot modify const object\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250331/#tricky-case-memory-alignment-in-structs","title":"Tricky Case: Memory Alignment in Structs","text":"<p>C++ aligns data in structs based on the size of the largest member unless specified otherwise.</p> <pre><code>#pragma pack(1)\nstruct tMyStruct {\n    int   i;\n    int   i2;\n    short s;\n    char  c;\n};\n\nint main() {\n    tMyStruct my = {};\n    int size = sizeof(tMyStruct); // Size tightly packed due to #pragma pack(1)\n    return 0;\n}\n</code></pre> <p>Without <code>#pragma pack(1)</code>, compilers may add padding for performance, changing the total size.</p>"},{"location":"C_C%2B%2B_Basics/AR250331/#interview-questions","title":"Interview Questions","text":"<p>Q: Difference between <code>struct</code> and <code>class</code> in C++? A: Functionally similar, but <code>struct</code> defaults to public members while <code>class</code> defaults to private.</p> <p>Q: Why mark getter functions as <code>const</code>? A: It ensures the method can be called on const objects and doesn\u00e2\u20ac\u2122t modify the object's state.</p> <p>Q: When must initializer lists be used? A: For initializing <code>const</code> or reference data members in constructors.</p> <p>Q: What does the <code>this</code> pointer represent? A: It holds the address of the current object and is used implicitly to access member variables inside class methods.</p>"},{"location":"C_C%2B%2B_Basics/AR250331/#visual-class-member-access","title":"Visual: Class Member Access","text":"<pre><code>Object: CNewClass my\n---------------------\nPrivate:\n  m_i   = accessible only via member functions\n  m_i2  = accessible only via member functions\n\nPublic:\n  GetInt()   --&gt; returns m_i\n  GetInt2()  --&gt; returns m_i2\n  SetData()  --&gt; modifies m_i\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250331/#code-demonstration","title":"Code Demonstration","text":"<pre><code>CNewClass my;\nint i = my.GetInt();\ni = my.GetInt2();\n\nCNewClass* pNC = &amp;my;\ni = pNC-&gt;GetInt();\ni = pNC-&gt;GetInt2();\n\nconst CNewClass* pConstNC = &amp;my;\ni = pConstNC-&gt;GetInt();\ni = pConstNC-&gt;GetInt2();\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250331/#references","title":"References","text":"<ul> <li>list.cpp</li> <li>list.h</li> <li>linked_list.cpp</li> <li>oop_access_specifier</li> <li>struct_size</li> <li>generator_terminator.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250401/","title":"Function &amp; Operator Overloading, Object Lifetime, and Const Safety","text":""},{"location":"C_C%2B%2B_Basics/AR250401/#date-2025-04-01","title":"Date: 2025-04-01","text":""},{"location":"C_C%2B%2B_Basics/AR250401/#key-points","title":"Key Points","text":"<ul> <li>Function overloading allows multiple functions with the same name but different parameters.</li> <li>Operator overloading lets user-defined types behave like built-in types.</li> <li>Special member functions (constructor, destructor) define object lifecycle.</li> <li>Use const correctness to enforce read-only access.</li> <li>Const member functions can be called on const objects or pointers.</li> <li>Overloading &lt;&lt; for custom behavior is useful in chaining calls.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250401/#overview","title":"Overview","text":"<p>This note covers C++ concepts including function and operator overloading, references, object lifetime, const correctness, and tricky chaining using overloaded operators. Understanding these foundational concepts is crucial for writing safe and idiomatic C++ code.</p>"},{"location":"C_C%2B%2B_Basics/AR250401/#function-overloading","title":"Function Overloading","text":"<pre><code>int GetInt() {\n    int a = 100;\n    return a;\n}\n\nvoid EndL() {\n    printf(\"\\n\");\n}\n\nvoid Test() {\n    printf(\"a\");\n}\n</code></pre> <p>Multiple functions (<code>GetInt</code>, <code>EndL</code>, <code>Test</code>) are declared with different names and purposes. Function overloading would typically involve the same name with different parameters, though not directly used here.</p>"},{"location":"C_C%2B%2B_Basics/AR250401/#operator-overloading-in-a-class","title":"Operator Overloading in a Class","text":"<pre><code>class CMyDataType {\nprivate:\n    int m_Data;\n\npublic:\n    void SetData(int _i) {\n        m_Data = _i;\n    }\n\n    // Overload + to add two objects\n    CMyDataType operator+(CMyDataType _Other) {\n        CMyDataType data;\n        data.m_Data = m_Data + _Other.m_Data;\n        return data;\n    }\n\n    // Overload &lt;&lt; to output int\n    CMyDataType&amp; operator&lt;&lt;(int a) {\n        printf(\"%d\", a);\n        return *this;\n    }\n\n    // Overload &lt;&lt; to output float\n    CMyDataType&amp; operator&lt;&lt;(float a) {\n        printf(\"%f\", a);\n        return *this;\n    }\n\n    // Overload &lt;&lt; to output function (e.g., EndL)\n    CMyDataType&amp; operator&lt;&lt;(void(*pFunc)(void)) {\n        pFunc();\n        return *this;\n    }\n\n    CMyDataType() : m_Data(0) {}\n    ~CMyDataType() {}\n};\n</code></pre> <p>This class demonstrates: - Overloading <code>+</code> to add internal data of two <code>CMyDataType</code> instances. - Overloading <code>&lt;&lt;</code> for <code>int</code>, <code>float</code>, and function pointer types to support flexible output and chaining, similar to <code>std::cout</code> behavior.</p>"},{"location":"C_C%2B%2B_Basics/AR250401/#reference-vs-pointer","title":"Reference vs Pointer","text":"<pre><code>int a = 0;\nint* pInt = &amp;a;\n*pInt = 100;\n\nint&amp; Ref = a;\nRef = 200;\n</code></pre> <ul> <li>A pointer (<code>pInt</code>) can change what it points to and needs dereferencing.</li> <li>A reference (<code>Ref</code>) acts as an alias and must be initialized upon declaration. Cannot be changed later.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250401/#const-correctness-and-object-lifetime","title":"Const Correctness and Object Lifetime","text":"<pre><code>class CNewClass {\nprivate:\n    int m_i;\n    const int m_i2;\n\npublic:\n    int GetInt() const {\n        return m_i;\n    }\n\n    int GetInt2() const {\n        return m_i2;\n    }\n\n    void SetData(int _a) {\n        m_i = _a;\n    }\n\n    CNewClass() : m_i(200), m_i2(400) {}\n    ~CNewClass() {}\n};\n</code></pre> <p>Key details: - Const members (<code>m_i2</code>) must be initialized in the constructor initializer list. - Member functions marked <code>const</code> ensure no modification to the object state.</p>"},{"location":"C_C%2B%2B_Basics/AR250401/#tricky-case-chaining-with-overloaded","title":"Tricky Case: Chaining With Overloaded &lt;&lt;","text":"<pre><code>d1 &lt;&lt; 20 &lt;&lt; 30 &lt;&lt; 40 &lt;&lt; EndL &lt;&lt; 10 &lt;&lt; 20 &lt;&lt; 30;\n</code></pre> <ul> <li>This works because <code>operator&lt;&lt;</code> returns a reference to <code>*this</code>, allowing the chain.</li> <li>Can even chain functions like <code>EndL</code> thanks to <code>operator&lt;&lt;(void(*)(void))</code>.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250401/#common-mistakes","title":"Common Mistakes","text":"<p>Forgetting return by reference in operator overloading <pre><code>// BAD: returns by value, can't chain\nCMyDataType operator&lt;&lt;(int a) {\n    printf(\"%d\", a);\n    return *this; // Copies instead of referencing\n}\n\n// GOOD: returns by reference\nCMyDataType&amp; operator&lt;&lt;(int a) {\n    printf(\"%d\", a);\n    return *this;\n}\n</code></pre></p> <p>Not marking member functions as const <pre><code>int GetInt() { return m_i; } // Can't call on const object\nint GetInt() const { return m_i; } // OK for const object\n</code></pre></p> <p>Misusing initializer lists <pre><code>CNewClass() {\n    m_i = 200;       // OK\n    m_i2 = 400;      // Error: const must be initialized in initializer list\n}\n</code></pre></p>"},{"location":"C_C%2B%2B_Basics/AR250401/#interview-questions","title":"Interview Questions","text":"<p>Q: Why overload the <code>&lt;&lt;</code> operator for custom types? A: To allow expressive output similar to <code>std::cout</code>, especially when chaining multiple values.</p> <p>Q: What happens if you omit <code>const</code> in a getter function? A: You can't call that function on const objects or pointers to const.</p> <p>Q: Can const members be modified in the constructor body? A: No, they must be initialized in the constructor initializer list.</p> <p>Q: What is the difference between a pointer and a reference? A: A pointer can be reassigned and requires dereferencing; a reference is an alias and must be initialized immediately.</p> <p>Q: Why return <code>*this</code> by reference in operator overloading? A: To enable chaining calls without making copies.</p>"},{"location":"C_C%2B%2B_Basics/AR250401/#code-demonstration","title":"Code Demonstration","text":"<pre><code>CMyDataType d1, d2, d3;\nd1.SetData(10);\nd2.SetData(100);\nd3 = d1 + d2; // operator+\n\nd1 &lt;&lt; 20 &lt;&lt; 30 &lt;&lt; EndL &lt;&lt; 40; // operator&lt;&lt; chaining\n</code></pre> <pre><code>CNewClass obj;\nint x = obj.GetInt(); // Safe because of const\nconst CNewClass* pObj = &amp;obj;\nx = pObj-&gt;GetInt2(); // Also safe\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250401/#visual-chained-output-with-overloaded","title":"Visual: Chained Output With Overloaded &lt;&lt;","text":"<pre><code>Before:\nCall: d1 &lt;&lt; 20\n    Prints: 20\nReturns: reference to d1\n\nThen:\nd1 &lt;&lt; 30\n    Prints: 30\nReturns: reference to d1\n\n...\nSupports chaining like: d1 &lt;&lt; 20 &lt;&lt; 30 &lt;&lt; EndL &lt;&lt; 40\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250401/#references","title":"References","text":"<ul> <li>generator_and_terminator.cpp</li> <li>reference.cpp</li> <li>operator_overloading.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250402/","title":"Namespaces, Constructors, and Copy Mechanics","text":""},{"location":"C_C%2B%2B_Basics/AR250402/#date-2025-04-02","title":"Date: 2025-04-02","text":""},{"location":"C_C%2B%2B_Basics/AR250402/#key-points","title":"Key Points","text":"<ul> <li>Namespaces help avoid naming conflicts and allow scoped access to functions and variables.</li> <li>Function overloading works across namespaces.</li> <li>Pointer and reference manipulation has different semantics.</li> <li>Default constructors are not auto-generated if any constructor is explicitly declared.</li> <li>Copy constructors and assignment operators must be carefully defined together when deep copy behavior is needed.</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250402/#overview","title":"Overview","text":""},{"location":"C_C%2B%2B_Basics/AR250402/#namespace-use-and-overloading","title":"Namespace Use and Overloading","text":"<p>Namespaces are used to avoid name collisions in larger projects. You can access namespace members using <code>::</code>, or bring them into scope using <code>using</code>.</p> <pre><code>namespace MY_SPACE {\n    void IntChange(int* _Data) { *_Data = 200; }\n    void IntChange(int&amp; _Data) { _Data = 400; }\n\n    namespace SUB_SPACE {\n        void IntPtrChange(int*&amp; _Data) { _Data = (int*)10; }\n        void IntPtrChange(int** _Data) { *_Data = (int*)4; }\n    }\n\n    int g_Int = 0;\n}\n\nusing MY_SPACE::SUB_SPACE::IntPtrChange;\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250402/#main-function-demo","title":"Main Function Demo","text":"<pre><code>int main() {\n    int* p = nullptr;\n    IntChange(p);  // Function in global scope\n\n    int a = 10;\n    MY_SPACE::IntChange(&amp;a); // Pointer version\n    MY_SPACE::IntChange(a);  // Reference version\n\n    int* pInt = nullptr;\n    IntPtrChange(pInt);      // Reference to pointer\n    IntPtrChange(&amp;pInt);     // Pointer to pointer\n\n    MY_SPACE::g_Int = 100;\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250402/#constructors-and-copy-semantics","title":"Constructors and Copy Semantics","text":""},{"location":"C_C%2B%2B_Basics/AR250402/#constructor-overloading","title":"Constructor Overloading","text":"<pre><code>class MyClass {\nprivate:\n    float m_Data;\n\npublic:\n    void SetData(float _Data) { m_Data = _Data; }\n\n    MyClass() : m_Data(0.f) {}\n    MyClass(float _Data) : m_Data(_Data) {}\n    MyClass(const MyClass&amp; _Other) : m_Data(_Other.m_Data) {}\n    ~MyClass() {}\n};\n</code></pre> <p>Important Notes: - If any constructor is explicitly defined, the default constructor is not generated. - Use initializer list for better performance and to initialize <code>const</code> or reference members.</p> <pre><code>MyClass data;        // OK\nMyClass data();      // Interpreted as function declaration, not object\nMyClass my2(my1);    // Uses copy constructor\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250402/#copy-constructor-and-assignment-operator","title":"Copy Constructor and Assignment Operator","text":""},{"location":"C_C%2B%2B_Basics/AR250402/#combined-concepts","title":"Combined Concepts","text":"<pre><code>class CNew {\nprivate:\n    int m_i; \n    short m_s; \n\npublic: \n    void SetInt(int _a) { m_i = _a; }\n\n    // Default assignment operator\n    CNew&amp; operator=(const CNew&amp; _Other) {\n        m_i = _Other.m_i; \n        m_s = _Other.m_s; \n        return *this; \n    }\n\npublic: \n    CNew() : m_i(0), m_s(0) {}\n\n    // Default copy constructor disabled\n    CNew(const CNew&amp; _Other) = delete;\n\n    // Custom copy constructor\n    CNew(const CNew&amp; _Other)\n        : m_i(_Other.m_i), m_s(_Other.m_s) {}\n};\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250402/#basic-object-creation","title":"Basic Object Creation","text":"<pre><code>CNew Inst1;         // Default constructor\n// CNew Inst1();    // Misinterpreted as function declaration\nInst1.SetInt(10);   // Initialize via setter\n\nCNew Inst2(Inst1);  // Uses copy constructor\n\nCNew Inst3;\nInst3 = Inst1;      // Uses assignment operator\n\nCNew Inst4 = Inst3; // Optimized as copy constructor\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250402/#notes","title":"Notes","text":"<ul> <li>If any constructor is implemented, the compiler does not auto-generate the default constructor.</li> <li>If the copy constructor is implemented, the default assignment operator must be implemented explicitly.</li> <li>Always define all necessary special member functions (Rule of Five).</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250402/#tricky-case-reference-vs-pointer-overloading","title":"Tricky Case: Reference vs Pointer Overloading","text":"<pre><code>namespace MY_SPACE {\n    void IntChange(int* _Data) { *_Data = 200; }\n    void IntChange(int&amp; _Data) { _Data = 400; }\n}\n\nint main() {\n    int a = 10;\n    MY_SPACE::IntChange(&amp;a); // Calls pointer version\n    MY_SPACE::IntChange(a);  // Calls reference version\n}\n</code></pre> <p>Understanding which overload is called is key when dealing with overloaded functions and pointer/reference parameters.</p>"},{"location":"C_C%2B%2B_Basics/AR250402/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>Misinterpreting <code>ClassName obj();</code> as object creation \u2014 it's parsed as a function declaration.</li> <li>Forgetting to define the default constructor when defining copy/move constructors.</li> <li>Returning void in an assignment operator.</li> </ul> <pre><code>void operator=(const CNew&amp; _Other); // WRONG \u2014 should return reference\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250402/#interview-questions","title":"Interview Questions","text":"<p>Q: What happens if you implement a copy constructor but not a default constructor? A: The compiler does not generate a default constructor automatically if any constructor is explicitly defined.</p> <p>Q: What's the difference between passing by pointer vs reference? A: Both allow modification of the original variable, but references are generally safer and clearer. Pointers can be reassigned and can be null.</p> <p>Q: What is the rule of three/five? A: If a class requires a custom destructor, copy constructor, or copy assignment operator, it likely requires all three. In modern C++, this extends to five: include move constructor and move assignment operator.</p> <p>Q: How can a constructor declaration become a function declaration by mistake? A: Declaring an object like <code>ClassName obj();</code> makes the compiler think it's a function returning <code>ClassName</code> instead of creating an object.</p>"},{"location":"C_C%2B%2B_Basics/AR250402/#references","title":"References","text":"<ul> <li>operator_overloading.cpp</li> <li>namespace.cpp</li> <li>class_default_copy_gen_oper.cpp</li> <li>class_copy_gen_assign_oper.cpp</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250423/","title":"Inheritance, Polymorphism, Virtual Functions, Overriding","text":"<p>Last updated: April 23, 2025</p> <p>This comprehensive guide explores advanced inheritance concepts in C++, focusing on polymorphism, virtual functions, and function overriding. These concepts are crucial for game programmers to master, as they form the foundation of object-oriented game architecture.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#function-overriding-vs-overloading","title":"Function Overriding vs. Overloading","text":"<p>These are two different concepts that are often confused but serve distinct purposes in C++.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#function-overriding","title":"Function Overriding","text":"<p>Function overriding occurs when a derived class redefines a function that already exists in its base class, using the same function signature (name and parameters). The purpose is to provide a specialized implementation for an inherited method.</p> <p>Key characteristics of function overriding: - Requires inheritance relationship between classes - Same function name and parameter list - Occurs between base and derived classes - Base class function can still be accessed explicitly</p> <p>Example of function overriding:</p> <pre><code>class Base {\npublic:\n    void Output() {\n        cout &lt;&lt; \"Base Class\" &lt;&lt; endl;\n    }\n};\n\nclass Child : public Base {\npublic:\n    void Output() {  // Overrides Base::Output()\n        cout &lt;&lt; \"Child Class\" &lt;&lt; endl;\n    }\n};\n</code></pre> <p>When we create a <code>Child</code> object and call <code>Output()</code>, the child's version is called by default. However, we can still access the parent's version when needed:</p> <pre><code>Child child;\nchild.Output();       // Calls Child::Output()\nchild.Base::Output(); // Explicitly calls Base::Output()\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250423/#function-overloading","title":"Function Overloading","text":"<p>Function overloading occurs when multiple functions in the same scope have the same name but different parameter lists. The compiler determines which function to call based on the arguments provided.</p> <p>Example of function overloading:</p> <pre><code>class MyClass {\npublic:\n    void Func();                // Version with no parameters\n    void Func(int input);       // Version with one int parameter\n    void Func(int input1, int input2); // Version with two int parameters\n};\n</code></pre> <p>The key difference: overriding is about providing different implementations of the same function in an inheritance hierarchy, while overloading is about providing multiple functions with the same name but different parameters in the same scope.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#polymorphism-in-c","title":"Polymorphism in C++","text":"<p>Polymorphism is one of the core principles of object-oriented programming. In C++, it allows us to treat objects of derived classes as objects of their base class, while still maintaining their unique behaviors.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#pointer-based-polymorphism","title":"Pointer-Based Polymorphism","text":"<p>A key feature of C++ is that a pointer to a base class can point to any object of a derived class:</p> <pre><code>class Parent {\nprivate:\n    float m_P;\n};\n\nclass Child : public Parent {\nprivate:\n    short m_S;\n};\n\nint main() {\n    Parent P;\n    Child C;\n\n    Parent* pParent = &amp;P;  // Parent pointer to Parent object - always works\n    Child* pChild = &amp;C;    // Child pointer to Child object - always works\n\n    pParent = &amp;C;  // Parent pointer to Child object - works due to polymorphism\n    // pChild = &amp;P;  // Child pointer to Parent object - DOES NOT WORK\n\n    return 0;\n}\n</code></pre> <p>This demonstrates that a base class pointer can point to a derived class object, but not vice versa. This is because a derived class object contains all the members of its base class (and potentially more), so a base class pointer can safely access the base class portion of a derived class object.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#memory-layout","title":"Memory Layout","text":"<p>Understanding memory layout helps explain why polymorphism works this way:</p> <pre><code>Parent object: [m_P (4 bytes)]\nChild object:  [m_P (4 bytes)][m_S (2 bytes, padded to 4)]\n</code></pre> <p>When <code>pParent = &amp;C</code>, the pointer points to the start of the <code>Child</code> object, which contains the <code>Parent</code> portion. The pointer only \"sees\" the <code>Parent</code> portion of the object, ignoring any additional members that the <code>Child</code> may have.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#benefits-of-polymorphism-in-game-programming","title":"Benefits of Polymorphism in Game Programming","text":"<p>In game development, polymorphism allows for elegant design patterns. Consider a game engine with various actor types:</p> <pre><code>class Actor {\npublic:\n    virtual void Tick() { /* Base implementation */ }\n};\n\nclass Player : public Actor {\npublic:\n    virtual void Tick() override { /* Player-specific logic */ }\n};\n\nclass Monster : public Actor {\npublic:\n    virtual void Tick() override { /* Monster-specific logic */ }\n};\n\n// In game level:\nstd::vector&lt;Actor*&gt; gameActors;  // Container for all actors\n</code></pre> <p>With polymorphism, we can store pointers to different derived classes (<code>Player</code>, <code>Monster</code>, etc.) in a single container of base class pointers (<code>Actor*</code>). This simplifies game architecture significantly compared to maintaining separate containers for each type:</p> <pre><code>// Without polymorphism, we would need:\nstd::vector&lt;Player*&gt; players;\nstd::vector&lt;Monster*&gt; monsters;\n// And so on for each type...\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250423/#virtual-functions","title":"Virtual Functions","text":"<p>While polymorphism allows us to use a base class pointer to point to derived class objects, there's a problem: by default, calling a method through a base class pointer will invoke the base class version of that method, even if the derived class has overridden it.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#the-polymorphism-problem","title":"The Polymorphism Problem","text":"<pre><code>class Parent {\npublic:\n    void Move() {\n        cout &lt;&lt; \"!!Parent Move!!\" &lt;&lt; endl;\n    }\n};\n\nclass Child : public Parent {\npublic:\n    void Move() {\n        cout &lt;&lt; \"!!Child Move!!\" &lt;&lt; endl;\n    }\n};\n\nint main() {\n    Parent P;\n    Child C;\n\n    Parent* pParent = &amp;P;\n    pParent-&gt;Move();  // Calls Parent::Move() - expected\n\n    pParent = &amp;C;\n    pParent-&gt;Move();  // Still calls Parent::Move() - NOT what we want!\n\n    return 0;\n}\n</code></pre> <p>This behavior occurs because the compiler performs static binding at compile time based on the pointer type, not the object type. For game engines that rely on polymorphism, this is problematic.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#virtual-functions-to-the-rescue","title":"Virtual Functions to the Rescue","text":"<p>The <code>virtual</code> keyword changes this behavior by enabling dynamic binding, where the function call is resolved at runtime based on the actual object type:</p> <pre><code>class Parent {\npublic:\n    virtual void Move() {\n        cout &lt;&lt; \"!!Parent Move!!\" &lt;&lt; endl;\n    }\n};\n\nclass Child : public Parent {\npublic:\n    void Move() override {  // 'override' keyword is optional but recommended\n        cout &lt;&lt; \"!!Child Move!!\" &lt;&lt; endl;\n    }\n};\n\nint main() {\n    Parent P;\n    Child C;\n\n    Parent* pParent = &amp;P;\n    pParent-&gt;Move();  // Calls Parent::Move()\n\n    pParent = &amp;C;\n    pParent-&gt;Move();  // Now calls Child::Move() - correct polymorphic behavior!\n\n    return 0;\n}\n</code></pre> <p>The <code>virtual</code> keyword tells the compiler to look up the function implementation at runtime rather than compile time, ensuring that the overridden version in the derived class is called.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#memory-layout-and-virtual-function-tables","title":"Memory Layout and Virtual Function Tables","text":"<p>Understanding how virtual functions work requires delving into the C++ object memory layout.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#virtual-function-tables-vtables","title":"Virtual Function Tables (VTables)","text":"<p>When a class contains at least one virtual function, the compiler creates a special data structure called a virtual function table (VTable) for that class:</p> <ol> <li>Each class with virtual functions gets its own VTable</li> <li>The VTable contains function pointers to the actual implementations</li> <li>Each object of the class stores a hidden pointer (often called <code>__vfptr</code>) to its class's VTable</li> </ol> <p>This explains why classes with virtual functions often have a larger memory footprint:</p> <pre><code>class NoVirtual {\n    float m_Value;  // 4 bytes\n};  // sizeof(NoVirtual) = 4 bytes\n\nclass WithVirtual {\n    float m_Value;  // 4 bytes\n    // Plus hidden vptr (8 bytes on x64)\n    virtual void SomeFunc() {}\n};  // sizeof(WithVirtual) = 16 bytes (with padding)\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250423/#how-virtual-function-dispatch-works","title":"How Virtual Function Dispatch Works","text":"<p>When calling a virtual function through a pointer or reference:</p> <ol> <li>The compiler generates code to access the object's <code>__vfptr</code></li> <li>The code looks up the appropriate function in the VTable (each virtual function has an index)</li> <li>The function at that index is called</li> </ol> <p>This runtime lookup allows the correct overridden method to be called regardless of the pointer type.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#vtable-inheritance","title":"VTable Inheritance","text":"<p>In an inheritance hierarchy:</p> <ol> <li>A derived class inherits the VTable structure from its base class</li> <li>When a derived class overrides a virtual function, its VTable entry is updated to point to the derived implementation</li> <li>When a derived class doesn't override a virtual function, its VTable entry points to the base class implementation</li> </ol> <p>This mechanism enables the correct function to be called based on the actual object type at runtime.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#copy-constructor-in-inheritance","title":"Copy Constructor in Inheritance","text":"<p>When working with inheritance, proper implementation of copy constructors is critical to ensure that the entire object, including the base class portion, is correctly copied.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#the-default-copy-constructor-problem","title":"The Default Copy Constructor Problem","text":"<p>By default, if you don't define a copy constructor in a derived class, the compiler generates one that:</p> <ol> <li>Calls the base class's default constructor (not its copy constructor)</li> <li>Makes member-by-member copies of the derived class's own members</li> </ol> <p>This can lead to incomplete copying of objects:</p> <pre><code>class Base {\npublic:\n    int m_a;\n    float m_f;\n\n    Base() : m_a(0), m_f(0.f) {}\n\n    Base(const Base&amp; other) \n        : m_a(other.m_a), m_f(other.m_f) {}\n};\n\nclass Child : public Base {\npublic:\n    long long m_Child;\n\n    Child() : m_Child(0) {}\n\n    // Incorrect (automatic) copy constructor:\n    // Child(const Child&amp; other) : Base(), m_Child(other.m_Child) {}\n};\n</code></pre> <p>In this example, the automatic copy constructor would initialize the <code>Base</code> portion using the default constructor, losing the values from the original <code>Base</code> portion.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#correctly-implementing-copy-constructors","title":"Correctly Implementing Copy Constructors","text":"<p>To properly implement a copy constructor in a derived class, explicitly call the base class's copy constructor:</p> <pre><code>class Child : public Base {\npublic:\n    long long m_Child;\n\n    Child() : m_Child(0) {}\n\n    // Correct copy constructor:\n    Child(const Child&amp; other)\n        : Base(other),  // Call base copy constructor with the other object\n          m_Child(other.m_Child) {}\n};\n</code></pre> <p>This ensures that both the base and derived portions of the object are properly copied.</p>"},{"location":"C_C%2B%2B_Basics/AR250423/#practical-examples","title":"Practical Examples","text":"<p>Let's examine a complete implementation demonstrating polymorphism and virtual functions:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Parent {\nprivate:\n    float m_P;\n\npublic:\n    virtual void Move() {\n        cout &lt;&lt; \"!!Parent Move!!\" &lt;&lt; endl;\n    }\n\n    virtual void Test() {\n        // Base implementation\n    }\n};\n\nclass Child : public Parent {\nprivate:\n    short m_S;\n\npublic:\n    void Move() override {\n        cout &lt;&lt; \"!!Child Move!!\" &lt;&lt; endl;\n    }\n\n    void Test() override {\n        // Child implementation\n    }\n};\n\nint main() {\n    Parent P;\n    Child C;\n\n    // Size affected by virtual function table pointer\n    int size = sizeof(P);  // Larger than just float due to __vfptr\n    size = sizeof(C);      // Even larger - includes parent + own members + __vfptr\n\n    Parent* pParent = &amp;P;\n    Child* pChild = &amp;C;\n\n    // Polymorphism allows this\n    pParent = &amp;C;  // Parent pointer to Child object\n\n    // Virtual function ensures proper dispatch\n    pParent-&gt;Move();  // Calls Child::Move() due to virtual function\n    pParent-&gt;Test();  // Calls Child::Test() due to virtual function\n\n    return 0;\n}\n</code></pre> <p>And here's an example of proper copy constructor implementation:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base {\npublic:\n    int m_a;\n    float m_f;\n\npublic:\n    Base() : m_a(0), m_f(0.f) {}\n\n    Base(const Base&amp; other)\n        : m_a(other.m_a), m_f(other.m_f) {}\n};\n\nclass Child : public Base {\npublic:\n    long long m_Child;\n\npublic:\n    Child() : m_Child(0) {}\n\n    // Proper copy constructor implementation\n    Child(const Child&amp; other)\n        : Base(other),  // Call base copy constructor\n          m_Child(other.m_Child) {}\n};\n\nint main() {\n    Base b1;\n    b1.m_a = 10;\n    b1.m_f = 3.33f;\n\n    Base b2 = b1;  // Uses Base copy constructor\n\n    Child c1;\n    c1.m_a = 1;\n    c1.m_f = 2.f;\n    c1.m_Child = 3;\n\n    Child c2(c1);  // Uses our properly implemented Child copy constructor\n                   // Both Base and Child portions are copied correctly\n\n    return 0;\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250423/#interview-questions","title":"Interview Questions","text":"<p>Here are some common interview questions related to inheritance, polymorphism, and virtual functions:</p> <p>Q: What is the difference between function overloading and function overriding? A: Overloading is defining multiple functions with the same name but different parameters in the same scope. Overriding is redefining a virtual function in a derived class with the same signature as in the base class to provide specialized behavior.</p> <p>Q: Why can a base class pointer point to a derived class object but not vice versa? A: A base class pointer can point to a derived class object because the derived class contains all the members of the base class. The reverse isn't possible because a derived class might have additional members that a base class object doesn't contain.</p> <p>Q: How do virtual functions work under the hood? A: Virtual functions work through virtual function tables (VTables). Each class with virtual functions has a VTable containing function pointers. Objects of such classes contain a hidden pointer to their class's VTable. When a virtual function is called, the appropriate function is looked up in the VTable at runtime, enabling dynamic binding.</p> <p>Q: What's the difference between calling a virtual function and a non-virtual function through a base class pointer? A: When calling a non-virtual function through a base class pointer, the function called is determined by the pointer type at compile time (static binding). For virtual functions, the function called is determined by the actual object type at runtime (dynamic binding).</p> <p>Q: Why should base class destructors be virtual in polymorphic code? A: If a derived class object is deleted through a base class pointer and the destructor isn't virtual, only the base class destructor will be called, potentially leading to resource leaks. Making the destructor virtual ensures that the proper destructor chain is called.</p> <p>Q: What happens in the default copy constructor of a derived class? A: The default copy constructor of a derived class calls the default constructor (not the copy constructor) of the base class and then copies the derived class's members. This often leads to incomplete copying of the object.</p> <p>Q: How do you correctly implement a copy constructor in a derived class? A: By explicitly calling the base class's copy constructor in the initialization list and then handling the derived class's members: <code>Derived(const Derived&amp; other) : Base(other), /* derived members */ {}</code>.</p> <p>Understanding these advanced C++ inheritance concepts is essential for game programmers who need to create flexible, maintainable game architectures. Virtual functions and polymorphism are particularly important in game engines, where they enable systems that can process many different types of game objects without needing to know their specific types.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/","title":"Virtual Function Override, Static and const","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#date-2025-04-24","title":"Date: 2025-04-24","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#key-points","title":"Key Points","text":"<ul> <li>Polymorphism allows one interface to represent different underlying types</li> <li>Virtual functions enable runtime binding of function calls to the correct implementation</li> <li>The <code>override</code> keyword ensures correct method overriding in derived classes</li> <li>Pure virtual functions and abstract classes define interfaces that derived classes must implement</li> <li>Const member functions guarantee they won't modify object state</li> <li>Static variables and functions provide class-wide storage and functionality</li> <li>Static member variables are shared across all instances of a class</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250424/#polymorphism-and-virtual-functions","title":"Polymorphism and Virtual Functions","text":"<p>Polymorphism is a core concept in object-oriented programming that allows us to treat objects of derived classes as objects of a base class. This enables writing more flexible and maintainable code, especially in game development where entity hierarchies are common.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#the-basics-of-polymorphism","title":"The Basics of Polymorphism","text":"<p>Polymorphism in C++ depends on three key elements: 1. Inheritance  2. Pointers/references to base classes 3. Virtual functions</p> <pre><code>class Parent {\npublic:\n    virtual void Move() {\n        std::cout &lt;&lt; \"!!Parent Move!!\" &lt;&lt; std::endl;\n    }\n\n    virtual void Test() {\n        std::cout &lt;&lt; \"!!Parent Test!!\" &lt;&lt; std::endl;\n    }\n\n    // Pure virtual function\n    virtual void Fly() = 0;\n};\n\nclass Child : public Parent {\nprivate:\n    short m_S;\n\npublic:\n    virtual void Move() override {\n        std::cout &lt;&lt; \"!!Child Move!!\" &lt;&lt; std::endl;\n    }\n\n    virtual void SetShort(short _Short) {\n        m_S = _Short;\n    }\n};\n</code></pre> <p>A key property of polymorphism is that a parent class pointer can point to a child class object, but not vice versa:</p> <pre><code>Parent* pParent = &amp;C;  // Valid: Parent pointer can point to Child object\n// Child* pChild = &amp;P;  // Invalid: Child pointer cannot point to Parent object\n</code></pre> <p>This is because a parent pointer can only access the parent's portion of the child object. Since every child object contains a complete parent object as its first portion, a parent pointer can safely point to a child object.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#virtual-function-mechanism","title":"Virtual Function Mechanism","text":"<p>Without virtual functions, a significant issue arises: when calling a method through a base class pointer, the compiler would always call the base class version of the method, regardless of the actual object type. This is called static binding.</p> <p>Virtual functions solve this problem by implementing dynamic binding (runtime binding). When a function is declared as <code>virtual</code>, the compiler creates a special mechanism that determines the correct function to call based on the actual object type at runtime.</p> <pre><code>Parent P;\nChild C;\nParent* pParent;\n\npParent = &amp;P;\npParent-&gt;Move();  // Calls Parent::Move()\n\npParent = &amp;C;\npParent-&gt;Move();  // Calls Child::Move() because of virtual function mechanism\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#virtual-function-table-vtable","title":"Virtual Function Table (VTable)","text":"<p>When a class has virtual functions, the compiler creates a hidden structure called a virtual function table (VTable) for that class. Each class with virtual functions gets its own VTable containing function pointers to its virtual methods.</p> <p>Additionally, every object of a class with virtual functions contains a hidden pointer (often called <code>__vfptr</code> or virtual function table pointer) that points to the VTable for its class.</p> <p>During runtime, when a virtual function is called through a base class pointer, the system: 1. Accesses the object's <code>__vfptr</code> to locate its VTable 2. Looks up the appropriate function pointer in the VTable 3. Calls the function corresponding to the actual object type</p> <p>This behind-the-scenes mechanism enables polymorphic behavior where the correct version of an overridden function is called based on the actual object type.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#the-override-keyword","title":"The Override Keyword","text":"<p>The <code>override</code> keyword, introduced in C++11, helps prevent errors by explicitly declaring that a function is intended to override a virtual function from a base class:</p> <pre><code>virtual void Move() override {\n    std::cout &lt;&lt; \"!!Child Move!!\" &lt;&lt; std::endl;\n}\n</code></pre> <p>Using <code>override</code> provides two key benefits: 1. It clearly communicates intent to readers of the code 2. The compiler will generate an error if the function doesn't actually override a virtual function from the base class</p> <p>While <code>override</code> is technically optional, using it is considered a best practice that helps catch errors early.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#pure-virtual-functions-and-abstract-classes","title":"Pure Virtual Functions and Abstract Classes","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#pure-virtual-functions","title":"Pure Virtual Functions","text":"<p>A pure virtual function is a virtual function that has no implementation in the base class and must be implemented by any concrete derived class:</p> <pre><code>// Pure virtual function declaration\nvirtual void Fly() = 0;\n</code></pre> <p>The <code>= 0</code> syntax marks a function as pure virtual, indicating: 1. The function has no implementation in this class 2. Derived classes must provide an implementation (unless they also want to be abstract) 3. The class containing the pure virtual function cannot be instantiated directly</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#abstract-classes","title":"Abstract Classes","text":"<p>A class with at least one pure virtual function is called an abstract class. Abstract classes:</p> <ul> <li>Cannot be instantiated directly</li> <li>Serve as interfaces that derived classes must implement</li> <li>Define a common interface for a family of classes</li> </ul> <p>Abstract classes are particularly useful in game development for creating entity hierarchies. For example, a <code>GameObject</code> abstract class might define pure virtual functions like <code>Update()</code> and <code>Render()</code> that all game objects must implement.</p> <pre><code>// Abstract class (cannot be instantiated)\nclass GameObject {\npublic:\n    virtual void Update(float deltaTime) = 0;\n    virtual void Render() = 0;\n    virtual ~GameObject() {}\n};\n\n// Concrete class (can be instantiated)\nclass Player : public GameObject {\npublic:\n    void Update(float deltaTime) override {\n        // Implementation\n    }\n\n    void Render() override {\n        // Implementation\n    }\n};\n</code></pre> <p>If a derived class doesn't implement all pure virtual functions from its base class, it remains abstract and cannot be instantiated.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#const-member-variables-and-functions","title":"Const Member Variables and Functions","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#const-member-variables","title":"Const Member Variables","text":"<p>Const member variables are variables whose values cannot be changed after initialization. They must be initialized in the constructor's initializer list, as they cannot be assigned values in the constructor body:</p> <pre><code>class CMyClass {\nprivate:\n    int m_i;\n    const char m_C;\n\npublic:\n    CMyClass()\n        : m_i(0)\n        , m_C(100)  // Const member must be initialized here\n    {\n        m_i = 10;   // This is fine\n        // m_C = 200;  // ERROR: Cannot modify const member\n    }\n};\n</code></pre> <p>Const member variables help enforce immutability within a class and catch potential errors at compile time.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#const-member-functions","title":"Const Member Functions","text":"<p>A const member function is a function that guarantees it won't modify the state of the object on which it's called. These functions are declared with the <code>const</code> keyword after the parameter list:</p> <pre><code>class CMyClass {\nprivate:\n    int m_i;\n    const char m_C;\n\npublic:\n    void SetIntData(int _Data) {\n        m_i = _Data;  // Modifies the object\n    }\n\n    // Const member function guarantees it won't modify the object\n    int GetIntData() const {\n        return m_i;\n        // m_i = 100;  // ERROR: Cannot modify member in const function\n    }\n\n    char GetCharData() const {\n        return m_C;\n    }\n};\n</code></pre> <p>Const member functions are important for: 1. Documenting and enforcing which functions don't modify the object 2. Allowing functions to be called on const objects 3. Preventing accidental modifications</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#const-pointers-to-objects","title":"Const Pointers to Objects","text":"<p>When using a const pointer to an object, only const member functions can be called on that object:</p> <pre><code>const CMyClass* pMy = &amp;c;\npMy-&gt;GetIntData();    // OK: const function can be called\n// pMy-&gt;SetIntData(100);  // ERROR: non-const function cannot be called on const object\n</code></pre> <p>This provides another layer of safety by ensuring that objects aren't modified through specific pointers.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#static-variables-and-functions","title":"Static Variables and Functions","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#static-variables-in-functions","title":"Static Variables in Functions","text":"<p>Static variables declared inside a function retain their values between function calls. They're initialized only once when the function is first called and persist for the program's lifetime:</p> <pre><code>int* StaticFunc() {\n    static int iStatic = 0;  // Initialized only once, on first function call\n    iStatic = 100;\n    return &amp;iStatic;  // Safe to return address of static variable\n}\n\nint main() {\n    int* pStatic = StaticFunc();  // iStatic becomes 100\n    *pStatic = 300;               // Modifies iStatic to 300\n    StaticFunc();                 // Returns the address of iStatic (still 300)\n}\n</code></pre> <p>Static variables in functions are stored in the data segment of memory rather than the stack, making them accessible throughout the program's lifetime.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#static-global-variables","title":"Static Global Variables","text":"<p>When a global variable is declared as static, its scope is limited to the file in which it's declared:</p> <pre><code>// In file1.cpp\nstatic int g_static = 0;  // Only accessible within file1.cpp\n\n// In file2.cpp\nstatic int g_static = 10;  // Different variable, only accessible within file2.cpp\n</code></pre> <p>This file-level encapsulation helps prevent naming conflicts between different source files.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#static-member-variables","title":"Static Member Variables","text":"<p>Static member variables belong to the class itself, not to any specific instance:</p> <pre><code>class CTestClass {\npublic:\n    static int m_StaticMember;  // Declaration only\nprivate:\n    int m_Member;\n\npublic:\n    CTestClass() : m_Member(0) {\n        m_StaticMember = 20;  // Accessible from any instance\n    }\n};\n\n// Definition required in a source file\nint CTestClass::m_StaticMember = 0;\n</code></pre> <p>Key characteristics of static member variables: 1. Only one copy exists for the entire class, shared among all instances 2. They must be defined outside the class definition (typically in a .cpp file) 3. They're not part of the object's memory layout 4. They follow the class's access control rules (private, protected, public)</p> <pre><code>int main() {\n    CTestClass inst;\n    CTestClass inst1;\n    CTestClass inst2;\n\n    inst.m_StaticMember = 10;    // All instances share the same static member\n    inst1.m_StaticMember = 20;   // Changes the value for all instances\n    inst2.m_StaticMember = 30;   // Changes the value for all instances\n\n    CTestClass::m_StaticMember = 40;  // Can access without an instance if public\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#static-member-functions","title":"Static Member Functions","text":"<p>Static member functions belong to the class itself, not to any specific instance. They can be called without creating an object:</p> <pre><code>class CTest {\nprivate:\n    static int m_Static;\n    int m_i;\n\npublic:\n    void SetData(int _Data) {\n        this-&gt;m_i = _Data;    // Can access instance members\n        m_Static = 20;        // Can access static members\n    }\n\n    // Static member function - no 'this' pointer\n    static void StaticFunc() {\n        m_Static = 100;       // Can access static members\n        // m_i = 10;          // ERROR: Cannot access instance members\n    }\n};\n\nint CTest::m_Static = 0;  // Definition required in a source file\n\nint main() {\n    CTest::StaticFunc();  // Call without creating an object\n\n    CTest t1;\n    t1.StaticFunc();      // Can also call through an instance, but discouraged\n}\n</code></pre> <p>Key characteristics of static member functions: 1. They don't have a <code>this</code> pointer 2. They cannot access non-static member variables or call non-static member functions 3. They can access static member variables, including private ones 4. They can be called without creating an instance of the class</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#static-member-functions-vs-global-functions","title":"Static Member Functions vs. Global Functions","text":"<p>Static member functions differ from global functions in several ways: 1. Static member functions are part of the class's scope and can access its private static members 2. They provide namespace functionality while maintaining the class's access control 3. They make the code more organized by grouping class-related functionality</p> <pre><code>// Global function cannot access private static members\nvoid GlobalFunc() {\n    // CTest::m_Static = 100;  // ERROR: Cannot access private member\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#visual-memory-layout","title":"Visual: Memory Layout","text":"<pre><code>Instance Variables vs. Static Variables\n--------------------------------------\n\nClass CTest {\n    static int m_Static;  // One copy in data segment\n    int m_i;             // One copy per instance\n};\n\nMemory Layout:\n-------------\nData Segment:         Heap/Stack:\n+------------+        +-----------+\n| m_Static=0 |        | Object t1 |\n+------------+        | m_i=100   |\n                      +-----------+\n                      | Object t2 |\n                      | m_i=200   |\n                      +-----------+\n                      | Object t3 |\n                      | m_i=300   |\n                      +-----------+\n\nWhen static member is modified:\nCTest::m_Static = 50;\n\nUpdated Memory:\n-------------\nData Segment:         Heap/Stack:\n+------------+        +-----------+\n| m_Static=50|        | Object t1 |\n+------------+        | m_i=100   |\n                      +-----------+\n                      | Object t2 |\n                      | m_i=200   |\n                      +-----------+\n                      | Object t3 |\n                      | m_i=300   |\n                      +-----------+\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#tricky-case-virtual-function-tables","title":"Tricky Case: Virtual Function Tables","text":"<p>One of the trickiest aspects of virtual functions is understanding how they affect object size and memory layout. Consider:</p> <pre><code>class Parent {\n    float m_P;\npublic:\n    virtual void Move();\n};\n\nclass Child : public Parent {\n    short m_S;\npublic:\n    virtual void Move() override;\n};\n</code></pre> <p>The <code>sizeof(Parent)</code> will be greater than just the size of a <code>float</code> because the compiler adds a hidden virtual function table pointer (<code>__vfptr</code>). Similarly, the size of <code>Child</code> includes the <code>Parent</code> part, the <code>short</code> member, and potentially its own virtual function information.</p> <p>When a parent class pointer points to a child object, the virtual function mechanism allows the correct overridden function to be called:</p> <pre><code>Parent* pParent = &amp;childObject;\npParent-&gt;Move();  // Calls Child::Move(), not Parent::Move()\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#common-mistakes","title":"Common Mistakes","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#forgetting-to-mark-overridden-functions-as-virtual","title":"Forgetting to Mark Overridden Functions as Virtual","text":"<p>If a base class function isn't marked as <code>virtual</code>, derived classes can still redefine it, but polymorphism won't work:</p> <pre><code>class Base {\npublic:\n    void NonVirtualFunc() { /* ... */ }  // Not virtual\n};\n\nclass Derived : public Base {\npublic:\n    void NonVirtualFunc() { /* ... */ }  // Redefines but doesn't override\n};\n\n// Later:\nBase* ptr = new Derived();\nptr-&gt;NonVirtualFunc();  // Calls Base::NonVirtualFunc(), not Derived::NonVirtualFunc()\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#not-understanding-when-objects-are-sliced","title":"Not Understanding When Objects Are Sliced","text":"<p>When a derived class object is assigned to a base class object (not a pointer or reference), the derived part is \"sliced off\":</p> <pre><code>Child childObj;\nParent parentObj = childObj;  // Object slicing: derived parts are lost\nparentObj.Move();  // Always calls Parent::Move()\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#misusing-static-member-variables","title":"Misusing Static Member Variables","text":"<p>A common mistake is treating static member variables as if they belonged to individual instances:</p> <pre><code>CTest::m_Static = 0;\nCTest t1, t2;\n\nt1.SetData(100);  // Sets m_Static to 20\nt2.SetData(200);  // Sets m_Static to 20 again\n\n// Now m_Static is 20 for ALL instances, not just t2\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between function overloading and function overriding? A: Function overloading refers to defining multiple functions with the same name but different parameters within the same scope. Function overriding happens when a derived class provides a new implementation for a virtual function that was already defined in the base class.</p> <p>Q: What happens if a derived class doesn't override all pure virtual functions from its base class? A: The derived class also becomes an abstract class and cannot be instantiated.</p> <p>Q: What is the purpose of the <code>override</code> keyword? A: The <code>override</code> keyword explicitly indicates that a function is intended to override a virtual function from a base class. It helps catch errors at compile time if the function signature doesn't match any virtual function in the base class.</p> <p>Q: What's the difference between a static member function and a global function? A: A static member function is part of a class's scope and can access the class's private static members. A global function isn't associated with any class and can only access public members.</p> <p>Q: Why must static member variables be defined outside the class definition? A: Static member variables are shared by all instances of a class and must exist even if no instances are created. The class definition only declares the variable, while the definition outside the class allocates memory for it.</p> <p>Q: What happens when a const object calls a non-const member function? A: It results in a compile error because non-const member functions don't guarantee they won't modify the object, which violates the const contract.</p> <p>Q: How do virtual functions affect the memory layout of an object? A: Classes with virtual functions contain an additional hidden pointer (<code>__vfptr</code>) that points to the virtual function table (vtable) for that class. This increases the size of the object.</p> <p>Q: What is object slicing and when does it occur? A: Object slicing occurs when a derived class object is assigned to a base class object (not a pointer or reference). Only the base class portion of the derived object is copied, while the derived class-specific members are \"sliced off.\"</p> <p>Q: What is the purpose of a pure virtual function? A: Pure virtual functions define an interface that derived classes must implement. They also make the class abstract, preventing direct instantiation.</p> <p>Q: How would you implement a singleton pattern using static members? A: A singleton can be implemented using a private static member to hold the single instance, along with a public static function to access it.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#code-demonstration","title":"Code Demonstration","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#polymorphism-in-action","title":"Polymorphism in Action","text":"<pre><code>#include &lt;iostream&gt;\n\nclass Enemy {\npublic:\n    virtual void Attack() {\n        std::cout &lt;&lt; \"Generic enemy attack!\" &lt;&lt; std::endl;\n    }\n\n    virtual void TakeDamage(int amount) {\n        std::cout &lt;&lt; \"Enemy takes \" &lt;&lt; amount &lt;&lt; \" damage\" &lt;&lt; std::endl;\n    }\n};\n\nclass Orc : public Enemy {\npublic:\n    void Attack() override {\n        std::cout &lt;&lt; \"Orc swings axe!\" &lt;&lt; std::endl;\n    }\n};\n\nclass Dragon : public Enemy {\npublic:\n    void Attack() override {\n        std::cout &lt;&lt; \"Dragon breathes fire!\" &lt;&lt; std::endl;\n    }\n\n    void TakeDamage(int amount) override {\n        std::cout &lt;&lt; \"Dragon takes \" &lt;&lt; amount/2 &lt;&lt; \" damage (50% resistance)\" &lt;&lt; std::endl;\n    }\n};\n\n// Game function that works with any Enemy type\nvoid ProcessEnemy(Enemy* enemy) {\n    enemy-&gt;Attack();\n    enemy-&gt;TakeDamage(10);\n}\n\nint main() {\n    Enemy* enemies[3];\n    enemies[0] = new Enemy();\n    enemies[1] = new Orc();\n    enemies[2] = new Dragon();\n\n    for (int i = 0; i &lt; 3; i++) {\n        ProcessEnemy(enemies[i]);\n    }\n\n    // Clean up\n    for (int i = 0; i &lt; 3; i++) {\n        delete enemies[i];\n    }\n\n    return 0;\n}\n</code></pre> <p>Output: <pre><code>Generic enemy attack!\nEnemy takes 10 damage\nOrc swings axe!\nEnemy takes 10 damage\nDragon breathes fire!\nDragon takes 5 damage (50% resistance)\n</code></pre></p> <p>This demonstrates polymorphism in action with virtual functions being dynamically bound at runtime.</p>"},{"location":"C_C%2B%2B_Basics/AR250424/#modern-c-considerations","title":"Modern C++ Considerations","text":""},{"location":"C_C%2B%2B_Basics/AR250424/#using-override-to-catch-errors","title":"Using <code>override</code> to Catch Errors","text":"<pre><code>class Base {\npublic:\n    virtual void Function(int x) { /* ... */ }\n};\n\nclass Derived : public Base {\npublic:\n    void Function(float x) override { /* ... */ }  // Compile error: doesn't override base method\n    void Function(int x) override { /* ... */ }    // Correct\n};\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#using-final-to-prevent-further-overriding","title":"Using <code>final</code> to Prevent Further Overriding","text":"<pre><code>class Base {\npublic:\n    virtual void Function() { /* ... */ }\n};\n\nclass Derived : public Base {\npublic:\n    void Function() override final { /* ... */ }  // Cannot be overridden by further derived classes\n};\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250424/#smart-pointers-and-polymorphism","title":"Smart Pointers and Polymorphism","text":"<pre><code>#include &lt;memory&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;std::unique_ptr&lt;Enemy&gt;&gt; enemies;\n\n    enemies.push_back(std::make_unique&lt;Enemy&gt;());\n    enemies.push_back(std::make_unique&lt;Orc&gt;());\n    enemies.push_back(std::make_unique&lt;Dragon&gt;());\n\n    for (const auto&amp; enemy : enemies) {\n        enemy-&gt;Attack();  // Polymorphic call\n    }\n\n    // No manual cleanup needed - unique_ptr handles deletion\n    return 0;\n}\n</code></pre> <p>Remember that a solid understanding of these C++ concepts is essential for game programming interviews. The ability to explain how polymorphism works, when to use static members, and how to properly implement const correctness demonstrates a deep understanding of the language and can set you apart as a candidate.</p>"},{"location":"C_C%2B%2B_Basics/AR250425/","title":"Singleton Design Pattern","text":""},{"location":"C_C%2B%2B_Basics/AR250425/#introduction-to-the-singleton-pattern","title":"Introduction to the Singleton Pattern","text":"<p>The Singleton design pattern is a creational pattern that restricts the instantiation of a class to a single instance. This pattern is particularly useful when exactly one object is needed to coordinate actions across a system. In game programming, Singleton patterns are often employed for manager or administrator classes that need global access but controlled instantiation.</p>"},{"location":"C_C%2B%2B_Basics/AR250425/#core-concept","title":"Core Concept","text":"<p>The primary goal of the Singleton pattern is to: - Ensure a class has only one instance - Provide a global point of access to that instance - Control when and how that instance is created</p>"},{"location":"C_C%2B%2B_Basics/AR250425/#implementation-approaches","title":"Implementation Approaches","text":"<p>There are several ways to implement the Singleton pattern in C++. Let's explore two common approaches.</p>"},{"location":"C_C%2B%2B_Basics/AR250425/#approach-1-dynamic-allocation-with-static-pointer","title":"Approach 1: Dynamic Allocation with Static Pointer","text":"<p>This approach stores a pointer to the single instance in a static member variable and dynamically allocates memory for the instance.</p>"},{"location":"C_C%2B%2B_Basics/AR250425/#key-components","title":"Key Components:","text":"<ol> <li>Private Constructor: Prevents external instantiation</li> <li>Static Member Variable: Holds the instance pointer</li> <li>Static Access Method: Returns the instance</li> <li>Destruction Method: Properly cleans up the instance</li> </ol> <p>Let's examine the implementation:</p> <pre><code>// CEngine.h\n#pragma once\n\nclass CEngine\n{\nprivate:\n    // Static member variable - stored in data area, class-specific\n    // Only accessible from static member functions\n    static CEngine* m_This;\n\nprivate:\n    int m_Engine;\n\npublic:\n    // Static member function - can be called without an object\n    // Can access the class's private members\n    static CEngine* GetEngine();\n    static void Destroy();\n\nprivate:\n    // Private constructor prevents external instantiation\n    CEngine();\n\npublic:\n    ~CEngine();\n};\n</code></pre> <pre><code>// CEngine.cpp\n#include \"CEngine.h\"\n\n// Initialize static member\nCEngine* CEngine::m_This = nullptr;\n\nCEngine::CEngine()\n    : m_Engine(0)\n{\n}\n\nCEngine::~CEngine()\n{\n}\n\nCEngine* CEngine::GetEngine()\n{    \n    if (nullptr == m_This)\n    {\n        m_This = new CEngine;\n    }\n\n    return m_This;\n}\n\nvoid CEngine::Destroy()\n{\n    if (nullptr != m_This)\n    {\n        delete m_This;\n        m_This = nullptr;\n    }    \n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250425/#usage","title":"Usage:","text":"<pre><code>// Get the singleton instance\nCEngine* pEngine = CEngine::GetEngine();\n\n// Use the instance\n// ...\n\n// Clean up when done\nCEngine::Destroy();\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250425/#approach-2-static-local-variable","title":"Approach 2: Static Local Variable","text":"<p>This approach creates the instance as a static local variable within the access method, leveraging C++'s guarantee that static local variables are initialized only once.</p> <pre><code>// CSingle.h\n#pragma once\n\nclass CSingle\n{\npublic:\n    static CSingle* GetInst();\n\nprivate:\n    CSingle();\n};\n</code></pre> <pre><code>// CSingle.cpp\n#include \"CSingle.h\"\n\nCSingle::CSingle()\n{\n}\n\nCSingle* CSingle::GetInst()\n{\n    static CSingle single;  // Static local variable stays in data area\n    return &amp;single;         // Return address of the static instance\n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250425/#usage_1","title":"Usage:","text":"<pre><code>// Get the singleton instance\nCSingle* pSingle = CSingle::GetInst();\n\n// No explicit destruction required\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250425/#memory-management-and-allocation","title":"Memory Management and Allocation","text":"<p>Understanding the memory implications of these two approaches is crucial:</p>"},{"location":"C_C%2B%2B_Basics/AR250425/#approach-1-dynamic-allocation","title":"Approach 1 (Dynamic Allocation)","text":"<ul> <li>The pointer is stored in the data area (static memory)</li> <li>The actual instance is stored in heap memory</li> <li>Requires explicit destruction to prevent memory leaks</li> <li>More flexible for controlling instance lifetime</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250425/#approach-2-static-local-variable_1","title":"Approach 2 (Static Local Variable)","text":"<ul> <li>The entire instance is stored in the data area (static memory)</li> <li>No dynamic memory allocation needed</li> <li>Automatic cleanup at program termination</li> <li>Instance persists for the entire program duration</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250425/#common-issues-and-considerations","title":"Common Issues and Considerations","text":""},{"location":"C_C%2B%2B_Basics/AR250425/#1-memory-efficiency","title":"1. Memory Efficiency","text":"<p>When implementing a Singleton for a class with substantial data members, consider: - Approach 1: Stores only an 8-byte pointer in the data area - Approach 2: Stores the entire object in the data area, potentially less efficient</p>"},{"location":"C_C%2B%2B_Basics/AR250425/#2-lifetime-control","title":"2. Lifetime Control","text":"<ul> <li>Approach 1: Offers explicit control through the <code>Destroy()</code> method</li> <li>Approach 2: Instance exists until program termination, cannot be manually destroyed</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250425/#3-thread-safety","title":"3. Thread Safety","text":"<p>Neither approach shown is thread-safe. For multi-threaded environments, additional synchronization would be needed.</p>"},{"location":"C_C%2B%2B_Basics/AR250425/#4-memory-leak-prevention","title":"4. Memory Leak Prevention","text":"<p>With the dynamic allocation approach, forgetting to call <code>Destroy()</code> will cause memory leaks. The destruction process needs careful attention:</p> <pre><code>void CEngine::Destroy()\n{\n    if (nullptr != m_This)\n    {\n        delete m_This;    // Delete the dynamically allocated object\n        m_This = nullptr; // Reset the pointer to prevent dangling pointer issues\n    }    \n}\n</code></pre>"},{"location":"C_C%2B%2B_Basics/AR250425/#best-practices-and-considerations","title":"Best Practices and Considerations","text":""},{"location":"C_C%2B%2B_Basics/AR250425/#when-to-use-singleton","title":"When to Use Singleton","text":"<ul> <li>When exactly one instance of a class is required</li> <li>When the instance needs controlled access</li> <li>For manager or administrator classes in a game engine</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250425/#potential-drawbacks","title":"Potential Drawbacks","text":"<ul> <li>Can make code testing more difficult</li> <li>Creates global state, which may lead to hidden dependencies</li> <li>May cause performance issues due to lack of memory flexibility</li> <li>Can accumulate unused data in long-running programs</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250425/#modern-c-alternatives","title":"Modern C++ Alternatives","text":"<ul> <li>Consider using dependency injection instead of Singletons</li> <li>Use static methods without enforcing the Singleton pattern when appropriate</li> <li>Leverage smart pointers for safer memory management</li> </ul>"},{"location":"C_C%2B%2B_Basics/AR250425/#interview-questions-on-singleton-pattern","title":"Interview Questions on Singleton Pattern","text":"<ol> <li> <p>What is the Singleton design pattern and when would you use it in game development?</p> </li> <li> <p>Compare and contrast the two main approaches to implementing the Singleton pattern.</p> </li> <li> <p>How would you make a Singleton pattern thread-safe?</p> </li> <li> <p>What are the potential drawbacks of using the Singleton pattern?</p> </li> <li> <p>How would you modify the provided implementations to be more memory efficient or safer?</p> </li> </ol>"},{"location":"C_C%2B%2B_Basics/AR250425/#conclusion","title":"Conclusion","text":"<p>The Singleton pattern, while useful in specific scenarios like manager classes in game engines, comes with trade-offs regarding memory management, flexibility, and code maintainability. Understanding these trade-offs is crucial for effective implementation and for determining when this pattern is appropriate for your specific use case.</p> <p>When preparing for C++ game programming interviews, be ready to discuss not just how to implement the Singleton pattern, but also when it's appropriate to use it and what alternatives might be better in certain scenarios. </p> <p>Windows only structure </p> <p>4 instances input  Windows disadvantages too old From Windows XP </p> <p>Windwows failed to get smartphone market </p> <p>MSFT Windows had unnecessary features  PC OS directly inside the smartphone so not working on mobile phone  iOS and Andriod OS rebuilt the entire OS appropriate to phone </p> <p>Still let old Windows program to work still currently in Windows XP or even before </p> <p>get 4 instances, althouth it is not used right now lol </p> <p>// SAL , comment languages  does nOT affect code but exist for explanation  In HINSTANCE hInstance, // In is comment without meaning  opt .. unnecessary instance  Out // return value existing instance  InOut // Both input has meaning and o;utput is returned _</p> <p>For isntance </p> <p>void Pow(int* Input, int _Pow) { }</p> <p>int Data = 2;  Pow(&amp;Data, 16); // Return 2^16 // InOut sample usage as SAL  void Pow (InOut int Input, int _Pow) {     int Result = 1;     for (int i = 0; i &lt; Pow; i++)     {         Result = _Input;     }     _Input = Result; }</p> <p>Windows Main Function  Purple characters are mostly macros  preoprocessor will replace before compiler </p>"},{"location":"C_C%2B%2B_Basics/AR250425/#define-int-int-macros","title":"define INT int // Macros","text":"<p>Unreferenced parameter macro analysis </p>"},{"location":"C_C%2B%2B_Basics/AR250425/#define-unreferenced_parameterp-p-macro","title":"define UNREFERENCED_PARAMETER(P) (P) // Macro","text":"<p>UNREFERENCED_PARAMETER(hPrevInstance); // Macro will be converted to  (hPrevInstance); // Macro, so basically meaningless code  So compiler , by optmization, will automatically remove these unnecessary code  UNREFERENCED_PARAMETER // not used parameter declared </p> <p>HINSTANCE HINSTANCE LPWSTR int  Green color characters are redefined types by typedef  Click with F12 then figure out what it is.  Also macro instance  Search by F12 if input then change data </p>"},{"location":"C_C%2B%2B_Basics/AR250425/#define-my_macrop-struct-pstruct","title":"#define MY_MACRO(p) struct p##Struct {};","text":"<p>MY_MACRO(MY); MYStruct st;  MYStruct(st);  So it can be defined as </p> <p>struct MyStruct {}; // Like this </p> <p>HINSTANCE__; // struct instance generated  typedef HINSTANCE__ * HINSTANCE; // typedef instance pointer value </p> <p>DECLARE_HANDLE(MyDataType);  MyDataType__;  typedef MyDataType__ MyDataType; // typedef instance pointer value</p> <p>so why doing this ..?  Handle datatype ?  Kernel object  // OS  Core functions of the OS </p> <p>All seems same but codes will be different inside per OS  Android iOS all converted codes should be necessary  That is why game engine is better due to platform flexibility  Kernel object is core function of OS, so source code is hidden, ID value handle </p> <p>windows generated pointer memory whatever ... these OS only provide functions  Return the id value of the window. handle datatype HWND pointer type is returned </p> <p>float pFloat;  int pInt = pFloat; // Error </p> <p>Simliarly  HWD hWnd = 0; // pointer value pointing struct HWD__ HBITMAP hBit = hWnd; // pointer value pointing struct HBITMAP__</p> <p>Compatibility Issue pointer function is applied  If all id are defined as UINT then the user will be extremely confused about ID type  so ID type is defined as different type while not revealing kernel objects  so HPEN HBRUSH HDC HWND HBITMAP HMODULE are used </p> <p>Kernel object is not revealing specific memory address or structure but provided as id value  by each type of kernel object id value confusion shuold be prevented  so id value offers different types per each kernel object </p> <p>simple interger type management by ID will result in kernel object confusion with different types  so different tpye pointers are not compatible so name is redefine dand used </p> <p>Each different handle not compatible  HWND hWnd - 0;  HBitMAP hBit = hWnd; // Error  Each differnent pointer not compatible </p> <p>float pFloat;  int pInt = pFloat; // Error </p> <p>Kernel objects </p>"},{"location":"Compilers/CMP01/","title":"Compiler Setup","text":"<p>Comparison between <code>.vcxproj</code> and <code>CMakeLists.txt</code> to manage project </p>"},{"location":"Compilers/CMP01/#vs2022-vcxproj-setup","title":"VS2022 <code>.vcxproj</code> setup","text":""},{"location":"Compilers/CMP01/#cmake-setup","title":"CMake Setup","text":"<p>CMakeLists.txt </p> <p>\ud504\ub85c\uc81d\ud2b8 \uc124\uc815 \uc2dc \ud658\uacbd\uacfc \ucef4\ud30c\uc77c\ub7ec \uc124\uc815\uc744 \ub9e4\uc6b0 \uc790\uc138\ud788 \uae30\ub85d\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.  \ud2b9\ud788 CMake\ub97c \uc774\uc6a9\ud574 \ub300\uaddc\ubaa8 \ud504\ub85c\uc81d\ud2b8\ub97c <code>msvc</code> \ucef4\ud30c\uc77c\ub7ec \uae30\ubc18\uc73c\ub85c \ub514\ubc84\uae45\ud560 \uacbd\uc6b0 \ub9e4\uc6b0 \uc911\uc694\ud569\ub2c8\ub2e4. </p> <p>Windows \ubc84\uc804  Visual Studio \ubc84\uc804  Visual Studio SDK \ubc84\uc804 (\uc708\ub3c4\uc6b0\uc640 \ud638\ud658\uc131\uc774 \ub9de\uc544\uc57c <code>.dll</code>) \ud30c\uc77c \uc77d\uae30 \uac00\ub2a5 </p> <p>\uc608\ub97c \ub4e4\uc5b4 Windows Version 10\uc5d0 SDK\uac00 11\uc774 \uc124\uce58\ub418\uc5b4 \uc788\uc73c\uba74 <code>.dll</code> \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubcfc \uc218 \uc5c6\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. </p> <p>MSVC \ucef4\ud30c\uc77c\ub7ec  cl.exe </p> <p>MSVC \ub9c1\ucee4  link.exe </p> <p>\uc5b8\uc5b4 \ubcc0\uacbd </p> <p>Tools (\ub3c4\uad6c) -&gt; Options (\uc635\uc158) </p> <p>\ud658\uacbd -&gt; \uad6d\uac00\ubcc4 \uc124\uc815 </p> <p>International Settings (\uad6d\uc81c \uc124\uc815)</p>"},{"location":"Compilers/CMP01/#_1","title":"\ud504\ub85c\uc81d\ud2b8 \uc124\uc815 / \ucef4\ud30c\uc77c \uc2dc \ud544\uc218 \ud655\uc778","text":"<p>\ub514\ubc84\uadf8 \ubaa8\ub4dc / \ub9b4\ub9ac\uc988 \ubaa8\ub4dc / \ucee4\uc2a4\ud140 \ubaa8\ub4dc </p> <p>\uad6c\uc131 \uc18d\uc131 / \uc77c\ubc18 </p> <p>\uad6c\uc131 \uc18d\uc131 / \uace0\uae09 </p> <p>\uad6c\uc131 \uc18d\uc131 -&gt; C / C++ -&gt; \ucd5c\uc801\ud654 </p> <p>\ucd5c\uc801\ud654 \uc0ac\uc6a9 \uc548 \ud568 /Od </p> <p>\ucd5c\uc801\ud654 \ucef4\ud30c\uc77c\uc758 \uc885\ub958 </p> <p>/Od </p> <p>/O1 </p> <p>/O2 </p>"},{"location":"Compilers/CMP01/#vs2022-cc-optimization","title":"VS2022 C/C++ Optimization","text":"<p>Compiler Optimization </p> <ul> <li>Custom </li> <li><code>/Od</code> Disabled </li> <li><code>/O1</code> Maximum Optimization (Favor Size)</li> <li><code>/O2</code> Maximum Optimization (Favor Speed)</li> <li><code>/Ox</code> Optimization (Favor Speed) </li> </ul> <p>Inline Function Expansion </p> <ul> <li>Default </li> <li><code>/Ob0</code> Disabled </li> <li><code>/Ob1</code> Only __inline </li> <li><code>/Ob2</code> Any Suitable </li> </ul> <p>Microsoft Multi threading safe ANSI standard library  C/C++ -&gt; Code Generation -&gt; Runtime Library </p> <ul> <li><code>/MDd</code> Multi-threaded Debug DLL (/MDd) </li> <li><code>/MD</code> Multi-threaded Release DLL (/MD)</li> </ul>"},{"location":"Compilers/CMP01/#default-debuggable-release-mode-for-server-programming","title":"Default Debuggable Release Mode for Server Programming","text":"<ul> <li>Release Mode <code>configurationType\": \"Release</code></li> <li>Arguments <code>\"-DCMAKE_CXX_FLAGS_RELEASE=\\\"/Od /Ob1 /MD /Zi\\\"</code> </li> <li>Debugging Enabled <code>DCMAKE_EXE_LINKER_FLAGS_RELEASE=\\\"/DEBUG\\\"</code></li> <li>Compiler Optimization <code>/Od</code> Disabled </li> <li>Inline Function Expansion <code>/Ob1</code> Only __inline, only <code>inline</code> declared functions are inlined  </li> </ul>"},{"location":"Compilers/CMP01/#debug-mode-to-catch","title":"Debug Mode to catch","text":"<p>MSVC Warning C4715 : Not all return route returns value.  If intended to change this warning as error, setup </p> <ul> <li><code>WX</code> Compiler Plag, set Every Message into ERROR </li> </ul> <p>Or, set some specific warning only as as Error like </p> <ul> <li><code>/we4715</code> </li> </ul> <p>Inside CMake, Compiler Setup is possible by </p> <p>```cmake add_compile_options(/we4715)   # MSVC</p>"},{"location":"Compilers/CMP01/#or-for-all-warnings-as-errors","title":"or for all warnings as errors","text":"<p>add_compile_options(/WX)  ``` </p> <p>Release Mode  Turn off compiler optimizations for Release mode <code>inline</code> function expansion </p> <ul> <li>/Od : Disable optimizations</li> <li>/Ob1 : Expand only specified <code>inline</code> functions</li> <li>/Zi : Include debugging information</li> <li>/DNDEBUG : Define <code>NDEBUG</code> for Release mode</li> <li>/MD : Use multi-threaded DLL C runtime </li> </ul> <p>\ubaa9\ud45c </p> <ul> <li>\ub9b4\ub9ac\uc988 \ubaa8\ub4dc \uae30\ubcf8 </li> <li>\ucd5c\uc801\ud654 \ucef4\ud30c\uc77c \ub044\uae30 </li> <li>\ub514\ubc84\uadf8 \ubaa8\ub4dc \ucef4\ud30c\uc77c\ub85c \uac04\ud5d0\uc801\uc73c\ub85c \uc5d0\ub7ec \ud30c\uc545 </li> </ul> <p>vcxproj \uae30\ubc18 \uacfc\uac70 \uc124\uc815 </p> <p>VS2022 &gt; \uc18d\uc131 &gt; C/C++ &gt; \ucd5c\uc801\ud654  inline \ud568\uc218 \ucd5c\uc801\ud654 \uc0ac\uc6a9 / \uc0ac\uc6a9 \uc548 \ud568(/Od) \ub4f1\ub4f1  inline \ud568\uc218 \ud655\uc7a5 \uc5ec\uae30\uc11c  _inline \ub9cc \ud655\uc7a5 \uc774\ub7ec\uba74 \uba85\uc2dc\ud55c \uac83\ub9cc inline \ucc98\ub9ac\ud558\ub3c4\ub85d \uac00\ub2a5 __inline\ub9cc \ud655\uc7a5 (/Ob1) </p> <p>\ucd5c\uc801\ud654 \ucef4\ud30c\uc77c\ub7ec \ub048 \uc0c1\ud669\uc5d0\uc11c inline \ub9cc \ud655\uc7a5  C++ STL\uc740 inline \ucc98\ub9ac\uac00 \uc774\ubbf8 \ub2e4 \ub418\uc5b4 \uc788\uae30 \ub54c\ubb38 </p> <p>\uc124\uc815 \uae30\ubcf8 </p> <ul> <li>Release \ubaa8\ub4dc\uc5d0\uc11c  </li> <li>\ucd5c\uc801\ud654 \ucef4\ud30c\uc77c\ub7ec \ub044\uace0 </li> <li> <p>inline \ud568\uc218 \ud655\uc7a5 </p> </li> <li> <p>\uc774\uac78 CMakeList.txt\uc5d0 \uccb4\uacc4\uc801\uc73c\ub85c \uc801\uc6a9\ud574 \ubcf4\uae30 </p> </li> </ul>"},{"location":"Compilers/CMP01/#_2","title":"\uacf5\ud1b5 \ub514\ubc84\uadf8/\ub9b4\ub9ac\uc988 \uc124\uc815","text":"<p>\ucef4\ud30c\uc77c\ub7ec\uac00 MSVC\uc77c \uacbd\uc6b0</p> <p>if(MSVC)   - /Od : \ucd5c\uc801\ud654 \ube44\ud65c\uc131\ud654   - /Ob1 : \uba85\uc2dc\ub41c inline\ub9cc \ud655\uc7a5   - /Zi : \ub514\ubc84\uae45 \uc815\ubcf4 \ud3ec\ud568   - /DNDEBUG : Release \ubaa8\ub4dc \ud50c\ub798\uadf8   - /MD : \uba40\ud2f0\uc2a4\ub808\ub4dc DLL C \ub7f0\ud0c0\uc784 \uc0ac\uc6a9   set(CMAKE_CXX_FLAGS_RELEASE \"/Od /Ob1 /Zi /DNDEBUG /MD\") endif()</p>"},{"location":"Compilers/CMP02/","title":"Compiler Knowledge for Game Developers","text":"<p>This guide summarizes essential compiler-related knowledge for aspiring video game developers. While deep compiler theory isn't necessary for game development, understanding how your code is built, optimized, and run is absolutely crucial for building efficient, cross-platform games.</p>"},{"location":"Compilers/CMP02/#1-c-compilation-pipeline","title":"1. C++ Compilation Pipeline","text":"<p>Understanding how your C++ code turns into an executable is foundational.</p>"},{"location":"Compilers/CMP02/#compilation-steps","title":"Compilation Steps:","text":"<ol> <li>Preprocessing (<code>.cpp</code> -&gt; <code>.i</code>):</li> <li>Expands macros, includes headers.</li> <li> <p>Handles <code>#define</code>, <code>#include</code>, and conditional compilation.</p> </li> <li> <p>Compilation (<code>.i</code> -&gt; <code>.s</code>):</p> </li> <li>Translates preprocessed code into assembly.</li> <li> <p>Performs syntax and type checking.</p> </li> <li> <p>Assembly (<code>.s</code> -&gt; <code>.o</code>):</p> </li> <li> <p>Converts assembly to machine code in an object file.</p> </li> <li> <p>Linking (<code>.o</code> -&gt; <code>.exe</code>):</p> </li> <li>Combines object files and libraries into an executable.</li> <li>Resolves symbols and sets up the entry point.</li> </ol>"},{"location":"Compilers/CMP02/#2-key-concepts-for-game-developers","title":"2. Key Concepts for Game Developers","text":""},{"location":"Compilers/CMP02/#must-know","title":"Must-Know:","text":"<ul> <li>C++ syntax and build systems (Make, CMake, Visual Studio projects).</li> <li>Common linker errors and how to resolve them.</li> <li>Compilation units and header management.</li> </ul>"},{"location":"Compilers/CMP02/#very-useful","title":"Very Useful:","text":"<ul> <li>Compiler optimization flags: <code>-O0</code>, <code>-O2</code>, <code>-O3</code>, <code>-g</code>, <code>-Wall</code>.</li> <li>Debug vs Release build differences.</li> <li>Profiling and debugging tools: GDB, Visual Studio Debugger, Valgrind, perf.</li> </ul>"},{"location":"Compilers/CMP02/#optional-deeper-knowledge","title":"Optional (Deeper Knowledge):","text":"<ul> <li>Understanding intermediate representations (GIMPLE, LLVM IR).</li> <li>Assembly and disassembly for performance tuning.</li> <li>Differences between compilers (GCC, Clang, MSVC).</li> </ul>"},{"location":"Compilers/CMP02/#3-common-c-compilers-and-toolchains","title":"3. Common C++ Compilers and Toolchains","text":""},{"location":"Compilers/CMP02/#gcc-gnu-compiler-collection","title":"GCC (GNU Compiler Collection)","text":"<ul> <li>Open-source and cross-platform.</li> <li>Common on Linux and embedded systems.</li> </ul>"},{"location":"Compilers/CMP02/#clang","title":"Clang","text":"<ul> <li>LLVM-based, modern, and modular.</li> <li>Very fast with better error messages.</li> <li>Often used with Apple platforms and modern C++ tooling.</li> </ul>"},{"location":"Compilers/CMP02/#msvc-microsoft-visual-c","title":"MSVC (Microsoft Visual C++)","text":"<ul> <li>The default compiler in Visual Studio on Windows.</li> <li>Deep integration with the Windows ecosystem.</li> </ul>"},{"location":"Compilers/CMP02/#mingw-mingw-w64","title":"MinGW / MinGW-w64","text":"<ul> <li>\"Minimalist GNU for Windows\": A Windows port of GCC.</li> <li>Allows you to use <code>g++</code> on Windows and build Windows executables.</li> <li>Great for cross-platform development or when avoiding MSVC.</li> </ul>"},{"location":"Compilers/CMP02/#key-differences-mingw-vs-msvc","title":"Key Differences (MinGW vs MSVC):","text":"<ul> <li>MSVC: Tightly coupled with Visual Studio IDE, uses Microsoft's C++ runtime, and generates PE files with native Windows linkage.</li> <li>MinGW: Uses GCC toolchain, can produce smaller binaries, and follows more POSIX-like behavior.</li> <li>Use Case: MSVC for deep Windows integration (e.g., DirectX, UWP). MinGW for portable or cross-compiled apps.</li> </ul>"},{"location":"Compilers/CMP02/#4-useful-tools","title":"4. Useful Tools","text":"<ul> <li>GCC/g++: Common open-source compiler for Linux.</li> <li>MSVC: Visual Studio's compiler for Windows.</li> <li>Clang: Modern, fast, and modular compiler.</li> <li>CMake: Cross-platform build system.</li> <li>Valgrind, perf: Profiling and debugging tools for Linux.</li> <li>GDB: GNU Debugger for C++.</li> </ul>"},{"location":"Compilers/CMP02/#5-summary-what-to-learn-and-why","title":"5. Summary: What to Learn (and Why)","text":""},{"location":"Compilers/CMP02/#focus-on","title":"Focus On:","text":"<ul> <li>C++ compilation steps and how to build with <code>g++</code>, <code>clang</code>, or Visual Studio.</li> <li>How to use and understand build systems (Make, CMake, etc.).</li> <li>How to debug builds, fix linker errors, and use compiler flags.</li> <li>Tools for profiling and memory checking.</li> </ul>"},{"location":"Compilers/CMP02/#optional-but-beneficial","title":"Optional but Beneficial:","text":"<ul> <li>Disassembling <code>.o</code> files for optimization.</li> <li>Intermediate compiler layers if you're into deep systems or engine development.</li> </ul> <p>Game developers do not need to master compiler internals, but understanding how your code is turned into a game-ready executable can give you a major edge in performance, debugging, and cross-platform development.</p>"},{"location":"Computer_Network/NW0503/","title":"Macroscopic View of Networks","text":""},{"location":"Computer_Network/NW0503/#11-basic-network-structure","title":"1.1 Basic Network Structure","text":"<p>Networks are structured as graphs composed of: - Nodes (vertices): Desktop computers, servers, smartphones, tablets, IoT devices, etc. - Edges (links): Connections between nodes</p> <pre><code>    Visual: Network as a Graph\n\n    [Desktop] --------- [Router] --------- [Server]\n        |                  |                  |\n        |                  |                  |\n    [Laptop] ---------- [Switch] --------- [Printer]\n                          |\n                          |\n                      [Smartphone]\n</code></pre> <p>Nodes can be categorized as: - Edge nodes: End devices (computers, smartphones, etc.) - Intermediate nodes: Network devices (routers, switches, etc.)</p>"},{"location":"Computer_Network/NW0503/#12-network-components","title":"1.2 Network Components","text":""},{"location":"Computer_Network/NW0503/#hosts","title":"Hosts","text":"<ul> <li>End devices that generate or consume network traffic</li> <li>Can be categorized as:</li> </ul> <pre><code>    Visual: Client-Server Interaction\n\n    Client                       Server\n    ------                       ------\n    [Browser]                    [Web Server]\n        |                            |\n        |------ Request: GET -------&gt;|\n        |                            |\n        |&lt;---- Response: HTML ------ |\n</code></pre> <ul> <li>Clients: Requesting hosts (e.g., web browsers requesting webpages)</li> <li>Servers: Responding hosts (e.g., web servers providing content)</li> <li>Roles are not exclusive:</li> <li>A device can act as both client and server</li> <li>Function depends on the current operation</li> </ul>"},{"location":"Computer_Network/NW0503/#network-devices","title":"Network Devices","text":"<ul> <li>Intermediate nodes that facilitate data transfer</li> <li>Examples: Ethernet hubs, switches, routers, Wi-Fi access points</li> <li>Primary function is to forward data through the network</li> </ul> <pre><code>    Visual: Network Devices\n\n    [Host A] --- [Switch] --- [Host B]\n                    |\n                    |\n    [Host C] --- [Router] --- [Internet]\n                    |\n                    |\n    [Host D] --- [WiFi AP] --- [Mobile]\n</code></pre>"},{"location":"Computer_Network/NW0503/#edges-links","title":"Edges (Links)","text":"<ul> <li>Telecommunication methods connecting nodes</li> <li>Can be wired (Ethernet cables) or wireless (Wi-Fi)</li> <li>Link characteristics affect network performance</li> </ul>"},{"location":"Computer_Network/NW0503/#messages","title":"Messages","text":"<ul> <li>Information transferred between nodes through edges</li> <li>Examples: Webpages, files, emails, etc.</li> </ul>"},{"location":"Computer_Network/NW0503/#13-network-classifications","title":"1.3 Network Classifications","text":""},{"location":"Computer_Network/NW0503/#by-geographic-scope","title":"By Geographic Scope","text":"<pre><code>    Visual: Network Types by Scope\n\n    +----------+              +----------+\n    |   LAN    |              |   LAN    |\n    | (Office) |              |  (Home)  |\n    +----------+              +----------+\n         |                         |\n         |                         |\n    +----------+              +----------+\n    |   MAN    |--------------|   WAN    |--------------- Internet\n    |  (City)  |              | (Global) |\n    +----------+              +----------+\n         |\n         |\n    +----------+\n    |   CAN    |\n    | (Campus) |\n    +----------+\n</code></pre> <ul> <li>LAN (Local Area Network): Limited geographical area (home, office)</li> <li>CAN (Campus Area Network): Several buildings (school, company campus)</li> <li>MAN (Metropolitan Area Network): City or metropolitan area</li> <li>WAN (Wide Area Network): Broad geographical coverage</li> </ul> <p>Note: Internet is a WAN connecting multiple LANs</p>"},{"location":"Computer_Network/NW0503/#by-message-exchange-method","title":"By Message Exchange Method","text":"<ol> <li>Circuit-Switched Networks</li> </ol> <pre><code>    Visual: Circuit Switching\n\n    [A] ------- [B] ------- [C]\n     |           |           |\n     |           |           |\n    [D] ------- [E] ------- [F]\n\n    Dedicated path A\u2192B\u2192C is reserved for the entire session\n    Path D\u2192E\u2192F cannot use B\u2192C even if available\n</code></pre> <ul> <li>Establishes dedicated connection before data transfer</li> <li>Route is reserved for the entire communication session</li> <li>Provides stable data transfer rates</li> <li> <p>Less efficient use of network resources</p> </li> <li> <p>Packet-Switched Networks</p> </li> </ul> <pre><code>    Visual: Packet Switching\n\n    [A] ------- [B] ------- [C]\n     |           |           |\n     |           |           |\n    [D] ------- [E] ------- [F]\n\n    Packet 1: A\u2192B\u2192C\n    Packet 2: A\u2192D\u2192E\u2192F\u2192C\n    Packet 3: A\u2192B\u2192E\u2192C\n</code></pre> <ul> <li>Divides messages into smaller units called packets</li> <li>Each packet can take a different path to the destination</li> <li>More efficient use of network resources</li> <li>Modern internet uses packet switching</li> </ul>"},{"location":"Computer_Network/NW0503/#14-packet-structure","title":"1.4 Packet Structure","text":"<pre><code>    Visual: Packet Structure\n\n    +--------+-------------------+--------+\n    | Header |      Payload      | Trailer|\n    +--------+-------------------+--------+\n       |            |                |\n       |            |                |\n    Control      Actual           Error\n    Info         Data            Checking\n    (Address)\n</code></pre> <p>Packets are similar to parcels: - Payload: Actual data being transferred - Header/Trailer: Control information (addressing, error-checking)</p>"},{"location":"Computer_Network/NW0503/#headers-include","title":"Headers include:","text":"<ul> <li>Addressing information (IP address, MAC address)</li> <li>Identifies sender and receiver</li> <li>Routing information</li> </ul>"},{"location":"Computer_Network/NW0503/#15-transmission-methods","title":"1.5 Transmission Methods","text":"<pre><code>    Visual: Transmission Methods\n\n    Unicast:        Broadcast:\n    [S] \u2192 [R]       [S] \u2192 [R1]\n                     \u2193    \u2193\n                    [R2] [R3]\n\n    Multicast:      Anycast:\n    [S] \u2192 [R1]      [S] \u2192 [Nearest R]\n     \u2193     \n    [R2]   [R3]\n</code></pre> <ul> <li>Unicast: One sender to one receiver (most common)</li> <li>Broadcast: One sender to all hosts in a network</li> <li>Multicast: One sender to a specific group of hosts</li> <li>Anycast: One sender to the nearest host in a specific group</li> </ul>"},{"location":"Computer_Network/NW0504/","title":"Microscopic View of Networks","text":""},{"location":"Computer_Network/NW0504/#21-network-protocols","title":"2.1 Network Protocols","text":"<pre><code>    Visual: Protocol Communication\n\n    Computer A                 Computer B\n    ----------                 ----------\n    Application                Application\n        \u2193                          \u2191\n    Protocol                    Protocol\n    Processing                  Processing\n        \u2193                          \u2191\n    Network                     Network\n    Interface                   Interface\n        \u2193                          \u2191\n        -----------------------------\n                    Network\n</code></pre> <p>Protocols are rules and methods for exchanging information: - Define how data is formatted, transmitted, and received - Similar to language used between parcel senders and receivers - Modern networks use multiple protocols simultaneously - Each protocol has specific purposes and characteristics</p> <p>Examples: - IP: Routes packets to destinations - ARP: Maps IP addresses to MAC addresses - HTTP/HTTPS: Web communications (HTTPS is more secure) - TCP/UDP: Transport layer protocols (TCP is more reliable, UDP is faster)</p>"},{"location":"Computer_Network/NW0504/#22-network-reference-models","title":"2.2 Network Reference Models","text":""},{"location":"Computer_Network/NW0504/#osi-model-7-layers","title":"OSI Model (7 Layers)","text":"<pre><code>    Visual: OSI Model Layers\n\n    +-------------------------+\n    | 7. Application Layer    | &lt;- User interface, access to network services\n    +-------------------------+\n    | 6. Presentation Layer   | &lt;- Data formatting, encryption\n    +-------------------------+\n    | 5. Session Layer        | &lt;- Session establishment, maintenance\n    +-------------------------+\n    | 4. Transport Layer      | &lt;- End-to-end connections, reliability\n    +-------------------------+\n    | 3. Network Layer        | &lt;- Routing, IP addressing\n    +-------------------------+\n    | 2. Data Link Layer      | &lt;- Physical addressing, access to media\n    +-------------------------+\n    | 1. Physical Layer       | &lt;- Bit transmission, physical connections\n    +-------------------------+\n</code></pre> <ol> <li>Physical Layer: Transmits raw bit streams (0s and 1s)</li> <li>Data Link Layer: Node-to-node data transfer, error detection, MAC addressing</li> <li>Network Layer: Routing between networks, IP addressing</li> <li>Transport Layer: End-to-end communication, reliability, ports</li> <li>Session Layer: Manages connection sessions between applications</li> <li>Presentation Layer: Data formatting, encryption, compression</li> <li>Application Layer: User-facing network services</li> </ol>"},{"location":"Computer_Network/NW0504/#tcpip-model-4-layers","title":"TCP/IP Model (4 Layers)","text":"<pre><code>    Visual: TCP/IP Model vs OSI Model\n\n    +-------------------------+    +-------------------------+\n    | Application Layer       |    | 7. Application Layer    |\n    |                         |    | 6. Presentation Layer   |\n    |                         |    | 5. Session Layer        |\n    +-------------------------+    +-------------------------+\n    | Transport Layer         |    | 4. Transport Layer      |\n    +-------------------------+    +-------------------------+\n    | Internet Layer          |    | 3. Network Layer        |\n    +-------------------------+    +-------------------------+\n    | Network Access Layer    |    | 2. Data Link Layer      |\n    |                         |    | 1. Physical Layer       |\n    +-------------------------+    +-------------------------+\n          TCP/IP Model                   OSI Model\n</code></pre> <ol> <li>Network Access Layer: Similar to OSI's Data Link Layer</li> <li>Internet Layer: Similar to OSI's Network Layer</li> <li>Transport Layer: Similar to OSI's Transport Layer</li> <li>Application Layer: Combines OSI's Session, Presentation, and Application Layers</li> </ol> <p>Note: The Extended TCP/IP Model divides the Network Access Layer into Physical and Data Link Layers</p>"},{"location":"Computer_Network/NW0504/#23-encapsulation-and-decapsulation","title":"2.3 Encapsulation and Decapsulation","text":""},{"location":"Computer_Network/NW0504/#encapsulation-sending-process","title":"Encapsulation (Sending Process)","text":"<pre><code>Application Layer                     +--------+\n                                      |  Data  |\n                                      +--------+\n                                        \u2193\nTransport Layer                   +------------+\n                                  |Hdr|  Data  |\n                                  +------------+\n                                        \u2193\nNetwork Layer                 +----------------+\n                              |IP |Hdr|  Data  |\n                              +----------------+\n                                        \u2193\nData Link Layer           +-----------------------------+\n                          |MAC|IP |Hdr|  Data  |   FCS    |\n                          +-----------------------------+\n                                        \u2193\nPhysical Layer            0101010101010101010101010101010101\n</code></pre> <ul> <li>Data moves from highest layer to lowest layer</li> <li>Each layer adds its header (and sometimes trailer) to the data</li> <li>Upper layer's PDU becomes the payload for the current layer</li> <li>Similar to nesting boxes within boxes</li> </ul>"},{"location":"Computer_Network/NW0504/#decapsulation-receiving-process","title":"Decapsulation (Receiving Process)","text":"<pre><code>Application Layer                     +--------+\n                                      |  Data  |\n                                      +--------+\n                                        \u2191\nTransport Layer                   +------------+\n                                  |Hdr|  Data  |\n                                  +------------+\n                                        \u2191\nNetwork Layer                 +----------------+\n                              |IP |Hdr|  Data  |\n                              +----------------+\n                                        \u2191\nData Link Layer           +-----------------------------+\n                          |MAC|IP |Hdr|  Data  |   FCS    |\n                          +-----------------------------+\n                                        \u2191\nPhysical Layer            0101010101010101010101010101010101\n</code></pre> <ul> <li>Data moves from lowest layer to highest layer</li> <li>Each layer removes its header/trailer and passes the payload up</li> <li>Process continues until the original data reaches the application</li> </ul>"},{"location":"Computer_Network/NW0504/#24-protocol-data-units-pdus","title":"2.4 Protocol Data Units (PDUs)","text":"<pre><code>    Visual: Protocol Data Units\n\n    OSI Layer            PDU\n    ---------            ---\n    Application  }\n    Presentation } ---&gt; Data\n    Session      }\n\n    Transport    -----&gt; Segment/Datagram\n\n    Network      -----&gt; Packet\n\n    Data Link    -----&gt; Frame\n\n    Physical     -----&gt; Bit\n</code></pre> <p>Each layer handles data in specific units: - Application/Presentation/Session: Data - Transport: Segments (TCP) or Datagrams (UDP) - Network: Packets - Data Link: Frames - Physical: Bits</p>"},{"location":"Computer_Network/NW0504/#25-practical-considerations","title":"2.5 Practical Considerations","text":"<ul> <li>Network reference models are theoretical frameworks</li> <li>Real protocols and devices don't always fit perfectly into specific layers</li> <li>For example, ARP is sometimes called a \"2.5 layer protocol\"</li> <li>Routers primarily operate at the Network layer but interact with other layers</li> <li>For software engineers, understanding protocols and devices is more important than memorizing models</li> <li>OSI and TCP/IP models are valuable for exams and interviews but may be less practical in industry</li> </ul>"},{"location":"Computer_Network/NW0724/","title":"Physical Layer &amp; Data Link Layer","text":"<p>Most modern LAN Cable follow Ethernet </p> <p>Physicsal Layer Ethernet Tech (Telecommunuication Method)</p> <p>Data Link Layer Ethernet Tech (Ethernet Frame Format)</p> <p>IEEE 802.3 Global Standard  Coollection of Ethernet based several Standard  or those working group makinag these ethernet related standards  ieee802.org </p> <p>Standards about IEEE 802.3 expressed with alphabet like 802.3u, 802.3ab etc.. </p> <p>All physical and data link layer devices like hub switch NIC cable  understand specific ethernet standard and based on those. </p> <p>There are countless Ethernet Communication standards, just remember that  network devices, communication device types, and transfer speed  might be different for each ethernet standards </p> <p>Communication Devices are named in this type of rules  (Transfer Speed) BASE - (Additional Characteristics)</p>"},{"location":"Computer_Network/NW0724/#transfer-speed","title":"Transfer Speed","text":"<p>Simple Number means unit is (Mbps) while G means (Gbps) For instance 100Base-T Cable supports 100Mbps speed, and  10GBASE-T supports 10Gbps speed. </p> <p>BASE stands for (BASEband), modulation type.  it is transfereing method of data that became bit signlal  by using communication device. </p> <p>Additional Characteristics include several types like  maximum transfer distance  enconding method in physical layor, how data get switched into bit signal  rein num, paths to pass bit signals  etc </p> <p>But most important characteristic is communication method type  C - \ub3d9\ucd95 \ucf00\uc774\ube14  T - Twisted Pair Cable  S - \ub2e8\ud30c\uc7a5 Fiber Optic Cable  L - \uc7a5\ud30c\uc7a5 Fiber Optic Cable</p> <p>Ethernet contiues evolving </p> <ul> <li>Fast Ethernet (100Mbps)</li> <li>Gigabit Ethernet (1Gbps)</li> <li>10 Gigabit Ethernet (10Gbps)</li> </ul> <p>Ethernet Frame  Datalink Layer  Ethern Network tranported frame sent by capsulation including  upper layer information, header, and trailer. </p> <ul> <li>Header - Preamble, receiver MAC, sneder MAC, Type / Length </li> <li>Payload - Data </li> <li>Trailer - FCS </li> </ul> <p>Would get received after decapsulation </p> <pre><code>|&lt;-----------------------Header-----------------------&gt;|&lt;----Payload----&gt;|&lt;-Trailer-&gt;|\n| Preamble | Receiver MAC | Sender MAC | Type / Length |       Data      |    FCS    |\n| 8 Bytes  |    6 Bytes   |  6 Bytes   |  2 Bytes      | 46 ~ 1500 Bytes |  4 Bytes  |\n</code></pre> <p>Preamble  First 7 Bytes are 10101010  Last  7 Bytes are 10101011 </p> <p>Exist to synchronize sender and receiver </p> <p>Receiver and Sender MAC Address </p> <ul> <li>are called as physical address </li> <li>Generally unique, mostly not changed. </li> <li> <p>MAC address is address assigned for each network interface, with 6 Bytes (48 Bits)</p> </li> <li> <p>LAN inside sender receiver specification </p> </li> <li>Generally NIC (Network Interface Controller) Device is in charge of Network interface </li> <li>One Computer might have several MAC address. </li> </ul> <p>Check MAC Address of your PC </p> <p>Windows  <pre><code>getmac /v  \nipconfig /all \n</code></pre></p> <p>UNIX (Linux, MacOS) <pre><code>ifconfig   \n</code></pre></p> <p>Type / Length </p> <p>If number is less than 1500 (0X05DC), it is frame size (length) If number is more than 1536 (0X0600), it is type </p> <ul> <li>Type, also called as ethertype </li> <li>shows what information is encapsulated </li> <li>For instance, upper level used protocol is included. </li> </ul> <p>|TYPE| Protocol | |0800| IPv4     | |86DD| IPv6     |  |0806| ARP      |</p> <p>DATA </p> <ul> <li>Payload, upper level tranferred or should transfer contents </li> <li>Max size 1500 Bytes </li> <li>Min size 46 Bytes </li> </ul> <p>If smaller than 46 bytes size adjustment purpose data padding is filled mostly by 0 </p> <p>FCS (Frame Check Sequence)</p> <p>Error detection infrmation,  FCS is a field to check whether error exists into received ethernet frame.  This field has error detection value called as CRC(Cyclic Redundancy Check) </p> <p>NIC (Network Interface Controller) Connect Host and Communication Methods, and check MAC Address assigned or not </p> <p>cable is physical layor lined communication method that is  connected to NIC, including </p> <ul> <li>Twisted Pair Cable </li> <li>\uad11\uc12c\uc720 Cable </li> </ul> <p>NIC was Card in past, now sometimes in USB but mostly attached to motherboard. </p> <p>Host Network transferred info passes NIC  so NIC work as network interface </p> <p>Also NIC can detect MAC Address, and abandon  Sender MAC Address Frame that is not related  Or use FCS field to detect error and abandon wrong frame </p> <p>Go to Ethernet Status in Windows Contro  NIC has internet speed limit from 10Mbps to 100Gbps,  network maximum speed is up to NIC </p>"},{"location":"Computer_Network/NW0724/#cables","title":"Cables","text":"<p>Twisted Pair Cable  made by Copper, send electric signal </p> <p>look like connector + cable itself. </p> <p>connector often used (RJ-45) Cable, literally two copper lines twisted in pair, total 4 fairs 8 lines </p> <p>Copper is noise sensitive.  So, it has shielding to surround copper line by either  \ube0c\ub808\uc774\ub4dc \uc274\ub4dc or \ud3ec\uc77c \uc274\ub4dc </p> <p>Twisted Pair Cable classification for shield types </p> <ul> <li>STP (Shielded Twisted Pair) surrounded by braid shield </li> <li>FTP (Foil Twisted Pair) noise reduced by foil shield </li> <li>UTP (Unshielded Twisted Pair) no shiled, only copper line </li> </ul> <p>Twisted Pair Cable classification for each shield </p> <p>XX|YTP </p> <p>X </p> <ul> <li>U No shiled </li> <li>S Braid Shield </li> <li>F Foil Shield </li> </ul> <p>Y What shield for each twisted pair of copper line </p> <p>Fiber Optic Cable </p> <p>uses light to send and receive information  compared to electricity based cable, fast speed and used in far distance  Relatively much lower noise effected, so used in intercontinentical network connection </p>"},{"location":"Computer_Network/NW0724/#network-devices","title":"Network Devices","text":"<p>Physical Layer, Hub </p> <p>Twisted Pair Cable  Optic Fiber Cable  Hub (CSMA/CD) \ubc18\uc774\uc911 \ud1b5\uc2e0 </p> <p>Data Link Layer  </p> <p>NIC  Switch (VLAN) \uc804\uc774\uc911 \ud1b5\uc2e0 </p> <p>Physical Layer have no concept about address. </p> <p>Data Link Layer have concept about address, MAC address. </p> <p>Above Datalink Layer, detecting sender and  receiver MAC address is possible </p> <p>Hub Port Host etc </p> <p>Early Network connected several hosts by Hub  Hub Characteristics </p> <p>1 Hub sends received data to all output ports  No control, no judgement about information  Just receive signal and send exactly same into all other ports </p> <p>In data link layer check packet MAC Address and destroy all address  not related to the receiver PC </p> <p>2 Hub \ubc18\uc774\uc911 \ud1b5\uc2e0 Half Duplex Mode  One way road, \uc77c\ubc29\ud1b5\ud589 </p> <p>Full Duplex Mode  Can send and receive at the same time \uc30d\ubc29\ud1b5\ud589  \uc804\ud654 Call </p> <p>Repeater, like Hub Physical Layer Device Electrical Signal reduced / distorted then  amplify electrical signal to restore </p> <p>It is physical layer, so no judgement or control about signal,  simply amplify signal. </p> <p>Hub includes repeater function</p> <p>Hub Collision  When one post sends data to hub, hub send that data to all except original sender.  Half Duplex Mode </p> <p>So, when two hosts send data at the same time to hub then collsion happens. </p> <p>When more hosts are connected to hub then more likely for collision to happen </p> <p>This collision likelihood existing area is called as collision domain  Every host connected in hub are belonged to same collision domain </p> <p>Thus, to reduce collision domain, reduce it as much as possible.  How? </p> <p>1 Use Switch, restrict collision domain into one, removing any probability of collision  2 OR use CSMA/CD protocol aka rule</p> <p>CSMA/CD  Carrier Sense Multiple Access with Collision Detection First CS Carrier Sense  Whether this communication method is possible to use or not.  Is there any host sending data? </p> <p>Second, when collision happens, then detect Collision  Stop transfer, send (jam signal) noticing collision happened.  Wait for certain random period of time and resend it  so, since two hosts that originally had collision will have each different  random waiting time, so not likely to get collision again   </p> <p>Half Duplex Mode collision preventio protocol </p>"},{"location":"Computer_Network/NW0724/#switch","title":"Switch","text":"<p>Better than CSMA/CD,  send acquired signal to port connected to receiver host,  then connect by full duplex mode! </p> <p>Data Link Device, Switch will detect what MAC address,  so can send frame to certain MAC address holding host.  Supports Full Duplex Mode, so no need to use CSMA/CD </p> <p>L2 Switch - Data Link Layer used. Generally Switch is perceived as L2 Switch.  Sometimes, L3 Switch or L4 Switch also exists, containing network layer or  transport layer functions in Switch. But just Switch is L2 Switch </p> <p>1 Switch MAC Address learning function  Send signal to only destination port  Also collision domain reduces , unlikely to collide. </p> <p>VLAN (Virtual LAN) Switch can separate Logical LAN into virtual LAN, VLAN. </p> <p>Switch MAC Address learning  Remember certain port and host AMC Address connected to that port Send frame to only target host  MAC Address table contains relationship between  Switch port connected host MAC Addresses and Port </p>"},{"location":"Computer_Network/NW0724/#how-does-switch-learn-mac-address","title":"how does Switch learn MAC Address","text":"<ol> <li>\ud50c\ub7ec\ub529 </li> <li>\ud3ec\uc6cc\ub529 \uacfc \ud544\ud130\ub9c1 </li> <li>\uc5d0\uc774\uc9d5 </li> </ol> <p>Based on Sender MAC Address inside Frame</p> <p>Switch MAC Address Table based on sender MAC Addresses  Switch assign port number and according MAC Address  Inside MAC Address Table </p> <p>Flooding, similar to HUB, send frame to every port. </p> <p>Other hosts receive frame but if MAC Address of receiver is not them  NIC will destroy frame </p> <p>So MAC Address table will register port number and MAC Address      </p> <p>Bridge  is also similar to Data Link Layer Switch.  MAC Address learning forwarding, filtering, etc  Bridge is less ued than Switch cuz Switch has more functions and better performance </p> <p>Bridge concept is often used although device is not used often. </p> <p>Switch VLAN Virtual LAN  make virtual LAN by one Switch  reduce inefficient traffic performance drop like flooding of hub switch </p> <p>If two groups share switch while not sharing workload  it might be useless, so divide them by VLAN  using one switch is several separated switch </p> <p>VLAN types </p> <p>1 Port based VLAN (more common) (Static VLAN)</p> <p>Port 1 ~ 6  belonged to VLAN A  Port 7 ~ 10 belonged to VLAN B</p> <p>Like this, port hole based VLAN division</p> <p>2 MAC Address based VLAN (Dynamic VLAN)</p> <p>Already assigned MAC Address will define VLAN </p> <p>sending receiving frame inside, MAC address will define  what VLAN would this host be included </p>"},{"location":"Computer_Network/NW1/","title":"Computer Networks","text":"<p>How to Study Computer Networks </p> <p>Make Windows Client and Windows Server?  Goal is to make a Mafia Game Client and Server without pretty GUI. </p> <p><pre><code>wsl --install \n</code></pre> Automatically install ubuntu in default </p>"},{"location":"Computer_Network/TCPIP1/","title":"Network Prgramming and Socket","text":""},{"location":"Computer_Network/TCPIP1/#run-code-in-linux-based-on-wsl-environment","title":"Run code in Linux, based on WSL environment","text":"<p>1 Open WSL Terminal and create files </p> <p>2 Compile Both Programs </p> <pre><code>gcc -o server hello_server.c\ngcc -o client hello_clinet.c\n</code></pre> <p>3 Run Server </p> <pre><code>./server 1234 \n</code></pre> <p>This starts the server and listens on port <code>1234</code>. Leave this running.</p> <p>4 Open Another Terminal for the Client</p> <pre><code>./clinet 127.0.0.1 1234 \n</code></pre> <p>This connects to the server running on the same machine (localhost, 127.0.0.1).</p> <p>5 If you hit a permissions error (e.g. \"Permission denied\") </p> <p>Make sure the files are executable:</p> <pre><code>chmod +x server client\n</code></pre> <p>6 for server terminal, if you ran code previously running it again might not work  because port is currently in usage. </p> <pre><code>gcc -o server hello_server.c \n./server 1234 \nbind() error\n</code></pre> <pre><code>gcc -o client hello_client.c \n./client 127.0.0.1 1234  \nconnect() error!\n</code></pre> <p>Because port 1234 is currently in usage </p>"},{"location":"Computer_Network/TCPIP1/#linux-file-generation-and-data-save","title":"Linux File Generation and Data Save","text":"<pre><code>gcc low_open.c -o lopen\n./lopen\ncat data.txt\n</code></pre> <p>This code will actually return </p> <pre><code>stephen@ASUSLAPTOP:~/TCPIP/c1$ gcc low_open.c -o lopen\nstephen@ASUSLAPTOP:~/TCPIP/c1$ ./lopen\nfile descriptor: 3\nstephen@ASUSLAPTOP:~/TCPIP/c1$ cat data.txt\nLet's go!\n</code></pre> <p>Now let's read <code>data.txt</code> file generated from the code </p> <pre><code>gcc low_read.c -o lread\n./lread\n</code></pre> <p>This code will return  <pre><code>stephen@ASUSLAPTOP:~/TCPIP/c1$ gcc low_read.c -o lread\nstephen@ASUSLAPTOP:~/TCPIP/c1$ ./lread\nfile descriptor: 3\nfile data: Let's go!\n</code></pre></p> <p>Now let's generate file and socket together in linux and comapre file descriptor value as integer form </p> <pre><code>gcc fd_seri.c -o fds\n./fds\n</code></pre> <pre><code>stephen@ASUSLAPTOP:~/TCPIP/c1$ ./fds\nfile descriptor 1: 3\nfile descriptor 2: 4\nfile descriptor 3: 5\n</code></pre>"},{"location":"Computer_Network/TCPIP1/#run-code-in-windows-visual-studio","title":"Run code in Windows Visual Studio","text":"<p>client server </p> <p>C++ \ud615\uc2dd\uc758 \uc778\uc218\uac00 \ud615\uc2dd\uc758 \ub9e4\uac1c \ubcc0\uc218\uc640 \ud638\ud658\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</p> <p>\uc18d\uc131 -&gt; C/C++ -&gt; \uc5b8\uc5b4 -&gt; \uc900\uc218 \ubaa8\ub4dc -&gt; \uc544\ub2c8\uc624 </p> <p>Compile method </p> <pre><code>gcc -o client Client/main.c -lws2_32\nclient &lt;IP&gt; &lt;PORT&gt; \n\ngcc -o server Server/main.c -lws2_32 \nserver &lt;PORT&gt; \n</code></pre> <p>For example,  <pre><code>gcc -o server Server/main.c -lws2_32 \n.\\server.exe 9190\n\ngcc -o client Client/main.c -lws2_32\n.\\client.exe 127.0.0.1 9190\n</code></pre></p> <p>\uc18d\uc131 -&gt; \ub9c1\ucee4 -&gt; \uc785\ub825 -&gt; \ucd94\uac00 \uc885\uc18d\uc131 -&gt; ws2_32.lib \ucd94\uac00 </p>"},{"location":"Data_Structure/AR250403/","title":"Dynamic Array, STL Vector","text":""},{"location":"Data_Structure/AR250403/#date-2025-04-03","title":"Date: 2025-04-03","text":""},{"location":"Data_Structure/AR250403/#key-points","title":"Key Points","text":"<ul> <li>C++ templates can deduce array size from references but generate separate functions for each size.</li> <li>Prefer pointer + size parameters for reusable and efficient code.</li> <li><code>new</code> and <code>delete</code> guarantee constructor/destructor calls, unlike <code>malloc</code>/<code>free</code>.</li> <li>Mixing C-style allocation with C++ class objects is unsafe.</li> </ul>"},{"location":"Data_Structure/AR250403/#overview","title":"Overview","text":"<p>This note explores how dynamic arrays are handled in C++ with templates, allocation mechanisms (<code>new/delete</code> vs. <code>malloc/free</code>), and class construction behavior.</p>"},{"location":"Data_Structure/AR250403/#array-templates","title":"Array Templates","text":"<p>Passing an array as a reference in a function allows the compiler to deduce its size, but:</p> <pre><code>void SetData(int (&amp;_Arr)[10]) {\n    for(int i = 0; i &lt; 10; ++i) {\n        _Arr[i] = i + 1;\n    }\n}\n\nint iArr[10] = {};\nint jArr[20] = {};\nSetData(iArr);    // OK\nSetData(jArr);    // ERROR: size mismatch\n</code></pre> <p>To fix this, use a template parameter for array size:</p> <pre><code>template&lt;int Size&gt;\nvoid SetData(int (&amp;_Arr)[Size]) {\n    for(int i = 0; i &lt; Size; ++i) {\n        _Arr[i] = i + 1;\n    }\n}\n</code></pre> <p>However, this creates a new function for each different size, which is inefficient if heavily reused.</p> <p>Instead, use pointer and explicit size:</p> <pre><code>void SetData(int* _Arr, int Size) {\n    for(int i = 0; i &lt; Size; ++i) {\n        _Arr[i] = i + 1;\n    }\n}\n</code></pre> <p>This pattern avoids template bloat and increases flexibility.</p>"},{"location":"Data_Structure/AR250403/#c-dynamic-memory-newdelete-vs-mallocfree","title":"C++ Dynamic Memory: <code>new/delete</code> vs <code>malloc/free</code>","text":"<pre><code>int* pData = (int*) malloc(sizeof(int) * 2);\nfree(pData);\n</code></pre> <p>In C++, use of <code>malloc</code> is discouraged for objects, because it doesn't call constructors. Instead:</p> <pre><code>MyClass* obj = new MyClass();\ndelete obj;\n</code></pre> <p>Here: - <code>new</code> = <code>malloc</code> + constructor call - <code>delete</code> = destructor call + <code>free</code></p> <p>This is essential for managing resources and guarantees correct initialization and cleanup.</p>"},{"location":"Data_Structure/AR250403/#object-on-stack","title":"Object on Stack","text":"<pre><code>MyClass my;\n</code></pre> <p>Stack-allocated objects automatically call the constructor and destructor at scope entry/exit.</p>"},{"location":"Data_Structure/AR250403/#object-with-malloc-not-recommended","title":"Object with <code>malloc</code> (Not Recommended)","text":"<pre><code>MyClass* pMy = (MyClass*) malloc(sizeof(MyClass)); // Constructor NOT called\nfree(pMy); // Destructor NOT called\n</code></pre>"},{"location":"Data_Structure/AR250403/#correct-approach-with-class","title":"Correct Approach with Class","text":"<pre><code>MyClass* pNewMy = new MyClass();\ndelete pNewMy;\n</code></pre> <p>This ensures both constructor and destructor are properly handled.</p>"},{"location":"Data_Structure/AR250403/#function-templates-arithmetic-example","title":"Function Templates: Arithmetic Example","text":"<pre><code>template&lt;typename A&gt;\nA Add(A a, A b) {\n    A c = a + b;\n    return c;\n}\n\nint a = Add(10, 20);\nfloat f = Add(2.1f, 1.9f);\nshort s1 = 10, s2 = 30;\nshort s3 = Add(s1, s2);\n</code></pre> <p>This template function can add values of any arithmetic type.</p>"},{"location":"Data_Structure/AR250403/#code-demonstration-setdata-and-arrays","title":"Code Demonstration: SetData and Arrays","text":"<pre><code>int iArr[20] = {};\nSetData(iArr, 20);\n\nint Arr[40] = {};\nSetData(Arr, 40);\n</code></pre> <p>Function works with arrays of any size using pointer+size.</p>"},{"location":"Data_Structure/AR250403/#c-style-vs-class-style-dynamic-arrays","title":"C-style vs. Class-style Dynamic Arrays","text":"<pre><code>#include \"Array.h\"\n#include \"CArray.h\"\n\nint main() {\n    tArray arr = {};\n    InitArr(&amp;arr);\n\n    PushBack(&amp;arr, 10);\n    PushBack(&amp;arr, 20);\n    PushBack(&amp;arr, 30);\n\n    CArray IntArr;\n    IntArr.reserve(100);\n\n    IntArr.push_back(10);\n    IntArr.push_back(20);\n    IntArr.push_back(30);\n\n    return 0;\n}\n</code></pre> <ul> <li><code>tArray</code> is a C-style dynamic array.</li> <li><code>CArray</code> is a class-based dynamic array with encapsulation and safe resizing.</li> </ul>"},{"location":"Data_Structure/AR250403/#common-mistakes","title":"Common Mistakes","text":"<p>Using <code>malloc</code> for C++ objects</p> <pre><code>MyClass* obj = (MyClass*) malloc(sizeof(MyClass)); // Bad: no constructor\n</code></pre> <p>Array reference with fixed size only</p> <pre><code>void SetData(int (&amp;_Arr)[10]); // Only works with size 10\n</code></pre>"},{"location":"Data_Structure/AR250403/#tricky-case-template-bloat","title":"Tricky Case: Template Bloat","text":"<p>Each <code>Size</code> in <code>template&lt;int Size&gt;</code> produces a new instantiation.</p> <pre><code>template&lt;int Size&gt;\nvoid SetData(int (&amp;_Arr)[Size]); // Separate for [10], [20], etc.\n</code></pre> <p>Better to use:</p> <pre><code>void SetData(int* _Arr, int Size);\n</code></pre>"},{"location":"Data_Structure/AR250403/#interview-questions","title":"Interview Questions","text":"<p>Q: What are the pros and cons of using array reference templates in C++? A: Pros: compile-time size check, no need to pass size. Cons: code bloat due to multiple instantiations.</p> <p>Q: Why is <code>malloc</code> discouraged for C++ class objects? A: Because it does not call constructors/destructors, leading to unsafe initialization and memory leaks.</p> <p>Q: Difference between <code>new</code> and <code>malloc</code> in C++? A: <code>new</code> invokes constructors and throws on failure. <code>malloc</code> returns void* and does not initialize objects.</p> <p>Q: How do you safely manage dynamic memory for a class? A: Use <code>new</code>/<code>delete</code>, or better yet, use smart pointers (<code>std::unique_ptr</code>, <code>std::shared_ptr</code>).</p>"},{"location":"Data_Structure/AR250403/#references","title":"References","text":"<ul> <li>CArray.h</li> <li>new_delete.cpp</li> <li>template.cpp</li> <li>dynamic_arr_class.cpp</li> </ul>"},{"location":"Data_Structure/AR250407/","title":"Dynamic Memory Management and Template Usage","text":""},{"location":"Data_Structure/AR250407/#date-2025-04-07","title":"Date: 2025-04-07","text":""},{"location":"Data_Structure/AR250407/#key-points","title":"Key Points","text":"<ul> <li>The <code>new</code> operator is used for dynamic memory allocation in C++, replacing C's <code>malloc</code>.</li> <li>Dynamic allocation using <code>new</code> calls constructors and <code>delete</code> calls destructors automatically.</li> <li>Templates enable type-safe dynamic memory management.</li> <li>The Rule of Three/Five: Define destructors, copy constructors, and assignment operators for resource management.</li> <li>Using <code>assert</code> in C++ helps verify conditions during debugging.</li> </ul>"},{"location":"Data_Structure/AR250407/#overview","title":"Overview","text":"<p>C++ offers powerful ways to manage dynamic memory using <code>new</code> and <code>delete</code> operators. These operators manage memory on the heap, which is essential for objects that need to persist beyond their scope or be shared between different parts of the program. Along with dynamic memory, C++ supports templates, which allow you to create generic classes and functions that work with any data type.</p> <p>Dynamic memory allocation and deallocation are central concepts in C++, and understanding these is crucial for managing resources efficiently. This section will also explore containers like <code>vector</code> and <code>list</code> for handling collections of data.</p>"},{"location":"Data_Structure/AR250407/#c-dynamic-memory-management","title":"C++ Dynamic Memory Management","text":""},{"location":"Data_Structure/AR250407/#basic-dynamic-allocation","title":"Basic Dynamic Allocation","text":"<p>In C++, dynamic memory is allocated using the <code>new</code> keyword, which initializes objects and arrays on the heap. Unlike the <code>malloc</code> function in C, <code>new</code> calls constructors and handles memory initialization automatically.</p> <pre><code>// Allocating a single object dynamically using new\nMyClass* pNewMy = new MyClass;\n\n// Deallocating memory using delete\ndelete pNewMy;\n\n// Allocating an array dynamically\nMyClass* pMyArr = new MyClass[10];\n\n// Deallocating an array using delete[]\ndelete[] pMyArr;\n</code></pre> <p>Important note: When you use <code>delete[]</code>, make sure to use the <code>[]</code> as this ensures the array destructor is called properly.</p>"},{"location":"Data_Structure/AR250407/#templates-in-c-carray-example","title":"Templates in C++: <code>CArray</code> Example","text":"<p>Templates in C++ allow you to define classes and functions that can operate on any data type. For instance, <code>CArray</code> is a custom container that mimics the behavior of a vector:</p> <pre><code>template &lt;typename T&gt;\nvoid CArray&lt;T&gt;::push_back(const T&amp; _Data) {\n    // Adds an element to the array (implementation not shown here)\n}\n</code></pre> <p>Template Constructors:</p> <p>The constructor for a template class (e.g., <code>CArray&lt;t&gt;::CArray()</code>) initializes the object. This is useful for creating data structures that can handle any type of data.</p>"},{"location":"Data_Structure/AR250407/#common-mistakes","title":"Common Mistakes","text":""},{"location":"Data_Structure/AR250407/#1-mismatched-memory-management","title":"1. Mismatched Memory Management","text":"<p>When working with dynamic memory allocation, matching <code>new</code> with <code>delete</code> is essential. Failing to do so can lead to memory leaks or undefined behavior.</p> <pre><code>// Correct way to allocate and deallocate dynamically\nMyClass* pMy = new MyClass;\ndelete pMy;\n\n// Incorrect: Forgetting delete[] for arrays\nMyClass* pArr = new MyClass[10];\ndelete pArr;  // Error: should be delete[] for arrays\n</code></pre>"},{"location":"Data_Structure/AR250407/#2-template-function-duplication","title":"2. Template Function Duplication","text":"<p>Ensure that template functions are correctly specialized or instantiated. Duplicate definitions across files can cause link errors.</p> <pre><code>// Duplicate definition of a template function\nint Add(int a, int b);  // Declaration\nint Add(int a, int b);  // This should cause a link error if defined twice\n</code></pre>"},{"location":"Data_Structure/AR250407/#3-use-of-assert","title":"3. Use of <code>assert</code>","text":"<p>The <code>assert</code> macro is used for debugging purposes, ensuring conditions hold true during runtime.</p> <pre><code>#include &lt;cassert&gt;\n\nassert(m_CurSize &gt; _idx);  // Check that the index is valid\n\n// Example of assert behavior\nassert(nullptr);  // This will prompt a failure during debugging\n</code></pre>"},{"location":"Data_Structure/AR250407/#working-with-containers-vector-vs-list","title":"Working with Containers: <code>vector</code> vs <code>list</code>","text":""},{"location":"Data_Structure/AR250407/#vector","title":"<code>vector</code>","text":"<p>A vector is a dynamic array that allows fast indexing but slower insertions/deletions in the middle of the collection. Its size can be dynamically adjusted, and elements can be accessed quickly.</p> <pre><code>std::vector&lt;int&gt; vecInt;\nvecInt.push_back(10);\nvecInt.push_back(20);\nvecInt.push_back(30);\n\n// Accessing elements\nint first = vecInt[0];  // O(1) access time\n</code></pre> <p>Capacity and Resizing:</p> <ul> <li><code>reserve()</code>: Pre-allocates memory to avoid frequent reallocation.</li> <li><code>resize()</code>: Adjusts the current size and fills with default values.</li> </ul>"},{"location":"Data_Structure/AR250407/#list","title":"<code>list</code>","text":"<p>A list is a doubly-linked list, which excels at insertion and deletion operations but suffers from slower access times compared to <code>vector</code>.</p> <pre><code>std::list&lt;int&gt; intList;\nintList.push_back(10);\nintList.push_back(20);\nintList.push_back(30);\n\n// Iterating through a list using an iterator\nfor (auto iter = intList.begin(); iter != intList.end(); ++iter) {\n    // Do something with *iter\n}\n</code></pre>"},{"location":"Data_Structure/AR250407/#why-list-is-better-for-certain-use-cases","title":"Why <code>list</code> is Better for Certain Use Cases","text":"<ul> <li>Insertion and Deletion: <code>list</code> is better when you frequently insert or remove elements in the middle.</li> <li>Accessing by Index: For indexed access, <code>vector</code> is more efficient.</li> </ul>"},{"location":"Data_Structure/AR250407/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between <code>new</code> and <code>malloc</code>? A: <code>new</code> in C++ calls the constructor of the object being allocated, while <code>malloc</code> simply allocates memory without initializing it. <code>new</code> also throws exceptions in case of failure, while <code>malloc</code> returns <code>nullptr</code>.</p> <p>Q: Why use <code>delete[]</code> instead of <code>delete</code> when deallocating arrays? A: <code>delete[]</code> ensures that the destructors for each element of the array are called properly, while <code>delete</code> only calls the destructor for the first element.</p>"},{"location":"Data_Structure/AR250407/#tricky-case-using-template-with-custom-containers","title":"Tricky Case: Using <code>template</code> with Custom Containers","text":"<pre><code>// Template container example (simplified)\ntemplate &lt;typename T&gt;\nclass CArray {\n    T* m_data;\n    size_t m_Capacity;\n\npublic:\n    CArray(size_t capacity = 10) : m_Capacity(capacity) {\n        m_data = new T[m_Capacity];\n    }\n\n    ~CArray() {\n        delete[] m_data;\n    }\n\n    void push_back(const T&amp; _Data);\n};\n</code></pre> <p>Note: When using templates, ensure that memory management is done properly, especially when handling raw pointers and dynamic arrays inside a template class.</p>"},{"location":"Data_Structure/AR250407/#code-demonstration","title":"Code Demonstration","text":"<pre><code>int* pArr = new int[5];  // Dynamically allocate an array\n\n// Fill the array\nfor (int i = 0; i &lt; 5; ++i) {\n    pArr[i] = i * 10;\n}\n\n// Output array\nfor (int i = 0; i &lt; 5; ++i) {\n    std::cout &lt;&lt; pArr[i] &lt;&lt; \" \";\n}\n\n// Deallocate memory\ndelete[] pArr;\n</code></pre>"},{"location":"Data_Structure/AR250407/#visual-ownership-transfer-with-new-and-delete","title":"Visual: Ownership Transfer with <code>new</code> and <code>delete</code>","text":"<pre><code>Before Deletion             After Deletion\n------------                -------------\nObject A                    Object A\n[data -&gt; 0x1234]            [data -&gt; nullptr]\n\nObject B                    Object B\n[data -&gt; nullptr]           [data -&gt; 0x1234]\n</code></pre>"},{"location":"Data_Structure/AR250407/#references","title":"References","text":"<ul> <li>CArray.h</li> <li>new_delete.cpp</li> <li>vector_usage.cpp</li> <li>class_template.cpp</li> </ul>"},{"location":"Data_Structure/AR250408/","title":"STL Vector and Iterator Behavior","text":""},{"location":"Data_Structure/AR250408/#date-2025-04-08","title":"Date: 2025-04-08","text":""},{"location":"Data_Structure/AR250408/#key-points","title":"Key Points","text":"<ul> <li><code>std::vector</code> uses dynamic arrays and supports efficient back operations.</li> <li><code>std::vector::resize()</code> changes the size and may allocate/fill memory.</li> <li>Avoid using invalidated iterators after operations like <code>erase()</code> or <code>pop_back()</code>.</li> <li><code>std::list</code> supports efficient front and middle operations, unlike <code>vector</code>.</li> <li>STL iterators become invalid after erasure; always update them after modifying the container.</li> </ul>"},{"location":"Data_Structure/AR250408/#overview","title":"Overview","text":"<p>This example focuses on the behavior of STL containers like <code>std::vector</code> and <code>std::list</code>, especially regarding memory allocation, iterator usage, and best practices. Additionally, it compares a custom container (<code>CArray</code>) with similar STL behavior, emphasizing safe iterator usage and container manipulation.</p> <pre><code>vector&lt;int&gt; vecInt;\nvecInt.resize(2000); // Allocates memory for 2000 elements and initializes them\n\nvecInt.push_back(10);\nvecInt.push_back(20);\nvecInt.push_back(30);\nvecInt.push_back(40);\nvecInt.push_back(50);\n\nvecInt.clear(); // Removes all elements\n\n{\n    vector&lt;int&gt; vecTemp;\n    vecTemp = vecInt; // Copy assignment\n    vecInt.swap(vecTemp); // Efficient way to reset or exchange contents\n}\n\nint Size = vecInt.size();\nint Cap = vecInt.capacity();\n</code></pre>"},{"location":"Data_Structure/AR250408/#common-mistakes","title":"Common Mistakes","text":"<p>Accessing end() or invalid iterators <pre><code>vector&lt;int&gt; vecInt = {1, 2, 3, 4};\nauto iter = vecInt.begin();\niter += 4; // Dangerous: equal to end()\n// ++iter; // Error: out-of-bounds\n</code></pre></p> <p>Erasing while iterating improperly <pre><code>list&lt;int&gt; intList = {1, 2, 3, 4};\nauto it = intList.begin();\nintList.erase(it); // 'it' is now invalid\n// int value = *it; // Undefined behavior\n</code></pre></p> <p>Using <code>erase()</code> in loops incorrectly <pre><code>for (auto it = intList.begin(); it != intList.end();) {\n    if (*it &lt;= 60) {\n        it = intList.erase(it); // Returns valid next iterator\n    } else {\n        ++it;\n    }\n}\n</code></pre></p>"},{"location":"Data_Structure/AR250408/#tricky-case-begin-end","title":"Tricky Case: <code>begin() == end()</code>","text":"<p>When a container is empty, calling <code>begin()</code> returns the same as <code>end()</code>. Using such an iterator must be guarded.</p> <pre><code>vector&lt;int&gt; vecInt;\nauto iter = vecInt.begin();\nif (iter == vecInt.end()) {\n    // Safe: container is empty\n}\n</code></pre> <p>The same applies to custom containers like <code>CArray</code>.</p> <pre><code>CArray&lt;int&gt; arrInt;\nauto it = arrInt.begin();\nif (it == arrInt.end()) {\n    // Safe check\n}\n</code></pre>"},{"location":"Data_Structure/AR250408/#interview-questions","title":"Interview Questions","text":"<p>Q: What happens to an iterator after <code>erase()</code> in STL containers? A: It becomes invalid. Always update the iterator with the return value of <code>erase()</code>.</p> <p>Q: Why doesn't <code>std::vector</code> provide <code>pop_front()</code>? A: Because <code>std::vector</code> is optimized for fast back operations; front operations are inefficient due to shifting elements.</p> <p>Q: What's the difference between <code>resize()</code> and <code>reserve()</code> in <code>vector</code>? A: <code>resize()</code> changes the actual size and fills with default values. <code>reserve()</code> only allocates memory without changing the size.</p> <p>Q: How can you safely erase multiple elements in a loop? A: Use the return value of <code>erase()</code> to continue iteration.</p>"},{"location":"Data_Structure/AR250408/#modern-examples","title":"Modern Examples","text":"<pre><code>// Using C++11 range-based loops\nvector&lt;int&gt; data = {1, 2, 3};\nfor (int val : data) {\n    cout &lt;&lt; val &lt;&lt; \" \";\n}\n</code></pre> <pre><code>// C++17 structured bindings (not directly used but relevant)\nauto [first, second] = pair&lt;int, int&gt;{1, 2};\n</code></pre>"},{"location":"Data_Structure/AR250408/#code-demonstration","title":"Code Demonstration","text":"<pre><code>vector&lt;int&gt; vecInt = {1, 2, 3};\nfor (auto it = vecInt.begin(); it != vecInt.end(); ++it) {\n    cout &lt;&lt; *it &lt;&lt; endl;\n}\n\nCArray&lt;int&gt; arrInt;\narrInt.push_back(1);\narrInt.push_back(2);\narrInt.push_back(3);\n\nfor (auto it = arrInt.begin(); it != arrInt.end(); ++it) {\n    cout &lt;&lt; *it &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Data_Structure/AR250408/#visual-iterator-invalidation","title":"Visual: Iterator Invalidation","text":"<pre><code>Before erase()             After erase()\n-----------------          -----------------\n[10] [20] [30]             [20] [30]\n ^                        ^\n it                       invalid (do not use!)\n</code></pre>"},{"location":"Data_Structure/AR250408/#references","title":"References","text":"<ul> <li>CArray.h</li> <li>vector_usage.cpp</li> <li>iterator.cpp</li> </ul>"},{"location":"Data_Structure/AR250409/","title":"STL Vector vs List &amp; Custom Iterator Logic (with CArray)","text":""},{"location":"Data_Structure/AR250409/#date-2025-04-09","title":"Date: 2025-04-09","text":"<p>This article explains in detail how a custom dynamic array (<code>CArray&lt;T&gt;</code>) and its iterator are implemented in C++. It covers why dynamic arrays like <code>std::vector</code> have certain limitations, how iterator invalidation works, and what patterns to follow when erasing elements during iteration.</p>"},{"location":"Data_Structure/AR250409/#vector-vs-list-efficiency-and-design-tradeoffs","title":"Vector vs. List: Efficiency and Design Tradeoffs","text":""},{"location":"Data_Structure/AR250409/#dynamic-array-vector","title":"Dynamic Array (Vector)","text":"<ul> <li>Vectors are built on dynamic arrays.</li> <li>Removing elements from the middle or front is inefficient because all the following elements must be shifted.</li> <li>Worst-case performance: <code>O(n)</code> when erasing from the front.</li> <li><code>pop_back()</code> is fast: <code>O(1)</code>.</li> <li><code>pop_front()</code> is not supported due to inefficiency.</li> </ul>"},{"location":"Data_Structure/AR250409/#linked-list-list","title":"Linked List (List)","text":"<ul> <li>Lists use a node-based (linked list) structure.</li> <li><code>pop_front()</code> and <code>erase()</code> are efficient: constant-time operations.</li> <li>Cannot use random access with <code>[index]</code> or <code>.at()</code>.</li> <li>Iterators are used to access elements.</li> </ul>"},{"location":"Data_Structure/AR250409/#stl-usage-examples","title":"STL Usage Examples","text":""},{"location":"Data_Structure/AR250409/#vector-erase","title":"Vector Erase:","text":"<pre><code>std::vector&lt;int&gt; vecInt = {10, 20, 30};\nauto iter = vecInt.begin();\nvecInt.erase(iter); // Removes first element\n</code></pre>"},{"location":"Data_Structure/AR250409/#list-erase","title":"List Erase:","text":"<pre><code>std::list&lt;int&gt; intList = {10, 20, 30};\nauto Liter = intList.begin();\nintList.erase(Liter); // Removes first element\n</code></pre>"},{"location":"Data_Structure/AR250409/#iterator-invalidation","title":"Iterator Invalidation","text":"<ul> <li>After calling <code>erase()</code>, the passed iterator becomes invalid.</li> <li>Accessing <code>*iter</code> after erasure is undefined behavior.</li> <li>Iterators must not be incremented past <code>.end()</code>.</li> </ul>"},{"location":"Data_Structure/AR250409/#safe-erase-pattern-in-loops","title":"Safe Erase Pattern in Loops","text":"<pre><code>for (auto iter = list.begin(); iter != list.end(); ) {\n    if (*iter &lt; 60)\n        iter = list.erase(iter); // safe\n    else\n        ++iter; // only if not erased\n}\n</code></pre>"},{"location":"Data_Structure/AR250409/#tricky-erase-patterns-bad-vs-good","title":"Tricky Erase Patterns (Bad vs. Good)","text":""},{"location":"Data_Structure/AR250409/#bad-pattern","title":"Bad Pattern","text":"<pre><code>for (auto it = vec.begin(); it != vec.end(); ++it) {\n    if (*it % 2 == 0)\n        vec.erase(it); // WRONG: iterator becomes invalid\n}\n</code></pre>"},{"location":"Data_Structure/AR250409/#good-pattern","title":"Good Pattern","text":"<pre><code>for (auto it = vec.begin(); it != vec.end(); ) {\n    if (*it % 2 == 0)\n        it = vec.erase(it); // erase returns next iterator\n    else\n        ++it;\n}\n</code></pre>"},{"location":"Data_Structure/AR250409/#custom-carray-iterator-internals","title":"Custom CArray Iterator Internals","text":""},{"location":"Data_Structure/AR250409/#iterator-class-fields","title":"Iterator Class Fields:","text":"<ul> <li><code>m_Owner</code>: pointer to the parent container.</li> <li><code>m_Idx</code>: index currently pointed to. <code>-1</code> means end.</li> </ul>"},{"location":"Data_Structure/AR250409/#special-iterator-states","title":"Special Iterator States:","text":"<ul> <li><code>(nullptr, -1)</code> = points to nothing.</li> <li><code>(_, -1)</code> = valid <code>end()</code> iterator.</li> </ul>"},{"location":"Data_Structure/AR250409/#iterator-constructor","title":"Iterator Constructor","text":"<pre><code>iterator() : m_Owner(nullptr), m_Idx(-1) {}\niterator(CArray&lt;T&gt;* owner, int idx) : m_Owner(owner), m_Idx(idx) {}\n</code></pre>"},{"location":"Data_Structure/AR250409/#begin-and-end-return","title":"begin() and end() Return","text":"<pre><code>iterator begin() {\n    return (m_CurSize == 0) ? end() : iterator(this, 0);\n}\n\niterator end() {\n    return iterator(this, -1);\n}\n</code></pre>"},{"location":"Data_Structure/AR250409/#iterator-operators","title":"Iterator Operators","text":"<pre><code>T&amp; operator*(); // dereference\n\niterator&amp; operator++();     // prefix ++\niterator operator++(int);   // postfix ++\n\niterator&amp; operator--();     // prefix --\niterator operator--(int);   // postfix --\n\nbool operator==(const iterator&amp;);\nbool operator!=(const iterator&amp;);\n</code></pre>"},{"location":"Data_Structure/AR250409/#custom-erase-implementation","title":"Custom erase() Implementation","text":"<pre><code>iterator CArray&lt;T&gt;::erase(iterator&amp; _TargetIter) {\n    assert(this == _TargetIter.m_Owner);\n    assert(_TargetIter.m_Idx &lt; m_CurSize);\n    assert(_TargetIter.m_Idx != -1);\n\n    iterator nextIter(this, _TargetIter.m_Idx);\n\n    int moveCount = m_CurSize - (_TargetIter.m_Idx + 1);\n    for (int i = 0; i &lt; moveCount; ++i)\n        m_Data[i + _TargetIter.m_Idx] = m_Data[i + _TargetIter.m_Idx + 1];\n\n    --m_CurSize;\n\n    _TargetIter.m_Owner = nullptr;\n    _TargetIter.m_Idx = -1;\n\n    return nextIter;\n}\n</code></pre>"},{"location":"Data_Structure/AR250409/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>Calling <code>++</code> on <code>end()</code> iterator  triggers <code>assert</code>.</li> <li>Dereferencing erased/invalid iterator  undefined behavior.</li> <li>Using <code>erase()</code> inside a <code>for</code> loop incorrectly.</li> </ul>"},{"location":"Data_Structure/AR250409/#sample-interview-questions","title":"Sample Interview Questions","text":""},{"location":"Data_Structure/AR250409/#q1-what-happens-if-you-call-on-end-iterator","title":"Q1: What happens if you call <code>++</code> on <code>end()</code> iterator?","text":"<p>A: It triggers an <code>assert</code> because the iterator is in an invalid position. Incrementing past <code>.end()</code> is undefined.</p>"},{"location":"Data_Structure/AR250409/#q2-why-is-pop_front-not-provided-for-stdvector","title":"Q2: Why is <code>pop_front()</code> not provided for <code>std::vector</code>?","text":"<p>A: Because it requires shifting all elements to the left, which is an O(n) operation. This breaks the efficiency guarantee of <code>O(1)</code> random access.</p>"},{"location":"Data_Structure/AR250409/#q3-how-can-you-safely-remove-elements-during-iteration","title":"Q3: How can you safely remove elements during iteration?","text":"<p>A: Use the erase-and-assign pattern: <pre><code>iter = container.erase(iter);\n</code></pre> This ensures the iterator always points to the valid next element.</p>"},{"location":"Data_Structure/AR250409/#q4-can-you-implement-a-const_iterator-version-of-this-carray","title":"Q4: Can you implement a const_iterator version of this CArray?","text":"<p>A: Yes. Define a similar class but mark all accessors <code>const</code>, and restrict mutation operations. Also implement const overloads for <code>begin()</code> and <code>end()</code>.</p>"},{"location":"Data_Structure/AR250409/#q5-when-does-stdvectorerase-invalidate-iterators","title":"Q5: When does <code>std::vector::erase()</code> invalidate iterators?","text":"<p>A: It invalidates the erased iterator and all that follow it.</p>"},{"location":"Data_Structure/AR250409/#summary","title":"Summary","text":"<ul> <li><code>vector</code> is best for fast back insertions and random access.</li> <li><code>list</code> is best for frequent insertions/deletions from any position.</li> <li>Always be cautious with iterator invalidation, especially with <code>erase()</code>.</li> <li>Custom iterators must carefully handle edge cases (begin, end, invalid states).</li> <li>Understanding iterator behavior is crucial for bug-free, high-performance code.</li> </ul>"},{"location":"Data_Structure/AR250409/#references","title":"References","text":"<ul> <li>CArray.h</li> <li>vector_usage.cpp</li> <li>iterator2.cpp</li> <li>CArray_iterator.cpp</li> </ul>"},{"location":"Data_Structure/AR250410/","title":"Doubly Linked List and Iterator Design","text":""},{"location":"Data_Structure/AR250410/#iterator-basics-and-usage","title":"Iterator Basics and Usage","text":"<pre><code>CArray&lt;int&gt;::iterator arrIter = arrInt.begin();\n\n*(arrIter++);     // Postfix\n*(++arrIter);     // Prefix\n</code></pre>"},{"location":"Data_Structure/AR250410/#prefix-vs-postfix-operator","title":"Prefix vs Postfix Operator++","text":"<ul> <li>Always prefer prefix (<code>++iter</code>) over postfix (<code>iter++</code>) in loops.</li> <li><code>++iter</code> avoids the creation of a temporary copy.</li> <li><code>iter++</code> needs to save the original value, return it, then increment the iterator.</li> </ul>"},{"location":"Data_Structure/AR250410/#correct-return-types-for-operator","title":"Correct Return Types for Operator++","text":"<p><pre><code>iterator&amp; operator++();        // Prefix\niterator operator++(int);     // Postfix\n</code></pre> - Return <code>iterator&amp;</code> for prefix (faster, no temporary). - Return <code>iterator</code> (by value) for postfix.</p>"},{"location":"Data_Structure/AR250410/#clist-template-and-linked-list-design","title":"CList Template and Linked List Design","text":""},{"location":"Data_Structure/AR250410/#node-structure","title":"Node Structure","text":"<pre><code>template&lt;typename T&gt;\nstruct tNode {\n    T m_Data;\n    tNode* m_Next;\n    tNode* m_Prev;\n\n    tNode() : m_Data(), m_Next(nullptr), m_Prev(nullptr) {}\n    tNode(const T&amp; _Data, tNode* _Next = nullptr, tNode* _Prev = nullptr)\n        : m_Data(_Data), m_Next(_Next), m_Prev(_Prev) {}\n};\n</code></pre>"},{"location":"Data_Structure/AR250410/#clist-class-structure","title":"CList Class Structure","text":"<pre><code>template&lt;typename T&gt;\nclass CList {\nprivate:\n    tNode&lt;T&gt;* m_Head;\n    tNode&lt;T&gt;* m_Tail;\n    int       m_Size;\n\npublic:\n    void push_back(const T&amp; _Data);\n    void push_front(const T&amp; _Data);\n    void pop_front();\n    void pop_back();\n    void clear();\n    T&amp; front();\n    T&amp; back();\n\n    class iterator;\n    iterator begin();\n    iterator end();\n    iterator erase(iterator&amp; _iter);\n};\n</code></pre>"},{"location":"Data_Structure/AR250410/#time-complexity","title":"Time Complexity","text":"<ul> <li><code>push_back</code>, <code>push_front</code>: O(1) (thanks to <code>m_Tail</code> and <code>m_Head</code>).</li> <li>Without <code>m_Tail</code>, <code>push_back</code> would be O(n).</li> </ul>"},{"location":"Data_Structure/AR250410/#push_back","title":"push_back()","text":"<ul> <li>If empty, initialize <code>m_Head</code> and <code>m_Tail</code>.</li> <li>Otherwise, link new node to current <code>m_Tail</code>, then update <code>m_Tail</code>.</li> </ul>"},{"location":"Data_Structure/AR250410/#push_front","title":"push_front()","text":"<ul> <li>Create new node, make current head its next.</li> <li>Update <code>m_Head</code>.</li> <li>If list was non-empty, update old head's previous pointer.</li> </ul>"},{"location":"Data_Structure/AR250410/#pop_front","title":"pop_front()","text":"<ul> <li>Assert not empty.</li> <li>If only one node, also reset <code>m_Tail</code>.</li> <li>Delete current <code>m_Head</code>, move to next node.</li> </ul>"},{"location":"Data_Structure/AR250410/#pop_back","title":"pop_back()","text":"<ul> <li>If only one node, reuse <code>pop_front()</code>.</li> <li>Update <code>m_Tail</code> to previous node.</li> <li>Delete old tail.</li> </ul>"},{"location":"Data_Structure/AR250410/#iterator-internals","title":"Iterator Internals","text":"<pre><code>class iterator {\nprivate:\n    CList&lt;T&gt;* m_Owner;\n    tNode&lt;T&gt;* m_TargetNode;\n\n    // m_Owner == nullptr &amp;&amp; m_TargetNode == nullptr: invalid\n    // m_Owner != nullptr &amp;&amp; m_TargetNode == nullptr: end()\n\npublic:\n    // Comparison\n    bool operator==(const iterator&amp; _Other);\n    bool operator!=(const iterator&amp; _Other);\n\n    // Dereference\n    T&amp; operator*();\n\n    // Increment\n    iterator&amp; operator++();       // Prefix\n    iterator operator++(int);     // Postfix\n\n    // Decrement\n    iterator&amp; operator--();       // Prefix\n    iterator operator--(int);     // Postfix\n};\n</code></pre>"},{"location":"Data_Structure/AR250410/#iterator-behavior-notes","title":"Iterator Behavior Notes","text":"<ul> <li><code>++</code> should <code>assert(m_TargetNode)</code> because <code>nullptr</code> can't be incremented.</li> <li><code>--</code> can handle <code>end()</code> case by setting to <code>m_Tail</code>.</li> <li>If <code>--</code> called on <code>begin()</code>, assert.</li> <li>Be cautious with invalid iterators.</li> </ul>"},{"location":"Data_Structure/AR250410/#erase-behavior","title":"Erase Behavior","text":"<pre><code>template&lt;typename T&gt;\ntypename CList&lt;T&gt;::iterator CList&lt;T&gt;::erase(iterator&amp; _iter)\n</code></pre>"},{"location":"Data_Structure/AR250410/#important-conditions","title":"Important Conditions:","text":"<ul> <li>Must check <code>m_Owner == this</code> using <code>assert</code>.</li> <li>Return the iterator pointing to the next element.</li> </ul>"},{"location":"Data_Structure/AR250410/#edge-cases","title":"Edge Cases:","text":"<ul> <li>If <code>m_Head == _iter.m_TargetNode</code> =&gt; use <code>pop_front()</code>.</li> <li>If <code>m_Tail == _iter.m_TargetNode</code> =&gt; use <code>pop_back()</code>.</li> <li>Otherwise, handle using <code>m_Prev</code> and <code>m_Next</code> rewiring.</li> </ul>"},{"location":"Data_Structure/AR250410/#reverse-function-recursive","title":"Reverse Function (Recursive)","text":"<ul> <li>Uses recursion to reach last node, then flips <code>m_Next</code> and <code>m_Prev</code>.</li> <li>Once base case (<code>nullptr</code>) hit, swap <code>m_Head</code> and <code>m_Tail</code>.</li> </ul>"},{"location":"Data_Structure/AR250410/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>Forgetting to update <code>m_Size</code> after push/pop.</li> <li>Incorrect handling of <code>nullptr</code> for empty list.</li> <li>Using <code>iter++</code> in loops over lists instead of <code>++iter</code>.</li> <li>Not asserting valid iterator before dereferencing or incrementing.</li> </ul>"},{"location":"Data_Structure/AR250410/#sample-interview-questions","title":"Sample Interview Questions","text":""},{"location":"Data_Structure/AR250410/#q1-what-is-the-difference-between-iter-and-iter-in-a-custom-iterator-class","title":"Q1. What is the difference between <code>++iter</code> and <code>iter++</code> in a custom iterator class?","text":"<p>A: - <code>++iter</code> is a prefix operator: it modifies and returns the same object (usually more efficient). - <code>iter++</code> is a postfix operator: it returns the value before incrementing, requiring a temporary copy.</p>"},{"location":"Data_Structure/AR250410/#q2-when-does-clisteraseiterator-_iter-call-pop_front-or-pop_back","title":"Q2. When does <code>CList::erase(iterator&amp; _iter)</code> call <code>pop_front()</code> or <code>pop_back()</code>?","text":"<p>A: - If <code>_iter</code> points to <code>m_Head</code>, it calls <code>pop_front()</code>. - If <code>_iter</code> points to <code>m_Tail</code>, it calls <code>pop_back()</code>. - These are special edge cases that must be handled explicitly.</p>"},{"location":"Data_Structure/AR250410/#q3-in-the-context-of-a-doubly-linked-list-what-makes-push_back-and-push_front-o1","title":"Q3. In the context of a doubly linked list, what makes <code>push_back</code> and <code>push_front</code> O(1)?","text":"<p>A: - The class stores both <code>m_Head</code> and <code>m_Tail</code>, allowing instant access to both ends without traversal.</p>"},{"location":"Data_Structure/AR250410/#q4-what-does-an-end-iterator-mean-in-a-list","title":"Q4. What does an end iterator mean in a list?","text":"<p>A: - <code>m_TargetNode == nullptr</code>, but <code>m_Owner != nullptr</code>. It signifies one-past-the-last element.</p>"},{"location":"Data_Structure/AR250410/#q5-why-is-it-necessary-to-check-m_owner-in-clisterase","title":"Q5. Why is it necessary to check <code>m_Owner</code> in <code>CList::erase()</code>?","text":"<p>A: - To ensure the iterator passed belongs to the current list. Otherwise, modifying foreign memory could cause undefined behavior.</p>"},{"location":"Data_Structure/AR250410/#references","title":"References","text":"<ul> <li>linked_list_template.cpp</li> <li>[CList.h] (codes/CList.h)</li> </ul>"},{"location":"Data_Structure/AR250411/","title":"Notes on Iterators and Linked List Implementation","text":""},{"location":"Data_Structure/AR250411/#iterator-design-and-behavior","title":"Iterator Design and Behavior","text":""},{"location":"Data_Structure/AR250411/#prefix-vs-postfix-operators","title":"Prefix vs Postfix Operators","text":"<ul> <li>Use <code>++iter</code> instead of <code>iter++</code> for performance:</li> <li>Prefix does not require a temporary copy.</li> <li>Postfix creates a copy before incrementing, which is slower in tight loops.</li> </ul> <pre><code>iterator&amp; operator++() { /* Prefix */ }\niterator operator++(int) { /* Postfix */ }\n</code></pre> <ul> <li>Similar pattern applies for <code>--iter</code> and <code>iter--</code>.</li> </ul>"},{"location":"Data_Structure/AR250411/#why-return-iterator-instead-of-void","title":"Why Return Iterator Instead of Void?","text":"<ul> <li>Return type must be <code>iterator&amp;</code> for prefix, and <code>iterator</code> (by value) for postfix.</li> <li>This allows usage like <code>int value = *(++iter);</code>.</li> </ul> <pre><code>iterator&amp; operator++();           // Prefix\niterator operator++(int);         // Postfix (must return copy)\n</code></pre>"},{"location":"Data_Structure/AR250411/#clist-internals-and-iterator-logic","title":"CList Internals and Iterator Logic","text":""},{"location":"Data_Structure/AR250411/#default-constructors","title":"Default Constructors","text":"<ul> <li>Default constructor initializes pointers to <code>nullptr</code>, and value to default-initialized <code>T</code>.</li> </ul> <pre><code>tNode()\n  : m_Data(), m_Next(nullptr), m_Prev(nullptr) {}\n</code></pre>"},{"location":"Data_Structure/AR250411/#list-operations","title":"List Operations","text":""},{"location":"Data_Structure/AR250411/#push_back-and-push_front","title":"<code>push_back()</code> and <code>push_front()</code>","text":"<ul> <li>O(1) with head and tail pointers.</li> <li>If list is empty:</li> <li>Set both <code>m_Head</code> and <code>m_Tail</code> to new node.</li> <li>When inserting at head:</li> <li>Connect new node to current head.</li> <li>Update old head's prev.</li> <li>When inserting at tail:</li> <li>Connect current tail to new node.</li> <li>Update tail pointer.</li> </ul>"},{"location":"Data_Structure/AR250411/#pop_front-and-pop_back","title":"<code>pop_front()</code> and <code>pop_back()</code>","text":"<ul> <li>Remove node and update adjacent pointers.</li> <li>Be careful with one-element list: update both head and tail.</li> </ul>"},{"location":"Data_Structure/AR250411/#reverse-list","title":"Reverse List","text":"<ul> <li>Recursive reversal swaps next and prev pointers.</li> <li>Base case is when node is <code>nullptr</code> or last node.</li> </ul>"},{"location":"Data_Structure/AR250411/#eraseiterator","title":"<code>erase(iterator&amp;)</code>","text":"<ul> <li>Handles three cases:</li> <li>Node is head: call <code>pop_front()</code></li> <li>Node is tail: call <code>pop_back()</code></li> <li>Node is in the middle:<ul> <li>Connect previous and next nodes together.</li> <li>Delete the target node.</li> </ul> </li> <li>Asserts that iterator's owner matches the current list.</li> </ul> <pre><code>assert(_iter.m_Owner == this);\n</code></pre>"},{"location":"Data_Structure/AR250411/#iterator-states","title":"Iterator States","text":"<ul> <li><code>m_Owner == nullptr &amp;&amp; m_TargetNode == nullptr</code> : Invalid iterator</li> <li><code>m_Owner != nullptr &amp;&amp; m_TargetNode == nullptr</code> : End iterator</li> <li>End iterator should not be incremented.</li> </ul>"},{"location":"Data_Structure/AR250411/#prefix-postfix-operator-for-list","title":"Prefix/ Postfix -- Operator for List","text":"<pre><code>iterator&amp; operator--()\n{\n  assert(m_Owner-&gt;m_Head != m_TargetNode);\n  if (nullptr == m_TargetNode)\n    m_TargetNode = m_Owner-&gt;m_Tail;\n  else\n    m_TargetNode = m_TargetNode-&gt;m_Prev;\n  return *this;\n}\n</code></pre>"},{"location":"Data_Structure/AR250411/#common-mistakes-and-tricky-cases","title":"Common Mistakes and Tricky Cases","text":""},{"location":"Data_Structure/AR250411/#mistake-postfix-operator-returning-reference","title":"Mistake: Postfix Operator Returning Reference","text":"<ul> <li><code>operator++(int)</code> must return a copy, not a reference.</li> <li>Otherwise, the reference to a local copy goes out of scope.</li> </ul>"},{"location":"Data_Structure/AR250411/#mistake-iterator-to-wrong-container","title":"Mistake: Iterator to Wrong Container","text":"<ul> <li>Ensure iterator belongs to the same list before erase.</li> <li>Use <code>assert(iter.m_Owner == this)</code> to prevent undefined behavior.</li> </ul>"},{"location":"Data_Structure/AR250411/#tricky-case-called-on-begin","title":"Tricky Case: -- Called on <code>begin()</code>","text":"<ul> <li><code>--begin()</code> is undefined; assert if <code>m_Head == m_TargetNode</code>.</li> </ul>"},{"location":"Data_Structure/AR250411/#tricky-case-called-on-end","title":"Tricky Case: ++ Called on <code>end()</code>","text":"<ul> <li><code>++end()</code> is undefined; assert if <code>m_TargetNode == nullptr</code>.</li> </ul>"},{"location":"Data_Structure/AR250411/#sample-interview-questions","title":"Sample Interview Questions","text":""},{"location":"Data_Structure/AR250411/#q1-what-is-the-time-complexity-of-push_back-in-a-doubly-linked-list-with-tail-pointer","title":"Q1: What is the time complexity of push_back in a doubly linked list with tail pointer?","text":"<p>A: O(1), since we can directly access and update the tail.</p>"},{"location":"Data_Structure/AR250411/#q2-what-is-the-difference-between-prefix-and-postfix-iterator-increment-operators","title":"Q2: What is the difference between prefix and postfix iterator increment operators?","text":"<p>A: - Prefix: modifies and returns the same iterator. - Postfix: returns a copy of the original before modification.</p>"},{"location":"Data_Structure/AR250411/#q3-how-would-you-implement-the-erase-function-for-a-doubly-linked-list","title":"Q3: How would you implement the erase function for a doubly linked list?","text":"<p>A: - Validate iterator. - If at head or tail, call <code>pop_front()</code> or <code>pop_back()</code>. - Otherwise, update surrounding node pointers and delete the target node.</p>"},{"location":"Data_Structure/AR250411/#q4-why-is-iter-preferred-over-iter-in-a-loop","title":"Q4: Why is ++iter preferred over iter++ in a loop?","text":"<p>A: <code>++iter</code> is faster because it doesn\u00a1\u00aft need to copy the iterator object.</p>"},{"location":"Data_Structure/AR250411/#q5-what-does-an-end-iterator-represent","title":"Q5: What does an end() iterator represent?","text":"<p>A: An iterator pointing to <code>nullptr</code>, which comes after the last element in the container.</p>"},{"location":"Data_Structure/AR250411/#assignments-summary-0411","title":"Assignments Summary (0411)","text":"<ul> <li>Implement <code>CArray::erase(iterator&amp;)</code> and <code>pop_back()</code>.</li> <li><code>erase()</code> should shift elements left.</li> <li><code>pop_back()</code> decreases size by one.</li> <li>Implement <code>CList::pop_back()</code>.</li> <li>Handle tricky iterator edge cases and owner validation.</li> </ul>"},{"location":"Data_Structure/AR250411/#references","title":"References","text":"<ul> <li>linked_list_template.cpp</li> <li>[CList.h] (codes/CList.h)</li> </ul>"},{"location":"Data_Structure/AR250414/","title":"Linked List: Reverse Function &amp; Notes Summary","text":""},{"location":"Data_Structure/AR250414/#date-2025-04-14","title":"Date: 2025-04-14","text":""},{"location":"Data_Structure/AR250414/#overview","title":"Overview","text":"<p>This document summarizes the key implementation and conceptual points of a Doubly Linked List (DLList), particularly focusing on the <code>reverse()</code> function, which was a Krafton coding test question. Additional system-level and algorithmic context related to data erasure, sorting, and data structures is also included.</p>"},{"location":"Data_Structure/AR250414/#core-class-dllist","title":"Core Class: DLList","text":"<p>The <code>DLList</code> template manages a doubly linked list with forward and backward traversal. Each node (<code>tNode</code>) contains:</p> <ul> <li><code>T m_Data</code>: Stored data.</li> <li><code>tNode* m_Next</code>: Pointer to the next node.</li> <li><code>tNode* m_Prev</code>: Pointer to the previous node.</li> </ul>"},{"location":"Data_Structure/AR250414/#important-members","title":"Important Members:","text":"<ul> <li><code>m_Head</code>: Points to the first node.</li> <li><code>m_Tail</code>: Points to the last node.</li> <li><code>m_Size</code>: Current size of the list.</li> </ul>"},{"location":"Data_Structure/AR250414/#reverse-function-krafton-exam-focus","title":"Reverse Function (Krafton Exam Focus)","text":"<pre><code>void reverse() {\n    reverse(m_Head);\n}\n\nvoid reverse(tNode&lt;T&gt;* _Node) {\n    if (nullptr != _Node-&gt;m_Next) {\n        reverse(_Node-&gt;m_Next);\n    }\n\n    if (_Node-&gt;m_Next == nullptr) {\n        tNode&lt;T&gt;* pTemp = m_Head;\n        m_Head = m_Tail;\n        m_Tail = pTemp;\n    }\n\n    tNode&lt;T&gt;* pTemp = _Node-&gt;m_Next;\n    _Node-&gt;m_Next = _Node-&gt;m_Prev;\n    _Node-&gt;m_Prev = pTemp;\n}\n</code></pre>"},{"location":"Data_Structure/AR250414/#key-points","title":"Key Points:","text":"<ul> <li>Recursive approach.</li> <li>Base case is the last node (<code>_Node-&gt;m_Next == nullptr</code>).</li> <li>Upon reaching the last node, <code>m_Head</code> and <code>m_Tail</code> are swapped.</li> <li>Pointers are reversed for every node recursively.</li> </ul>"},{"location":"Data_Structure/AR250414/#technical-notes","title":"Technical Notes","text":""},{"location":"Data_Structure/AR250414/#0-based-vs-1-based-data","title":"0-based vs 1-based data","text":"<ul> <li>Systems may index starting at 0 or 1. Pay attention in competitive programming and interviews.</li> </ul>"},{"location":"Data_Structure/AR250414/#forensic-data-removal","title":"Forensic Data Removal","text":"<ul> <li>Header-only deletion means the actual data remains on disk.</li> <li>Overwriting with high-volume data ensures old content becomes unrecoverable.</li> </ul>"},{"location":"Data_Structure/AR250414/#friend-class-usage","title":"<code>friend class</code> Usage","text":"<ul> <li>Enables mutual access between internal iterator classes and their containers.</li> <li>Example: <code>friend class DLList;</code> inside <code>iterator</code>.</li> </ul>"},{"location":"Data_Structure/AR250414/#carray-context-erase-function-for-comparison","title":"CArray Context &amp; Erase Function (For Comparison)","text":"<pre><code>template&lt;typename T&gt;\ntypename CArray&lt;T&gt;::iterator CArray&lt;T&gt;::erase(iterator&amp; _TargetIter) {\n    assert(this == _TargetIter.m_Owner\n        &amp;&amp; _TargetIter.m_Idx &lt; m_CurSize\n        &amp;&amp; _TargetIter.m_Idx != -1);\n\n    iterator NextIter(this, _TargetIter.m_Idx);\n\n    int MoveCount = m_CurSize - (_TargetIter.m_Idx + 1);\n    for (int i = 0; i &lt; MoveCount; ++i) {\n        m_Data[_TargetIter.m_Idx + i] = m_Data[_TargetIter.m_Idx + i + 1];\n    }\n\n    return end();\n}\n</code></pre> <p>This shows how iterator logic and range assertions ensure safe array element erasure.</p>"},{"location":"Data_Structure/AR250414/#additional-notes","title":"Additional Notes","text":""},{"location":"Data_Structure/AR250414/#search-algorithms","title":"Search Algorithms:","text":"<ul> <li>Linear search: O(n)</li> <li>Binary search: O(log n) \u2013 requires sorted data</li> </ul>"},{"location":"Data_Structure/AR250414/#graph-algorithms","title":"Graph Algorithms:","text":"<ul> <li>Handle data relationships.</li> <li>Useful for managing relational information (e.g., social networks, recommendation systems).</li> </ul>"},{"location":"Data_Structure/AR250414/#sorting-algorithms","title":"Sorting Algorithms:","text":"<ul> <li>Stable sort: Maintains order of equal elements</li> <li>Unstable sort: Does not guarantee order</li> </ul>"},{"location":"Data_Structure/AR250414/#trees","title":"Trees:","text":"<ul> <li>Represent layered structures like organizational charts or family trees.</li> <li>BSTs are optimized for fast searching.</li> </ul>"},{"location":"Data_Structure/AR250414/#references","title":"References","text":"<ul> <li><code>linked_list_2.cpp</code></li> <li><code>BST1.cpp</code></li> <li><code>WeekendHW.cpp</code></li> </ul>"},{"location":"Data_Structure/AR250414/#summary","title":"Summary","text":"<p>This document provides a clean breakdown of a double linked list reverse function (frequently tested in technical interviews), system-level data deletion insights, and supplementary algorithmic context including sorting, trees, and friend class access.</p> <p>Ready for next-level integration or implementation into custom containers or performance tests.</p>"},{"location":"Data_Structure/AR250415/","title":"Tree Algorithms and Traversals","text":""},{"location":"Data_Structure/AR250415/#date-2025-04-15","title":"Date: 2025-04-15","text":""},{"location":"Data_Structure/AR250415/#key-points","title":"Key Points","text":"<ul> <li>Trees are hierarchical data structures with a single root node</li> <li>Binary trees have at most two children per node</li> <li>Tree variants include complete binary trees, perfect binary trees, and binary search trees</li> <li>Binary search trees (BSTs) maintain sorted order for efficient searching</li> <li>Tree traversal methods: pre-order, in-order, post-order, and level-order</li> <li>Heaps are complete binary trees with specific ordering properties</li> <li>Self-balancing trees like AVL and Red-Black trees maintain logarithmic performance</li> </ul>"},{"location":"Data_Structure/AR250415/#tree-terminology-and-structure","title":"Tree Terminology and Structure","text":""},{"location":"Data_Structure/AR250415/#basic-tree-concepts","title":"Basic Tree Concepts","text":"<p>Trees are hierarchical data structures consisting of nodes connected by edges. Unlike graphs, trees cannot contain cycles.</p> <p>Key terminology: - Root Node: The topmost node in a tree hierarchy (has no parent) - Leaf Node: Any node without children - Internal Node: A node with at least one child - Edge: Connection between two nodes - Depth: Length of the path from the root to a node - Height: Length of the longest path from a node to a leaf</p>"},{"location":"Data_Structure/AR250415/#binary-trees","title":"Binary Trees","text":"<p>A binary tree is a tree where each node has at most two children, referred to as the left child and right child.</p> <pre><code>   A\n  / \\\n B   C\n/ \\ / \\\nD E F  G\n</code></pre>"},{"location":"Data_Structure/AR250415/#complete-binary-tree-cbt","title":"Complete Binary Tree (CBT)","text":"<p>A complete binary tree fills levels from left to right before moving to the next level: - Nodes are added from left to right at each level - All levels except possibly the last are completely filled - The last level has all nodes as far left as possible</p> <pre><code>    1\n   / \\\n  2   3\n / \\\n4   5\n</code></pre>"},{"location":"Data_Structure/AR250415/#perfect-binary-tree","title":"Perfect Binary Tree","text":"<p>A perfect binary tree is a complete binary tree where all levels are fully filled: - All internal nodes have exactly two children - All leaf nodes are at the same level</p> <pre><code>    1\n   / \\\n  2   3\n / \\ / \\\n4  5 6  7\n</code></pre> <p>Note: A perfect binary tree is a state or condition of a complete binary tree, not a separate structure.</p>"},{"location":"Data_Structure/AR250415/#binary-search-trees-bst","title":"Binary Search Trees (BST)","text":"<p>A binary search tree is a binary tree with an ordering property: - For each node, all values in its left subtree are less than the node's value - For each node, all values in its right subtree are greater than the node's value</p> <pre><code>    8\n   / \\\n  3   10\n / \\    \\\n1   6    14\n   / \\   /\n  4   7 13\n</code></pre>"},{"location":"Data_Structure/AR250415/#bst-operations-performance","title":"BST Operations Performance","text":"Operation Average Case Worst Case Insert O(log n) O(n) Delete O(log n) O(n) Search O(log n) O(n)"},{"location":"Data_Structure/AR250415/#comparison-with-other-data-structures","title":"Comparison with Other Data Structures","text":"Structure Insert Indexing Delete Search Dynamic Array O(1) O(1) O(n) O(n) Linked List O(1) O(n) O(1) O(n) BST O(log n) O(n) O(log n) O(log n) <p>Note: The worst-case time complexity for BST operations becomes O(n) when the tree is unbalanced (e.g., when inserting sorted data).</p>"},{"location":"Data_Structure/AR250415/#tree-traversal-methods","title":"Tree Traversal Methods","text":"<p>Tree traversal refers to the process of visiting each node in a tree data structure exactly once. The four main traversal methods are:</p>"},{"location":"Data_Structure/AR250415/#1-pre-order-traversal-node-left-right","title":"1. Pre-Order Traversal (Node-Left-Right)","text":"<p>Algorithm: 1. Visit the current node 2. Recursively traverse the left subtree 3. Recursively traverse the right subtree</p> <p>Use cases: - Creating a copy of the tree - Getting prefix expression of an expression tree</p>"},{"location":"Data_Structure/AR250415/#2-in-order-traversal-left-node-right","title":"2. In-Order Traversal (Left-Node-Right)","text":"<p>Algorithm: 1. Recursively traverse the left subtree 2. Visit the current node 3. Recursively traverse the right subtree</p> <p>Use cases: - BST traversal in sorted order - Infix expression evaluation</p>"},{"location":"Data_Structure/AR250415/#3-post-order-traversal-left-right-node","title":"3. Post-Order Traversal (Left-Right-Node)","text":"<p>Algorithm: 1. Recursively traverse the left subtree 2. Recursively traverse the right subtree 3. Visit the current node</p> <p>Use cases: - Deleting or freeing nodes in a tree - Getting postfix expression of an expression tree</p>"},{"location":"Data_Structure/AR250415/#4-level-order-traversal-breadth-first","title":"4. Level-Order Traversal (Breadth-First)","text":"<p>Algorithm: 1. Start at the root 2. Visit all nodes at the current level 3. Move to the next level</p> <p>Implementation typically uses a queue data structure.</p>"},{"location":"Data_Structure/AR250415/#example-traversals","title":"Example Traversals","text":"<pre><code>Given the tree:\n    A\n   / \\\n  B   C\n / \\ / \nD  E F\n\nPre-Order:   A \u2192 B \u2192 D \u2192 E \u2192 C \u2192 F\nIn-Order:    D \u2192 B \u2192 E \u2192 A \u2192 F \u2192 C\nPost-Order:  D \u2192 E \u2192 B \u2192 F \u2192 C \u2192 A\nLevel-Order: A \u2192 B \u2192 C \u2192 D \u2192 E \u2192 F\n</code></pre>"},{"location":"Data_Structure/AR250415/#heap-data-structures","title":"Heap Data Structures","text":"<p>A heap is a specialized tree-based data structure that satisfies the heap property:</p> <ul> <li>Min-Heap: For any node, the parent's value is less than or equal to its children's values</li> <li>Max-Heap: For any node, the parent's value is greater than or equal to its children's values</li> </ul> <p>Heaps are implemented as complete binary trees, which allows them to be efficiently represented using arrays:</p> <ul> <li>For a node at index <code>k</code>:</li> <li>Left child: <code>2k + 1</code></li> <li>Right child: <code>2k + 2</code></li> <li>Parent: <code>(k - 1) / 2</code></li> </ul> <p>Array representation of a max-heap: <pre><code>[10, 7, 9, 3, 2, 8, 1]\n\nVisualized as:\n     10\n    /  \\\n   7    9\n  / \\  / \\\n 3  2 8  1\n</code></pre></p>"},{"location":"Data_Structure/AR250415/#heap-operations","title":"Heap Operations","text":"Operation Time Complexity Find Max/Min O(1) Insert O(log n) Extract Max/Min O(log n) Heapify O(n)"},{"location":"Data_Structure/AR250415/#applications","title":"Applications","text":"<ol> <li>Heap Sort: An efficient sorting algorithm with O(n log n) time complexity</li> <li>Priority Queue: A data structure where the highest (or lowest) priority element is always removed first</li> </ol>"},{"location":"Data_Structure/AR250415/#self-balancing-binary-search-trees","title":"Self-Balancing Binary Search Trees","text":"<p>When elements are inserted into a BST in sorted order, the tree can degenerate into a linked list, resulting in O(n) time complexity for operations instead of O(log n).</p> <p>Self-balancing BSTs automatically keep their height balanced after insertions and deletions:</p>"},{"location":"Data_Structure/AR250415/#avl-trees","title":"AVL Trees","text":"<ul> <li>Named after inventors Adelson-Velsky and Landis</li> <li>Maintains the property that for every node, the heights of its left and right subtrees differ by at most 1</li> <li>Uses rotation operations to maintain balance</li> </ul>"},{"location":"Data_Structure/AR250415/#red-black-trees","title":"Red-Black Trees","text":"<ul> <li>Each node is colored either red or black</li> <li>The root and leaves (NIL nodes) are black</li> <li>If a node is red, both its children are black</li> <li>All paths from a node to its NIL descendants contain the same number of black nodes</li> <li>Used in many standard library implementations (like <code>std::map</code> and <code>std::set</code>)</li> </ul>"},{"location":"Data_Structure/AR250415/#comparison","title":"Comparison","text":"Tree Type Insert Delete Search Space Unbalanced BST O(n) O(n) O(n) O(n) AVL Tree O(log n) O(log n) O(log n) O(n) Red-Black Tree O(log n) O(log n) O(log n) O(n) <p>AVL trees maintain stricter balance than Red-Black trees, resulting in faster lookups but slower insertions and deletions due to more frequent rotations.</p>"},{"location":"Data_Structure/AR250415/#c-standard-library-implementations","title":"C++ Standard Library Implementations","text":"<p>The C++ Standard Library includes several tree-based data structures:</p> <ul> <li><code>std::set</code>: A collection of unique keys, sorted by keys (typically implemented as a Red-Black Tree)</li> <li><code>std::map</code>: A collection of key-value pairs, sorted by keys (typically implemented as a Red-Black Tree)</li> <li><code>std::multiset</code>: A collection of keys, sorted by keys, allows duplicate keys</li> <li><code>std::multimap</code>: A collection of key-value pairs, sorted by keys, allows duplicate keys</li> </ul> <p>Example usage: <pre><code>std::set&lt;int&gt; setInt;\nsetInt.insert(1);\nsetInt.insert(5);\nsetInt.insert(3);\n\n// Iterating will access elements in sorted order (1, 3, 5)\nfor(std::set&lt;int&gt;::iterator setIter = setInt.begin(); \n    setIter != setInt.end(); \n    ++setIter)\n{\n    std::cout &lt;&lt; *setIter &lt;&lt; std::endl;\n}\n</code></pre></p>"},{"location":"Data_Structure/AR250415/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between a complete binary tree and a perfect binary tree? A: A complete binary tree fills levels from left to right, with all levels except possibly the last completely filled, and the last level has nodes as far left as possible. A perfect binary tree is a complete binary tree where all levels are fully filled\u2014all internal nodes have exactly two children and all leaf nodes are at the same level.</p> <p>Q: In a binary search tree, how would you find the in-order successor of a given node? A: If the node has a right child, the in-order successor is the leftmost node in its right subtree. If it doesn't have a right child, the in-order successor is the lowest ancestor whose left child is also an ancestor of the given node.</p> <p>Q: What happens to a BST's performance if you insert elements in sorted order? A: If elements are inserted in sorted order (e.g., 1, 2, 3, 4, 5), the BST degenerates into a linked list, and the time complexity for operations becomes O(n) instead of O(log n). This is why self-balancing trees like AVL or Red-Black trees are important for maintaining logarithmic performance.</p> <p>Q: How is a heap different from a binary search tree? A: A heap is a complete binary tree that satisfies the heap property (parent values are greater/less than child values), optimized for finding min/max values quickly. A BST maintains left subtree values &lt; node value &lt; right subtree values, optimized for searching. Heaps are typically implemented using arrays, while BSTs use node structures with pointers.</p> <p>Q: Why might you choose a Red-Black tree over an AVL tree? A: Red-Black trees perform fewer rotations during insertion and deletion compared to AVL trees, making them more efficient for applications with frequent modifications. AVL trees maintain stricter balance, making them slightly better for read-heavy applications. Standard library containers like <code>std::map</code> and <code>std::set</code> typically use Red-Black trees for this reason.</p> <p>Q: What is the time complexity of each tree traversal method? A: All four traversal methods (pre-order, in-order, post-order, and level-order) have O(n) time complexity, where n is the number of nodes in the tree, as each node must be visited exactly once.</p> <p>Q: How would you implement level-order traversal of a binary tree? A: Level-order traversal can be implemented using a queue. Start by enqueuing the root node. Then, while the queue is not empty, dequeue a node, process it, and enqueue its children (if any). This process continues until the queue is empty.</p>"},{"location":"Data_Structure/AR250415/#tree-algorithms-and-traversals_1","title":"Tree Algorithms and Traversals","text":""},{"location":"Data_Structure/AR250415/#date-2025-04-15_1","title":"Date: 2025-04-15","text":""},{"location":"Data_Structure/AR250415/#key-points_1","title":"Key Points","text":"<ul> <li>Trees are hierarchical data structures with a single root node</li> <li>Binary trees have at most two children per node</li> <li>Complete binary trees fill levels from left to right before proceeding to the next level</li> <li>Perfect binary trees are complete binary trees with all levels fully filled</li> <li>Binary search trees (BSTs) maintain sorted order for efficient searching</li> <li>Tree traversal methods include pre-order, in-order, post-order, and level-order</li> <li>Heaps are complete binary trees optimized for finding min/max values quickly</li> <li>Self-balancing trees prevent performance degradation</li> </ul>"},{"location":"Data_Structure/AR250415/#tree-terminology-and-structure_1","title":"Tree Terminology and Structure","text":"<p>A tree is a hierarchical data structure consisting of nodes connected by edges. Unlike graphs, trees cannot contain cycles.</p>"},{"location":"Data_Structure/AR250415/#basic-components","title":"Basic Components:","text":"<ul> <li>Root Node: The topmost node without any parent</li> <li>Leaf Node: Any node without children</li> <li>Internal Node: A node with at least one child</li> </ul> <p>In graph terminology, the highest node is referred to as a vertex, but in trees, the parentless top node is specifically called the root.</p>"},{"location":"Data_Structure/AR250415/#binary-tree-types","title":"Binary Tree Types","text":"<p>A binary tree restricts each node to have at most two children. Several specialized forms exist:</p> <ul> <li>Complete Binary Tree (CBT): Nodes are filled from left to right at each level before moving down</li> <li>Perfect Binary Tree: A CBT where all levels are completely filled</li> </ul> <p>It's important to note that a perfect binary tree is a state of a complete binary tree, not a separate structure.</p>"},{"location":"Data_Structure/AR250415/#binary-search-trees-bst_1","title":"Binary Search Trees (BST)","text":"<p>Binary search trees maintain a specific ordering property: - All values in a node's left subtree are less than the node's value - All values in a node's right subtree are greater than the node's value</p> <p>This property makes BSTs excellent for searching operations, as each comparison eliminates half of the remaining elements.</p>"},{"location":"Data_Structure/AR250415/#performance-comparison","title":"Performance Comparison","text":"Structure Insert Indexing Delete Search Dynamic Array O(1) O(1) O(n) O(n) Linked List O(1) O(n) O(1) O(n) BST O(log n) O(n) O(log n) O(log n) <p>C++ Standard Library implementations: - <code>std::vector</code>: Dynamic array - <code>std::list</code>: Linked list - <code>std::set</code>, <code>std::map</code>: Binary search trees (typically Red-Black trees)</p>"},{"location":"Data_Structure/AR250415/#tree-traversal-methods_1","title":"Tree Traversal Methods","text":"<p>The four main ways to traverse a tree are:</p>"},{"location":"Data_Structure/AR250415/#1-pre-order-node-left-right","title":"1. Pre-Order (Node-Left-Right)","text":"<p>Visit the current node first, then traverse left subtree, then right subtree. Useful for creating a copy of the tree.</p>"},{"location":"Data_Structure/AR250415/#2-in-order-left-node-right","title":"2. In-Order (Left-Node-Right)","text":"<p>Traverse left subtree, visit the current node, then traverse right subtree. For BSTs, this produces elements in sorted order.</p>"},{"location":"Data_Structure/AR250415/#3-post-order-left-right-node","title":"3. Post-Order (Left-Right-Node)","text":"<p>Traverse left subtree, traverse right subtree, then visit the current node. Useful when deleting nodes or freeing memory.</p>"},{"location":"Data_Structure/AR250415/#4-level-order-breadth-first","title":"4. Level-Order (Breadth-First)","text":"<p>Visit nodes level by level from top to bottom. Typically implemented using a queue.</p>"},{"location":"Data_Structure/AR250415/#example","title":"Example","text":"<pre><code>Given the tree:\n    A\n   / \\\n  B   C\n / \\ / \nD  E F\n\nPre-Order:   A \u2192 B \u2192 D \u2192 E \u2192 C \u2192 F\nIn-Order:    D \u2192 B \u2192 E \u2192 A \u2192 F \u2192 C\nPost-Order:  D \u2192 E \u2192 B \u2192 F \u2192 C \u2192 A\nLevel-Order: A \u2192 B \u2192 C \u2192 D \u2192 E \u2192 F\n</code></pre>"},{"location":"Data_Structure/AR250415/#heap-data-structures_1","title":"Heap Data Structures","text":"<p>Heaps are specialized complete binary trees that satisfy a specific property: - Min-heap: Parent values are less than or equal to child values - Max-heap: Parent values are greater than or equal to child values</p> <p>Heaps can be efficiently implemented using arrays, where for a node at index <code>k</code>: - Left child: <code>2k + 1</code> - Right child: <code>2k + 2</code> - Parent: <code>(k - 1) / 2</code></p> <p>This property allows heaps to be implemented without pointers, using array indexing instead.</p>"},{"location":"Data_Structure/AR250415/#applications_1","title":"Applications","text":"<ul> <li>Heap Sort: An efficient O(n log n) sorting algorithm</li> <li>Priority Queue: Data structure where the highest priority element is always removed first</li> </ul>"},{"location":"Data_Structure/AR250415/#self-balancing-binary-search-trees_1","title":"Self-Balancing Binary Search Trees","text":"<p>A major weakness of BSTs is that they can degenerate into linked lists if data is inserted in sorted order, reducing operation efficiency from O(log n) to O(n).</p> <p>Self-balancing trees address this issue:</p> <ul> <li>AVL Trees: Maintain strict balance where subtree heights differ by at most 1</li> <li>Red-Black Trees: Use color properties to maintain balance with fewer rotations</li> </ul> <p>Red-Black trees are commonly used in library implementations like <code>std::map</code> and <code>std::set</code> because they require fewer rotations than AVL trees, making them more efficient for insertions and deletions.</p>"},{"location":"Data_Structure/AR250415/#interview-questions_1","title":"Interview Questions","text":"<p>Q: What is the difference between a complete binary tree and a perfect binary tree? A: A complete binary tree fills all levels from left to right before moving to the next level, with the last level potentially partially filled (but filled from left). A perfect binary tree is a complete binary tree where all levels are fully filled\u2014all internal nodes have exactly two children and all leaf nodes are at the same level.</p> <p>Q: How would you implement level-order traversal of a binary tree? A: Level-order traversal can be implemented using a queue. Start by enqueuing the root. While the queue isn't empty, dequeue a node, process it, and enqueue its children. This continues until the queue is empty.</p> <p>Q: What happens to a BST's performance if you insert elements in sorted order? A: If elements are inserted in sorted order (e.g., 1, 2, 3, 4, 5), the BST degenerates into a linked list, and the time complexity becomes O(n) instead of O(log n). This is why self-balancing trees are important for maintaining logarithmic performance.</p> <p>Q: How is a heap different from a binary search tree? A: A heap is a complete binary tree satisfying the heap property (parent values are greater/less than child values), optimized for finding min/max values quickly. A BST maintains left &lt; node &lt; right ordering for all nodes, optimized for searching. Heaps are typically implemented using arrays, while BSTs use node structures with pointers.</p> <p>Q: In a binary search tree, how would you find the in-order successor of a given node? A: If the node has a right child, the in-order successor is the leftmost node in its right subtree. If it doesn't have a right child, the in-order successor is the lowest ancestor whose left child is also an ancestor of the given node.</p> <p>Q: Why might you choose a Red-Black tree over an AVL tree? A: Red-Black trees perform fewer rotations during insertion and deletion compared to AVL trees, making them more efficient for applications with frequent modifications. AVL trees maintain stricter balance, making them slightly better for read-heavy applications.</p> <p>Q: Why is in-order traversal particularly important for binary search trees? A: In-order traversal of a BST visits nodes in sorted order (ascending). This property makes it useful for producing a sorted list of all elements in the tree and is why iterators in <code>std::set</code> and <code>std::map</code> follow in-order traversal.</p>"},{"location":"Data_Structure/AR250416/","title":"Binary Search Tree: Study Guide","text":""},{"location":"Data_Structure/AR250416/#date-2025-04-16","title":"Date: 2025-04-16","text":""},{"location":"Data_Structure/AR250416/#overview","title":"Overview","text":"<p>A Binary Search Tree (BST) is a hierarchical structure that stores key-value pairs with strict ordering rules for efficient data manipulation. This guide walks through essential implementation elements, corner cases, and interview-related insights.</p>"},{"location":"Data_Structure/AR250416/#bst-node-structure","title":"BST Node Structure","text":"<p>Each BST node includes: - A key-value pair used for storage and sorting. - Three pointers:   - <code>Parent</code> (index 0)   - <code>Left Child</code> (index 1)   - <code>Right Child</code> (index 2)</p> <pre><code>// Node structure for a BST\ntemplate&lt;typename T1, typename T2&gt;\nstruct Node {\n    Pair&lt;T1, T2&gt; pair;\n    Node* ptr[3];\n\n    Node() : pair(), ptr{nullptr, nullptr, nullptr} {}\n    Node(const Pair&lt;T1, T2&gt;&amp; _pair, Node* _Parent, Node* _LChild, Node* _RChild)\n        : pair(_pair), ptr{_Parent, _LChild, _RChild} {}\n};\n</code></pre>"},{"location":"Data_Structure/AR250416/#bst-class-initialization","title":"BST Class &amp; Initialization","text":"<p>The BST class manages the root node and the size of the tree:</p> <pre><code>// BST class definition\ntemplate&lt;typename T1, typename T2&gt;\nclass BSTree {\nprivate:\n    Node&lt;T1, T2&gt;* m_Root;\n    int m_Size;\n\npublic:\n    BSTree() : m_Root(nullptr), m_Size(0) {}\n};\n</code></pre> <p><code>m_Root</code> must be declared inside the BST class to track the tree's entry point.</p> <p>In contrast, the Node structure includes: <pre><code>tBSTNode* pParent;\ntBSTNode* pLeftChild;\ntBSTNode* pRightChild;\n</code></pre> These pointers are naturally interpreted in context and ensure internal link integrity.</p>"},{"location":"Data_Structure/AR250416/#insertion-operation","title":"Insertion Operation","text":"<p>The insert function ensures: - The first inserted node becomes the root. - Subsequent nodes are sorted left (smaller) or right (larger). - Duplicate keys are explicitly rejected via <code>assert(false)</code>.</p> <pre><code>// Inserting into BST\nvoid BSTree&lt;T1, T2&gt;::insert(const Pair&lt;T1, T2&gt;&amp; _pair) {\n    Node&lt;T1, T2&gt;* newNode = new Node&lt;T1, T2&gt;(_pair);\n    if (m_Root == nullptr) {\n        m_Root = newNode;\n        ++m_Size;\n        return;\n    }\n\n    Node&lt;T1, T2&gt;* itrNode = m_Root;\n    while (true) {\n        if (newNode-&gt;pair.key &lt; itrNode-&gt;pair.key) {\n            if (!itrNode-&gt;ptr[LCHILD]) {\n                itrNode-&gt;ptr[LCHILD] = newNode;\n                newNode-&gt;ptr[PARENT] = itrNode;\n                ++m_Size;\n                break;\n            } else {\n                itrNode = itrNode-&gt;ptr[LCHILD];\n            }\n        } else if (newNode-&gt;pair.key &gt; itrNode-&gt;pair.key) {\n            if (!itrNode-&gt;ptr[RCHILD]) {\n                itrNode-&gt;ptr[RCHILD] = newNode;\n                newNode-&gt;ptr[PARENT] = itrNode;\n                ++m_Size;\n                break;\n            } else {\n                itrNode = itrNode-&gt;ptr[RCHILD];\n            }\n        } else {\n            // Duplicate key detected\n            assert(false);\n        }\n    }\n}\n</code></pre>"},{"location":"Data_Structure/AR250416/#common-mistake","title":"Common Mistake","text":"<p>In STL containers like <code>std::map</code>, inserting a key that already exists will simply ignore the new value. This leads to: - Untracked memory (if dynamic memory was used) - Potential memory leaks</p> <p>Always ensure duplicates are prevented, asserted, or handled using a container like <code>std::multimap</code>, which stores same-key elements in a linked fashion.</p>"},{"location":"Data_Structure/AR250416/#clearing-the-bst","title":"Clearing the BST","text":"<p>To delete all nodes: - Perform level-order traversal using a queue (FIFO) structure. - This is known as Breadth-First Search (BFS) and guarantees all nodes are deleted without breaking pointer chains.</p> <pre><code>// Clearing all nodes using BFS\nvoid BSTree&lt;T1, T2&gt;::clear() {\n    if (!m_Root) return;\n\n    std::queue&lt;Node&lt;T1, T2&gt;*&gt; nodeQueue;\n    nodeQueue.push(m_Root);\n\n    while (!nodeQueue.empty()) {\n        Node&lt;T1, T2&gt;* current = nodeQueue.front();\n        nodeQueue.pop();\n\n        if (current-&gt;ptr[LCHILD]) nodeQueue.push(current-&gt;ptr[LCHILD]);\n        if (current-&gt;ptr[RCHILD]) nodeQueue.push(current-&gt;ptr[RCHILD]);\n\n        delete current;\n    }\n\n    m_Root = nullptr;\n    m_Size = 0;\n}\n</code></pre> <p>BFS is generally safer for tree deletion. For DFS-based deletion, a stack (LIFO) should be used.</p>"},{"location":"Data_Structure/AR250416/#in-order-successor-predecessor","title":"In-Order Successor &amp; Predecessor","text":"<p>In-order traversal visits nodes in key-sorted order.</p>"},{"location":"Data_Structure/AR250416/#successor","title":"Successor:","text":"<ul> <li>If the node has a right child: return the leftmost node in the right subtree.</li> <li>If not: move up until you find a node that is a left child of its parent.</li> </ul> <pre><code>// Find the in-order successor\nNode&lt;T1, T2&gt;* BSTree&lt;T1, T2&gt;::getInOrderSuccessor(Node&lt;T1, T2&gt;* node) {\n    if (node-&gt;HasRChild()) {\n        Node&lt;T1, T2&gt;* successor = node-&gt;ptr[RCHILD];\n        while (successor-&gt;ptr[LCHILD]) successor = successor-&gt;ptr[LCHILD];\n        return successor;\n    }\n\n    while (node-&gt;ptr[PARENT] &amp;&amp; node == node-&gt;ptr[PARENT]-&gt;ptr[RCHILD]) {\n        node = node-&gt;ptr[PARENT];\n    }\n\n    return node-&gt;ptr[PARENT];\n}\n</code></pre>"},{"location":"Data_Structure/AR250416/#predecessor","title":"Predecessor:","text":"<ul> <li>If the node has a left child: return the rightmost node in the left subtree.</li> <li>Otherwise: move up to a parent node where the current node is in the right.</li> </ul>"},{"location":"Data_Structure/AR250416/#stl-vs-custom-bst","title":"STL vs Custom BST","text":""},{"location":"Data_Structure/AR250416/#stl-set-vs-map","title":"STL <code>set</code> vs <code>map</code>:","text":"<ul> <li><code>set&lt;T&gt;</code>: Sorted by element value (used as key).</li> <li><code>map&lt;K, V&gt;</code>: Sorted by key only, value follows.</li> </ul>"},{"location":"Data_Structure/AR250416/#multimap","title":"Multimap:","text":"<ul> <li>Allows duplicate keys.</li> <li>Internally maintains multiple values for the same key using a structure like a linked list at each node.</li> </ul>"},{"location":"Data_Structure/AR250416/#recommendation","title":"Recommendation:","text":"<ul> <li>Avoid duplicate keys unless using <code>multimap</code>.</li> <li>For standard BSTs, explicitly prevent duplicates to avoid memory issues.</li> </ul>"},{"location":"Data_Structure/AR250416/#custom-utility-templates","title":"Custom Utility Templates","text":"<p>Helpful for wrapping key-value pairs in custom implementations:</p> <pre><code>// Pair creation helper\ntemplate&lt;typename T1, typename T2&gt;\ntPair MakePair(const T1&amp; _First, const T2&amp; _Second) {\n    tPair pair;\n    pair.first = _First;\n    pair.second = _Second;\n    return pair;\n}\n</code></pre>"},{"location":"Data_Structure/AR250416/#interview-questions-and-answers","title":"Interview Questions and Answers","text":""},{"location":"Data_Structure/AR250416/#q1-what-is-the-time-complexity-of-insertion-in-a-bst","title":"Q1: What is the time complexity of insertion in a BST?","text":"<p>A: Average case is O(log n), but worst-case (unbalanced tree) is O(n).</p>"},{"location":"Data_Structure/AR250416/#q2-how-does-a-bst-handle-duplicate-keys","title":"Q2: How does a BST handle duplicate keys?","text":"<p>A: Standard BST (like <code>std::set</code>, <code>std::map</code>) does not allow duplicates. You must handle this explicitly or use <code>std::multimap</code>.</p>"},{"location":"Data_Structure/AR250416/#q3-describe-how-in-order-traversal-works-in-bst","title":"Q3: Describe how in-order traversal works in BST.","text":"<p>A: It recursively visits left child, current node, and right child. This results in ascending order of keys.</p>"},{"location":"Data_Structure/AR250416/#q4-how-do-you-find-the-in-order-successor-of-a-node","title":"Q4: How do you find the in-order successor of a node?","text":"<p>A: If right child exists, go to the leftmost node of the right subtree. Else, move up to the first ancestor where the node is in the left subtree.</p>"},{"location":"Data_Structure/AR250416/#q5-why-use-bfs-for-deletion-in-a-destructor","title":"Q5: Why use BFS for deletion in a destructor?","text":"<p>A: It ensures each node is visited once and avoids deleting children of already deleted nodes.</p>"},{"location":"Data_Structure/AR250416/#conclusion","title":"Conclusion","text":"<p>This study covers the foundational structure and behaviors of BSTs with emphasis on implementation challenges and common interview traps. Mastery of BST fundamentals, including memory safety and proper traversal strategies, sets the groundwork for working with balanced trees like AVL or Red-Black trees.</p>"},{"location":"Data_Structure/AR250417/","title":"Binary Search Tree Iterator and Enum in C++","text":""},{"location":"Data_Structure/AR250417/#date-2025-04-17","title":"Date: 2025-04-17","text":""},{"location":"Data_Structure/AR250417/#key-points","title":"Key Points","text":"<ul> <li>Enums provide a way to create named constants and custom types</li> <li>Enum classes help avoid name collisions by scoping enum values</li> <li>BST iterators follow in-order traversal to access elements in sorted order</li> <li>Iterator implementation requires handling tree traversal logic for operations like <code>++</code>, <code>--</code></li> </ul>"},{"location":"Data_Structure/AR250417/#enumerations-enum-in-c","title":"Enumerations (Enum) in C++","text":"<p>Enumerations in C++ provide a way to define named integer constants, making code more readable and self-documenting.</p>"},{"location":"Data_Structure/AR250417/#basic-enum","title":"Basic Enum","text":"<pre><code>enum PLAYER_STATE \n{\n    IDLE,    // 0\n    MOVE,    // 1\n    JUMP,    // 2\n    ATTACK,  // 3\n    HURT,    // 4\n    DEATH,   // 5\n    FALL     // 6\n}; \n</code></pre> <p>Key characteristics: - Enum values are implicitly converted to integers - Occupies 4 bytes in memory (same as an int) - Values start from 0 by default and increment by 1</p>"},{"location":"Data_Structure/AR250417/#advantages-over-macros","title":"Advantages over Macros","text":"<p>While macros can be used for similar purposes, enums offer several advantages:</p> <pre><code>// Using macros\n#define PLAYER_IDLE 0\n#define PLAYER_MOVE 1\n#define PLAYER_JUMP 2\n\n// Using enum\nenum PLAYER_STATE { IDLE, MOVE, JUMP };\n</code></pre> <p>Enums are: - Type-checked at compile time - Can be used to define custom types - Visible in debuggers with their symbolic names</p>"},{"location":"Data_Structure/AR250417/#enum-class-c11","title":"Enum Class (C++11)","text":"<p>Enum classes provide scoped enumeration values, preventing name collisions:</p> <pre><code>enum class NEW_ENUM\n{\n    TYPE_1, \n    TYPE_2\n};\n\nenum class OTHER_ENUM\n{\n    TYPE_1,  // No collision with NEW_ENUM::TYPE_1\n    TYPE_2\n};\n\n// Usage\nNEW_ENUM NewType = NEW_ENUM::TYPE_1;\nOTHER_ENUM OtherType = OTHER_ENUM::TYPE_1;\n</code></pre>"},{"location":"Data_Structure/AR250417/#binary-search-tree-iterator-implementation","title":"Binary Search Tree Iterator Implementation","text":""},{"location":"Data_Structure/AR250417/#iterator-concept","title":"Iterator Concept","text":"<p>A BST iterator provides sequential access to BST elements in a specific order (typically in-order traversal):</p> <pre><code>        1000 \n      /      \\\n    500      1500\n</code></pre> <p>In-order traversal visits: 500 \u2192 1000 \u2192 1500</p>"},{"location":"Data_Structure/AR250417/#begin-iterator-implementation","title":"Begin Iterator Implementation","text":"<p>To implement <code>begin()</code>, we need to find the leftmost node in the tree:</p> <pre><code>tBSTNode&lt;T1, T2&gt; * pBeginNode = m_Root;\nif(!m_Root) return end();  \nwhile(pBeginNode-&gt;arrPtr[LCHILD] != nullptr)\n{\n    pBeginNode = pBeginNode-&gt;arrPtr[LCHILD];\n}\n\nreturn iterator(this, pBeginNode);\n</code></pre>"},{"location":"Data_Structure/AR250417/#end-iterator-implementation","title":"End Iterator Implementation","text":"<p>The <code>end()</code> iterator is represented by a nullptr:</p> <pre><code>return iterator(this, nullptr);\n</code></pre>"},{"location":"Data_Structure/AR250417/#increment-operator-logic","title":"Increment (++) Operator Logic","text":"<p>For in-order traversal, the increment operation needs to find the \"next\" node according to these rules:</p> <ol> <li>If the current node has a right child:</li> <li>Go to the right child</li> <li> <p>Then go as far left as possible from that right child</p> </li> <li> <p>If the current node doesn't have a right child:</p> </li> <li>Go up to the parent (if any)</li> <li>If the current node is a left child of its parent, the parent is next</li> <li>If the current node is a right child, keep going up until finding a node that is a left child of its parent</li> </ol> <pre><code>// Pseudocode for ++ operator\nif (currentNode-&gt;right != nullptr) {\n    // Move to right child\n    currentNode = currentNode-&gt;right;\n\n    // Then go as far left as possible\n    while (currentNode-&gt;left != nullptr) {\n        currentNode = currentNode-&gt;left;\n    }\n    return currentNode;\n}\nelse {\n    // No right child, so go up to parent\n    while (currentNode is a right child of its parent) {\n        currentNode = parent;\n    }\n    if (currentNode is a left child) {\n        return parent;\n    }\n    else {\n        // We've reached the root and there's no next node\n        return nullptr;\n    }\n}\n</code></pre>"},{"location":"Data_Structure/AR250417/#decrement-operator","title":"Decrement (--) Operator","text":"<p>The decrement operator follows similar logic but in reverse:</p> <ol> <li>If the current node has a left child:</li> <li>Go to the left child</li> <li> <p>Then go as far right as possible from that left child</p> </li> <li> <p>If the current node doesn't have a left child:</p> </li> <li>Go up to the parent</li> <li>If the current node is a right child of its parent, the parent is the previous node</li> <li>If the current node is a left child, keep going up until finding a node that is a right child of its parent</li> </ol>"},{"location":"Data_Structure/AR250417/#usage-example","title":"Usage Example","text":"<pre><code>BST&lt;int, float&gt; myBST;\n\nmyBST.insert(MakePair(1000, 1.1f));\nmyBST.insert(MakePair(500, 2.2f));\nmyBST.insert(MakePair(1500, 3.3f));\n\nBST&lt;int, float&gt;::iterator iter = myBST.begin();\n\n// Accessing elements\nint First = (*iter).first;\nfloat Second = (*iter).second;\n\n// Finding elements\niter = myBST.find(1700);  // Returns end() if not found\n\n// Iterating through all elements\nfor (iter = myBST.begin(); iter != myBST.end(); ++iter)\n{\n    std::cout &lt;&lt; (*iter).first &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"Data_Structure/AR250417/#tricky-cases-with-enums","title":"Tricky Cases with Enums","text":""},{"location":"Data_Structure/AR250417/#force-casting-to-enum-values","title":"Force Casting to Enum Values","text":"<p>Enums can be force-cast to values not defined in the enumeration, but this can lead to undefined behavior:</p> <pre><code>PLAYER_STATE PlayerState = (PLAYER_STATE) 220;  // Valid but potentially dangerous\n</code></pre>"},{"location":"Data_Structure/AR250417/#name-collisions","title":"Name Collisions","text":"<p>Without enum classes, name collisions can occur across different enums:</p> <pre><code>enum TYPE_A { RED, GREEN, BLUE };\nenum TYPE_B { RED, YELLOW, PURPLE };  // Compiler error: RED already defined\n\n// Solution with prefixes\nenum TYPE_A { TA_RED, TA_GREEN, TA_BLUE };\nenum TYPE_B { TB_RED, TB_YELLOW, TB_PURPLE };\n\n// Better solution with enum classes\nenum class TypeA { RED, GREEN, BLUE };\nenum class TypeB { RED, YELLOW, PURPLE };\n</code></pre>"},{"location":"Data_Structure/AR250417/#interview-questions","title":"Interview Questions","text":"<p>Q: What is the difference between <code>enum</code> and <code>enum class</code> in C++? A: <code>enum</code> declares unscoped enumerations where enum values are placed in the enclosing scope, which can lead to name collisions. <code>enum class</code> (introduced in C++11) creates scoped enumerations where values must be accessed through the enum name (e.g., <code>NEW_ENUM::TYPE_1</code>), avoiding name collisions. Enum classes also don't implicitly convert to integers.</p> <p>Q: How would you implement the <code>find()</code> method for a Binary Search Tree? A: The <code>find()</code> method would recursively or iteratively traverse the tree, comparing the target key with the current node's key. If equal, return the current node. If less, search the left subtree. If greater, search the right subtree. Return null if the key is not found.</p> <p>Q: Explain the traversal logic for a binary search tree iterator's <code>++</code> operator. A: For in-order traversal, the increment operator first checks if the current node has a right child. If so, it moves to the right child and then goes as far left as possible. If there's no right child, it goes up to the parent, checking if the current node is a left child of its parent. If it is, the parent is the next node. If not, it continues up the tree until finding a node that is a left child of its parent.</p> <p>Q: How would you implement a binary search tree's <code>begin()</code> method for in-order traversal? A: The <code>begin()</code> method would start from the root and traverse left as far as possible to find the smallest value in the tree. If the tree is empty, it returns the <code>end()</code> iterator.</p> <p>Q: What would be the output of iterating through a BST with nodes 1000, 500, and 1500 using in-order traversal? A: The output would be: 500, 1000, 1500 (sorted in ascending order).</p> <p>Q: What are the advantages of using enum over #define macros in C++? A: Enums are type-checked at compile time, can be used with debuggers (showing symbolic names instead of raw values), can be used as custom types, and are processed by the compiler rather than the preprocessor. This makes them safer and more maintainable than macros.</p>"},{"location":"Data_Structure/AR250417/#common-mistakes","title":"Common Mistakes","text":"<p>Using raw enum values without understanding their meaning: <pre><code>int iState = 0;  // Unclear what state this represents\niState = 1;      // Other developers can't understand the meaning\n\n// Better approach\nPLAYER_STATE state = IDLE;\nstate = MOVE;    // Much clearer meaning\n</code></pre></p> <p>Forgetting scoping for enum classes: <pre><code>enum class Direction { UP, DOWN, LEFT, RIGHT };\n\nDirection dir = UP;                  // Error: UP not in scope\nDirection dir = Direction::UP;       // Correct\n</code></pre></p> <p>Assuming enum values have specific numeric values: <pre><code>enum Color { RED, GREEN = 10, BLUE };  // RED is 0, GREEN is 10, BLUE is 11\n</code></pre></p> <p>Always check the actual values when relying on the numeric representation of enums.</p>"},{"location":"Data_Structure/AR250421/","title":"Binary Search Tree Erase Logic","text":""},{"location":"Data_Structure/AR250421/#date-2025-04-21","title":"Date: 2025-04-21","text":""},{"location":"Data_Structure/AR250421/#key-points","title":"Key Points","text":"<ul> <li><code>find</code> locates a node using binary search logic.</li> <li>Iterators traverse the BST in-order using <code>++</code> and <code>--</code> operators.</li> <li><code>erase</code> supports deletion of:</li> <li>Leaf nodes</li> <li>Nodes with one child</li> <li>Nodes with two children (replaced by inorder successor)</li> </ul>"},{"location":"Data_Structure/AR250421/#overview","title":"Overview","text":"<p>This study note focuses on the implementation of <code>find</code>, iterator behavior, and the <code>erase</code> operation in a templated Binary Search Tree (BST). The BST manages memory explicitly, with pointer-based node structures and recursive logic for insertion and traversal.</p>"},{"location":"Data_Structure/AR250421/#find-and-iterator-basics","title":"Find and Iterator Basics","text":"<pre><code>BST&lt;int, int&gt; bst;\nbst.insert(MakePair(8, 0));\nbst.insert(MakePair(4, 0));\nbst.insert(MakePair(12, 0));\n\nBST&lt;int, int&gt;::iterator iter = bst.find(8);\nif (iter != bst.end()) {\n    std::cout &lt;&lt; (*iter).first &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"Data_Structure/AR250421/#erase-function-explanation","title":"<code>erase</code> Function Explanation","text":"<p>The <code>erase</code> function is responsible for removing a node from a Binary Search Tree (BST) while maintaining the tree\u2019s structure. Let\u2019s go through each scenario and corresponding code:</p>"},{"location":"Data_Structure/AR250421/#1-precondition-and-validation","title":"1. Precondition and Validation","text":"<p>Before any deletion logic begins, the function checks that the iterator is valid: <pre><code>assert(_iter.m_Owner == this &amp;&amp; _iter.m_Target != nullptr);\n</code></pre> - Explanation:   This ensures that the iterator belongs to the current BST instance and that it points to a valid node. If either condition fails, the program will stop, preventing undefined behavior.</p>"},{"location":"Data_Structure/AR250421/#2-deleting-a-leaf-node-no-children","title":"2. Deleting a Leaf Node (No Children)","text":"<p>If the node is a leaf (i.e., it has no children), it\u2019s the simplest case: <pre><code>if (_iter.m_Target-&gt;IsLeaf())\n{\n    pSuccessor = GetInorderSuccessor(_iter.m_Target);\n\n    if (_iter.m_Target == m_Root)\n    {\n        m_Root = nullptr;\n    }\n    else\n    {\n        if (_iter.m_Target-&gt;IsLChild())\n            _iter.m_Target-&gt;GetNode(PARENT)-&gt;arrPtr[LCHILD] = nullptr;\n        else\n            _iter.m_Target-&gt;GetNode(PARENT)-&gt;arrPtr[RCHILD] = nullptr;            \n    }        \n\n    delete _iter.m_Target;\n    --m_Size;    \n}\n</code></pre> - Explanation:   - If the node is the root and has no children, the root pointer is simply set to <code>nullptr</code>.   - If the node has a parent, the parent\u2019s pointer to this node is cleared. The <code>IsLChild</code> check determines if the node is a left or right child and updates the appropriate pointer in the parent node.   - Finally, the node\u2019s memory is deallocated and the size of the BST is decremented.</p>"},{"location":"Data_Structure/AR250421/#3-deleting-a-node-with-one-child","title":"3. Deleting a Node with One Child","text":"<p>If the node has one child (either left or right), the child is promoted to the node\u2019s position: <pre><code>else if (!_iter.m_Target-&gt;IsFull())\n{\n    pSuccessor = GetInorderSuccessor(_iter.m_Target);\n\n    if (_iter.m_Target == m_Root)\n    {\n        if (_iter.m_Target-&gt;HasLChild())\n            m_Root = _iter.m_Target-&gt;GetNode(LCHILD);\n        else\n            m_Root = _iter.m_Target-&gt;GetNode(RCHILD);\n        m_Root-&gt;arrPtr[PARENT] = nullptr;\n    }\n    else\n    {\n        NODE_TYPE ChildType = _iter.m_Target-&gt;HasLChild() ? LCHILD : RCHILD;\n        NODE_TYPE TargetType = _iter.m_Target-&gt;IsLChild() ? LCHILD : RCHILD;\n\n        _iter.m_Target-&gt;GetNode(PARENT)-&gt;arrPtr[TargetType] = _iter.m_Target-&gt;GetNode(ChildType);\n        _iter.m_Target-&gt;GetNode(ChildType)-&gt;arrPtr[PARENT] = _iter.m_Target-&gt;GetNode(PARENT);\n    }\n\n    delete _iter.m_Target;\n    --m_Size;\n}\n</code></pre> - Explanation:   - If the node to be deleted is the root, the child simply becomes the new root.   - If it is not the root, the parent\u2019s pointer to the node is redirected to the node\u2019s only child. The child\u2019s parent pointer is updated to point to the node\u2019s parent.   - Memory is deallocated, and the size is reduced.</p>"},{"location":"Data_Structure/AR250421/#4-deleting-a-node-with-two-children","title":"4. Deleting a Node with Two Children","text":"<p>If the node has two children, it is more complex: <pre><code>else\n{\n    pSuccessor = GetInorderSuccessor(_iter.m_Target);\n    _iter.m_Target-&gt;pair = pSuccessor-&gt;pair;\n\n    iterator pNextIter(this, pSuccessor);\n    erase(pNextIter);\n\n    pSuccessor = _iter.m_Target;\n}\n</code></pre> - Explanation:   - Find the inorder successor:     The inorder successor is the smallest node in the node\u2019s right subtree. This node will replace the current node\u2019s data while maintaining the BST\u2019s order.   - Copy data from successor:     The successor\u2019s key-value pair is copied to the current node.   - Recursive deletion:     The successor is a simpler node to remove (usually a leaf or a node with one child), so the function calls <code>erase()</code> recursively on the successor.   - Update successor pointer:     After the recursive call, the successor pointer is adjusted to point to the updated node.</p>"},{"location":"Data_Structure/AR250421/#5-final-steps","title":"5. Final Steps","text":"<p>After the deletion logic, the iterator that was passed in is invalidated: <pre><code>_iter.m_Owner = nullptr;\n_iter.m_Target = nullptr;\n</code></pre> - Explanation:   This ensures that the caller cannot use the iterator to access the now-deleted node.</p> <p>Finally, the function returns an iterator pointing to the successor node: <pre><code>return iterator(this, pSuccessor);\n</code></pre> - Explanation:   This allows the caller to continue traversal seamlessly after deletion.</p>"},{"location":"Data_Structure/AR250421/#summary","title":"Summary","text":"<ul> <li>Leaf Nodes: Simply detach and delete.</li> <li>Nodes with One Child: Promote the child to the current node\u2019s position.</li> <li>Nodes with Two Children: Replace data with inorder successor\u2019s data, then recursively delete the successor.</li> <li>Safety Checks: Ensures the iterator is valid and prevents dangling references.</li> </ul> <p>This detailed walkthrough should help clarify the logic behind each part of the <code>erase</code> function.</p>"},{"location":"Data_Structure/AR250421/#code-demonstration","title":"Code Demonstration","text":"<pre><code>BST&lt;int, int&gt; bst;\nbst.insert(MakePair(8, 0));\nbst.insert(MakePair(4, 0));\nbst.insert(MakePair(12, 0));\nbst.insert(MakePair(2, 0));\nbst.insert(MakePair(10, 0));\n\nBST&lt;int, int&gt;::iterator iter = bst.find(8);\nif (iter != bst.end()) {\n    iter = bst.erase(iter);  // safely returns iterator to next valid node\n}\n</code></pre>"},{"location":"Data_Structure/AR250421/#references","title":"References","text":"<p>BST.h</p>"},{"location":"Data_Structure/AR250422/","title":"Inheritance and Object Lifecycle","text":"<p>Last updated: April 22, 2025</p> <p>This article provides a thorough explanation of C++ inheritance mechanics, with special focus on the object lifecycle, memory management, and common pitfalls. It's designed as a study resource for game programming interviews where these concepts frequently appear.</p>"},{"location":"Data_Structure/AR250422/#introduction-to-inheritance","title":"Introduction to Inheritance","text":"<p>Inheritance is a fundamental object-oriented programming concept that allows classes to derive properties and behaviors from other classes. In C++, it enables code reuse, extensibility, and the establishment of hierarchical relationships between classes.</p> <p>A derived class (or child class) inherits accessible members from a base class (or parent class), extending its functionality while maintaining the core characteristics of the parent.</p>"},{"location":"Data_Structure/AR250422/#visual-uml-diagram-of-inheritance","title":"Visual: UML Diagram of Inheritance","text":"<pre><code>classDiagram\n    class CParent {\n        -int m_I\n        -int* m_pData\n        +SetData(int)\n        +GetData() : int\n        +CParent()\n        +CParent(int)\n        +~CParent()\n    }\n\n    class CChild {\n        -float m_F\n        -float* m_pFloatData\n        +SetFloat(float)\n        +GetFloat() : float\n        +CChild()\n        +CChild(int, float)\n        +~CChild()\n    }\n\n    CChild --|&gt; CParent\n</code></pre> <p>This UML diagram provides a quick reference to the relationship between <code>CParent</code> and <code>CChild</code>, highlighting member variables and methods.</p>"},{"location":"Data_Structure/AR250422/#class-structure-and-access-control","title":"Class Structure and Access Control","text":"<p>In C++, the access specifier used in inheritance dictates how base class members can be accessed by the derived class:</p> <ul> <li>public inheritance: The most common form, preserving the access level of base class members</li> <li>protected inheritance: All public members of the base class become protected in the derived class</li> <li>private inheritance: All public and protected members of the base class become private in the derived class</li> </ul> <p>Let's examine a practical example using <code>CParent</code> as our base class and <code>CChild</code> as the derived class:</p> <pre><code>class CParent {\nprotected:\n    int m_I;\n    int* m_pData;\n\npublic:\n    void SetData(int _Data) { m_I = _Data; }\n    int GetData() { return m_I; }\n\n    CParent() : m_I(0), m_pData(new int[100]) {}\n    CParent(int _Data) : m_I(_Data), m_pData(new int[100]) {}\n\n    ~CParent() {\n        if (m_pData) delete[] m_pData;\n    }\n};\n\nclass CChild : public CParent {\nprivate:\n    float m_F;\n    float* m_pFloatData;\n\npublic:\n    void SetFloat(float _F) {\n        m_I = 100; // accessing protected member from base class\n        m_F = _F;\n    }\n    float GetFloat() { return m_F; }\n\n    CChild() : m_F(0.f), m_pFloatData(new float[1000]) {}\n    CChild(int _IntData, float _FloatData)\n        : CParent(_IntData), m_F(_FloatData), m_pFloatData(new float[1000]) {}\n\n    ~CChild() {\n        if (m_pFloatData) delete[] m_pFloatData;\n        // CParent destructor called automatically\n    }\n};\n</code></pre> <p>Notice how: - The <code>CParent</code> class uses the <code>protected</code> access modifier for member variables, allowing derived classes to access them directly - <code>CChild</code> can access the protected <code>m_I</code> member from <code>CParent</code> - Both classes properly manage their dynamically allocated memory</p>"},{"location":"Data_Structure/AR250422/#object-lifecycle-in-inheritance","title":"Object Lifecycle in Inheritance","text":"<p>Understanding the precise order of construction and destruction is crucial for proper resource management in C++.</p>"},{"location":"Data_Structure/AR250422/#construction-order","title":"Construction Order","text":"<p>When a derived class object is created, the construction sequence follows a specific order:</p> <ol> <li>Base class constructor is called first</li> <li>Derived class constructor is called after</li> </ol> <p>Example:</p> <pre><code>CChild child;  // First calls CParent(), then CChild()\nCChild child1(100, 2.2f);  // First calls CParent(100), then CChild's constructor\n</code></pre>"},{"location":"Data_Structure/AR250422/#initialization-lists","title":"Initialization Lists","text":"<p>An important detail: derived class constructors can only initialize their own members directly in the initialization list. Base class members must be initialized by calling the appropriate base class constructor:</p> <pre><code>CChild(int _IntData, float _FloatData)\n    : CParent(_IntData),  // Call base constructor to initialize base members\n      m_F(_FloatData),    // Initialize own members\n      m_pFloatData(new float[1000]) {}\n</code></pre>"},{"location":"Data_Structure/AR250422/#destruction-order","title":"Destruction Order","text":"<p>When objects are destroyed, the order is reversed:</p> <ol> <li>Derived class destructor executes first</li> <li>Base class destructor executes after</li> </ol> <p>This reverse order ensures that derived class resources are cleaned up before base class resources.</p>"},{"location":"Data_Structure/AR250422/#memory-management-in-derived-classes","title":"Memory Management in Derived Classes","text":"<p>Proper memory management is critical in C++ inheritance hierarchies to prevent memory leaks and undefined behavior.</p>"},{"location":"Data_Structure/AR250422/#key-points","title":"Key Points:","text":"<ol> <li>Constructor/Destructor Pairing: Every constructor that allocates resources must have a corresponding destructor that deallocates them.</li> <li>Resource Ownership: Be clear about which class owns which resources.</li> <li>Destructor Chain: Destructors are called automatically in reverse order of inheritance.</li> </ol> <p>For example, in our sample code:</p> <pre><code>~CChild() {\n    // Clean up resources owned by CChild\n    if (m_pFloatData) delete[] m_pFloatData;\n    // CParent destructor is called automatically after this\n}\n</code></pre> <p>This ensures that the <code>m_pFloatData</code> resource is freed before the base class destructor runs to free <code>m_pData</code>.</p>"},{"location":"Data_Structure/AR250422/#copy-construction-in-inheritance","title":"Copy Construction in Inheritance","text":"<p>The compiler automatically generates a copy constructor if one isn't explicitly defined. However, this default copy constructor performs a shallow copy, which can lead to problems with dynamically allocated resources.</p>"},{"location":"Data_Structure/AR250422/#default-copy-constructor-issue","title":"Default Copy Constructor Issue","text":"<p>In our class hierarchy, the default copy constructor would look something like:</p> <pre><code>CChild(const CChild&amp; _Other)\n    : CParent(),  // Default constructor, not copy constructor!\n    m_F(_Other.m_F),\n    m_pFloatData(new float[1000]) {\n    // Copy values from _Other.m_pFloatData\n}\n</code></pre> <p>This is problematic because it calls the default constructor for <code>CParent</code>, not its copy constructor.</p>"},{"location":"Data_Structure/AR250422/#correct-copy-constructor","title":"Correct Copy Constructor","text":"<p>A proper copy constructor should explicitly call the base class copy constructor:</p> <pre><code>CChild(const CChild&amp; _Other)\n    : CParent(_Other),  // Call base copy constructor\n    m_F(_Other.m_F),\n    m_pFloatData(new float[1000]) {\n    // Deep copy values from _Other.m_pFloatData\n    for (int i = 0; i &lt; 1000; i++) {\n        m_pFloatData[i] = _Other.m_pFloatData[i];\n    }\n}\n</code></pre>"},{"location":"Data_Structure/AR250422/#polymorphism-and-virtual-functions","title":"Polymorphism and Virtual Functions","text":"<p>When working with inheritance, polymorphism allows derived classes to override base class methods and for those overridden methods to be called correctly even through a base class pointer.</p> <p>In C++, this requires the use of the <code>virtual</code> keyword:</p> <pre><code>class Base {\npublic:\n    virtual void Method() { /* base implementation */ }\n    virtual ~Base() {}  // Virtual destructor is crucial!\n};\n\nclass Derived : public Base {\npublic:\n    void Method() override { /* derived implementation */ }\n    ~Derived() {}\n};\n</code></pre>"},{"location":"Data_Structure/AR250422/#virtual-destructors","title":"Virtual Destructors","text":"<p>A common mistake is forgetting to declare destructors as virtual in base classes intended for polymorphic use. Without a virtual destructor, deleting a derived object through a base pointer leads to undefined behavior:</p> <pre><code>Base* ptr = new Derived();\ndelete ptr;  // Without virtual destructor, only ~Base() is called, leaking resources\n</code></pre>"},{"location":"Data_Structure/AR250422/#random-number-generation","title":"Random Number Generation","text":"<p>While not directly related to inheritance, the notes also included information about random number generation in C++, which is often used in game programming:</p> <pre><code>// Seed the random number generator\nsrand(time(nullptr));  // Uses current time as seed for randomization\n\n// Generate random numbers between 1 and 100\nint random_number = rand() % 100 + 1;  // Returns 1-100\n</code></pre> <p>This technique creates a random number between 1 and 100 by: 1. Using <code>rand()</code> to generate a pseudo-random integer 2. Taking the modulo (%) to restrict it to a range (0-99) 3. Adding 1 to shift the range to 1-100</p> <p>For more complex game systems, using the C++11 random library provides better statistical properties:</p> <pre><code>#include &lt;random&gt;\n#include &lt;chrono&gt;\n\nunsigned seed = std::chrono::system_clock::now().time_since_epoch().count();\nstd::default_random_engine generator(seed);\nstd::uniform_int_distribution&lt;int&gt; distribution(1, 100);\n\nint random_number = distribution(generator);  // More robust randomization\n</code></pre>"},{"location":"Data_Structure/AR250422/#interview-questions-and-exercises","title":"Interview Questions and Exercises","text":"<p>Here are some common interview questions related to C++ inheritance, with answers based on the material covered:</p> <p>Q: What's the order of constructor and destructor calls in inheritance? A: Constructors execute from base to derived. Destructors execute from derived to base.</p> <p>Q: What happens if a derived class allocates memory but doesn't define a destructor? A: Memory leaks may occur if the derived class allocates resources but doesn't clean them up in its destructor.</p> <p>Q: Why use protected instead of private? A: Protected members allow access from derived classes while still hiding them from external code. Private members are inaccessible to derived classes.</p> <p>Q: Can derived constructors initialize base members directly? A: No, derived constructors must use the initialization list to call base constructors for initializing base class members.</p> <p>Q: What's the purpose of a virtual destructor? A: Virtual destructors ensure that the proper destructor chain is called when deleting a derived object through a base class pointer.</p>"},{"location":"Data_Structure/AR250422/#common-mistakes-and-pitfalls","title":"Common Mistakes and Pitfalls","text":"<ol> <li> <p>Forgetting virtual destructors in polymorphic base classes    <pre><code>class Base {\npublic:\n    virtual ~Base() {}  // Required for proper cleanup\n};\n</code></pre></p> </li> <li> <p>Attempting to access private base members from derived classes</p> </li> <li> <p>Only protected or public members are accessible to derived classes</p> </li> <li> <p>Leaking memory by skipping cleanup</p> </li> <li>Always match each <code>new[]</code> with a corresponding <code>delete[]</code></li> <li> <p>Each allocation in a constructor should have a corresponding deallocation in the destructor</p> </li> <li> <p>Incorrect copy constructor implementation</p> </li> <li>Not calling the base class copy constructor</li> <li> <p>Performing shallow copies of pointer members</p> </li> <li> <p>Improperly initializing base class members</p> </li> <li>Base class members must be initialized through base class constructors</li> <li>Derived class constructors cannot directly initialize base class members in their initialization lists</li> </ol>"},{"location":"Data_Structure/AR250422/#practice-exercises","title":"Practice Exercises","text":"<p>1. Spot the Bug: Copy Constructor What's wrong with this implementation? <pre><code>CChild(const CChild&amp; other)\n    : m_F(other.m_F), m_pFloatData(new float[1000]) {}\n</code></pre> Hint: Did you initialize the base class properly?</p> <p>2. Lifecycle Challenge Given the class structure, explain the order of construction and destruction in this code: <pre><code>CChild child1;\n</code></pre> Write down the sequence and verify your answer.</p> <p>3. Manual Memory Cleanup Modify the following class to prevent memory leaks: <pre><code>class Buggy {\n    int* data;\npublic:\n    Buggy() { data = new int[10]; }\n    // No destructor!\n};\n</code></pre></p>"},{"location":"Data_Structure/AR250422/#visual-object-lifetime-in-inheritance","title":"Visual: Object Lifetime in Inheritance","text":"<pre><code>Construction:\nCParent() -&gt; CChild()\n\nDestruction:\n~CChild() -&gt; ~CParent()\n</code></pre> <p>Understanding this sequence is crucial for managing resources and preventing undefined behavior in C++ inheritance hierarchies.</p>"},{"location":"Data_Structure/AR250422/#further-reading","title":"Further Reading","text":"<p>To deepen your understanding of C++ inheritance and its application in game development, check out the following resources:</p> <ul> <li>C++ Inheritance - cppreference.com</li> <li>Effective C++ by Scott Meyers</li> <li>Unreal Engine C++ Documentation</li> <li>Game Developer Conference (GDC) Talks</li> <li>Herb Sutter: C++ and Beyond</li> </ul> <p>These resources are invaluable for advanced understanding and staying current with best practices in modern C++ and game engine development.</p>"},{"location":"Data_Structure/STL00/","title":"STL container size","text":"<pre><code>static void print_stl_size() {\nprintf(\"Operating System X86 - %zu Bits\\n\", sizeof(void*) * 8);\nprintf(\"sizeof(hash_set&lt;int&gt;)           = %zu\\n\", sizeof(hash_set&lt;int&gt;));\nprintf(\"sizeof(array&lt;int, 13&gt;)          = %zu\\n\", sizeof(array&lt;int, 13&gt;));\nprintf(\"sizeof(vector&lt;bool&gt;)            = %zu\\n\", sizeof(vector&lt;bool&gt;));\nprintf(\"sizeof(vector&lt;int&gt;)             = %zu\\n\", sizeof(vector&lt;int&gt;));\nprintf(\"sizeof(vector&lt;double&gt;)          = %zu\\n\", sizeof(vector&lt;double&gt;));\nprintf(\"sizeof(vector&lt;string&gt;)          = %zu\\n\", sizeof(vector&lt;string&gt;));\nprintf(\"sizeof(vector&lt;char&gt;)            = %zu\\n\", sizeof(vector&lt;char&gt;));\nprintf(\"sizeof(string)                  = %zu\\n\", sizeof(string));\nprintf(\"sizeof(list&lt;int&gt;)               = %zu\\n\", sizeof(list&lt;int&gt;));\nprintf(\"sizeof(stack&lt;int&gt;)              = %zu\\n\", sizeof(stack&lt;int&gt;));\nprintf(\"sizeof(queue&lt;int&gt;)              = %zu\\n\", sizeof(queue&lt;int&gt;));\nprintf(\"sizeof(deque&lt;int&gt;)              = %zu\\n\", sizeof(deque&lt;int&gt;));\nprintf(\"sizeof(set&lt;int&gt;)                = %zu\\n\", sizeof(set&lt;int&gt;));\nprintf(\"sizeof(map&lt;int, int&gt;)           = %zu\\n\", sizeof(map&lt;int, int&gt;));\nprintf(\"sizeof(priority_queue&lt;int&gt;)     = %zu\\n\", sizeof(priority_queue&lt;int&gt;));\nprintf(\"sizeof(multiset&lt;int&gt;)           = %zu\\n\", sizeof(multiset&lt;int&gt;));\nprintf(\"sizeof(multimap&lt;int, int&gt;)      = %zu\\n\", sizeof(multimap&lt;int, int&gt;));\nprintf(\"sizeof(bitset&lt;64&gt;)              = %zu\\n\", sizeof(bitset&lt;64&gt;));\nprintf(\"sizeof(bitset&lt;1024&gt;)            = %zu\\n\", sizeof(bitset&lt;1024&gt;));\nprintf(\"sizeof(unique_ptr&lt;int&gt;)         = %zu\\n\", sizeof(unique_ptr&lt;int&gt;));\nprintf(\"sizeof(shared_ptr&lt;int&gt;)         = %zu\\n\", sizeof(shared_ptr&lt;int&gt;));\nprintf(\"sizeof(function&lt;int(int)&gt;)      = %zu\\n\", sizeof(function&lt;int(int)&gt;));\nprintf(\"sizeof(unordered_set&lt;int&gt;)      = %zu\\n\", sizeof(unordered_set&lt;int&gt;));\nprintf(\"sizeof(unordered_map&lt;int, int&gt;) = %zu\\n\", sizeof(unordered_map&lt;int, int&gt;));\nprintf(\"sizeof(unordered_multiset&lt;int&gt;) = %zu\\n\", sizeof(unordered_multiset&lt;int&gt;));\nprintf(\"sizeof(unordered_multimap&lt;int, int&gt;) = %zu\\n\", sizeof(unordered_multimap&lt;int, int&gt;));\n}\n</code></pre> <p>This function result in following for x86-32 OS. </p> <pre><code>Operating System X86 - 32 Bits\nsizeof(hash_set&lt;int&gt;)           = 8\nsizeof(array&lt;int, 13&gt;)          = 52\nsizeof(vector&lt;bool&gt;)            = 16\nsizeof(vector&lt;int&gt;)             = 12\nsizeof(vector&lt;double&gt;)          = 12\nsizeof(vector&lt;string&gt;)          = 12\nsizeof(vector&lt;char&gt;)            = 12\nsizeof(string)                  = 24\nsizeof(list&lt;int&gt;)               = 8\nsizeof(stack&lt;int&gt;)              = 20\nsizeof(queue&lt;int&gt;)              = 20\nsizeof(deque&lt;int&gt;)              = 20\nsizeof(set&lt;int&gt;)                = 8\nsizeof(map&lt;int, int&gt;)           = 8\nsizeof(priority_queue&lt;int&gt;)     = 16\nsizeof(multiset&lt;int&gt;)           = 8\nsizeof(multimap&lt;int, int&gt;)      = 8\nsizeof(bitset&lt;64&gt;)              = 8\nsizeof(bitset&lt;1024&gt;)            = 128\nsizeof(unique_ptr&lt;int&gt;)         = 4\nsizeof(shared_ptr&lt;int&gt;)         = 8\nsizeof(function&lt;int(int)&gt;)      = 40\nsizeof(unordered_set&lt;int&gt;)      = 32\nsizeof(unordered_map&lt;int, int&gt;) = 32\nsizeof(unordered_multiset&lt;int&gt;) = 32\nsizeof(unordered_multimap&lt;int, int&gt;) = 32\n</code></pre> <p>This function result in following for x86-64 OS. </p> <pre><code>Operating System X86 - 64 Bits\nsizeof(hash_set&lt;int&gt;)           = 16\nsizeof(array&lt;int, 13&gt;)          = 52\nsizeof(vector&lt;bool&gt;)            = 32\nsizeof(vector&lt;int&gt;)             = 24\nsizeof(vector&lt;double&gt;)          = 24\nsizeof(vector&lt;string&gt;)          = 24\nsizeof(vector&lt;char&gt;)            = 24\nsizeof(string)                  = 32\nsizeof(list&lt;int&gt;)               = 16\nsizeof(stack&lt;int&gt;)              = 40\nsizeof(queue&lt;int&gt;)              = 40\nsizeof(deque&lt;int&gt;)              = 40\nsizeof(set&lt;int&gt;)                = 16\nsizeof(map&lt;int, int&gt;)           = 16\nsizeof(priority_queue&lt;int&gt;)     = 32\nsizeof(multiset&lt;int&gt;)           = 16\nsizeof(multimap&lt;int, int&gt;)      = 16\nsizeof(bitset&lt;64&gt;)              = 8\nsizeof(bitset&lt;1024&gt;)            = 128\nsizeof(unique_ptr&lt;int&gt;)         = 8\nsizeof(shared_ptr&lt;int&gt;)         = 16\nsizeof(function&lt;int(int)&gt;)      = 64\nsizeof(unordered_set&lt;int&gt;)      = 64\nsizeof(unordered_map&lt;int, int&gt;) = 64\nsizeof(unordered_multiset&lt;int&gt;) = 64\nsizeof(unordered_multimap&lt;int, int&gt;) = 64\n</code></pre>"},{"location":"Data_Structure/STL00/#about-stdvector","title":"About <code>std::vector</code>","text":"<p>In MSVC, automatic resize of <code>std::vector</code> ratio is <code>1.5</code>.  However, in gcc and clang compiler, it is <code>2</code> ratio. </p> <pre><code>vector&lt;int&gt; vec; \nfor (int i = 0; i &lt; 20; ++i) {\n    vec.push_back(i);\n    printf(\"Size: %4zu, Capacity: %4zu\\n\", vec.size(), vec.capacity());\n}\n</code></pre> <p>In MSVC Compiled Visual Studio 2022, code returns  </p> <pre><code>Size:    1, Capacity:    1\nSize:    2, Capacity:    2\nSize:    3, Capacity:    3\nSize:    4, Capacity:    4\nSize:    5, Capacity:    6\nSize:    6, Capacity:    6\nSize:    7, Capacity:    9\nSize:    8, Capacity:    9\nSize:    9, Capacity:    9\nSize:   10, Capacity:   13\nSize:   11, Capacity:   13\nSize:   12, Capacity:   13\nSize:   13, Capacity:   13\nSize:   14, Capacity:   19\nSize:   15, Capacity:   19\nSize:   16, Capacity:   19\nSize:   17, Capacity:   19\nSize:   18, Capacity:   19\nSize:   19, Capacity:   19\nSize:   20, Capacity:   28\nSize:   21, Capacity:   28\nSize:   22, Capacity:   28\nSize:   23, Capacity:   28\nSize:   24, Capacity:   28\nSize:   25, Capacity:   28\nSize:   26, Capacity:   28\nSize:   27, Capacity:   28\nSize:   28, Capacity:   28\nSize:   29, Capacity:   42\nSize:   30, Capacity:   42\n</code></pre> <p>Also, vector iterators correct position is following. </p> <pre><code>printf(\"Vector   data pointer  address : %p\\n\", (void*)vec.data()); \nprintf(\"Vector  begin element  address : %p\\n\", (void*)&amp;*vec.begin()); \nprintf(\"Vector    data + size  address : %p\\n\", (void*)((char*)vec.data() + sizeof(int) * vec.size()));\nprintf(\"Vector    end element  address : %p\\n\", (void*)&amp;*(vec.end())); \nprintf(\"Vector rbegin element  address : %p\\n\", (void*)&amp;*vec.rbegin()); \nprintf(\"Vector data + size - 1 address : %p\\n\", (void*)((char*)vec.data() + sizeof(int) * (vec.size() - 1)));\nprintf(\"Vector   rend element  address : %p\\n\", (void*)&amp;*vec.rend()); \nprintf(\"Vector data    -     1 address : %p\\n\", (void*)((char*)vec.data() - sizeof(int)));\n</code></pre> <p>This result in </p> <pre><code>Operating System X86 - 64 Bits\nVector   data pointer  address : 000001EAC7B06960\nVector  begin element  address : 000001EAC7B06960\nVector    data + size  address : 000001EAC7B069D8\nVector    end element  address : 000001EAC7B069D8\nVector rbegin element  address : 000001EAC7B069D4\nVector data + size - 1 address : 000001EAC7B069D4\nVector   rend element  address : 000001EAC7B0695C\nVector data    -     1 address : 000001EAC7B0695C\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/","title":"Assignment I","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/#exercise-1-review","title":"Exercise 1 Review","text":"<p>Explain the difference between the stack and the heap.</p> <p>Computer can allocate memory in two possible ways: Stack and Heap allocation.</p> Feature Stack Heap Memory Allocation Static, handled automatically Dynamic, handled manually Memory Management Managed by the system Managed by the programmer Data Structure FILO (First In Last Out) Tree Structure Access Speed Relatively Faster Relatively Slower Lifetime Tied to function call (short-lived) Flexible, persists until freed Size Limit Limited, generally 1-8 MB Larger, limited by available memory Error Types Stack Overflow Memory Leakage Example <code>int x = 10;</code> (Local Variable) <code>int* x = malloc(sizeof(int));</code> <p>Since the order of programming in C/C++ is defined, putting all variables in linear order will not cause problem. Thus, in static memory allocation, static variables can be handled by Stack in order of function call. However, dynamic memory allocation means variables can be created or removed directly. So, linear data structure is not available to manage order of variables, so heap data structure is more likely.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/#exercise-2-personal-research","title":"Exercise 2 Personal research","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H1/#21-briefly-explain-what-operations-are-performed-when-a-computer-is-powered-on","title":"2.1 Briefly explain what operations are performed when a computer is powered on.","text":"<p>When the computer is powered on, 4 steps are followed.</p> <ol> <li>POST (Power On Self Test) will test computer hardware before OS is loaded.</li> <li>BIOS (Basic Input/Output System) initialize and control basic hardware components including monitor, keyboard, HDD.</li> <li>Bootloader is located from Motherboard attached storage by BIOS</li> <li>OS kernel is loaded by bootloader so that OS can control bootloader now.</li> </ol> <p>What is the role of the BIOS and how does it interact with the OS?</p> <ol> <li>Initialize hardware components and check their functionality before OS loading.</li> <li>Boot processing will locate and load bootloader from storage.</li> <li>When bootloader launches OS, BIOS still runs on background to support features that might be useful to OS.</li> </ol>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/#22-in-a-few-words-explain-what-are-hybrid-and-exo-kernels","title":"2.2 In a few words explain what are hybrid and exo kernels.","text":"<p>Monolithic Kernel is simple kernel form, so that both user and kernel are in same address. Since user and kernel use same space, process speed is faster, architecture is simple and flexible. However, entire volume of OS and kernel will be in large scale, making OS unstable and insecure. Linux, UNIX are common examples.</p> <p>Microkernel divides user space and kernel space. Thus, it is more secure and stable. Also, it will use relatively less amount of volume. However, since user and kernel will be divided, architecture is complicated and integration of kernel and user have several inconveniences. Also, several functions available on monolithic kernel might be limited. Minix is example.</p> <p>Hybrid Kernel is a combination of two kernel architecture above with smaller kernel volume. It has more various functions than microkernel, but still has less functions than monolithic kernel. Also, architecture design will be even more complicated than monolithic kernel. Microsoft Windows is example.</p> <p>Exo Kernel is currently in research by UC Berkeley rather than utilized in industries. It is developed concept based on monolithic kernel, with better speed and security. However, architecture will be more sophisticated, with potentially inefficient use of computer resources.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/#exercise-3-course-application","title":"Exercise 3 Course Application","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H1/#31-which-of-the-following-instructions-should-only-be-allowed-in-kernel-mode-explain","title":"3.1 Which of the following instructions should only be allowed in kernel mode? Explain.","text":"<ul> <li>a) Disable all interrupts</li> <li>b) Read the time-of-day clock</li> <li>c) Set the time-of-day clock</li> <li>d) Change the memory map</li> </ul> <p>(b) is allowed in both user mode and kernel mode. (a), (c), (d) are allowed only in kernel mode.</p> <p>Disabling all interruption in OS pipeline must be handled by kernel, since it will be entire reset of the process pipeline. User should not have full comprehension and access of the entire OS.</p> <p>Read the time of the day can be done in user level, especially considering the different time zone shared globally by several users. Basic time might be setup into UTC 0, and additional time zone calculation can be done for each user mode.</p> <p>However, set the time of the day must be in kernel level. Time is very closely related to the entire process of the Operating System and its logs. Thus, user level time clock setup should be prohibited.</p> <p>Memory map is also directly related to the operating system. Data structure of stack and heap to store each kind of memory should be handled under entire kernel. Thus, user level memory map access might compromise the running process of entire OS.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/#32-consider-a-system-that-has-two-cpus-and-each-cpu-is-composed-of-two-threads","title":"3.2 Consider a system that has two CPUs and each CPU is composed of two threads.","text":"<p>Suppose three programs, P0, P1, and P2, are started with run times of 5, 10 and 20 ms, respectively. How long will it take to complete the execution of these programs? Assume that all three programs are 100% CPU bound, do not block during execution, and do not change CPUs once assigned.</p> <p>There are 2 CPUs, and 2 threads per 1 CPU, thus 4 threads exist. One thread can handle one process simultaneously, so all three programs P0, P1, and P2 are able to start simultaneously without waiting for thread scarcity.</p> <p>Execution time for each program will be P0 5ms, P1 10ms, P2 25ms. If each thread take each task simultaneously, P2 end time <code>25ms</code> will be complete time. Suppose core can take each task simultaneously. If program execution is optimized, P0 and P2 will be assigned together, so that P1 will start after P0 ends, resulting in same <code>25ms</code>. However, if programs execution list is in FIFO queue order, then it will take <code>30ms</code> since core handling. In worst case, if all projects require 2 cores, then time consumption will be <code>40ms</code>.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/#exercise-4-command-lines-on-a-unix-system","title":"Exercise 4 Command lines on a Unix system","text":"<p>On Linux use the command line to:</p> <ol> <li>Create a new user;</li> <li>List all the currently running processes;</li> <li>Display the characteristics of the CPU and the available memory;</li> <li>Redirect random output read from a system device, into two different files;</li> <li>Concatenate the two previous files;</li> <li>Read the content of the resulting file as hexadecimal values (in other words find a command to    read a file as hexadecimal values);</li> <li>Go at the root of the kernel source you downloaded in l2 and use a single command to find all    the files in with the word mutex in their name and containing the whole word nest_lock;</li> </ol> <p>Note: follow the ?\uc40frogramming exercises??guidelines and save the list of commands in a shell file (.sh).</p> <p>Shell commandlines in <code>e4.sh</code> file.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H1/#exercise-5-simple-problem","title":"Exercise 5 Simple problem","text":"<p>One reason GUIs were initially slow to be adopted was the cost of the hardware needed to support them. How much video RAM is needed to support a 25 lines by 80 rows character monochrome text screen? How much for a 1024 x 768 pixel 24-bit color bitmap? Assuming the cost of this RAM in the 1980es was $5/KB what was the price of those two solutions? How much is it now?</p> <p>Monochrome text character is ASCII, 2^8=256 bits, 1 byte per each character. The calculation will be 25 X 80 = 2000 Bytes = 2 KB</p> <p>One pixel is composed of 3 RGB values, each value from 0 to 255. It is 1 byte per each color, so 3 bytes per each pixel. Total memory required per each screen will be 3 X 1024 X 768 = 2359296 Bytes / 1024 = 2304 KB / 1024 = 2.25 MB</p> <p>In 1980, dealing 1024 X 768 RGB pixels represented 2304 KB X 5 $ = 11520 USD. Ignoring inflation for 40 years, this is enough to buy the 275 latest SK Hynix DDR5 16GB RAM, currently 42 USD per each in Amazon, for 2024 October.</p> <p>However, currently abandoned computers in school with 2GB RAM will be far more than enough to handle 3MB memory.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/","title":"Assignment II","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#exercise-1","title":"Exercise 1","text":"<p>A few years ago when computers featured less RAM it is was common to increase it in order to enhance CPU performance. In order to better understand the link between the two we now create a simple model for multiprogramming. We assume all the processes to be similar and spending the same fraction p of their time waiting for Input/Output (I/O) to complete.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#1-what-is-the-probability-for-n-processes-to-be-waiting-at-the-same-time-then-express-the-cpu-utilisation-as-a-function-of-n","title":"1. What is the probability for n processes to be waiting at the same time, then express the CPU utilisation as a function of n?","text":"<p>Probability \\(p^n\\)</p> <p>CPU Utilization \\(U(n)=1-p^n\\) where \\(n\\) is number of process.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#2-sketch-the-curve-representing-the-cpu-utilisation-as-a-function-of-the-number-of-processes-for-the-following-values-of-p-25-60-and-90","title":"2. Sketch the curve representing the CPU utilisation as a function of the number of processes for the following values of p: 25%, 60% and 90%.","text":"<p>Suppose CPU Utilization \\(U\\) function for \\(n\\) number of process \\(U(n)\\).</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#3-a-certain-old-computer-has-256-mb-of-ram-once-loaded-a-light-operating-system-uses-96-mb-of-ram","title":"3. A certain old computer has 256 MB of RAM, once loaded a light operating system uses 96 MB of RAM.","text":"<p>Several programs are launched each of them using 48 MB.</p> <p>a) How many processes can be store simultaneously in memory?</p> <p>Given 256 MB RAM, OS uses 96 MB, 160 MB left and each process takes 48 MB. Suppose 4 processors share 160 MB, then it is 40 MB per each, which is less than 48 MB required for process to run. If 3 processors share 160MB, then its capacity is 53.3 per each, enough to handle each process. Thus, <code>3</code> processes can be store simultaneously in memory.</p> <p>b) Assuming an average of 90% I/O waiting time what is the CPU utilisation?</p> <p>Since \\(p=0.9\\) and \\(n=3\\), \\(U(n)=1-p^n=1-(0.9)^{3}=1-0.729=0.271\\) Thus, CPU utilization <code>U=27.1%</code></p> <p>c) What is the effect of adding 256 MB, 512 MB and 1024 MB of RAM. Argue on which amount would be the most beneficial and would be worth the investment.</p> <p>\\(256 + 256 \\rightarrow (512 - 96) / 48 = 416 / 48 = 8.67 \\rightarrow U(8)=1??.90^{8}=1??.430=0.570\\)</p> <p>\\(256 + 512 \\rightarrow (768 - 96) / 48 = 672 / 48 = 14 \\rightarrow U(8)=1??.90^{14}=1??.206=0.794\\)</p> <p>\\(256 + 1024 \\rightarrow (1280 - 96) / 48 = 1184 / 48 = 24.67 \\rightarrow U(8)=1??.90^{24}=1??.121=0.879\\)</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#ex-2-understanding-system-calls","title":"Ex. 2 ??Understanding system calls","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H2/#1-briefly-introduce-strace-and-ltrace-explain-they-could-be-helpful-along-the-semester","title":"1. Briefly introduce strace and ltrace. Explain they could be helpful along the semester.","text":"<p>Both <code>strace</code> and <code>ltrace</code> are trace debugging tools.</p> <p><code>strace</code> traces based on system calls by following interaction between Linux kernel and program.</p> <p><code>ltrace</code> traces library calls instead of system call. This shows logs of library dependent function calls.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#2-what-are-the-manpages-sections-for-system-calls-and-library-calls","title":"2. What are the manpages sections for system calls and library calls?","text":"<p>In convention, system calls are in section 2 and library calls are in section 3.</p> <p>Use command like <code>man 2 &lt;system_call_name&gt;</code> for system calls and <code>man 3 &lt;library_function_name&gt;</code> for library functions.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#3-system-calls","title":"3. System calls.","text":"<p>a) What are the main types of system calls?</p> <ol> <li>Process management: creation, termination, control <code>exit(0)</code>, <code>fork()</code>, <code>exec()</code></li> <li>File management: open close read write <code>open()</code>, <code>close()</code>, <code>read()</code>, <code>write()</code></li> <li>Device management: IO operation, peripheral interaction <code>ioctl()</code></li> <li>Information maintenance: system level info setup and retrieval <code>getpid()</code>, <code>getuid()</code>, <code>setuid()</code></li> <li>Inter Process Communication IPC: send message <code>pipe()</code>, <code>msgsnd()</code></li> </ol> <p>b) Run strace on the ls command and classify all the listed system calls.</p> <pre><code>strace ls\n</code></pre> <p>output file on <code>strace_ls.txt</code></p> <ul> <li>Process protocol <code>execve(\"/usr/bin/ls\", [\"ls\"], 0xfffff3920cf0 /* 53 vars */) = 0</code></li> <li>Memory management <code>brk, mmap, munmap</code></li> <li>File management <code>openat(AT_FDCWD, \"...\"), read(...), close(...)</code></li> <li>Device management <code>ioctl(...)</code></li> <li>Information maintenance <code>statfs(...), getrandom(...)</code></li> <li>Communication <code>prlimit64(...)</code></li> <li>Exit <code>exit_group(0)</code></li> </ul> <p>c) Select a line of your choice in strace output and explain its meaning.</p> <pre><code>openat(AT_FDCWD, \".\", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = 3\n</code></pre> <ul> <li><code>openat()</code>: Open file relative to a directory file descriptor.</li> <li><code>AT_FDCWD</code> means directory is current working directory.</li> <li><code>/lib/aarch64-linux-gnu/libselinux.so.1</code> File opened in SELinux shared library.</li> <li><code>O_RDONLY|O_CLOEXEC</code>: File is opened in read-only mode <code>O_RDONLY</code>, and <code>O_CLOEXEC</code> means file descriptor will be automatically closed if process performs <code>exec()</code> system call.</li> <li><code>3</code>: This is the file descriptor returned by the system call.</li> </ul> <p>d) How to attach strace to a running process? Describe a scenario where this could be handy</p> <pre><code>strace -p &lt;pid&gt;\n</code></pre> <p><code>&lt;pid&gt;</code> should be ID of running process.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#ex-3-a-simple-system-call","title":"Ex. 3 ??A simple system call","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H2/#1-kernel-printing","title":"1. Kernel printing.","text":"<p>a) What is the counterpart of printf() when working inside the Linux kernel?</p> <p>The <code>printk</code> is the counterpart of <code>printf</code> inside Linux kernel log. It is visible in <code>dmesg</code>.</p> <p>b) Write the body a simple ?\uc40aernel function??displaying ?\uc3eeum is proud of you!??</p> <pre><code>void mum_is_proud(void) {\n    printk(KERN_INFO \"Mum is proud of you!\\n\");\n}\n</code></pre> <p><code>KERN_INFO</code> is one level of log, meaning it is not information.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#2-headers-and-function-name","title":"2. Headers and function name.","text":"<p>a) What header files should be included when adding a new system call?</p> <pre><code>#include &lt;linux/kernel.h&gt;    // kernel-related functions including printk().\n#include &lt;linux/syscalls.h&gt;  // system call macros like SYSCALL_DEFINE.\n</code></pre> <p>b) How are the macros <code>SYSCALL_DEFINE0</code> and <code>SYSCALL_DEFINEx</code> working?</p> <p><code>SYSCALL_DEFINE0(name)</code> defines system call with zero arguments. It internally uses the <code>asmlinkage</code> keyword, ensuring function called follows convention for system calls.</p> <p><code>SYSCALL_DEFINEx</code> defines system call with x number of arguments where xrange from 0 to 6.</p> <p>c) Use the SYSCALL_DEFINE0 to define the new system call encouragement. Name your file encouragement.c and save it in a folder encouragement at the root of the kernel source code</p> <pre><code>#include &lt;linux/kernel.h&gt;\n#include &lt;linux/syscalls.h&gt;\n\nSYSCALL_DEFINE0(encouragement) {\n    printk(KERN_INFO \"Mum is proud of you!\\n\");\n    return 0;\n}\n</code></pre> <p>Save at root of the kernel source code.</p> <pre><code>cd ~/sched_ext-for-6.11/\nmkdir encouragement\ncd encouragement\necho '#include &lt;linux/kernel.h&gt;\n#include &lt;linux/syscalls.h&gt;\n\nSYSCALL_DEFINE0(encouragement) {\n    printk(KERN_INFO \"Mum is proud of you!\\n\");\n    return 0;\n}' &gt; encouragement.c\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#3-makefile-and-kbuild","title":"3. Makefile and Kbuild.","text":"<p>a) Jump to the end of Kbuild file and following the same patterns as on the last few lines, add your encouragement directory there.</p> <pre><code>nano Kbuild\n</code></pre> <pre><code>obj-$(CONFIG_SAMPLES)   += samples/\nobj-$(CONFIG_NET)       += net/\nobj-y                   += virt/\nobj-y                   += $(ARCH_DRIVERS)\nobj-y                   += encouragement/\n</code></pre> <p>b) Check the Makefiles for the directories listed at the end of Kbuild file and create a Makefile for your encouragement directory.</p> <pre><code>touch Makefile\n</code></pre> <pre><code># Makefile of J H Park\n\nobj-y := encouragement.o\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#4-system-call-registration","title":"4. System call registration.","text":"<p>a) Add your new system call to <code>syscalls.h</code>.</p> <p>Hint: there are more than one such file, make sure to edit the correct one!</p> <p>Correct position at <code>/include/linux/syscalls.h</code> in my M3 Mac will be ARM64. However, <code>cat arch/aarch64/include/asm/syscalls.h</code> does not exist. Only <code>cat arch/arm/include/asm/syscall.h</code> exist.</p> <pre><code>uname -m\naarch64\ncat arch/arm64/include/asm/syscall\nsyscall.h          syscall_wrapper.h\ncat arch/arm/include/asm/syscalls.h\n</code></pre> <p>Instead of editing <code>arch/arm64/include/asm/syscall.h</code></p> <p>I edited <code>arch/arm64/include/asm/syscall.h</code></p> <pre><code> # nano arch/arm64/include/asm/syscall.h\nnano include/linux/syscalls.h\n\nasmlinkage long sys_encouragement(void);\n</code></pre> <p>b) Add your new system call to <code>syscall_64.tbl</code>. Hint: what architecture is your Linux running on?</p> <p>M3 Mac should set system call value in different position.</p> <pre><code>nano arch/arm64/kernel/syscall.c\n\n#include &lt;linux/kernel.h&gt; // Included\n#include &lt;linux/syscalls.h&gt; // Included\n\nSYSCALL_DEFINE0(encouragement) {\n    printk(KERN_INFO \"Mum is proud of you!\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#5-recompile-the-kernel-and-reboot-do-not-forget-to-update-the-bootloader","title":"5. Recompile the kernel and reboot (do not forget to update the bootloader).","text":"<p>Recompile</p> <pre><code>make -j$(nproc)\n</code></pre> <p>If modules are not installed install</p> <pre><code>make modules_install\nmake install\nreboot\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H2/#6-write-a-simple-user-space-program-to-demonstrate-the-well-functioning-of-your-system-call","title":"6. Write a simple user space program to demonstrate the well functioning of your system call.","text":"<p>This is program.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/syscall.h&gt;\n\nint main() {\n    long result = syscall(438);\n    printf(\"Syscall returned: %ld\\n\", result);\n    return 0;\n}\n</code></pre> <p>If kernel reaches storage issue</p> <pre><code>df -h\nmake clean\nmake mrproper\ndf -h\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H3/","title":"Assignment III","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H3/#exercise-1-general-questions","title":"Exercise 1 - General questions","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H3/#exercise-11-if-a-multithreaded-process-forks-a-problem-occurs-if-the-child-gets-copies-of-all-the-parents-threads","title":"Exercise 1.1 If a multithreaded process forks, a problem occurs if the child gets copies of all the parent's threads.","text":"<p>Suppose that one of the original threads was waiting for keyboard input. Now two threads are waiting for keyboard input, one in each process. Does this problem ever occur in single-threaded processes?</p> <p>NO. In single thread, <code>fork()</code> call of process id will receive child process as copy of single thread. Only one process can wait for input. Thus, it is not likely for single thread CPU to have this kind of duplicated input acquisition.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H3/#exercise-12-many-unix-system-calls-have-no-win32-api-equivalents","title":"Exercise 1.2 Many UNIX system calls have no Win32 API equivalents.","text":"<p>For each such call, what are the consequences when porting a program from a UNIX system to a Windows system?</p> <p>Some OS concepts in UNIX exist in WIN32 too, but their commands are different, such as process generation command <code>fork()</code> is either in Windows threads or <code>CreateProcess()</code> function. So, UNIX command is mostly incompatible. Thus, consequences when porting a program from a UNIX system to a Windows system will be unlikely to work due to incompatible calls.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H3/#exercise-2-c-programming-the-code-of-this-exercise-will-be-reused-in-future-labs","title":"Exercise 2 - C programming - The code of this exercise will be reused in future labs","text":"<p>The goal of this exercise is to improve the programming skills and get more familiar with pointers and function pointers.</p> <ol> <li>Implement a linked list structure containing two pointers of type char and void. It should be    possible to at least add elements to the list.</li> <li>Knowing that the void pointer in the structure could contain some char*, int, or double, write a    search function for this linked list.</li> <li>The linked list will store elements read from an ASCII file where each line is in the format    <code>somestring=somedata</code>. The type of the data is defined in the filename; for instance a file    containing unsorted integers will be named rand_int.txt. Implement the necessary functions to    read and write such files.</li> <li>Use a function pointers to compare and sort the elements from the structure with respect to the    data field. Implement the following sorting orders: increasing, decreasing, and random. The    filename is <code>sortingtype_dataype.txt</code>, where <code>sortingtype</code> is rand, inc, or dec.s</li> <li>Write a function to test the implementation.</li> </ol> <p>Sample output, test on JOJ using <code>git commit -m \"joj.h3</code></p> <pre><code>git add .\ngit commit --allow-empty -m \"test(h3): joj\"\ngit push\nclang-18 -std=gnu17 -O2 -Wall -Wextra -Werror -pedantic -Wno-unused-result -Wconversion -Wvla main.c -o h3\n./h3 rand_int.txt inc\n</code></pre> <p>File name structure <code>[Sort Type]_[Data Type].txt</code></p>"},{"location":"ECE482FA24/ECE482HW/ECE482H3/#ex-3-research-on-posix","title":"Ex. 3 - Research on POSIX","text":"<p>Write a few paragraphs about the POSIX standards. What are they, why do they exist, what kind of things are included in the norms.</p> <p>POSIX (Portable Operating System Interface) is IEEE standard designed for OS compatibility. It defines API and Interface of OS to be conventional primarily targeting UNIX based systems. Not only Linux and MacOS but also even Microsoft Windows can offer some POSIX compatibility based on Windows Subsystem for Linux (WSL).</p> <p>During the warring states of OS, a lot of OS emerged and competed against each other. Almost all of them had different form of commands, functions, system calls, and utilities without any compatibility. This made programmers to make different codes of system call for each OS, making it extremely inefficient. POSIX standard application in OS industry promised way much portable software for all software programs in different OS.</p> <p>POSIX standard has several key concepts.</p> <ol> <li>System Calls for process creation<code>fork()</code>, execution<code>exec()</code>, and termination <code>exit()</code>, <code>kill()</code>.</li> <li>File IO (input output) stream operations <code>read()</code>, <code>write()</code>, permissions, directory functions <code>opendir()</code>, <code>readdir()</code>.</li> <li>Multi Threading APIs like POSIX Threads or Pthreads</li> <li>IPC (Inter Process Communication) and Process Management lik <code>pipe()</code></li> <li>Network Standards including socket based communication</li> <li>Command Line Interface basic functions like <code>ls</code>, <code>cd</code>, <code>grep</code>, <code>awk</code>, <code>sed</code>, etc...</li> <li>Shell Script standards</li> </ol> <p>POSIX allow compatible software for different OS, so code portability is way much better, and programmers don't need to make software for each different Operating Systems.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H4/","title":"Assignment IV","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H4/#exercise-1-simple-questions","title":"Exercise 1 Simple questions","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H4/#1","title":"1.","text":"<p>Consider a system in which threads are implemented entirely in user space, with the run-time system getting a clock interrupt once a second. Suppose that a clock interrupt occurs while some thread is executing in the run-time system. What problem might occur? Can you suggest a way to solve it?</p> <p>Thread control data corruption is likely if system runtime is during thread update including thread status, program counter, or stack pointer. Clock interruption might compromise thread data structure. Also, interruption handling malfunction might also happen. Implementation of interrupt masking in runtime system can solve this issue, since it will basically prohibit interruption temporarily during thread process that would compromise system is not finished. Once these operations are complete, the interrupts can be enabled again. This approach will ensure no interruption during thread processes that might damage if stopped without finish.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H4/#2","title":"2.","text":"<p>Suppose that an operating system does not have anything like the select system call (man select for more details on the command) to see in advance if it is safe to read from a file, pipe, or device, but it does allow alarm clocks to be set that interrupt blocked system calls. Is it possible to implement a threads package in user space under these conditions? Discuss.</p> <p>It is possible to implement a threads package in user space under conditions without any commands similar to <code>select</code> system call. It is important to remember that blocked threads are not blocking entire process. Kernel manages all processes, but they are not controlling each thread. It will be impossible to check whether file or pipe are ready to be used during Input / Output, without <code>select()</code> function. However, <code>alarm clock</code> can be used to get worktime in the following order.</p> <ol> <li>Thread request to read from file or pipe</li> <li>Runtime system call <code>read()</code></li> <li>If call blocks, alarm clock like <code>alarm()</code> or <code>settimer()</code> interrupt blocked system call</li> <li>Receive alarm interrupt, runtime system save blocked thread status</li> <li>Blocked thread switch to another thread</li> <li>Original thread retry IO operation</li> </ol> <p>Even though this clock using approach wastes resource for counting times for each process I/O, this method will successfully prevent process blocking during I/O by thread switch.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H4/#exercise-2-race-condition-in-bash","title":"Exercise 2 Race condition in Bash","text":"<p>Write a Bash script which generates a file composed of one integer per line. The script should read the last number in the file, add one to it, and append the result to the file.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H4/#1-run-the-script-in-both-background-and-foreground-at-the-same-time-how-long-does-it-take-before-observing-a-race-condition","title":"1. Run the script in both background and foreground at the same time. How long does it take before observing a race condition?","text":"<p>Code implemented at <code>h4/ex2.sh</code>. Foreground on front line and background on back line.</p> <pre><code># If file does not exist create starting with 0\nif [ ! -f counter.txt ]; then\n    echo 0 &gt; counter.txt\nfi\n\n# Read the last number from the file\nlast_num=$(tail -n 1 counter.txt)\n\n# Create new number incremented one from last number\nnew_num=$((last_num + 1))\n\n# Append new number to result\necho $new_num &gt;&gt; counter.txt\n</code></pre> <p>Foreground Terminal</p> <pre><code>chmod +x ex2.sh\n./ex2.sh\n</code></pre> <p>Background Terminal</p> <pre><code>while true; do ./ex2.sh &amp; sleep 0.1; done\n</code></pre> <p>The background terminal will iterate to execute <code>ex2.sh</code> forever until it is interrupted.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H4/#2-modify-the-script-such-as-to-prevent-the-race-condition","title":"2. Modify the script such as to prevent the race condition.","text":"<p>Code implementation to lock infinite loop is required.</p> <pre><code># Flock usage, only one process write to file at same time\nexec 200&gt;counter.txt.lock      # Create or open lock file\nflock -n 200 || exit 1         # Get lock, exit if locked\n</code></pre> <p>Added the following lines of code to implement lock.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H4/#exercise-3-programming-with-semaphores","title":"Exercise 3 Programming with semaphores","text":"<p>The following C code creates two threads which increment a common global variable. When run it generates a random and inaccurate output. In order to solve this problem we want to use semaphores.</p> <ol> <li>On Linux, find the file semaphore.h.</li> <li>Read the documentation to understand how to use the functions described in the file <code>semaphore.h</code>.</li> <li>Using semaphores adjust the program such as to always return the correct answer.</li> </ol> <pre><code>find /usr/include -name semaphore.h\n/usr/include/semaphore.h\ncat /usr/include/semaphore.h\n</code></pre> <p>Semaphore file attached as <code>semaphore.h</code> in folder.</p> <p>The GNU C Library (glibc) manual Semaphore</p> <p>Linux shell manual check by following command</p> <pre><code>man sem_init\nman sem_wait\n</code></pre> <p>Semaphore code to always return the correct answer is in <code>semaphore.c</code> file.</p> <pre><code>clang-18 -std=gnu17 -O2 -Wall -Wextra -Werror -pedantic -Wno-unused-result -Wconversion -Wvla code.c -o code\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H5/","title":"Assignment V","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H5/#ex-1-simple-questions","title":"Ex. 1 ??Simple questions","text":"<p>1. A system has two processes and three identical resources. Each process needs a maximum of two resources. Can a deadlock occur? Explain.</p> <p>Deadlock can occur in the following circumstances.</p> <ol> <li>Mutual Exclusion</li> <li>Hold and Wait</li> <li>No Preemption</li> <li>Circular Wait</li> </ol> <p>System has two processes and one process can handle maximum 2 resources, meaning that the entire system can handle maximum 4 resources. Each process require maximum 2 resources. However, only 3 resources exist in current circumstance. Thus, since process capability of system is not full, deadlock is NOT going to occur.</p> <p>2. A computer has six tape drives, with n processes competing for them. Each process may need two drives. For which values of n is the system deadlock free?</p> <p>Similar to the answer made at previous problem, System might potentially have deadlock at least \\(n \\geq 6\\). Thus, if \\(n \\in {1,2,3,4,5}\\), then deadlock is not likely to happen.</p> <p>3. A real-time system has four periodic events with periods of 50, 100, 200, and 250 msec each. Suppose the four events require 35, 20, 10, and x msec of CPU time, respectively. What is the largest value x for which the system is schedulable?</p> <p>\\(\\frac{35}{50} + \\frac{20}{100} + \\frac{10}{200} + \\frac{x}{250} &lt; 1\\)</p> <p>\\(0.95 + \\frac{x}{250} &lt; 1 \\implies \\frac{x}{250} &lt; 0.05 \\implies x &lt; 12.5\\)</p> <p>Thus, 12.5 will be maximum.</p> <p>4. Round-robin schedulers normally maintain a list of all runnable processes, with each process occurring exactly once in the list. What would happen if a process occurred more than once in the list? Would there be any reason for allowing this?</p> <p>If same process occurred more than once, then CPU Time will be allocated more to that process.</p> <p>5. Can a measure of whether a process is likely to be CPU bound or I/O bound be detected by analyzing the source code. How to determine it at runtime?</p> <p>CPU bound process is heavily composed of computation.</p> <p>Input Output bound is literally handling reading input and writing output of files.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H5/#exercise-2-deadlocks","title":"Exercise 2 ??Deadlocks","text":"<p>Assuming three resources consider the following snapshot of a system.</p> Process Allocated Maximum Available P1 010 753 332 P2 200 322 P3 302 902 P4 211 222 P5 002 433 <p>1. Determine the content of the Request matrix.</p> <p>$ \\begin{bmatrix} 7 &amp; 4 &amp; 3 \\ 1 &amp; 2 &amp; 2 \\ 6 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; 1 \\ 4 &amp; 3 &amp; 1 \\ \\end{bmatrix} $</p> <p>2. Is the system in a safe state?</p> <p>Banker's algorithm should be used to check system status safety. Available resources are \\([3,3,2]\\).</p> <p>\\(P4=(0,1,1) \\rightarrow (3 + 2, 3 + 1, 2 + 1) = (5, 4, 3)\\)</p> <p>\\(P2=(1,2,2) \\rightarrow (5 + 2, 4 + 0, 3 + 0) = (7, 4, 3)\\)</p> <p>\\(P1=(7,4,3) \\rightarrow  (7 + 0, 4 + 1, 3 + 0) = (7, 5, 3)\\)</p> <p>\\(P3=(6,0,0) \\rightarrow (7 + 3, 5 + 0, 3 + 2) = (10, 5, 5)\\)</p> <p>\\(P5=(10, 5, 5) \\rightarrow (10 + 0, 5 + 0, 5 + 2) = (10, 5, 5)\\)</p> <p>3. Can all the processes be completed without the system being in an unsafe state at any stage?</p> <p>Yes. Sequence will be \\(P4 \\rightarrow P2 \\rightarrow P1 \\rightarrow P3 \\rightarrow P5\\) with no safety vulnerable part.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H5/#ex-3-the-reader-writer-problem","title":"Ex. 3 ??The reader-writer problem","text":"<p>In the reader-writer problem, some data could be accessed for reading but also sometimes for writing. When processes want to read the data they get a read lock and a write lock for writing. Multiple processes could get a read lock at the same time while a write lock should prevent anybody else from reading or writing the data until the write lock is released.</p> <p>To solve the problem we decide to use a global variable count together with two semaphores: count_lock for locking the count variable, and db_lock for locking the database. To get a write lock we can proceed as follows:</p> <pre><code>void write_lock() {\n    down(db_lock);\n}\n\nvoid write_unlock() {\n    up(db_lock);\n}\n</code></pre> <p>1. Explain how to get a read lock, and write the corresponding pseudocode.</p> <p>Counter for counting active readers number is required. When reader start, increase count. For first reader, lock database. If reader ends, decrease count. If it is last reader, release db lock. This is following pseudocode.</p> <pre><code>void read_lock(){\n    down(count_lock);\n    if(count == 0) down(db_lock); // First reader lock databas e\n    count++;\n    up(count_lock);\n}\n\nvoid read_unlock(){\n    down(count_lock);\n    count--;\n    if(count==0) up(db_lock); // Last reader unlocks the database\n    up(count_lock);\n}\n</code></pre> <p>2. Describe what is happening if many readers request a lock.</p> <p>When several lock request is made by several readers, then each reader could increase count and only first reader will lock database. Every following readers could skip database lock. Block any new reader when a writer becomes available.</p> <p>3. Explain how to implement this idea using another semaphore called read_lock.</p> <p>Prevent writer to unclearly handle reader influx by using semaphore <code>read lock</code>. This blocks new readers and allow readers to operate properly.</p> <pre><code>void read_lock() {\n    down(read_lock); // New reader prevention\n    down(count_lock);\n    if(count == 0) down(db_lock);\n    count++;\n    up(count_lock);\n    up(read_lock);\n}\n\nvoid read_unlock() {\n    down(count_lock);\n    count--;\n    if(count==0) up(db_lock);\n    up(count_lock);\n}\n</code></pre> <p>4. Is this solution giving any unfair priority to the writer or the reader? Can the problem be considered as solved?</p> <p>Since this solution prohibits new readers to start, it will primarily process writer if resource gets available. It will prevent writer starving, but it causes reader starving instead. Thus, balancing resources for both read and write will be more applicable. Queue or algorithm implementation will be required to give 'fair' priority for both writer and reader.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H6/","title":"Assignment VI","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H6/#exercise-1","title":"Exercise 1","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H6/#11","title":"1.1","text":"<p>Consider a swapping system in which memory consists of the following hole sizes in memory order: 10 KB, 4 KB, 20 KB, 18 KB, 7 KB, 9 KB, 12 KB, and 15 KB. Assuming first fit is used, which hole is taken for successive segment requests of: (i) 12 KB, (ii) 10 KB and (iii) 9KB. Repeat for best fit and quick fit.</p> <p>Available hole sizes: 10 4 20 18 7 9 12 15</p> <p>First Fit</p> <p>(i) 12KB TO 20KB (ii) 10KB TO 18KB (iii) 9KB TO 15KB</p> <p>Best Fit</p> <p>(i) 12KB TO 12KB (ii) 10KB TO 10KB (iii) 9KB TO 9KB</p> <p>Quick Fit</p> <p>(i) 12KB TO 12KB (ii) 10KB TO 10KB (iii) 9KB TO 9KB</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H6/#12","title":"1.2","text":"<p>If an instruction takes 10 nsec and a page fault takes an additional n nsec, give a formula for the effective instruction time if page faults occur every k instructions.</p> <p>Formula for Effective Instruction Time</p> <p>instruction time \\(t=10\\) nanoseconds Page fault additional \\(n\\) nanoseconds Page fault occur every \\(k\\) instructions</p> <p>Effective Time \\(= t + \\frac{n}{k}\\)</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H6/#13","title":"1.3","text":"<p>A small computer has four page frames. At the first clock tick, the R bits are 0111. At t subsequent clock tics, the values are 1011, 1010, 1101, 0010, 1010, 1100 and 0001. Assuming the aging algorithm is used with an 8-bit counter what is the value of the four counters after the last tick.</p> Page Counter Value Page 0 <code>01101110</code> Page 1 <code>01001001</code> Page 2 <code>00110111</code> Page 3 <code>10001011</code>"},{"location":"ECE482FA24/ECE482HW/ECE482H6/#exercise-2-page-tables","title":"Exercise 2 Page tables","text":"<p>In the lecture it was mentioned that the translation from virtual address into physical address could be sped up using the TLB. Unfortunately this solution is not of much help in the case of large page tables. Investigate the two following alternative solutions: inverted page tables and multilevel page tables.</p> Feature Inverted Page Tables Multilevel Page Tables Description Single table for physical frames Hierarchical table structure Table Size Based on physical memory size Based on used virtual pages Benefits Saves memory for large virtual spaces Efficient for sparse address spaces Limitations Slower lookups due to table search Requires multiple memory accesses Implementation Uses a hash function or search mechanism Adds memory for hierarchical levels"},{"location":"ECE482FA24/ECE482HW/ECE482H6/#ex-3-research","title":"Ex. 3 ??Research","text":"<p>Write about half a page on the topic of codes bugs that lead to security holes; In particular illustrate the discussion using common examples. Do not forget to reference your sources of information.</p> <p>Generally subtle bugs inside code files are vulnerable against hacker attack. It can allow external attack to compromise computer system. Flaw logic and insufficient input validation are two core reasons that might potentially cause vulnerabilities.</p> <p>SQL user input query sanitization failure made SQL query execution that are not actually input. This attack is named as <code>SQL injection</code>. Wikipedia: SQL injection</p> <p>Multi Threading environment has <code>race condition</code> if process result in unexpected behavior. Dirty Cow is one good example using write access to read only files. Red Hat: Dirty COW Race Condition. Dirty COW Vulnerability</p> <p>When program access beyond allocated memory, then adjacent memory not allocated will be overwritten. This part can have attack code, named as <code>Buffer overflow</code>. Wikipedia: Morris Worm</p> <p>When validation of user input in file path is not correct, attacker can access inside system, navigating directories. Even access to the <code>etc/passwd</code> might be possible. This is <code>Directory Traversal</code>. Fortinet Security Advisory</p> <p>Attackers use bug in <code>Privilege Escalation</code> aiming higher access privilege than programming system. For instance, Microsoft OpenSSL was attacked by Heartbleed bug. OpenSSL Heartbleed Bug</p> <p>When validation failure or user input encoding error occurs, <code>XSS (Cross Side Scripting)</code> became vulnerable against attacks. Then, other user's web browser can be injected with attack codes that might save tokens and cookies required for login. Wikipedia: Samy (computer worm)</p> <p>When memory is accessed after free, <code>UAF (Use After Free)</code> bug appears. Internet Explorer had this, so had a lot of security issues. CVE Details. Database of Software Vulnerabilities.</p> <p>Applications that have deserialized data is good way for attackers, <code>Deserialization Vulnerabilities</code> inside code. Apache Struts had similar issue, leaking 147 million individual information! Apache Strtus</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H6/#ex-4-linux","title":"Ex. 4 ??Linux","text":"<p>Write a very short C program that leads to thrashing.</p> <p>Code in <code>main.c</code></p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/","title":"Assignment VII","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-1-page-replacement-algorithm","title":"Ex. 1 ??Page replacement algorithm","text":"<p>In this exercise we consider the WSClock page replacement algorithm with a ? value of two ticks. The system state is given as follows.</p> Page Time Stamp Present Referenced Modified 0 6 1 0 1 1 9 1 1 0 2 9 1 1 1 3 7 1 0 0 4 4 0 0 0"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-11-explain-the-content-of-the-new-table-entries-if-a-clock-interrupt-occurs-at-tick-10","title":"Ex. 1.1. Explain the content of the new table entries if a clock interrupt occurs at tick 10.","text":"<p>Page 0, <code>Time Stamp</code> \\(= 6 \\leq 8\\), old, <code>Referenced</code> \\(=0\\), Replacement candidate, <code>Modified</code> \\(=1\\), Should be written in disk.</p> <p>Page 1, <code>Time Stamp</code> \\(= 9 \\geq 8\\), Not old, No change</p> <p>Page 2, <code>Time Stamp</code> \\(= 9 \\geq 8\\), Not old, No change</p> <p>Page 3, <code>Time Stamp</code> \\(= 7 \\leq 8\\), old, Replacement candidate, with no need to write back to disk</p> <p>Page 4, <code>Present</code>\\(=0\\), so not in memory, not considered for replacement</p> <p>Table after Tick 10 interrupt is following.</p> Page Time Stamp Present Referenced Modified 0 6 1 0 0 1 9 1 1 0 2 9 1 1 1 3 7 1 0 0 4 4 0 0 0"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-12-due-to-a-read-request-to-page-4-a-page-fault-occurs-at-tick-10-describe-the-new-table-entry","title":"Ex. 1.2. Due to a read request to page 4 a page fault occurs at tick 10. Describe the new table entry.","text":"<p>Suppose read request for page 4 is made. Since <code>Present</code> = 0, page is not in memory. Page Fault.</p> <p>WSLock Algorithm</p> <p>First, select victim page. For page 3, <code>Time Stamp</code> \\(= 7 \\leq 8\\), old, <code>Referenced</code>\\(=0\\), <code>Modified</code>\\(=0\\), No need to write back in disk.</p> <p>Now remove page 3 and load page 4. Update <code>Present</code> \\(=1\\), <code>Referenced</code>\\(=0\\), <code>Modified</code>\\(=0\\). Result table will be following.</p> Page Time Stamp Present Referenced Modified 0 6 1 0 0 1 9 1 1 0 2 9 1 1 1 3 7 0 0 0 4 10 1 0 0"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-2-minix-3","title":"Ex. 2 ??Minix 3","text":"<p>The goal of this exercise is to understand and implement system calls.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-21-in-which-files-are","title":"Ex. 2.1. In which files are:","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#a-the-constants-with-number-and-name-for-the-system-calls","title":"a) the constants with number and name for the system calls?","text":"<p>Path is <code>/include/minix/callnr.h</code></p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#b-the-names-of-the-system-call-routines","title":"b) the names of the system call routines?","text":"<p><code>/servers/*/table.c</code></p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#c-the-prototypes-of-the-system-call-routines","title":"c) the prototypes of the system call routines?","text":"<p><code>/servers/*/proto.h</code></p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#d-the-system-calls-of-type-ignalcoded","title":"d) the system calls of type ?\uc413ignal??coded?","text":"<p><code>/servers/pm/signal.c</code></p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-22-what-problems-arise-when-trying-to-implement-a-system-call-int-getchpidsint-n-pid_t-childpid","title":"Ex. 2.2. What problems arise when trying to implement a system call int getchpids(int n, pid_t *childpid)","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#which-ritesthe-pids-of-up-to-n-children-of-the-current-process-into-childpid","title":"which ?\uc417rites??the pids of up to n children of the current process into *childpid?","text":"<ul> <li>Since <code>*childpid</code> is located in user space, kernel code will not directly access to user space pointers</li> <li>Secure copy mechanism (<code>sys_datacopy</code>) is required.</li> <li>Validate Buffer size sufficiency to handle <code>n</code> child PIDs.</li> <li>Concurrent issue appears when process create or remove children during execution.</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-23-write-a-ub-system-callint-getnchpidint-n-pid_t-childpid-which-retrieves-the-n-th-child-process","title":"Ex. 2.3. Write a ?\uc413ub-system call??int getnchpid(int n, pid_t childpid) which retrieves the n-th child process.","text":"<pre><code>#include \"pm.h\"\n#include \"mproc.h\"\n\nint getnchpid(int n, pid_t *childpid) {\n    if (childpid == NULL) return -1;\n    if (n &gt;= NR_PROCS) return -1;\n\n    struct mproc *child = &amp;mproc[n];\n    if (child-&gt;mp_parent != who_p) return -1;    // Ensure the process is a child of caller\n\n    *childpid = child-&gt;mp_pid;                    // Retrieve PID of the child\n    return 0;\n}\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-24-using-the-previous-sub-system-call-implement-the-original-getchpids-system-call","title":"Ex. 2.4. Using the previous sub-system call, implement the original getchpids system call.","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#the-returned-int-value-corresponds-to-the-number-of-pids-in-childpid-or-1-on-an-error","title":"The returned int value corresponds to the number of pids in *childpid, or -1 on an error.","text":"<pre><code>#include \"pm.h\"\n#include \"mproc.h\"\n\nint do_getchpids(int n, pid_t *childpid) {\n    if (childpid == NULL) return -1;\n    if (n &gt; NR_PROCS) return -1;\n\n    int count = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int result = getnchpid(i, &amp;childpid[i]);\n        if (result == -1) break;  // Stop if no more children\n        count++;\n    }\n    return count;                 // Return children retrieved count\n}\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-25-write-a-short-program-that-demonstrate-the-previous-system-calls","title":"Ex. 2.5. Write a short program that demonstrate the previous system calls.","text":"<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/wait.h&gt;\n\n#define NUM 10  // Number of child processes to create\n\nint main() {\n    pid_t child_pids[NUM];\n    pid_t retrieved_pids[NUM];\n\n    // Create child processes\n    for (int i = 0; i &lt; NUM; i++) {\n        pid_t pid = fork();\n        if (pid == 0) { // Child process\n            printf(\"Child %d: PID = %d\\n\", i, getpid());\n            exit(0);\n        } else if (pid &gt; 0) { // Parent process\n            child_pids[i] = pid;\n        } else {\n            perror(\"fork failed\");\n            exit(1);\n        }\n    }\n\n    // Wait for all child processes to terminate\n    for (int i = 0; i &lt; NUM; i++) {\n        wait(NULL);\n    }\n\n    // Call `getchpids` to retrieve child PIDs\n    int result = getchpids(NUM, retrieved_pids);\n    if (result &lt; 0) {\n        fprintf(stderr, \"getchpids fail\\n\");\n        return -1;\n    }\n\n    // Validate and print results\n    for (int i = 0; i &lt; result; i++) {\n        printf(\"Retrieved PID: %d\\n\", retrieved_pids[i]);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-26-the-above-strategy-solves-the-initial-problem-through-the-introduction-of-a-sub-system-call","title":"Ex. 2.6. The above strategy solves the initial problem through the introduction of a sub-system call.","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#a-what-are-the-drawbacks-and-benefits-of-this-solution","title":"a) What are the drawbacks and benefits of this solution?","text":"<p>Drawbacks:</p> <ul> <li>Additional overhead due to multiple calls to <code>getnchpid</code>.</li> <li>Complexity in handling edge cases (e.g., invalid indices).</li> <li>Higher potential for race conditions.</li> </ul> <p>Benefits:</p> <ul> <li>Modular design makes debugging easier.</li> <li>Reusability of the <code>getnchpid</code> function.</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#b-without-implementing-it-describe-the-basic-details-of-an-alternative-approach","title":"b) Without implementing it, describe the basic details of an alternative approach.","text":"<p>Implement <code>getchpids</code> as single system call</p> <ul> <li>Iteration through the process table in one pass.</li> <li>Retrieval of all child PIDs directly into user-provided buffer.</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-3-research","title":"Ex. 3 ??Research","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#write-about-a-page-on-the-topic-of-the-ext2-filesystem-do-not-forget-to-reference-your-sources","title":"Write about a page on the topic of the ext2 filesystem. Do not forget to reference your sources.","text":"<p>Second Extended File System, or ext2 file system is a non-journaling filesystem introduced in 1993 for Linux. It was designed to overcome the limit of the ext filesystem by improving performance, flexibility, and scalability. due to its simplicity and efficiency, ext2 is still used for certain applications. Key components of ext2 are followings.</p> <ul> <li>Superblock contains filesystem metadata, its size, block num, inodes, etc</li> <li>Inode Table represent file or directory and contain information like size, owner, timestamp, etc</li> <li>Data Blocks save file contents. Large files are supported by indirect, double indirect, etc.</li> <li>Block Group divide filesystem to block group, each containing inode table, data block, etc.</li> </ul> <p>Since ext2 does not use journaling, overhead is reduced and writing speed is faster than later generation filesystems like ext3 or ext4 sometimes. This make it appropriate for devices with limited resources like USB or embedded systems. Its flexible inode allocation system allow optimized work performance with large quantity of volumes, even up to 2TB in size on 4KB block systems at maximum.</p> <p>However, absence of journaling represents crash or system power fail will require <code>fsck</code> check to restart. It might compromise data, and much slower. Also, its workload is not enough to handle huge quantity of volumes nowadays.</p> <p>References</p> <ul> <li>\"The Linux Kernel Archives\" - https://www.kernel.org</li> <li>\"Understanding Linux Filesystems\" - https://tldp.org</li> <li>Linux terminal man pages (man ext2, man fsck).</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-4-simple-questions","title":"Ex. 4 ??Simple questions","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-41-if-a-page-is-shared-between-two-processes","title":"Ex. 4.1. If a page is shared between two processes,","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#is-it-possible-that-the-page-is-read-only-for-one-process-and-read-write-for-the-other-why-or-why-not","title":"is it possible that the page is read-only for one process and read-write for the other? Why or why not?","text":"<p>Yes. Memory Management Unit (MMU) will enforce access permission based on page table of each process. One process will map page for read only, and other process will map as read and write.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H7/#ex-42-when-both-paging-and-segmentation-are-being-used","title":"Ex. 4.2. When both paging and segmentation are being used,","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H7/#first-the-segment-descriptor-is-found-and-then-the-page-descriptor-does-the-tlb-also-need-a-two-levels-lookup","title":"first the segment descriptor is found and then the page descriptor. Does the TLB also need a two-levels lookup?","text":"<p>No. TLB will not need two process layers. TLB acquire virtual to physical transition after page lookup and full segment. TLB will miss trigger two level lookup to update TLB.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/","title":"Assignment VIII","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#exercise-1-inputoutput","title":"Exercise 1 - Input/Output","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H8/#1-is-it-possible-to-scan-a-document-and-send-it-through-a-wireless-network-at-full-speed-explain-why-why-not","title":"1. Is it possible to scan a document and send it through a wireless network at full speed? Explain why, why not.","text":"<p>It is theoretically possible depends on system bottleneck. Factors are scan resolution, scanner scan speed, and bandwidth of wireless network. If network speed is faster than scanner output rate, scan time will be fine. However, delays like image compression will prevent to send data to full speed of wireless network.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#2-how-can-an-os-facilitate-the-installation-of-a-new-device-without-any-need-to-recompile-the-os-or-even-to-reboot-it","title":"2. How can an OS facilitate the installation of a new device without any need to recompile the OS or even to reboot it?","text":"<p>OS can use modular designs to dynamically load device drivers. When new device is connected, OS will detect device by plug and play mechanism. Then, load the appropriate driver without requiring any reboot or recompile.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#3-in-the-slides-four-io-software-layers-are-listed-in-which-layers-are-the-following-operations-done","title":"3. In the slides four I/O software layers are listed; in which layers are the following operations done:","text":"<ul> <li>a) Computing the track, sector, and head for a disk read -&gt; Device Driver Layer</li> <li>b) Writing command to the device registers -&gt; Hardware Layer</li> <li>c) Checking if the user is allowed to use the device -&gt; User Level Software Layer or OS Layer</li> <li>d) Converting binary integers to ASCII for printing -&gt; User Level Software Layer</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#a-dma-controller-has-four-channels-the-controller-is-able-to-request-a-32bit-word-every-100-nsec","title":"A DMA controller has four channels. The controller is able to request a 32bit word every 100 <code>nsec</code>.","text":"<p>A response takes equally long. How fats should the bus be in order to avoid being a bottleneck?</p> <p>DMA controller request and response per 100<code>ns</code> for 32-bit words. Bus support speed \\(\\frac{32 <code>bits</code>}{100 <code>ns</code>} = 320\\)MB/<code>sec</code> = 40 MB/<code>sec</code> to avoid bottleneck.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#5-briefly-explain-what-a-thin-client-is","title":"5. Briefly explain what a thin client is.","text":"<p>Thin client is lightweight computer system. It mostly relies on server to process and store data. It is primarily used for application access, data, or remote desktop.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#6-describe-how-a-hard-disk-is-working-and-give-a-few-details-regarding-its-geometry","title":"6. Describe how a hard disk is working and give a few details regarding its geometry.","text":"<p>Hard disk can store a large quantity of data in a huge scale by platters. Each platter is divided by tracks, and each track is divided by sectors. The read/write head</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#7-what-are-differences-between-raid-0-1-5-6-and-10","title":"7. What are differences between RAID 0, 1, 5, 6, and 10?","text":"<ul> <li>RAID 0 - Stripe without redundancy, fast, no fault tolerance</li> <li>RAID 1 - Stripe with redundancy, mirroring</li> <li>RAID 5 - Stripe with distributed parity, need at minimum 3 disks.</li> <li>RAID 6 - Stripe with distributed dual parity, can handle 2 disk failures</li> <li>RAID 10 Combine RAID 0 and 1, high performance by mirroring and stripe without redundancy</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#exercise-2-multiprocessors","title":"Exercise 2 - Multiprocessors","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H8/#1-suppose-that-the-tsl-instruction-was-not-available-for-synchronizing-a-multiprocessor","title":"1. Suppose that the TSL instruction was not available for synchronizing a multiprocessor.","text":"<p>Instead, another instruction, SWP was provided that atomically swapped the contents of a register with a word in memory. How could that be used to provide multiprocessor synchronisation?</p> <p>The <code>SWP</code> instruction could swap register by lock with memory allocation easily. If lock is free, SWAP will lock variable to ensure mutual exclusion.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#2-briefly-describe-virtualization-and-the-main-challenges-that-need-to-be-overcome","title":"2. Briefly describe virtualization and the main challenges that need to be overcome.","text":"<p>Virtualization make several operating systems to run in one physical PC. However, resource allocation and isolation would be key technological challenges. Specifically, CPU scheduling, I/O virtualization, and security isolation will be important.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#exercise-3-file-systems","title":"Exercise 3 - File systems","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H8/#1-assuming-the-current-working-directory-is-usrsharedocmuttexamples","title":"1. Assuming the current working directory is <code>/usr/share/doc/mutt/examples</code>","text":"<p>what is the absolute path of <code>../../../doc/../../lib/mutt</code>?</p> <p><code>/usr/share/doc/mutt/examples</code> to <code>../../../doc</code> is <code>/usr/share/doc</code>. <code>/usr/share/doc</code> to <code>../../lib/mutt</code> is <code>/usr/lib/mutt</code> Thus, absolute path will be <code>/usr/lib/mutt</code>.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#2-a-unix-system-has-1kb-blocks-and-4b-disk-addresses","title":"2. A Unix system has 1KB blocks and 4B disk addresses.","text":"<p>What is the maximum file size if i-nodes contain 13 direct entries, and one single, double , and triple indirect entry each?</p> <p>Each block can hold \\(\\frac{1KB}{4KB}=256\\) addresses.</p> <ul> <li>Direct entries are \\(13 \\times 1KB = 13KB\\)</li> <li>Single Indirect Entry \\(256 \\times 1KB = 256KB\\)</li> <li>Double Indirect Entry \\(256 \\times 256 \\times 1KB = 65536KB = 64MB\\)</li> <li>Triple Indirect Entry \\(256 \\times 256 \\times 256 \\times 1KB = 16777216MB = 16384MB = 16GB\\)</li> <li>Maximum File Size \\(13KB + 256KB + 64MB + 16GB = 16448.2627 MB = 16.06GB\\)</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#3-the-time-required-to-read-a-certain-number-of-bytes-can-be-approximated-by-summing-the-seek-rotation-delay-and-transfer-times","title":"3. The time required to read a certain number of bytes can be approximated by summing the seek, rotation delay, and transfer times.","text":"<p>Given a disk with mean seek time of 8 msec, a rotation rate of 15,000 rpm and 262,144 bytes per track what are the data rates for block sizes of</p> <ul> <li>(i) 1 KB,</li> <li>(ii) 2 KB, and</li> <li>(iii) 4 KB?</li> </ul> <p>Parameters Provided</p> <ul> <li>Mean seek time = $ 8 \\, \\text{ms} $</li> <li>Rotation time per revolution = $ \\frac{1}{15,000} \\times 60,000 = 4 \\, \\text{ms} $</li> <li>Bytes per track = $ 262,144 \\, \\text{bytes} $</li> </ul> <p>Transfer Time Formula: $ \\text{Transfer Time} = \\frac{\\text{Block Size}}{\\text{Bytes per Track}} \\times 4 \\, \\text{ms} $</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#i-block-size-1-kb-1024-textbytes","title":"(i) Block Size = 1 KB ($ 1,024 \\, \\text{bytes} $)","text":"<ul> <li>Transfer Time = $ \\frac{1,024}{262,144} \\times 4 \\approx 0.0156 \\, \\text{ms} $</li> <li>Total Time = $ 8 + 4 + 0.0156 = 12.0156 \\, \\text{ms} $</li> <li>Data Rate = $ \\frac{1,024 \\, \\text{bytes}}{12.0156 \\, \\text{ms}} \\approx 85.2 \\, \\text{KB/s} $.</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#ii-block-size-2-kb-2048-textbytes","title":"(ii) Block Size = 2 KB ($ 2,048 \\, \\text{bytes} $)","text":"<ul> <li>Transfer Time = $ \\frac{2,048}{262,144} \\times 4 \\approx 0.0312 \\, \\text{ms} $</li> <li>Total Time = $ 8 + 4 + 0.0312 = 12.0312 \\, \\text{ms} $</li> <li>Data Rate = $ \\frac{2,048 \\, \\text{bytes}}{12.0312 \\, \\text{ms}} \\approx 170.3 \\, \\text{KB/s} $.</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#iii-block-size-4-kb-4096-textbytes","title":"(iii) Block Size = 4 KB ($ 4,096 \\, \\text{bytes} $)","text":"<ul> <li>Transfer Time = $ \\frac{4,096}{262,144} \\times 4 \\approx 0.0624 \\, \\text{ms} $</li> <li>Total Time = $ 8 + 4 + 0.0624 = 12.0624 \\, \\text{ms} $</li> <li>Data Rate = $ \\frac{4,096 \\, \\text{bytes}}{12.0624 \\, \\text{ms}} \\approx 339.7 \\, \\text{KB/s} $.</li> </ul>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#exercise-4-security","title":"Exercise 4 - Security","text":""},{"location":"ECE482FA24/ECE482HW/ECE482H8/#1-if-using-only-lowercase-letters-how-many-possible-8-letter-words-can-be-chosen","title":"1. If using only lowercase letters how many possible 8 letter words can be chosen?","text":"<p>Explain why a password should always contain lower and uppercase letters, numbers and symbols.</p> <p>8 Character Word, use only lowercase letters, 26 probabilities per each character. Possible combination likelihood will be \\(26^8 = 208827064576\\) cases.</p> <p>It is important to contain lower case, upper case letter, number, and symbols because it will increment probability of password search space exponentially. Entropy of password increases, so brute Force attack will be more resource unlikely. For instance, uppercase multiplies twice probability per character, \\(2^8=256\\) times for 8 characters.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#2-explain-why-memory-dynamically-allocated-using-malloc-is-sometimes-random-and-some-other-times-set-to-0","title":"2. Explain why memory dynamically allocated using malloc is sometimes random and some other times set to 0.","text":"<p>Memory allocation by <code>malloc</code> does not initialize memory. It reserves size but may return memory with no leftover values from previous use, while <code>calloc</code> explicitly initialize to 0. If <code>calloc</code> is called, or memory is initialized explicitly, checking whether memory start is 0 or not is crucial.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#3-a-computer-system-is-made-of-several-components-each-featuring-a-different-level-of-security-how-secure-is-this-system","title":"3. A computer system is made of several components each featuring a different level of security. How secure is this system?","text":"<p>Computer system security is same as the most vulnerable part of the computer system. Attackers might detect and exploit the least secure component so that entire system is under attack. For instance, old firmware security vulnerability might be a trigger to compromise the entire OS, that has no security problem in the OS. Defense in depth strategies are minor ways to support weakest vulnerabilities.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#4-can-security-be-achieved-explain-your-answer","title":"4. Can security be achieved? Explain your answer.","text":"<p>Even theoretically, accomplishment of computer system to secure 100% perfect security is not achievable considering the complexity of computer system and its continuous technological progress. In some perspective, some super computer that does not exist in real world might make all computer systems insecure by brute force. In reality, it is even harder, due to several updates, conflicts, computer external problems like electricity supply or network, human mistakes, etc. So, people generally compromise by implementation of defence layer, regular updates, access controls, and continuous monitor.</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#exercise-5-research","title":"Exercise 5 - Research","text":"<p>Write about half a page on the topic of firewalls on Linux systems; include information on iptables. Do not forget to reference your sources of information.</p> <p>In Linux Operating System, Firewalls manage and secure network traffic by controlling incoming and outgoing traffic based on predefined rules. It could protect against not authorized access and attacks. Firewall acts as barrier located between trusted networks and untrusted networks. It protects system access from unauthorized access, so that attacks and data breaches are prevented.</p> <p>Firework analyze packets and decide whether they are allowed by defined rules including:</p> <ul> <li>IP Address : allow or block traffic from specific source or destination</li> <li>Port Numbers : Filter by services (Block SSH by block port 22)</li> <li>Protocols : Protocol type based filtering like TCP or UDP</li> </ul> <p>There are several types of firewalls available.</p> <ul> <li>Packet Filtering Firewall work at network layer to inspect each individual packet, regardless of connection status.</li> <li>Stateful Firewall could work and track connection status to make more context aware decisions</li> <li>Application Firewall inspect packet contents in application layer</li> <li>Proxy Firewalls act between server and client to mask internal network</li> </ul> <p>One of the most commonly applied tool on Linux firewall is <code>iptables</code>. It is a part of the <code>netfilter</code> framework inside Linux OS kernel. It could operate on chains including <code>INPUT</code>, <code>OUTPUT</code>, and <code>FORWARD</code> so that traffic filtering is possible through IO address, ports, or protocols.</p> <p>Administrator access could allow and block network traffic by making <code>iptables</code> rules. For example, following command can be used to prevent any SSH traffic on part 22.</p> <pre><code>sudo iptables -A INPUT -p tcp --dport 22 -j DROP\n</code></pre> <p>Even though <code>nftables</code>, more recent version that provide higher performance and better usability, <code>iptables</code> are still used in some modern distributions due to its stability and reliability. Additional tools like Uncomplicated Firewall (UFU) and firewalld support interfaces that are friendly for users to manage firewall rules, sot that complexity of iptables is in abstract.</p> <p>Although firewalls are powerful and have several functionalities, their limitation would be due to its subordinate part of layered security approach as some framework or tool than could be part of consistent update and intrusion detection systems (IDS).</p>"},{"location":"ECE482FA24/ECE482HW/ECE482H8/#references","title":"References","text":"<ul> <li>Linux Foundation. \"iptables Documentation.\"</li> <li>Red Hat. \"Introduction to Firewalld and iptables.\"</li> <li>Ubuntu Documentation. \"Uncomplicated Firewall (UFW).\"</li> <li>Netfilter Project. \"nftables Overview.\"</li> <li>Iptables HowTo.</li> <li>Introduction to nftables</li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/","title":"Lab 01","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#1-hardware-overview","title":"1 Hardware overview","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#in-the-computer","title":"In the computer","text":"<p>The motherboard</p> <p></p> <p>A Hard Disk Drive</p> <p></p> <p>An Optical disk drive</p> <p></p> <p>The PC power supply</p> <p></p> <p>A PCI card</p> <p>PCI card did not exist in computer disassembled during lab.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#on-the-motherboard","title":"On the motherboard","text":"<p>The RAM</p> <p></p> <p>A SATA socket</p> <p></p> <p>A PCI/PCI-e slot</p> <p></p> <p>The CPU</p> <p></p> <p>The North and South bridges</p> <p></p> <p>The battery</p> <p></p> <p>The BIOS</p> <p></p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#answer-the-following-questions","title":"Answer the following questions","text":"<ul> <li>Where is the CPU hidden, and why?</li> </ul> <p>CPU (Central Processing Unit) is located below a fan and heat sink in CPU dismantled during lab. CPU creates a lot of heat during computer is operating, so it is necessary to have a cooling system attached to CPU. Air cooling by fan is universal, but sometimes liquid based cooling system can be used.</p> <ul> <li>What are the North and South bridges?</li> </ul> <p>North and South bridges are chips only existing in old motherboard chips. North Bridge controls CPU, RAM, internal Graphics Card interaction to be fast South Bridge controls HDD, USB, or PCIs like external VGA.</p> <ul> <li>How are the North and South bridges connected together?</li> </ul> <p>North &amp; South Bridges are connected through a bus. In motherboard, bus let data flow between these two bridges.</p> <ul> <li>What is the BIOS?</li> </ul> <p>BIOS(Basic Input/Output System) is a firmware software saved in motherboard chip. After the power is on, BIOS will be launched in computer, initializing CPU and RAM to either start Operating Systems like Windows or Linux, or changing setup.</p> <ul> <li>Take out the CPU, rotate it and try to plug it back in a different position, is that working?</li> </ul> <p>CPU is specifically designed compatible for only certain type of socket. Thus, CPU will be inserted only in the way it was inserted before. Forcing different position will result in compromising both CPU and motherboard CPU socket.</p> <ul> <li>Explain what overclocking is?</li> </ul> <p>Instructed in ECE370 Computer organization course, CPU is operating by each clock. More clocks per same time means faster CPU operation, but more consumption of electricity and creation of heat, so that CPU lifespan or even CPU circuit might be compromised if cooling system cannot handle it.</p> <ul> <li>What are pins on a PCI/PCI-e card and what are they used for?</li> </ul> <p>PCI PCI-e card pins connect PCI card to motherboard by their slots. These pins will let PCI card to interact with data transfer to motherboard. Thus, card and motherboard will communicate. One of the most popular type of PCI PCI-e card are VGA (Video Graphics Array), we call as external graphic cards like Nvidia RTX4090 or GTX1650.</p> <ul> <li>Before PCI-e became a common standard many graphics cards were using Accelerated Graphics   Port (AGP), explain why.</li> </ul> <p>AGP was specifically designed only for fast communication between CPU and graphic card. Before PCI-e, AGP was standard since it had better performance than PCI bus for data interaction with motherboard, but PCI-e performance was better in speed and compatibility, so it replaced AGP.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#2-gitea-usage","title":"2 Gitea usage","text":"<p>Register on our git server at http://focs.ji.sjtu.edu.cn/git. We will use Gitea all along the semester. For the various group projects student must use git: part of their grade will be based on their commits. Please closely follow the TAs??instructions and ensure your are fully setup for the rest of the semester. In particular by the end of the lab you should have uploaded your ssh public key on Gitea.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#21-git-usage","title":"2.1 Git Usage","text":"<p>Basic git usage will be studied in a future lab. In the meantime get familiar with:</p> <ul> <li>Opening and using issues;</li> <li>Simple commands such as clone, commit, push, and pull;</li> <li>Using the Wiki and markdown, they will be used for the projects documentation;</li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#22-agile-development-with-gitea","title":"2.2 Agile development with Gitea","text":"<p>In ECE482 we expect you follow the adgile development strategy which is adopted by most companies nowadays. If you have any question of need further explanations feel free to ask. Here is a brief summary of the expected Gitea workflow in the course.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#3-command-line-interface","title":"3 Command line interface","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#31-basic-unix-commands","title":"3.1 Basic Unix commands","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#32-shell-scripting","title":"3.2 Shell scripting","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#33-tasks","title":"3.3 Tasks","text":"<p>Answer the following questions, only refering to man pages:</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#use-the-mkdir-touch-mv-cp-and-ls-commands-to","title":"Use the mkdir, touch, mv, cp, and ls commands to:","text":"<ul> <li>Create a file named test.</li> <li>Move test to dir/test.txt, where dir is a new directory.</li> <li>Copy dir/test.txt to dir/test_copy.txt.</li> <li>List all the files contained in dir.</li> </ul> <pre><code>touch test\nmkdir dir\nmv test dir\nls dir\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#use-the-grep-command-to","title":"Use the grep command to:","text":"<p>List all the files form /etc containing the pattern 127.0.0.1.</p> <pre><code>grep -rl '127.0.0.1' /etc\n</code></pre> <p>Returned nothing</p> <p>Only print the lines containing your username and root in the file /etc/passwd (only one grep should be used)</p> <pre><code>grep -rE 'root|jaeheungpark' /etc/passwd\n</code></pre> <p>Returns following</p> <pre><code>/etc/passwd:root:*:0:0:System Administrator:/var/root:/bin/sh\n/etc/passwd:daemon:*:1:1:System Services:/var/root:/usr/bin/false\n/etc/passwd:_cvmsroot:*:212:212:CVMS Root:/var/empty:/usr/bin/false\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#use-the-find-command-to","title":"Use the find command to:","text":"<p>List all the files from /etc that have been accessed less than 24 hours ago.</p> <pre><code>find /etc -atime -1\n</code></pre> <p>Returned nothing</p> <p>List all the files from /etc whose name contains the pattern ?\uc40detw??</p> <pre><code>find /etc -name \"*netw*\"\n</code></pre> <p>Returned nothing</p> <p>In the bash man-page read the part related to redirections. Explain the following operators &gt;, &gt;&gt;, &lt;&lt;&lt;, &gt;&amp;1, and 2&gt;&amp;1 &gt;. What is the use of the tee command.</p> <p>Use <code>bash</code> instead of <code>zsh</code> terminal if you are MacOS user. Simply type <code>bash</code> or <code>zsh</code> to switch.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#output-redirection","title":"<code>&gt;</code> Output Redirection","text":"<p>Output Redirection redirect output from command to file. If file already exists, it will be overwritten.</p> <pre><code>echo \"Hello, Shell!\" &gt; output.txt\n</code></pre> <p>This will generate <code>output.txt</code> file or if it exists, overwrite it with contents written as <code>Hello Shell!</code>.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#append-output-redirection","title":"<code>&gt;&gt;</code> Append Output Redirection","text":"<p>Append Output Redirection redirect output from command to file. However, this time, command will be appended to originally existing file, instead of getting overwritten.</p> <pre><code>echo \"Hello, Again!\" &gt;&gt; output.txt\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#here-string","title":"<code>&lt;&lt;&lt;</code> Here String","text":"<p>Here String provide input to command from string. When using grep,</p> <p><code>grep \"find this\" &lt;&lt;&lt; \"input sentence\"</code></p> <pre><code>grep \"Hello\" &lt;&lt;&lt; \"Hello, Shell!\"\ngrep \"World\" &lt;&lt;&lt; \"Hello, Shell!\"\n</code></pre> <p>First one will return <code>Hello Shell!</code> while the second one will return nothing.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#1-redirect-to-standard-output","title":"<code>&gt;&amp;1</code> Redirect to Standard Output","text":"<p>Redirect to Standard Output will make a file descriptor input to a copy file descriptor 1. Generally, it is standard output.</p> <pre><code>ls non_existing_file\nls non_existing_file &gt;&amp;1\n</code></pre> <p>Both returns</p> <pre><code>ls: non_existing_file: No such file or directory\nls: non_existing_file: No such file or directory\n</code></pre> <p>However, former one returns error, while latter one returns output as standard output string.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#21-order-of-redirections","title":"<code>2&gt;&amp;1&gt;</code> Order of Redirections","text":"<p>Order of redirections will redirect standard output to file.</p> <pre><code>ls non_existing_file &gt; nofile.txt\nls non_existing_file &gt; nofile.txt 2&gt;&amp;1\n</code></pre> <p>Formal one returns the following error on terminal.</p> <pre><code>ls: non_existing_file: No such file or directory\n</code></pre> <p>However, latter one will create file named as nofile.txt as a command file.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#what-is-the-use-of-the-tee-command","title":"What is the use of the <code>tee</code> command.","text":"<p>The <code>tee</code> command will read from standard input and write as standard output.</p> <pre><code>echo \"Hello, Shell!\" | tee teefile.txt\necho \"Hello, Again!\" | tee -a teefile.txt\n</code></pre> <p>Former command creates output file first sentence. Latter command adds output file second sentence.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#explain-the-behaviour-of-the-xargs-command","title":"Explain the behaviour of the <code>xargs</code> command","text":"<p>The <code>xargs</code> command will build and execute commands from standard input.</p> <pre><code>echo \"file1 file2 file3\" | xargs touch\necho \"file1 file2 file3\" | xargs rm\n</code></pre> <p>will create and remove file1 file2 file3.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#the-pipe-operator","title":"The <code>|</code> pipe operator","text":"<p>The <code>|</code> pipe operator will take output of each command and apply it as input. For instance,</p> <pre><code>ls -l | grep \"txt\"\n</code></pre> <p>will return</p> <pre><code>-rw-r--r--@ 1 jaeheungpark  staff  47 Sep 22 15:19 nofile.txt\n-rw-r--r--@ 1 jaeheungpark  staff  28 Sep 22 15:27 output.txt\n-rw-r--r--@ 1 jaeheungpark  staff  28 Sep 22 15:28 teefile.txt\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#what-are-the-head-and-tail-commands-how-to-ive-displaya-file-as-new-lines-are-appended","title":"What are the head and tail commands? How to ?\uc40bive display??a file as new lines are appended?","text":"<p><code>Head</code> commands display first few lines of file, 10 lines in default. <code>Tail</code> commands display last few lines of file, 10 lines in default. If live display of a file is required, type <code>tail -f file.txt</code>, since <code>-f</code> represents follow.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#how-to-monitor-the-system-using-ps-top-free-vmstat","title":"How to monitor the system using ps, top, free, vmstat?","text":"<p><code>ps</code> shows currently running processes.</p> <pre><code>  PID TTY           TIME CMD\n 2360 ttys000    0:00.11 /bin/zsh --login -i\n 2362 ttys000    0:00.49 /Users/jaeheungpark/.cache/gitstatus/gitstatusd-darwin-arm64 -G v1.5.4 -s -1 -u -1 -d -1 -c -1 -m -1 -v FATAL -t 22\n 3018 ttys000    0:00.02 bash\n 3189 ttys000    0:00.86 zsh\n</code></pre> <p><code>top</code> shows real time dynamic system process view including CPU usage and memory usage. Command input <code>top</code> returns</p> <pre><code>Processes: 659 total, 2 running, 657 sleeping, 3545 threads                                                                               15:57:40\nLoad Avg: 2.13, 1.97, 1.95  CPU usage: 3.19% user, 3.10% sys, 93.69% idle  SharedLibs: 765M resident, 149M data, 92M linkedit.\nMemRegions: 169888 total, 5315M resident, 502M private, 3869M shared. PhysMem: 17G used (2236M wired, 761M compressor), 359M unused.\nVM: 256T vsize, 4915M framework vsize, 0(0) swapins, 0(0) swapouts. Networks: packets: 3661368/5529M in, 2247373/2009M out.\nDisks: 1271160/19G read, 399936/13G written.\nmode [n]:\nPID    COMMAND      %CPU TIME     #TH    #WQ  #PORT MEM    PURG   CMPRS  PGRP  PPID  STATE    BOOSTS          %CPU_ME %CPU_OTHRS UID  FAULTS\n464    mobileassetd 13.5 00:20.36 7      5    201   14M-   0B     1824K  464   1     sleeping *7+[137]        0.04815 12.17135   0    7653+\n0      kernel_task  7.5  24:37.01 576/11 0    0     9040K  0B     0B     0     0     running   0[0]           0.00000 0.00000    0    39329+\n1104   clion        7.1  22:43.94 129    6    685+  1889M- 278M+  345M   1104  1     sleeping *0[1516]        0.04079 0.00000    501  1150909+\n</code></pre> <p><code>free</code> shows different kinds of memory usage including total, used, free, shared, buffer, cache, and available memories.</p> <p><code>vmstat</code> Shows virtual memory statistics including status of memory, process, paging, block input, output, traps updated per input second. For instance, <code>vmstat 1</code> will update the output every second.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#what-are-the-main-differences-between-sh-bash-csh-and-zsh","title":"What are the main differences between sh, bash, csh, and zsh?","text":"<p><code>sh</code> Shell is original basic shell, with the least amount of features</p> <p><code>bash</code> Bourne Again SHell is implemented shell version including command history, job control, and array.</p> <p><code>csh</code> C shell is based on similar syntax to the programming language C.</p> <p><code>zsh</code> Z shell is configurable shell with several features from both bash and csh. Currently shell of my M3 MacBook Pro OS is using zsh shell.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#what-is-the-meaning-of-0-1","title":"What is the meaning of $0, $1,?? $?, $!?","text":"<p><code>$0</code> Name of script / shell</p> <p><code>$1, $2, $3 ...</code> Arguments in order to get passed in script.</p> <p><code>$?</code> Exit status of last command. 0 means success while other numbers represent fail.</p> <p><code>$!</code> Process ID of last background command.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#what-is-the-use-of-the-ps3-variable-provide-a-short-code-example","title":"What is the use of the PS3 variable? Provide a short code example.","text":"<p>PS3 variable can set prompt for select command in bash. For instance, this is possible.</p> <pre><code>PS3=\"Select option: \"\nselect option in \"Start\" \"Resume\" \"Quit\"; do\n  echo \"You selected: $option\"\n  [[ $option == \"Quit\" ]] &amp;&amp; break\ndone\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#what-is-the-purpose-of-the-iconv-command-and-why-is-it-useful","title":"What is the purpose of the <code>iconv</code> command, and why is it useful?","text":"<p>Purpose of <code>iconv</code> command is to convert text between different character encodings systems like from ISO to UTF-8. It is useful when working with files with different systems or programs that have difference from standard format.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#given-a-variable-temp-what-is-the-effect-of","title":"Given a variable <code>temp</code>, what is the effect of:","text":"<ul> <li><code>${#temp}</code></li> <li><code>${temp%%word}</code></li> <li><code>${temp/pattern/string}</code>?</li> </ul> <p><code>${#temp}</code> Return string length stored in <code>temp</code> variable</p> <p><code>${temp%%word}</code> Remove longest match of pattern word</p> <p><code>${temp/pattern/string}</code> Replace first <code>pattern</code> in <code>temp</code> containing <code>string</code>.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L1/#search-online-not-in-the-man-pages-how-files-are-organised-on-a-unix-like-system","title":"Search online (not in the man pages), how files are organised on a Unix like system.","text":"<p>In particular explain what are the following directories used for:</p> <ul> <li><code>/:</code> Root directory, File System tree root.</li> <li><code>/bin</code> Binaries, store basic user commands including <code>ls</code>, <code>mv</code>, <code>cp</code>.</li> <li><code>/boot</code> Store bootloader files like kernel, initial RAM space.</li> <li><code>/etc</code> Configuration files for OS &amp; Applications</li> <li><code>/lib</code> System libraries necessary for OS booting</li> <li><code>/media</code> If media devices are connected or inserted in computer, OS will make corresponding directory here</li> <li><code>/mnt</code> Temporary mounted files.</li> <li><code>/usr/bin</code> User Binary files for User Applications</li> <li><code>/usr/share</code> Sharable text files</li> <li><code>/usr/lib</code> User Libraries required for <code>usr/bin</code></li> <li><code>/usr/src</code> Source codes for Linux Kernel</li> <li><code>/proc</code> Virtual Filesystems with process and kernel info</li> <li><code>/sys</code> Kernel interface with info view and configuration settings</li> <li><code>/srv</code> Data for Services by system like web servers</li> <li><code>/opt</code> Optional packages for subordinate directories</li> <li><code>/var</code> Variable data including system logging files</li> <li><code>/sbin</code> System binaries required for booting and system restoration</li> <li><code>/dev</code> Device files representing hardware</li> <li><code>/vmlinuz</code> Compressed Linux kernel used for booting</li> <li><code>/initrd.img</code> Initial RAM space used by kernel for booting</li> </ul> <p>Write a game where the computer selects a random number, prompts the user for a number, compares it to its number and displays ?\uc3ecarger??or ?\uc3f6maller??to the user, until the player discovers the random number initially chosen by the computer.</p> <p>Execute by command</p> <pre><code>chmod +x game.sh\n./game.sh\n</code></pre> <p>Code works well.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/","title":"Lab 10","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#1-project-3-presentations-part-2","title":"1 Project 3: presentations (part 2)","text":"<p>Presentation</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#2-a-clean-setup","title":"2 A clean setup","text":"<p>After a couple of hours working in the back of your mum and Mr. Frown you have finally completed your dice device driver. Although everything is working you have quite enjoyed the process and to have a feeling of full accomplishment you want to polish your work. For instance you want the module to be automatically loaded when the system boot ups, and you imagine that if your grandpa had friends with an account on the same computer they would enjoy playing too. To solve those questions you need to check the following points:</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#where-to-copy-the-dice-module-for-it-to-be-officially-known-to-the-kernel","title":"Where to copy the dice module for it to be officially known to the kernel?","text":"<p>Kernel module copy path <code>/lib/modules/</code> or <code>/lib/modules/$(uname -r)/kernel/drivers/&lt;custom_directory&gt;</code> or subdirectory based on their purpose</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#what-command-to-run-in-order-to-generate-the-modulesdep-and-map-files","title":"What command to run in order to generate the <code>modules.dep</code> and map files?","text":"<p>Use <code>depmod</code> command to generate dependency map</p> <pre><code>depmod -a\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#how-to-ensure-the-dice-module-is-loaded-at-boot-time-and-how-to-pass-it-options","title":"How to ensure the dice module is loaded at boot time, and how to pass it options?","text":"<p>Add the module to <code>/etc/modules</code> or <code>/etc/modules-load.d/&lt;filename&gt;.conf</code> for some distributions to ensure it loads at boot. To pass options, create or edit <code>/etc/modprobe.d/&lt;module_name&gt;.conf</code> with the following content:</p> <pre><code>options &lt;module_name&gt; &lt;option1&gt;=&lt;value1&gt; &lt;option2&gt;=&lt;value2&gt;\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#how-to-create-a-new-friends-group-and-add-grandpa-and-his-friends-to-it","title":"How to create a new friends group and add grandpa and his friends to it?","text":"<p>First, create a new group. Name will be friends. Then, add one of OS users to the group.</p> <pre><code>sudo groupadd friends\nsudo usermod -aG friends &lt;username&gt;\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#what-is-udev-and-how-to-define-rules-such-that-the-group-and-permissions-are-automatically-setup-at-device-creation","title":"What is udev and how to define rules such that the group and permissions are automatically setup at device creation?","text":"<p><code>udev</code> is Linux device manager. It dynamically control device nodes at <code>/dev</code> and handle events. Define rules by file generation in path <code>etc/udev/rules.d</code>, e.g., <code>10-dice.rules</code></p> <pre><code>SUBSYSTEM==\"&lt;subsystem&gt;\", KERNEL==\"&lt;device_name&gt;\", GROUP=\"friends\", MODE=\"0660\"\n</code></pre> <p>Then, reload <code>udev</code> rules to trigger those</p> <pre><code>sudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#3-a-discreet-gambling-setup","title":"3 A discreet gambling setup","text":"<p>The challenge is now to get this module on the family computer without anybody noticing it. If someone tells your mother then both you and your grandpa will get in trouble. So you need a way to get root access without inputing a wrong password and without knowing it! As it is too risky to open the computer and take the hard disk to plug it on your own computer you have find another strategy.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#31-hacking-mum-computer","title":"3.1. Hacking mum?\uc172 computer","text":"<p>After a bit of thinking you have an interesting idea: on Linux systems the executables can be found in the PATH, a colon separated list of directories. If more than one binary have the same name, then the one found first is used. As you know your mum often uses the command su to become root, it thus suffices to write a simple script called su, place it in a directory of your choice that you then prepend to the PATH variable. When she will type su it will run your script. To your mum its behaviour should feel similar to the real su, i.e. prompt for the root password and behave as if a wrong password had been input. In fact in the background it should send you an email containing the root password and clean up all your traces, that is delete the script, and reset the PATH to its original value. That way your mum will think she has made a mistake and will rerun su. That time the correct command will be called and she will gain root access. Therefore you think of the following points:</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#how-adjust-the-path-ensure-its-new-version-is-loaded-but-then-forgotten","title":"How adjust the PATH, ensure its new version is loaded but then forgotten?","text":"<p>Open <code>~/.bashrc</code> or <code>./zshrc</code> and add <code>export PATH=/path/to/directory:$PATH</code>. After finish, run <code>~./bashrc</code> or <code>./zshrc</code> to apply change.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#what-is-the-exact-behaviour-of-su-when-wrong-password-is-input","title":"What is the exact behaviour of <code>su</code> when wrong password is input?","text":"<p>When <code>su</code> is executed with incorrect password, <code>perror</code> will be thrown.</p> <pre><code>su: Authentication failure\n</code></pre> <p>Will be printed in terminal.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#when-using-the-read-command-how-to-hide-the-user-input","title":"When using the read command how to hide the user input?","text":"<p>Use <code>-s</code> option to hide input</p> <pre><code>read -s &lt;input&gt;\necho\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L10/#how-to-send-an-email-from-the-command-line","title":"How to send an email from the command line?","text":"<p>CLI based email send requires installation of libraries first.</p> <pre><code>sudo apt install mailutils # Linux\nbrew install mailutils # MacOS\n</code></pre> <p>This one will be possible</p> <pre><code>echo \"The root password is: $password\" | mail -s \"root password\" email@site.com\n</code></pre> <p>Once you have completed this simple script you patiently wait for the email.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/","title":"Lab 11","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#1-project-3-presentations-part-3","title":"1 Project 3: presentations (part 3)","text":"<p>To ensure a more synchronised support during project 3, presentations are split into two parts. Topics are available on Canvas and their selection is on a first come first served basis. Please well prepare your presentation and ask questions on others??research. This should greatly help in the implementation of the new scheduling algorithm. No stress, Jim is probably playing in the ball pit!</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#2-introduction","title":"2 Introduction","text":"<p>Seeing that you are half-convinced by his motivating words you dad carries on. ?\uc3fdou know what, I have the perfect solution for you: instead of working on the module, in kernel mode, let?\uc172 work in user-space? Everything will be much easier and you can work with Dadfs in the same way as with any other regular C program. You just need to use FUSE, this is a great project that acts as an interface to export a file system to the kernel. No need for functions to share buffers between the user-space and the kernel space, this is FUSE?\uc172 job, not yours. You simply type your code and treat FUSE as a dependency/library to build your program.?? At hearing that their is no risk to crash the kernel you feel relieved and want to try this ?\uc40cagical library?? As you ask your dad how to get started, he tells you that he has already prepared some materials. Your job for today is to port Dadfs to FUSE and implement file deletion. With that idea in mind he shares with you some resources. Since he wants to go soon for his nap he quickly shows you a couple of FUSE links: the FUSE documentation, and the libfuse source code. As you seat down at the desk your dad understands that you are ready to start. He then leaves the room and goes for his nap. Although the temptation is high to play video games instead of porting Dadfs to FUSE, you decide to start working on this new short project. After a few minutes you fully understand the global idea behind FUSE and how it interacts with Linux Virtual File System (VFS). You are ready to jump into Dadfs when your mum enters the room and asks you: ?\uc3f6o what?\uc172 wrong with the electricity, I thought you were supposed to work on Dadfs???As you look perplex your mother continues: ?\uc3fdes, I heard something was wrong a fuse, is it fixed, can I what TV or their is a risk of blackout???When you are done laughing your mum asks you a few questions:</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#3-tasks","title":"3 Tasks","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#1-what-is-a-file-system","title":"1. What is a file system?","text":"<p>In Operating System, File System (FS) is a data structure system to form and manage data inside storage devices like SSD or HDD. FS could decide storage method and accessibility. Main functions of FS include:</p> <ul> <li>File and directory management</li> <li>Storage space allocation and deallocation</li> <li>Data integrity and security</li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#2-how-is-the-linux-vfs-working","title":"2. How is the Linux VFS working?","text":"<p>Linux Virtual File System (VFS) is located with kernel as abstraction layer. It could provide common interface for different FS. This let interaction of OS and several file systems in standard process. VFS is composed of followings including:</p> <ul> <li><code>superblock</code> - FS instance</li> <li><code>inode</code> - File metadata</li> <li><code>dentry</code> - Directory entries for file paths</li> </ul> <p>VFS will translate all system calls including <code>open</code>, <code>read</code>, <code>write</code> to operations.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#3-what-is-fuse-and-how-does-it-interact-with-the-vfs-can-you-sketch-it-quickly-to-make-it-clearer","title":"3. What is FUSE, and how does it interact with the VFS? Can you sketch it quickly to make it clearer?","text":"<p>Filesystem in Userspace (FUSE) framework let software development process to apply file systems in user space rather than kernel space. FUSE could simplify complicated system so that potential risk of kernel crash is much more unlikely. FUSE will help interaction between user space FS and kernel.</p> <p>As you patiently explain her the high level ideas without going into any technical detail, you realise that porting Dadfs to FUSE would still be a pretty tough task. You do not really want to give up, but rather want some easier training, and maybe in a few weeks or months when things calm down at work you can come back to this task. In the meantime you try to find something easier to complete with FUSE. While you are lost in your thoughts you do not even realise that you are manipulating the mouse. Only when you see a window popping up you understand that you have clicked on an old icon. And here your are, connected to Lemonion Inc.!??!</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#4-explain-what-is-sshfs","title":"4. Explain what is SSHFS.","text":"<p>Secure Shell Filesystem (SSHFS) is SSH protocol based file system client. In local file system, it is able to mount remote directories. Users will be able to interact with remote files like they are in local storage by using SSHFS.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#5-use-sshfs-to-mount-your-home-on-lemonion-inc-server-in-your-computer","title":"5. Use SSHFS to mount your home on Lemonion Inc. server in your computer.","text":"<p>Install <code>sshfs</code></p> <pre><code>sudo apt install sshfs\n</code></pre> <p>Create directory path to mount</p> <pre><code>mkdir ~/RemoteHome\n</code></pre> <p>Mount remote directory</p> <pre><code>sshfs student_id@sjtu.edu.cn:\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L11/#6-what-are-the-benefits-of-using-sshfs","title":"6. What are the benefits of using SSHFS?","text":"<p>SSH encrypted data transfer ensures security. It is easily portable for all SSH installed systems. Also, remote file access by small laptop without direct access to server.</p> <p>It seems they forgot to close up your account and revoke your key??While you have nothing harmful in mind you navigate on Lemonion server and in the lemondb folder you discover the existence of a hidden folder called .del. Surprisingly it belongs to Mr. Frown and is dated from the night of the crash! Has Mr. Frown anything to do with that crash? You remember that it was officially due to a high number of transactions, but this looks highly suspicious??</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L2/","title":"Lab 02","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L2/#exercise-1-project-1-presentations-part-1","title":"Exercise 1 Project 1: presentations (part 1)","text":"<p>Our Topic was Background Processing</p> <p>My teammate is Jin Lock Choi</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L2/#exercise-2-systems-setup","title":"Exercise 2 Systems setup","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L2/#21-linux-kernel-compilation","title":"2.1 Linux kernel compilation","text":"<p>??What is a kernel?</p> <p>Kernel is key concept in Operating System located between hardware and software. It manages computer resources including CPU, VGA, Memory, and Input/Output devices.</p> <p>??What basic tools are necessary to compile the Linux kernel?</p> <p>Linux kernel is compiled by GCC, GNU Compiler Collection to build. Git and GNU make are also necessary.</p> <p>??List all the commands necessary to compile the kernel.</p> <pre><code>wget -v https://git.kernel.org/pub/scm/linux/kernel/git/tj/sched_ext.git/snapshot/sched_ext-for-6.11.tar.gz\ntar -zxvf sched_ext-for-6.11.tar.gz\ncd sched_ext-for-6.11\n\ncp /boot/config-$(uname -r) .config\nscripts/config --disable SYSTEM_TRUSTED_KEYS\nscripts/config --disable SYSTEM_REVOCATION_KEYS\nmake CC=clang menuconfig\n\nnano .config # OR simply change in editor\n\nmake CC=clang -j$(nproc)\n\nsudo make modules_install\nsudo make install\n\nsudo reboot\n</code></pre> <p>??Why is it recommended to start with the Linux config file from your distribution?</p> <p>Linux .config file is very long with about over 10,000 lines. Copying configuration file will be wiser.</p> <p>??Compile the kernel. How long did it take?</p> <p>After several failure and VMWare Fusion setup change, it took about 30 minutes to compile the downloaded kernel. This time consumption can be changed by several factors.</p> <p>??Why is code quality so critical at the kernel level?</p> <p>In OS kernel, tiny code bug or memory leak may cause catastrophic result in the entire operating system.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L2/#22-software-development","title":"2.2 Software Development","text":"<p>??Briefly explain what is CI/CD.</p> <p>CI/CD, Continuous Integration / Continuous Delivery. CI stands for continuous integration of several programmers contributing to the shared repo. CD stands for continuous delivery of programming software automizing the entire process of project build, test, and deployment. Cooperation with multiple software engineers in enterprise level should consider development process of CI/CD to operate efficiently.</p> <p>??Why is having a consistent coding style important in industry?</p> <p>Consistent coding style is important in industry for several reasons including Unified convention to quickly read and review other's code, relatively convenient maintenance of CI/CD, contributing to reduce code analysis time and debugging.</p> <p>??What is the benefit of sanitizers?</p> <p>Sanitizers could detect unexpected processes or bugs. Automized code quality and automatic debugging increases platform compatibility and bug logs. It is relatively safer in memory leaks too.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L2/#exercise-3-remote-work","title":"Exercise 3 Remote work","text":"<p>As system administrators seldom have a physical access to their servers they remotely connect using a tool called Secure SHell (SSH). It allows them to log into a remote server and launch a regular shell, while keeping all the network traffic encrypted.</p> <p>??Setup an SSH server on Linux VM. From Linux (using ssh) or Windows (using Putty) log into it. Note: the network need to be properly setup on the VM (bridge mode recommended).</p> <p>Install SSH server and run it</p> <pre><code>sudo apt update\nsudo apt install openssh-server\nsudo systemctl start ssh\nsudo systemctl enable ssh\n</code></pre> <p>Log in into your linux virtual machine</p> <p>??What is the default SSH port? Change this port for port 2222. Log into your Linux VM using this new SSH server setup.</p> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <p>Change Port number</p> <pre><code>#Port 22\nPort 2222\n</code></pre> <pre><code>sudo systemctl restart ssh\nssh -p 2222 &lt;username&gt;@&lt;VM-IP-Address&gt;\n</code></pre> <p>??List and explain the role of each the file in the $HOME/.ssh directory. In $HOME/.ssh/config, create an entry for the Linux VM.</p> <p><code>$HOME/.ssh/authorized_keys</code> contains external public keys that can log in into server.</p> <p><code>$HOME/.ssh/id_rsa</code> contains private RSA key saved locally inside without external connection.</p> <p><code>$HOME/.ssh/id_rsa.pub</code> contains public RSA key shared with external servers.</p> <p><code>$HOME/.ssh/known_hosts</code> contains previously connected server host keys.</p> <p><code>$HOME/.ssh/config</code> contains configuration for local SSH.</p> <p>??Briefly explain how key-only authentication works in SSH. Generate an ed25519 key-pair on the host system and use it to log into the VM without a password.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L2/#exercise-4-basic-git","title":"Exercise 4 Basic git","text":"<p>Git is a very power version control system initially introduced to help in the development of the Linux kernel around 2005. It has since then become a widely used tool omnipresent in industry. It is therefore of a vital importance to be proficient at it in order to better prepare for your future career and create more internship opportunities.</p> <p>??Setup git on your computer, we will use it for the rest of the semester.</p> <pre><code>sudo apt install git\n</code></pre> <p>??Search the use of the following git commands:</p> <p>??<code>help</code> is display help information for git like <code>man</code> in linux</p> <p>??<code>init</code> initializes git repository in current folder, generating .git directory in current path.</p> <p>??<code>checkout</code> can switch branch or restore files. <code>git checkout branch_name</code> will change branch, and <code>git checkout -- file.cpp</code> will change file into last committed state.</p> <p>??<code>branch</code> can list, generate, or remove branches. Only <code>git branch</code> command lists all branches, <code>git branch new_branch_name</code> will make new name, and <code>git branch -d branch_name</code> will remove branch.</p> <p>??<code>push</code> will transfer local commit into remote repository.</p> <p>??<code>pull</code> will transfer remote repository data change into local branch.</p> <p>??<code>merge</code> will combine one branch into another branch. <code>git merge branch_name</code> will apply both changes of <code>branch_name</code> branch and currently working branch.</p> <p>??<code>add</code> means next commit will include added file. <code>git add .</code> will add all.</p> <p>??<code>diff</code> will list commits, branches, work trees.</p> <p>??<code>tag</code> will create reference for commit. For instance, version tag like <code>git tag v2.0</code> can be used.</p> <p>??<code>log</code> shows all commit record for current branch.</p> <p>??<code>fetch</code> will download files from remote repo. It is often used if remote repo has update.</p> <p>??<code>commit</code> will save changed status in a tree.</p> <p>??<code>clone</code> will download remote repo and create local repo by copying remote repo.</p> <p>??<code>reset</code> will get back all repo changes into certain commit.</p> <p>??Setup your git repository on Gitea.</p> <p>Follow and reproduce on your personal repository the demo from the TAs showing a common git workflow.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L2/#exercise-5-project-1-presentations-part-2","title":"Exercise 5 Project 1: presentations (part 2)","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L3/","title":"Lab 03","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#1-project-1-presentations-part-2","title":"1 Project 1: presentations (part 2)","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#2-source-code","title":"2 Source code","text":"<p>When joining an existing two aspects are critical. First it is very important to understand the general structure of the project while also getting familiar with the coding style of the other developers. Then when starting to code one wants to keep track of the changes, while also being able to export and import them in a simple fashion.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#21-linux-kernel-walk-through","title":"2.1 Linux kernel walk-through","text":"<p>In order to be more effective when solving homework 2 exercise 2, pay attention on how the TAs use the tools presented in lab 1 in order to find their way in Linux kernel source code. Carefully listen to the explanations related to the structure of code and common C strategies you might (re)discover.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#22-the-diff-and-patch-commands","title":"2.2 The <code>diff</code> and <code>patch</code> commands","text":"<p>When dealing with source code two main situations are likely to arise: (i) you want to share your changes with others, or (ii) you want to apply changed performed by someone else. Most of the time updates on source code concern few lines scattered over several files. Therefore instead of sharing all the files it is much more convenient to only specify which lines should be updated, and how. This is the role of the diff command. The patch command is used to apply the changes previously created with diff. Both diff and patch programs should already be installed in your OS.</p> <ul> <li>Read the man pages of <code>diff</code> and <code>patch</code></li> <li>Edit a file of your choice in /usr/src, e.g. add a comment to a file</li> <li>Using the diff command, create a patch corresponding to the above changes</li> <li>Retrieve your patch on your Linux system</li> <li>Apply your patch to the copy of /usr/src_orig on your Linux system</li> <li>Revert the patch</li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#read-the-man-pages-of-diff-and-patch","title":"Read the man pages of <code>diff</code> and <code>patch</code>","text":"<pre><code>man diff\n</code></pre> <pre><code>DIFF(1)                          User Commands                         DIFF(1)\n\nNAME\n       diff - compare files line by line\n\nSYNOPSIS\n       diff [OPTION]... FILES\n\nDESCRIPTION\n       Compare FILES line by line.\n       Mandatory  arguments  to  long  options are mandatory for short options\n       too.\n</code></pre> <p>Manual of <code>patch</code> is longer.</p> <pre><code>man patch\n</code></pre> <pre><code>PATCH(1)                    General Commands Manual                   PATCH(1)\n\nNAME\n       patch - apply a diff file to an original\n\nSYNOPSIS\n       patch [options] [originalfile [patchfile]]\n\n       but usually just\n\n       patch -pnum &lt;patchfile\n\nDESCRIPTION\n       patch takes a patch file patchfile containing a difference listing pro??\n       duced by the diff program and applies those differences to one or  more\n       original  files, producing patched versions.  Normally the patched ver??\n       sions are put in place of the originals.  Backups can be made; see  the\n       -b  or  --backup option.  The names of the files to be patched are usu??\n       ally taken from the patch file, but if there's  just  one  file  to  be\n       patched it can be specified on the command line as originalfile.\n\n       Upon startup, patch attempts to determine the type of the diff listing,\n       unless overruled by a -c (--context), -e (--ed), -n (--normal),  or  -u\n       (--unified)  option.  Context diffs (old-style, new-style, and unified)\n       and normal diffs are applied by the  patch  program  itself,  while  ed\n       diffs are simply fed to the ed(1) editor via a pipe.\n\n       patch  tries to skip any leading garbage, apply the diff, and then skip\n       any trailing garbage.  Thus you could feed an article or  message  con??\n       taining  a  diff  listing  to patch, and it should work.  If the entire\n       diff is indented by a consistent amount, if lines end in CRLF, or if  a\n       diff  is  encapsulated  one  or  more times by prepending \"- \" to lines\n       starting with \"-\" as specified by Internet RFC 934, this is taken  into\n       account.   After  removing  indenting or encapsulation, lines beginning\n       with # are ignored, as they are considered to be comments.\n\n        With context diffs, and to a lesser extent with normal diffs, patch can\n       detect  when the line numbers mentioned in the patch are incorrect, and\n       attempts to find the correct place to apply each hunk of the patch.  As\n       a first guess, it takes the line number mentioned for the hunk, plus or\n       minus any offset used in applying the previous hunk.  If  that  is  not\n       the correct place, patch scans both forwards and backwards for a set of\n       lines matching the context given in the hunk.  First patch looks for  a\n       place where all lines of the context match.  If no such place is found,\n       and it's a context diff, and the maximum fuzz factor is  set  to  1  or\n       more, then another scan takes place ignoring the first and last line of\n       context.  If that fails, and the maximum fuzz factor is  set  to  2  or\n       more,  the first two and last two lines of context are ignored, and an??\n       other scan is made.  (The default maximum fuzz factor is 2.)\n\n       Hunks with less prefix context  than  suffix  context  (after  applying\n       fuzz)  must  apply  at the start of the file if their first line number\n       is 1.  Hunks with more prefix context than suffix context (after apply??\n       ing fuzz) must apply at the end of the file.\n\n       If patch cannot find a place to install that hunk of the patch, it puts\n       the hunk out to a reject file, which normally is the name of the output\n       file  plus  a .rej suffix, or # if .rej would generate a file name that\n       is too long (if even appending the single character #  makes  the  file\n       name too long, then # replaces the file name's last character).\n\n       The  rejected hunk comes out in unified or context diff format.  If the\n       input was a normal diff, many of the contexts  are  simply  null.   The\n       line  numbers  on the hunks in the reject file may be different than in\n       the patch file: they reflect the approximate location patch thinks  the\n       failed hunks belong in the new file rather than the old one.\n\n       As  each  hunk is completed, you are told if the hunk failed, and if so\n       which line (in the new file) patch thought the hunk should go  on.   If\n       the  hunk  is installed at a different line from the line number speci??\n       fied in the diff, you are told the offset.  A single large  offset  may\n       indicate  that  a  hunk was installed in the wrong place.  You are also\n       told if a fuzz factor was used to make the match,  in  which  case  you\n       should  also be slightly suspicious.  If the --verbose option is given,\n       you are also told about hunks that match exactly.\n...\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#edit-a-file-of-your-choice-in-usrsrc-eg-add-a-comment-to-a-file","title":"Edit a file of your choice in <code>/usr/src</code>, e.g. add a comment to a file","text":"<p>First, make a backup for <code>usr/src</code></p> <pre><code>sudo cp -r /usr/src /usr/src_backup\n</code></pre> <p>Now edit file inside <code>/usr/src</code>.</p> <pre><code>jhpark@jhparkvm:/usr/src$ ls linux-headers-6.5.0-35-generic/\narch    Documentation  init      Kconfig   mm              samples   tools\nblock   drivers        io_uring  kernel    Module.symvers  scripts   ubuntu\ncerts   fs             ipc       lib       net             security  usr\ncrypto  include        Kbuild    Makefile  rust            sound     virt\n\njhpark@jhparkvm:/usr/src$ ls linux-hwe-6.5-headers-6.5.0-35/\narch    Documentation  init      Kconfig   mm       scripts   ubuntu\nblock   drivers        io_uring  kernel    net      security  usr\ncerts   fs             ipc       lib       rust     sound     virt\ncrypto  include        Kbuild    Makefile  samples  tools\n</code></pre> <p>I decided to add a comment to a Makefile.</p> <pre><code>sudo nano /usr/src/linux-headers-6.5.0-35-generic/Makefile\n# Test comment made by JH Park for ECE482\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#using-the-diff-command-create-a-patch-corresponding-to-the-above-changes","title":"Using the diff command, create a patch corresponding to the above changes","text":"<pre><code>sudo diff -u /usr/src/linux-headers-6.5.0-35-generic/Makefile /usr/src_backup/linux-headers-6.5.0-35-generic/Makefile &gt; jhpark_patch.patch\n</code></pre> <p>Patch created.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#retrieve-your-patch-on-your-linux-system","title":"Retrieve your patch on your Linux system","text":"<p>Patch command updated the difference of code I added well.</p> <pre><code>cat jhpark_patch.patch\n</code></pre> <p>Patch comment updated.</p> <pre><code>--- /usr/src/linux-headers-6.5.0-35-generic/Makefile    2024-10-21 01:14:53.470376307 +0800\n+++ /usr/src_backup/linux-headers-6.5.0-35-generic/Makefile 2024-10-21 01:11:46.859876208 +0800\n@@ -1,4 +1,3 @@\n-# Test comment made by JH Park for ECE482\n # SPDX-License-Identifier: GPL-2.0\n VERSION = 6\n PATCHLEVEL = 5\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#apply-your-patch-to-the-copy-of-usrsrc_orig-on-your-linux-system","title":"Apply your patch to the copy of /usr/src_orig on your Linux system","text":"<p>I made backup branch name as <code>usr/src_backup</code> so copied again.</p> <pre><code>sudo cp -r /usr/src_backup /usr/src_orig\n</code></pre> <p>Now apply patch to newly created <code>usr/src_orig</code>.</p> <pre><code>sudo patch /usr/src_backup/linux-headers-6.5.0-35-generic/Makefile &lt; jhpark_patch.patch\n</code></pre> <p>Finally, check if change is applied.</p> <pre><code>head /usr/src/linux-headers-6.5.0-35-generic/Makefile\nhead /usr/src_orig/linux-headers-6.5.0-35-generic/Makefile\n</code></pre> <p>It is applied successfully.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#revert-the-patch","title":"Revert the patch","text":"<p>Execute patch with revert option</p> <pre><code>sudo patch -R /usr/src_orig/linux-headers-6.5.0-35-generic/Makefile &lt; jhpark_patch.patch\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#23-basic-git-usage","title":"2.3 Basic <code>git</code> usage","text":"<p>The programs patch and diff are very useful however when big projects are managed by many people at the same time they are not convenient to handle. A more advanced, automatised approach is required such as to help solving collisions in a more simple way. For instance user A commits some changes on the initial version of the file foo.c. Then user B does the same. Notice that changes made by B may collide with updates from A. To prevent such issues B should have worked based on A?\uc172 version of the foo.c file.</p> <p>To overcome such kind of issues and render things smoother and easier several systems were created; at the moment the most commonly used is called git, older ones such as svn or cvs are still used in some places. In the remainder of this course you will be required to use the gitea in order to keep track of your project work.</p> <p>Go to http://learngitbranching.js.org/ and complete the following levels:</p> <ul> <li>Main ??Introduction Sequence: all;</li> <li>Main ??Ramping Up: all;</li> <li>Main ??A mixed bag: 1, 4;</li> <li>Remote ??Push &amp; Pull ??Git Remotes!: 1-4, 6;</li> </ul> <p></p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L3/#3-scripting-and-regular-expressions","title":"3 Scripting and regular expressions","text":"<p>Two programming languages often used in conjunction with Bash are <code>sed</code> and <code>awk</code>. Pipelining the output of ifconfig to awk return only the ip address of your current active network connection (the active network interface can be passed to ifconfig).</p> <p>Install network tools</p> <pre><code>sudo apt-get install net-tools\n</code></pre> <p>Ip check commands by <code>ifconfig</code> and <code>awk</code> is required.</p> <pre><code>ifconfig | awk '/inet / {print $2}'\n</code></pre> <p>Returns this ip address</p> <pre><code>172.16.43.132\n127.0.0.1\n</code></pre> <p>IP address from my Linux Ubuntu installed in VMWare fusion</p> <pre><code>127.0.0.1\n192.168.101.8\n0.0.1.1\n198.18.0.1\n192.168.100.1\n172.16.43.1\n</code></pre> <p>IP address from my Mac OS terminal.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/","title":"Lab 04","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#exercise-1-database","title":"Exercise 1 Database","text":"<p>This is the evening, you are exhausted after a long day of work on mumsh. So you decide to poke around and learn more about database, as unfortunately you never had to opportunity to select such course during your studies.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#11-database-creation","title":"1.1 Database creation","text":"<p>As a first step you need to find a database, you fire-up your web-browser. Unfortunately your internet is very slow today so you cannot get much information. But after a bit of thinking you realise that you still have a git version of the Linux kernel, and as you know everything about git you can easily generate logs from the git commits. To ensure a proper formatting you refer to git pretty format documentation page. So you open a terminal running mumsh and type a simple command line to test database generation.</p> <pre><code>mumsh $ git log --pretty=\"%H,%aN,%aI,%s\" &gt; db.csv\n</code></pre> <p>The goal being to get a basic introduction to database you only want to focus on basic queries, in particular you do not need a very complicated database and in the end only generating two csv files1 containing the following fields is enough.</p> <p>Fields for timestamp.csv:</p> <ul> <li>Hash of the commit</li> <li>Author name</li> <li>Author date, strict ISO 8601 format</li> <li>Author date, UNIX timestamp</li> </ul> <p>Fields for db.csv:</p> <ul> <li>Hash of the commit</li> <li>Author name</li> <li>Subject</li> </ul> <p>Enter command in the project 1 git repository folder to generate log of git commits. To proceed the following assignment, it is necessary to get the git repository of the Linux.</p> <pre><code>cd cd /path/to/p1\ngit log --pretty=\"%H,%aN,%aI,%s\" &gt; commits.csv\ncd /path/to/l4\n</code></pre> <ul> <li>%H: Hash of the commit</li> <li>%aN: Author name</li> <li>%aI: Author date (strict ISO 8601)</li> <li>%s: Subject</li> </ul> <p>Enter command in the project 1 git repository folder to generate log of timestamp</p> <pre><code>awk -F',' '{ print $1 \",\" $2 \",\" $4 }' commits.csv &gt; db.csv\nawk -F',' '{ cmd = \"date -d \\\"\" $3 \"\\\" +%s\"; cmd | getline unix_time; close(cmd); print $1 \",\" $2 \",\" $3 \",\" unix_time }' commits.csv &gt; timestamp.csv\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#12-database-system-installation","title":"1.2 Database system installation","text":"<p>As you want to ensure your understanding and guesses are correct you need to verify a few things online. Luckily your network seems back to normal, so you can use a proper search engine and ensure the correctness of what you found.</p> <ul> <li>What are the most common database systems?</li> <li>Briefly list the pros and cons of the three most common ones.</li> </ul> <p>There are several common database systems used in industry.</p> <p>PostgreSQL, MySQL, SQLite, MongoDB, Redis, Oracle, Microsoft SQL Server, Apache Cassandra, etc.</p> <p>Ignoring enterprise DB systems like Oracle, Microsoft SQL Server, or AWS servers, and specialized database system like Redis used for quick access or Apache Cassandra for data engineering, PostgreSQL, MySQL, and MongoDB are most commonly used in general software development. SQLite is used widely too, but it is mostly for learning level or small scale projects,</p> <p><code>MySQL</code> is RDBMS (Relational Database Management System) commonly used for Web applications.</p> <p>Pros of MySQL</p> <ul> <li>Fast performance in reading heavy workload</li> <li>Setup is relatively easy with various versions including both open source and enterprise</li> <li>High popularity, several extensions and libraries, more data to search and debug</li> </ul> <p>Cons of MySQL</p> <ul> <li>Not enough advanced functions like no full text search</li> <li>Relatively poor flexibility to build complicated relational DB</li> <li>ACID (Atomicity, Consistency, Isolation, Durability) support is not good</li> </ul> <p><code>PostgreSQL</code> is also RDBMS but used for more complex queries and extensible system.</p> <p>Pros of PostgreSQL</p> <ul> <li>Supports custom data types, functions, and operators, so great extensibility</li> <li>Supports advanced SQL features (like full-text search, CTEs, JSONB).</li> <li>ACID-compliant, ensuring data integrity.</li> <li>Open-source with a strong community.</li> </ul> <p>Cons of PostgreSQL</p> <ul> <li>Requires setup for optimal performance for complicated datasets.</li> <li>Relatively more complex to set up and manage database systems compared to other DB systems.</li> <li>If not optimized, it is slower than some NoSQL databases for heavy operations.</li> </ul> <p><code>MongoDB</code> is NoSQL (Non-RDB), or Document Database since it does not save data in table form.</p> <p>Pros of MongoDB</p> <ul> <li>Manage unstructured data efficiently</li> <li>Horizontal scaling, or sharding, let easy access in server system</li> <li>Supports JSON similar documents</li> <li>Efficient for Agile development with quickly changing database schema</li> </ul> <p>Cons of MongoDB</p> <ul> <li>No ACID consideration in default, nowadays better but still poor compared to RDBMS</li> <li>Compared to SQL, Query is relatively not efficient</li> <li>Inefficient data structure require more memory and storage than RDB</li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#after-completing-your-reading-you-decide-to-install-sqlite-on-your-linux-system","title":"After completing your reading you decide to install SQLite on your Linux system.","text":"<p>The next step is now to import your git database into two tables.</p> <ul> <li>Create an empty SQLite database.</li> <li>Use the SQLite shell to prepare two empty tables for each of your .csv file.</li> <li>Import each .csv file in its corresponding SQLite table.</li> </ul> <p>In macOS, install SQLite by <code>brew</code>. Use other command for Linux.</p> <pre><code>brew intall sqlite3 # macOS\nsudo apt update &amp;&amp; sudo apt install sqlite3 # Linux or WSL\n</code></pre> <p>Then, create new database</p> <pre><code>sqlite3 l4.db\n</code></pre> <p>Based on the csv files generated in previous exercise, create two database tables.</p> <pre><code>CREATE TABLE db\n(\n    hash TEXT NOT NULL PRIMARY KEY,\n    name TEXT NOT NULL,\n    comment TEXT NOT NULL\n);\n\nCREATE TABLE timestamp\n(\n    hash TEXT NOT NULL,\n    name TEXT NOT NULL,\n    date TEXT,\n    stamp INT\n);\n\n.QUIT\n</code></pre> <p>Now, import <code>db.csv</code> and <code>timestamp.csv</code> for each SQLite table.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#13-database-queries","title":"1.3 Database queries","text":"<p>At this stage you want to run basic queries to verify that the database has been imported correctly. Therefore, you spend the rest of the evening playing around the database and running queries.</p> <ul> <li>Who are the top five contributors to the Linux kernel since the beginning?</li> <li>Who are the top five contributors to the Linux kernel for each year over the past five years?</li> <li>What is the most common ?\uc401ommit subject??</li> <li>On which day is the number of commits the highest?</li> <li>Determine the average time between two commits for the five main contributors.</li> </ul> <p>First, generate SQLite database and import generated csv files</p> <pre><code>sqlite3 lab4.db\n</code></pre> <p>Create database schema</p> <pre><code>CREATE TABLE db (\n    hash TEXT NOT NULL PRIMARY KEY,\n    name TEXT NOT NULL,\n    comment TEXT NOT NULL\n);\n\nCREATE TABLE timestamp (\n    hash TEXT NOT NULL PRIMARY KEY,\n    name TEXT NOT NULL,\n    date TEXT,\n    stamp INT\n);\n\n.separator \"|\"\n.import db.psv db\n.import timestamp.psv timestamp\n</code></pre> <p>Now ready to run SQL Queries.</p> <p>Who are the top five contributors to the Linux kernel since the beginning?</p> <pre><code>SELECT name, count(*)\nFROM timestamp\nGROUP BY name\nORDER BY count(*) DESC\nLIMIT 5;\n</code></pre> <p>Returns</p> <pre><code>Linus Torvalds|30702\nDavid S. Miller|13180\nTakashi Iwai|7726\nMark Brown|7670\nArnd Bergmann|7520\n</code></pre> <p>Who are the top five contributors to the Linux kernel for each year over the past five years?</p> <pre><code>SELECT name, COUNT(name) AS count\nFROM timestamp\nWHERE strftime('%Y', datetime(stamp, 'unixepoch')) = '2020'\nGROUP BY name\nORDER BY count DESC\nLIMIT 5;\n</code></pre> <p>Since data is not available after 2020, query ran from 2016 to 2020</p> <p>Year 2020</p> <pre><code>Linus Torvalds|1886\nDavid S. Miller|924\nChristoph Hellwig|806\nMauro Carvalho Chehab|770\nChris Wilson|644\n</code></pre> <p>Year 2019</p> <pre><code>Linus Torvalds|2386\nDavid S. Miller|1206\nChris Wilson|1173\nYueHaibing|930\nChristoph Hellwig|911\n</code></pre> <p>Year 2018</p> <pre><code>Linus Torvalds|2168\nDavid S. Miller|1405\nArnd Bergmann|922\nChristoph Hellwig|818\nColin Ian King|798\n</code></pre> <p>Year 2017</p> <pre><code>Linus Torvalds|2303\nDavid S. Miller|1420\nArnd Bergmann|1123\nChris Wilson|1028\nArvind Yadav|827\n</code></pre> <p>Year 2016</p> <pre><code>Linus Torvalds|2273\nArnd Bergmann|1185\nDavid S. Miller|1150\nChris Wilson|992\nMauro Carvalho Chehab|975\n</code></pre> <p>What is the most common ?\uc401ommit subject??</p> <pre><code>SELECT comment, COUNT(name) AS count\nFROM db\nGROUP BY comment\nORDER BY count DESC LIMIT 1;\n</code></pre> <p>Most coommon commit subject was</p> <pre><code>Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net|670\n</code></pre> <p>On which day is the number of commits the highest?</p> <pre><code>SELECT  date(date) AS day, COUNT(name) AS count\nFROM timestamp\nGROUP BY day\nORDER BY count DESC\nLIMIT 3;\n</code></pre> <p>The day with highest commits is 2008 January 30th with 1031 commits</p> <pre><code>2008-01-30|1031\n2006-12-07|683\n2007-05-08|649\n</code></pre> <p>Determine the average time between two commits for the five main contributors.</p> <p>This query structure is quite challenging with more complex logic. Make <code>time_diffs</code> value, <code>LAG(stamp)</code> function retrieve data from previous commit. For compromised calculation due to no previous data, prevent collision by <code>WHERE time_diff IS NOT NULL</code>.</p> <pre><code>WITH time_diffs AS (\n    SELECT\n        name,\n        (stamp - LAG(stamp) OVER (PARTITION BY name ORDER BY stamp)) AS time_diff\n    FROM timestamp\n)\nSELECT name,\n       AVG(time_diff) AS avg_time_between_commits\nFROM time_diffs\nWHERE time_diff IS NOT NULL\nGROUP BY name\nORDER BY COUNT(name) DESC\nLIMIT 5;\n</code></pre> <p>This returns following, in seconds unit.</p> <pre><code>Linus Torvalds|15880.6766554835     #  4.4 Hours\nDavid S. Miller|36956.1432582138    # 10.3 Hours\nTakashi Iwai|63301.1109385113       # 17.5 Hours\nMark Brown|59933.2400573738         # 16.7 Hours\nArnd Bergmann|63807.0030589174      # 17.6 Hours\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#exercise-2-debugging","title":"Exercise 2 Debugging","text":"<p>You are pretty happy and enjoying the database tasks when your mum pops in your room. She looks pretty upset that you are still not asleep as she thinks you were playing video games?? When you explain her to that you have terrible bugs in your shell and needed a bit of change, she asked you whether you had used GDB. As you replied ?\uc3dean I eat it???she realises you probably do not know much about it. She kindly tells you to have a quick try at it on your current mumsh version to preview it. This should become very handy if you ever have to work on a large scale project.</p> <ol> <li>How to enable built-in debugging in <code>gcc</code>?</li> <li>What is the meaning of GDB?</li> <li>Compile the master branch of you mumsh with debugging enabled.</li> </ol>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#201-how-to-enable-built-in-debugging-in-gcc","title":"2.0.1 How to enable built-in debugging in <code>gcc</code>?","text":"<pre><code>gcc -g -o main main.c util.c\ngdb ./main\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#202-what-is-the-meaning-of-gdb","title":"2.0.2 What is the meaning of GDB?","text":"<p>GDB stands for GNU Debugger.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#203-compile-the-master-branch-of-you-mumsh-with-debugging-enabled","title":"2.0.3 Compile the master branch of you mumsh with debugging enabled.","text":"<pre><code>clang-18 -std=gnu17 -O2 -Wall -Wextra -Werror -pedantic -Wno-unused-result -Wconversion -Wvla main.c utils.c mumsh.c init.c -o mumsh\ngdb ./mumsh\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#21-basic-gdb-usage","title":"2.1 Basic GDB usage","text":"<ol> <li>Find the homepage of the GDB project.</li> <li>What languages are supported by</li> </ol>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#211-find-the-homepage-of-the-gdb-project","title":"2.1.1 Find the homepage of the GDB project.","text":"<p>GDB: The GNU Project Debugger</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L4/#212-what-languages-are-supported-by-gdb","title":"2.1.2 What languages are supported by GDB?","text":"<ul> <li>Ada</li> <li>Assembly</li> <li>C</li> <li>C++</li> <li>D</li> <li>Fortran</li> <li>Go</li> <li>Objective-C</li> <li>OpenCL</li> <li>Modula-2</li> <li>Pascal</li> <li>Rust</li> </ul> <p>These programming languages are supported by GDB.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L5/","title":"Lab 05","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L5/#1-project-2-presentations-part-1","title":"1 Project 2: presentations (part 1)","text":"<p>To ensure a more synchronised support during project 2, presentations are split into two parts. Topics are available on Canvas and their selection is on a first come first served basis. Please well prepare your presentation and ask questions on others??research. This should greatly help in the development of your Database system. Be careful, Mr. Frown might be listening!</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L5/#2-layer-programming","title":"2 Layer programming","text":"<p>When writing code one of the most important goal is flexibility. In particular it should be possible to alter part of the program without having to rewrite everything. For instance in the case of a music player the part of the code in charge of opening a file, decoding it, and sending it to the sound card should be totally independent from the Graphical User Interface (GUI). If this is not the case, changing the toolkit used to build the GUI will impact the core functionalities of the program, leading to a complete rewriting of the software. On the other hand if the various components are developed with layers in mind, the GUI will be implemented as top layer such that altering it will not impact the lower layers in charge of the player?\uc172 core functionalities.</p> <p>Basic principles in layer programming:</p> <ul> <li>A function may not call a function from any higher layer;</li> <li>A function can only issue calls to functions from a same or a lower layer.</li> </ul> <p>We now refer to exercise 2 from homework 3 as an example on how to write code using layers.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L5/#the-program-can-be-divided-into-three-layers-what-are-they","title":"The program can be divided into three layers, what are they?","text":"<p>Since it is layer of function, it is supposed to be structural rather than function based division composed of read, sort, write.</p> <p>Core Data Structure Layer includes linked list structure including generation, node memory allocation, free, list insertion, and other functions.</p> <p>Application Function Logic Layer will include acquisition of data type, sorting type, value search, etc. Sorting list will be categorized as close to data structure though.</p> <p>User Interface Layer handles Input Output redirection of the code, parsing input file and arguments and generating output text file. These are the most external layer, so related codes will be in <code>main.c</code>.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L5/#programming-part","title":"Programming part","text":"<ul> <li>Create the appropriate corresponding header files.</li> <li>If necessary rewrite functions such that no call is emitted from lower level functions to upper level   functions.</li> <li>The initial program implements a command line interface, write a ?\uc3eeenu interface??which (i) welcomes the user, (ii) prompts him for some task to perform, and (iii) runs it. When a task is   completed the user should (i) be informed if it was successful and then (ii) be displayed the menu.   From the menu he should be able to exit the program.</li> <li>Write two main functions, one which will ?\uc402ispatch??the work to another function which will run   the command line user interface and a second one which will ?\uc402ispatch??the work to the Menu user   interface.</li> </ul> <p>Codes in <code>ex2</code> folder.</p> <p>Core data structure including node and list are inside <code>list.c</code> file. Application function including read sort write are inside <code>util.c</code> file. User interface layer is <code>main.c</code> file that could be implemented further.</p> <pre><code>clang-18 -std=gnu17 -O2 -Wall -Wextra -Werror -pedantic -Wno-unused-result -Wconversion -Wvla main.c list.c util.c -o ex2\n./ex2\n</code></pre> <p>Compiled successfully.</p> <p>The initial program implements a command line interface, write a ?\uc3eeenu interface??which (i) welcomes the user, (ii) prompts him for some task to perform, and (iii) runs it. When a task is completed the user should (i) be informed if it was successful and then (ii) be displayed the menu. From the menu he should be able to exit the program.</p> <p>Write two main functions,</p> <p>one which will ?\uc402ispatch??the work to another function which will run the command line user interface and a second one which will ?\uc402ispatch??the work to the Menu user interface.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L5/#3-libraries","title":"3 Libraries","text":"<p>In order to understand libraries we first recall a few basics on compilation.</p> <ul> <li>What are the four stages performed when compiling a file?</li> <li>Briefly describe each of them.</li> </ul> <p>Four stages</p> <ol> <li><code>Preprocess</code> handles macros and directives including <code>#include</code>, <code>#define</code>, and <code>#ifdef</code>.</li> <li><code>Compile</code> macro handle code is compiled and translated to assembly code file like <code>.s</code> file.</li> <li><code>Assembly</code> code generated will be converted to machine code like object file like <code>.o</code> or <code>obj</code> file.</li> <li><code>Link</code> will combine every object files created from assembly step into executable file like ELF file for UNIX system.</li> </ol> <p>A library is a collection of functions, data types, constants, etc. which are put together. When compiling, the machine code corresponding to those elements is generated. Two types of libraries exist: static and dynamic. Explain the difference between the two. Generating a static library is a simple process: collect several functions and pack them into an ar archive.</p> <ul> <li>Search more details on how to proceed.</li> <li>Create two static libraries, one for each of the two lowest layers in the previous program.</li> <li>Compile the command line version of the program using these two static libraries.</li> </ul> <p>A <code>static</code> library that typically start with <code>.a</code> on UNIX and <code>.lib</code> on Windows OS contains code directly link and compile code to execute during linking stage of file compile. These static libraries are embedded into computer system, so there is no reason to use external libraries, but more static library in Os means larger system file size, since library code will be duplicated per program using them.</p> <p>A <code>dynamic</code> library that typically start with <code>.so</code> on UNIX or <code>.dll</code> in Windows OS contains code that are loaded in linking stage of runtime instead of compile time. Since they have dynamic libraries, several programs could share same dynamic libraries without duplication. This reduces memory usage and disk space, but instead existence of dynamic libraries should be guaranteed.</p> <p>Generating shared, or dynamic, libraries is a slightly more complex process. Since the library is to be shared among various programs none of them can rely on a predefined location where to find the functions in the memory. Therefore, as the library has to store its information at different memory addresses it is compiled into a Position-Independent Code (PIC). This is achieved by running gcc with the flag -fpic. Then in order to effectively create the dynamic library, gcc has to be re-run with the flag -shared.</p> <ul> <li>Generate two dynamic libraries, one for each of the two lowest layers in the previous program.</li> <li>Compile the whole program</li> <li>Compile the Menu version of the program using these two dynamic libraries.</li> </ul> <p>Two lowest layers</p> <p>A few extra remarks:</p> <ul> <li>What is the difference between a library and the API.</li> <li>Implement the API below for the two libraries.</li> <li>Test on JOJ using &gt; git commit -m\"joj.l5\" .</li> </ul> <p>A <code>Library</code> is all codes compiled for program execution including function, datatype, etc. They are reusable for several programs, so resources will be reduced compared to embedded code.</p> <p>An <code>API</code> stands for Application Programming Interface. It can select methods and rules of functions and processes to be called. The API will act as some form of code interface for programmers.</p> <pre><code>clang-18 -std=gnu17 -O2 -Wall -Wextra -Werror -pedantic -Wno-unused-result -Wconversion -Wvla lab5_dlist.c -o ex3\n./ex3\ngit add .\ngit commit --allow-empty -m \"test(l5): joj\"\ngit push\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L6/","title":"Lab 06","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L6/#project-2-presentations-part-2","title":"Project 2: presentations (part 2)","text":"<p>Presentation Part 2</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L6/#plugin-based-software-development","title":"Plugin based software development","text":"<p>While layer programming is very important and useful to keep the code clean and well organised, the introduction of a plugin structure can greatly enhance and ease the software development process. From a simplified informal point of view a plugin can be seen as a small piece of software that can be loaded to extend or bring in new features to a host application. For this to work, the host software must expose a plugin API. Then plugins can be develop independently from each others or the main application, i.e. the core software does not need them to compile and run properly. Plugins can hence be implemented following the plugin API, be compiled as shared libraries, and loaded at startup or even at run-time by the host software.</p> <p>For instance if developing a music player one might want to introduce plugins to play various file types such as mp3, ogg, and flac. In such a case one will want to have a generic play_file() function which would redirect the job to an appropriate function, for example play_mp3(), or play_ogg() depending on the file type. Of course if a file type is not supported, e.g. play_flac() does not exist, the program should not crash but simply report that this file type is not supported. In particular this shows the necessity for each plugin to register itself and present some meta-information about itself to the main program.</p> <p>One also notices that some functions can be defined as mandatory and others as optional. For instance a flac music player plugin which does not have a play_flac() function should not be loaded, since this function is mandatory to play a flac file. However some other functions such as read_id3_flac(), which reads the id3 tag of a flac file, is not mandatory to play a file, so one can easily think of making it optional. Hence this function should being missing should not prevent the plugin to load. In a slightly more formal way the concept of plugin architecture splits into four sub-concepts:</p> <p>Discovering: mechanisms allowing the host application to discover all available plugins; Usually plugins are found in a specific folders, e.g. /usr/lib/application_name/plugins/, or $HOME/.local/share/ application_name/plugins;</p> <p>Registering: mechanisms allowing the host application to potentially accept and register the discovered plugins; At this stage a plugin announces its features, version, and any other information necessary to the well functioning of the application;</p> <p>Note: in practice discovering and registration and often performed at the same time. Hooking: sometimes called mount points or extension points, applications hooks can be seen as the core of the plugin manager; They allow the plugin to ?\uc3ffttach??itself to the application; Hence the core application can get control over the plugin;</p> <p>Exposing: the core application should also expose an API to plugins such that they can call some of its functions; Evidently, not all functions from the core application should be accessible, cf. layer programming; The set of such functions can be seen as the part of the plugin manager API that is exposed to the plugins;</p> <p>Note: it is possible, and even common, to have a plugin architectures allowing to write plugins in a different language than the core application. For instance if the core application is written in C, plugins do not necessarily require to be developed in C, other languages such as Python or Lua can be used. Of course this requires more work on the plugin architecture design; This is not covered in this lab.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L6/#plugin-architecture-design","title":"Plugin Architecture Design","text":"<p>File input output process plugin should be divided into three large components.</p> <ol> <li><code>open_fi le()</code> will open file and verify its format.</li> <li><code>process_file()</code> will read file data according to its type.</li> <li><code>close_file()</code> will close file and clean up resources.</li> </ol>"},{"location":"ECE482FA24/ECE482LAB/ECE482L6/#main-application-refactor","title":"Main Application Refactor","text":"<ol> <li>Plugin loads all available plugins from folder</li> <li>Plugin will register supported file types for application</li> <li>Plugin will replace current file opening code to function based on extension or identifier.</li> </ol>"},{"location":"ECE482FA24/ECE482LAB/ECE482L6/#opening-processing-text-files","title":"Opening &amp; Processing Text Files","text":"<p>Create text file plugin that adhere to FilePlugin interface. This plugin can manage text files by processing each line. Sample code draft structure in <code>ex2.h</code></p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L6/#3-designing-a-plugin-architecture","title":"3 Designing a plugin architecture","text":"<p>We now want to add a plugin infrastructure to exercise 2 of homework 3, based on the API defined in lab 5. In the initial exercise a text file only contains one type of data, e.g. increasing integers. Lets say that we now want our file to be in csv format, with each column containing a different type of data. For instance a file could look like.</p> <pre><code>rand_int,rand_double,inc_char*\nabc=123,bfc=43.5786,aa=cat\nasda=54,sdfs=654.1,poi=dog\npoqq=3,qa=0.12313,qkm=fish\n</code></pre> <p>Based on the rewritten implementation using the layer programming API:</p> <ul> <li>Design a plugin architecture allowing to open various file-types.</li> <li>Refactor the code of the main application such that opening a text file becomes part of a plugin.</li> <li>Adjust the code such that text files can opened and processed.</li> <li>Write the skeleton of a plugin to open and process csv files.</li> </ul> <p>Skeleton code written in <code>ex3.h</code></p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L7/","title":"Lab 07","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L7/#1-project-2-presentations-part-3","title":"1 Project 2: presentations (part 3)","text":""},{"location":"ECE482FA24/ECE482LAB/ECE482L7/#2-introduction","title":"2 Introduction","text":"<p>Finally, the weekend is here. Things start to be a bit tense at work with Mr. Frown who is always on your back. It feels that things have worsened over the past few days, but you have no idea what could be the problem. In this context a bit of time out with your friend Bob will definitely be much refreshing. When you arrive at The Geeks??Tavern on Friday night, Bob is already seating at the counter sipping a beer. His mood is the total opposite of yours, while you feel disheartened and dejected, Bob seems to be floating in happiness. As soon as he notices you, he walks to you and warmly hugs you. Before you can say anything he announces: ?\uc3fdou know what? I found the perfect job!?? As you silently listens to how great and open his new company is, you cannot stop thinking of your own situation with Mr. Frown. Why on earth did Bob find the perfect job and you are stuck at Lemonion Inc.? You had better grades than him, so why him, not you? Bob is your friend but sharing his joy is not that simple??As he notices your unusual attitude he inquires about your own situation. An uncontrollable flow of words comes out of our mouth, explaining how mean Mr. Frown is and how unrewarding your job is. Bob tries his best to comfort and encourage you, you can even feel some flattery in his words. While you are thankful for his kindness and empathy, you still would like to have a job like his. Unfortunately his line of work is slightly different from what you are used to and more directly related to Operating Systems. He however promises to let you know as soon as he hear of an opening in his perfect company, CoolZone IT solutions. Reinvigorated by Bob?\uc172 words and encouragements, this is with a light heart that you join your parents for Saturday lunch. You just want to relax and enjoy their company. As the discussion shifts to your work at Lemonion Inc. you quickly summarise the current situation and emphasise your desire to do your utmost to keep your job, despite Mr. Frown?\uc172 abuses. As your parents look concerned you tell them that Bob might be able to help you find a better job, but you first need to refresh your memory on Operating Systems. The only good side is that although you have been here for already a couple of hours they have not yet asked you when you will buy a flat and get married??Just as this idea draws a smile on your face, your dad appears in the kitchen and orders you to stop drying up the dishes: he has something to show you. A few years back he started a personal project to learn a bit more about filesystems. He designed a very basic and simple inode-based filesystem for the Linux Operating System, and he suggests that you work on it. Your dad seems very excited by the possibility to work with you and help you getting ready for a prospective position at CoolZone IT solutions.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L7/#3-fixing-dadfs","title":"3 Fixing Dadfs","text":"<p>As you arrive in front of the computer your dad connects to his git server and pull a repository called dadfs. He tells you to start by reading the README file and follow the instructions to compile the code. Unfortunately the code appears to be too old to compile with a new kernel. While you feel disappointed, your father just says ?\uc3e5reat!?? As you gaze at him wondering why the module not compiling is a good news he goes into a great length of explanation on why this is a perfect exercise. You have rarely seen him so excited, even your mum comes wondering what is happening! From what you understand this is a perfect exercise to understand the structure of the code, how the kernel works, what a module is, how to write backward compatible code, etc. It feels like the benefits are endless. So without any further ado you grab the keyboard and start working, although this feels awkward having both your parents in your back commenting your decisions as if you were still in grade 1. To guide you in your work you dad asks you a few initial questions:</p> <p>1. What is a kernel module, and how does it differ from a regular library?</p> <p>The <code>Kernel module</code> code files let Linux kernel to be loaded so that linux kernel can use more functions without system reboot. Kernel could directly handle OS and hardware, including FS(File Systems), networks, or driers. On the other hand, <code>Regular Libraries</code> collect all precompiled functions and routines linked to user space. Libraries are not loaded in kernel space, but in user space. Thus, libraries are not able to access OS or hardware.</p> <p>2. How to compile a kernel module? Before going for his nap your father reminds you of the importance of backward compatibility: ?\uc3e3ven if you code compiles with a new kernel, it should still compile on an old one, so do not delete all my work!?? In a last encouragement before he leaves he blinks his right eye and smile at you before disappearing in the corridor. As you are left along with the code you decide to investigate it further and look at all the details of this first Linux kernel source code. After a quick search on internet it appears that the kernel API has changed since the initial code was written.</p> <p>Step 0 Install Kernel Headers, if not installed</p> <pre><code>sudo apt-get install linux-headers-$(uname -r)\n</code></pre> <p>Step 1 Write MakeFile. Example is below</p> <pre><code>obj-m := dadfs.o\nKDIR := /lib/modules/$(shell uname -r)/build\nPWD := $(shell pwd)\n\nall:\n    $(MAKE) -C $(KDIR) M=$(PWD) modules\n\nclean:\n    $(MAKE) -C $(KDIR) M=$(PWD) clean\n</code></pre> <p>Step 2 Compile module by <code>make</code> command</p> <pre><code>make\n</code></pre> <p>Step 3 Insert and Load module</p> <pre><code>sudo insmod dadfs.ko\n</code></pre> <p>Step 4 Remove the Module</p> <pre><code>sudo rmmod dadfs\n</code></pre> <p>*3. How are mutex defined and used? How good is this approach? As he insists on the last question it clearly appears that he expects an honest response, not just ?\uc3f0f course dad your code is perfect, nobody can do better than you.??</p> <p>Mutexes, or mutual exclusives, are used to protect shared data structures during the multi thread environment. There are serveral steps.</p> <p>Step 0 : Define Mutex</p> <p>Step 1 : Initialize Mutex</p> <p>Step 2 : Lock to protect important section</p> <p>Step 3 : Unlock if important section change is made</p> <pre><code>mutex_init(&amp;my_mutex);\nmutex_lock(&amp;my_mutex);\nmutex_unlock(&amp;my_mutex);\n</code></pre> <p>Mutex are really simple and efficient to manage inside thread context. However, they are able to potentially cause deadlock, specifically when simultaneously locked by twisted order or recursively locked. All threads will be in lock, so that entire mutex is dead.</p> <p>4. Based on the source code, how is information shared between the kernel and user spaces?</p> <p>Information share between kernel and user space is based on memory mapping, using <code>mmap</code> function. Function <code>mmap</code> could map kernel memory or files into user space memory. User space application is possible through kernel buffers with no system call repetition. Also, for specific file systems including <code>procfs</code> that create entries in <code>/proc</code> or <code>sysfs</code> to export kernel objects and attributed to the user spaces.</p> <p>5. Following dad?\uc172 advice ensure the part of the code the poses problem is only processed when working with older kernels. At this stage nothing needs to be done for newer ones. Ensure the module properly compiles on a newer kernel, although it cannot be of any use at this stage.</p> <p>Macro if statements commonly used like <code>#ifdef</code> can be used to ensure backward compatibility. Kernel version can be handled by libraries inside headers like <code>&lt;linux/version.h&gt;</code>.</p> <pre><code>#include &lt;linux/version.h&gt;\n\n#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(3, 12, 0)\nstatic const struct file_operations dadfs_fops = {\n    .read = old_read_function,\n    .write = old_write_function,\n};\n#else\nstatic const struct file_operations dadfs_fops = {\n    .read = new_read_function,\n    .write = new_write_function,\n};\n#endif\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L8/","title":"Lab 08","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L8/#1-introduction","title":"1 Introduction","text":"<p>Reading</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L8/#2-looking-at-the-linux-kernel","title":"2 Looking at the Linux kernel","text":"<p>First you notice references to concepts and topics you have already seen but never dared to look at in details. The all seem to be related to coding quality, which you already know is of a critical importance when working at the kernel level.</p> <p>What are kmsan, kasan, kfence folders?</p> <p>KMSAN (Kernel Memory Sanitizer)</p> <ul> <li>Linux uninitialized kernel memory error detection</li> <li>Maintain shadow memory that track kernel memory initialization status</li> <li>Debug by uninitialized variable detection</li> </ul> <p>KASAN (Kernel Address Sanitizer)</p> <ul> <li>Out of Bounds and Use after free error detector</li> <li>Also use shadow memory that track whether memory access is valid</li> <li>Provide debug info and help to find problematic idea</li> </ul> <p>KFENCE (Kernel Fence)</p> <ul> <li>Lightweight detector for production</li> <li>Minimal performance, appropriate for live environments</li> </ul> <p>What is shadow memory and how does it relate to sanitizers?</p> <p>Shadow memory is portion of memory reserved to store metadata by tracking whether region is valid or not at the actual memory (primary memory) inside OS kernel</p> <p>Sanitizers use shadow memory to mark invalid or not initialized memory, track memory access, or find common error including use-after-free, out-of-bounds, etc.</p> <p>What are sanitizers and why are they essential when coding in the kernel level?</p> <p>Sanitizers dynamically detect bugs like memory errors, invalid accesses, etc. KMSAN, KASAN, KFENCE above are all sanitizers.</p> <p>Sanitizers can detect memory error, so it is essential in low level programming memory management. If memory is corrupted, then OS will not only waste resource but also have several security resources. Moreover, kernel interaction to hardware might be compromised, even result in system crash. Since debugging memory without sanitizer is extremely challenging.</p> <p>What is <code>kmemleak.c</code> file about? Explain who should ?\uc415se??it and under what circumstances</p> <p>File <code>kmemleak.c</code> is about memory leak detection. It will track all dynamically allocated memories to detect memory leakage in a real time.</p> <p>During programming for kernel, it is necessary to debug memory. Thus, it will be really useful in kernel level module modification that require a lot of allocating and freeing memories.</p> <p>You also notice two interesting files:</p> <p><code>nommu.c</code>: when would this file be used? List some drawbacks of having CPU without any MMU.</p> <p>File <code>nommu.c</code> is (NO Memory Management Unit). This is useful in circumstances with limited resources like embedded systems.</p> <p>CPU Drawbacks without MMU will have these problems</p> <ul> <li>No Virtual Memory, only physical memory could be used.</li> <li>No Memory Protection, isolated process will make system corruption and crashes more vulnerable</li> <li>Memory fragmentation issue and limited ability for handling several processes simultaneously</li> <li>Harder debugging, as no VM and memory management is more sophisticated</li> </ul> <p><code>compaction.c</code>: what is this file used for? Why is ?\uc40cemory compaction??important?</p> <p>File <code>compaction.c</code> reduce fragmentation by moving freed memory blocks to restore memory spaces.</p> <p>This compaction is important when memory allocation for large amount of data is completed. Efficient memory allocation is really important for specific processes or devices that must have contiguous memory like DMA buffers. Optimized performance will significantly reduce fallback strategies, maintaining high system performance.</p> <p>As you keep looking at the files in the mm directory of the Linux source code as name stands out: oom_kill.c. This sounds scary! What could be killed. You open the files and discover that it features long interesting comments.</p> <p>What is the OOM killer? In particular what does OOM mean?</p> <p>OOM (Out of Memory) is status when system run out of both physical memory and even reached to limit of SSD swap memory, so that no space has left to allocate resources for new processes.</p> <p>OOM Killer is OS kernel mechanism that will free memory by process termination especially when system memory is low. It will avoid necessary processes and kill useless processes by distinguishing them by heuristic algorithm.</p> <p>Based on the source code and comments, explain what could be a reason for a deadlock in the Linux kernel?</p> <p>Hint. There is no need to read the whole source code, simply run a search on a well chosen keyword.</p> <p>Source code of<code>oom_kill.c</code></p> <pre><code>grep -i \"deadlock\" oom_kill.c\n</code></pre> <pre><code>        panic(\"System is deadlocked on memory\\n\");\n</code></pre> <pre><code>grep -i \"mutex\" oom_kill.c\n</code></pre> <pre><code>DEFINE_MUTEX(oom_lock);\nDEFINE_MUTEX(oom_adj_mutex);\n    if (mutex_lock_killable(&amp;oom_lock))\n    mutex_unlock(&amp;oom_lock);\n</code></pre> <pre><code>grep -i \"wait\" oom_kill.c\n</code></pre> <pre><code>static DECLARE_WAIT_QUEUE_HEAD(oom_victims_wait);\nstatic DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);\n                wait_event_freezable(oom_reaper_wait, oom_reaper_list != NULL);\n        wake_up(&amp;oom_reaper_wait);\n * before the exit path is able to wake the futex waiters.\n        wake_up_all(&amp;oom_victims_wait);\n * @timeout: maximum timeout to wait for oom victims in jiffies\n * Will block and wait until all OOM victims are killed or the given\n    ret = wait_event_interruptible_timeout(oom_victims_wait,\n</code></pre> <pre><code>grep -i \"lock\" oom_kill.c\n</code></pre> <pre><code> * oom_killer_disable() relies on this lock to stabilize oom_killer_disabled\nDEFINE_MUTEX(oom_lock);\nrcu_read_lock();\nrcu_read_unlock();\n* task_lock() held.\nstruct task_struct *find_lock_task_mm(struct task_struct *p)\nrcu_read_lock();\ntask_lock(t);\ntask_unlock(t);\nrcu_read_unlock();\np = find_lock_task_mm(p);\ntask_unlock(p);\ntask_unlock(p);\nrcu_read_lock();\nrcu_read_unlock();\ntask = find_lock_task_mm(p);\ntask_unlock(task);\nrcu_read_lock();\nrcu_read_unlock();\nstatic DEFINE_SPINLOCK(oom_reaper_lock);\n* we do not want to block exit_mmap by keeping mm ref\nif (mmu_notifier_invalidate_range_start_nonblock(&amp;range)) {\nif (!mmap_read_trylock(mm)) {\n* under mmap_lock for reading because it serializes against the\n* mmap_write_lock();mmap_write_unlock() cycle in exit_mmap().\ngoto out_unlock;\nout_unlock:\nmmap_read_unlock(mm);\n/* Retry the mmap_read_trylock(mm) a few times */\ndebug_show_all_locks();\n* somebody can't call mmap_write_unlock(mm).\nspin_lock_irq(&amp;oom_reaper_lock);\nspin_unlock_irq(&amp;oom_reaper_lock);\nspin_lock_irqsave(&amp;oom_reaper_lock, flags);\nspin_unlock_irqrestore(&amp;oom_reaper_lock, flags);\n* Has to be called with oom_lock held and never after\n* under task_lock or operate on the current).\n* any memory and livelock. freezing_slow_path will tell the freezer\n* Will block and wait until all OOM victims are killed or the given\nif (mutex_lock_killable(&amp;oom_lock))\nmutex_unlock(&amp;oom_lock);\n* Caller has to make sure that task-&gt;mm is stable (hold task_lock or\n* on that for now. We can consider find_lock_task_mm in future.\nrcu_read_lock();\nrcu_read_unlock();\np = find_lock_task_mm(victim);\n/* Get a reference to safely compare mm after task_unlock(victim) */\ntask_unlock(victim);\n* depletion of all memory.  This prevents mm-&gt;mmap_lock livelock when an\nrcu_read_lock();\nrcu_read_unlock();\ntask_lock(victim);\ntask_unlock(victim);\ntask_unlock(victim);\nstatic BLOCKING_NOTIFIER_HEAD(oom_notify_list);\nint register_oom_notifier(struct notifier_block *nb)\nreturn blocking_notifier_chain_register(&amp;oom_notify_list, nb);\nint unregister_oom_notifier(struct notifier_block *nb)\nreturn blocking_notifier_chain_unregister(&amp;oom_notify_list, nb);\nblocking_notifier_call_chain(&amp;oom_notify_list, 0, &amp;freed);\npanic(\"System is deadlocked on memory\\n\");\n* any locks held but let the oom killer triggered from the allocation context care\np = find_lock_task_mm(task);\ntask_unlock(p);\nif (mmap_read_lock_killable(mm)) {\n* Check MMF_OOM_SKIP again under mmap_read_lock protection to ensure\nmmap_read_unlock(mm);\n</code></pre> <p>In <code>oom_lock</code> mutex is used to serialize access to the OOM Killer mechanism. It also defines several locks and wait queues for OOM victims and the OOM reaper. Various locks used are</p> <ul> <li>Mutexes (oom_lock, oom_adj_mutex)</li> <li>Spinlocks (oom_reaper_lock)</li> <li>RCU locks (rcu_read_lock)</li> </ul> <p>If locks are in inconsistent order, deadlock risk exists.</p> <p>As you keep exploring the mm directory you notice a few swap related filenames. Without opening them you start thinking of the swap and a few questions come to your mind. You know that the kernel and user spaces memory are separated but what about the swap? You decide to run a quick online search to understand</p> <p>The ?\uc412ough??layout of kernel and user space memories;</p> <p>Kernel Space Memory</p> <ul> <li>Reserved for core functions of OS kernel code, memory stack, heap, and kernel level data .</li> <li>Accessible only in ring 0, privileged mode, to ensure stability.</li> </ul> <p>User Space Memory</p> <ul> <li>Used by user-level processes and applications</li> <li>Includes process data, stack, and heap.</li> <li>Runs in ring 3, unprivileged mode, that could isolate user processes from kernel.</li> </ul> <p>Whether or not kernel memory can be swapped and why;</p> <p>If kernel memory swap occurs, then OS kernel can be severely compromised in speed and stability. Kernel memory swap must be prohibited, and only user level process memory should be swapped.</p> <p>At this stage it is pretty clear that directly working in the kernel for MM is to complicated. Unfortunately with the pressure Mr. Frown puts on you, it is very hard for you to find enough time to properly investigate the benefits of MGLRU as you initially intended. Therefore you decide to keep searching online for some task that would prove that Mum Generally Loves to be Really Unfair! And again you are back with this MGLRU! Interestingly you suddenly land on this kernel documentation page. It shows how to enable and disable MGLRU from the user-space! What if you could work with MM from the user-space?</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L8/#21-looking-at-the-linux-kernel","title":"2.1 Looking at the Linux kernel","text":"<p>While searching information about MM in user-space you notice many recent research articles related to something called eBPF. As this seems to be a brand new topic this is likely a very idea to look into it: maybe being knowledgeable on it could earn you a better job without Mr. Frown! This really looks worth the effort, so you decide to read some documentation and follow a short presentation on the topic.</p> <p>eBPF (Extended Berkeley Packet Filter)</p> <p>The eBPF, (Extended Berkeley Packet Filter, guarantees secure execution of user programs at kernel level. This technology is commonly applied in to observe performance, computer security, and network status. These programs are possible to be injected inside kernel, so that all memory events inside are detected and viewed without changing source code of kernel.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L8/#22-a-page-fault-handler-using-ebpf","title":"2.2 A page-fault handler using eBPF","text":"<p>At the end of the presentation you realise that you have everything you need! The eBPF approach can work magic for you: no need to dig any further into Linux MM with long and complex code. You can simply run memory pressure tests with and without MGLRU enabled. For that you just need to monitor page-faults using an eBPF program. This sounds like a nice starting point to learn more about this intriguing technology which bridges the gap between monolithic and micro kernels, by safely ?\uc407njecting?? and ?\uc412unning??user-defined code into kernel space!</p> <p>First, install <code>bpf</code>, its trace tool, and <code>stress-ng</code>.</p> <pre><code>sudo apt-get install bpfcc-tools linux-headers-$(uname -r)\nsudo apt-get install bpftrace\nsudo apt-get install stress-ng\n</code></pre> <p>Use <code>brew</code> for macOS.</p> <pre><code>brew install bcc\nbrew install bpftrace\nbrew install stress-ng\n</code></pre> <p>Second, write down short eBPF script.</p> <pre><code>#include &lt;linux/mm_types.h&gt;\n\nint handle_page_fault(struct pt_regs *ctx, struct mm_struct *mm) {\n    bpf_trace_printk(\"Page fault in process: %d\\n\", mm-&gt;owner-&gt;pid);\n    return 0;\n}\n</code></pre> <p>Now, execution will require Kernel event eBPF attachment and Memory pressure test running.</p> <pre><code>sudo bpftrace -e 'tracepoint:exceptions:page_fault_user { printf(\"Page fault in process: %d\\n\", pid); }'\n./page_fault_loader page_fault.c\nstress-ng --vm 1 --vm-bytes 90% --timeout 60s\n</code></pre> <p>Finally, compare results.</p> <p>Sources</p> <ul> <li>eBPF Tracing: Tutorial and Examples</li> <li>stress-ng: A Tool to Load and Stress a Computer System</li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/","title":"Lab 09","text":"<p>ECE4820 FA2024 Introduction to Operating Systems</p> <p>518370990004 Jae Heung Park</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#1-project-3-presentations-part-1","title":"1 Project 3: presentations (part 1)","text":"<p>Presentation</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#2-introduction","title":"2 Introduction","text":"<p>Reading</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#3-a-dice-module","title":"3 A dice module","text":"<p>You remember that for what you want to implement, a character device should at least match the <code>open</code>, <code>close</code>, <code>read</code>, and <code>write</code> system calls. You will also have to decide on a major and a minor for your dice device. By definition the major must correspond to the driver associated to the device so it cannot ?\uc404reely??choose it. However, the minor is more flexible and you can pass it to the driver. You therefore decide to use it to create more than one type of dice device: each type would feature a different minor corresponding to a different type of dice. The displayed result of a roll would then depend on the minor. That being set, you now want to specify more precisely how to implement your devices, but for that you need grandpa?\uc172 help. What kind of game does he want to play? How many players there would be? Based on his answers it appears that you need to implement the following options:</p> <ul> <li>Change the number of dice by a <code>write</code> on the device;</li> <li>Display the result of a roll by a <code>read</code> on the device;</li> <li>Use the minor to specify the type of dice when creating the device;</li> <li>Depending on the type of dice display a different output;</li> <li>Use a module option to set the number of sides for a generic type of dice;</li> </ul> <p>Based on his answers you quickly get a sketch of what you will do, and show it to him to ensure you match all his expectations. You will have three main types of dice:</p> <ul> <li>(i) regular,</li> <li>(ii) backgammon, and</li> <li>(iii) generic</li> </ul> <p>featuring an arbitrary number of sides. For this latter dice the side number should be specified as a module option.</p> <pre><code>$ #regular dice\n$ echo 2 &gt; /dev/dice0\n$ cat /dev/dice0\n------- -------\n| o o | | o o |\n| o o | | o |\n| o o | | o o |\n'-----' '-----'\n</code></pre> <pre><code>$ #backgammon die\n$ echo 1 &gt; /dev/dice1\n$ cat /dev/dice1\n16\n</code></pre> <pre><code>$ #generic dice, gen_sides=20\n$ # gen_sides: module option\n$ echo 3 &gt; /dev/dice2\n$ cat /dev/dice2\n12 19 8\n</code></pre> <p>As grandpa is perfectly happy with your idea you decide to carry on with it.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#4-tasks","title":"4 Tasks","text":"<p>First you want to make sure you are fully familiar with the kernel API for creating character devices. So you ask yourself the following questions.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#what-needs-to-be-returned-by-read-and-write-file-operations-for-a-character-device","title":"What needs to be returned by read and write file operations for a character device?","text":"<p>Operation <code>read</code> should return the number of bytes read from device to provide data to user buffer. If no more data exist to be read, return 0, meaning EOF (End Of File). Errors should return negative value like <code>-EINVAL</code>.</p> <p>Operation <code>write</code> should return the number of bytes that are written to device. It should process user provided data and return negative value in error case. Common error is <code>-EFAULT</code>, a failure to access user memory.</p>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#how-are-exactly-those-major-and-minor-numbers-working-you-vaguely-remember-that-you-can-display-them-using-ls-l-dev","title":"How are exactly those major and minor numbers working? You vaguely remember that you can display them using ls -l /dev.","text":"<p>Major Number identify device associated drivers. OS kernel will use these major numbers to locate appropriate driver required when device file is accessed.</p> <p>Minor Number specifically identifies particular device managed by drivers. Single driver could operate several devices and those subordinate drivers will be minor number.</p> <p>Display major numbers and minor numbers in Linux OS by following command.</p> <pre><code>ls -l /dev\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#knowing-the-major-number-and-minor-numbers-of-a-device-how-to-add-a-character-device-to-dev","title":"Knowing the major number and minor numbers of a device, how to add a character device to /dev?","text":"<p>Add character device to <code>/dev</code> by using <code>mknod</code> command.</p> <pre><code>mknod /dev/&lt;device_name&gt; c &lt;major_num&gt; &lt;minor_num&gt;\nmknod /dev/dice0 c 250 0\n</code></pre>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#where-are-the-following-terms-located-in-linux-source-code","title":"Where are the following terms located in linux source code?","text":"Term Location Description <code>module_init</code> <code>linux/init.h</code> Macro for defining the initialization function of a kernel module. <code>module_exit</code> <code>linux/init.h</code> Macro for defining the cleanup function of a kernel module. <code>printk</code> <code>linux/kernel.h</code> Used for logging kernel messages. <code>container_of</code> <code>linux/kernel.h</code> Retrieves the containing structure from a pointer to a member. <code>dev_t</code> <code>linux/types.h</code> Represents device numbers (combines major and minor numbers). <code>MAJOR</code> <code>linux/kdev_t.h</code> Extracts the major number from <code>dev_t</code>. <code>MINOR</code> <code>linux/kdev_t.h</code> Extracts the minor number from <code>dev_t</code>. <code>MKDEV</code> <code>linux/kdev_t.h</code> Combines major and minor numbers into a <code>dev_t</code>. <code>alloc_chrdev_region</code> <code>linux/fs.h</code> Allocates device numbers dynamically. <code>module_param</code> <code>linux/moduleparam.h</code> Defines module parameters. <code>cdev_init</code> <code>linux/cdev.h</code> Initializes a character device structure. <code>cdev_add</code> <code>linux/cdev.h</code> Registers a character device with the kernel. <code>cdev_del</code> <code>linux/cdev.h</code> Removes a character device from the kernel. <code>THIS_MODULE</code> <code>linux/module.h</code> Macro referring to the current kernel module."},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#how-to-generate-random-numbers-when-working-inside-the-linux-kernel-you-think-that-a-while-back-you-read-something-about-getting-the-current-time","title":"How to generate random numbers when working inside the Linux kernel? You think that a while back you read something about getting the current time.","text":"<p>Linux kernel has random number generator functions in <code>linux/random.h</code> including</p> <ul> <li><code>get_random_int()</code></li> <li><code>get_random_bytes(void *buf, int nbytes)</code></li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#how-to-define-and-specify-module-options","title":"How to define and specify module options?","text":"<p>Linux kernel has module parameter macro <code>module_param</code> function in <code>linux/moduleparam.h</code>.</p> <pre><code>static int gen_sides = 20;\nmodule_param(gen_sides, int, 0444);\nMODULE_PARM_DESC(gen_sides, \"Total number of generic dice sides\");\n</code></pre> <p>Pass module options at load time</p> <pre><code>insmod dice.ko gen_sides=12\n</code></pre> <p>Where <code>0444</code> specify permission (Read only for all), while <code>MODULE_PARM_DESC</code> is text description</p> <p>As you can answer all those questions it feels that you are almost ready to get started, so you open your favorite tool to code and write a very basic module which on a cat simply prints ?\uc3dblmost there grandpa!??</p> <p>A few useful references:</p> <ul> <li>https://github.com/starpos/scull</li> <li>https://www.oreilly.com/library/view/linux-device-drivers/0596005903/ch03.html</li> <li>https://elixir.bootlin.com/linux/latest/source</li> </ul>"},{"location":"ECE482FA24/ECE482LAB/ECE482L9/#compile-and-test-log-in-linux","title":"Compile and test log in Linux","text":"<p>Supports three types of dice</p> <ul> <li>Regular Dice: <code>/dev/dice0</code></li> <li>Backgammon Dice: <code>/dev/dice1</code></li> <li>Generic Dice: <code>/dev/dice2</code></li> </ul> <p>Implementation</p> <ul> <li><code>write</code> to set dice number to roll.</li> <li><code>read</code> to display dice rolls.</li> </ul> <p>Set dice number to roll (<code>write</code>), <code>?</code> is number</p> <pre><code>echo &lt;number&gt; &gt; /dev/dice?\n</code></pre> <p>Read dice number to roll (<code>read</code>), <code>?</code> is number</p> <pre><code>cat /dev/dice?\n</code></pre> <p>Compile by <code>make</code> command and clean by <code>make clean</code></p> <pre><code>make\nmake clean\n</code></pre> <p>Check generated dice</p> <pre><code>ls -l /dev/dice*\n</code></pre> <p>Check file contents</p> <pre><code>sudo cat /dev/dice0\n</code></pre> <p>Returns following</p> <pre><code>1 3\n</code></pre> <p>Check logs</p> <pre><code>sudo dmseg | tail\n</code></pre> <p>Logs contents</p> <pre><code>sudo dmesg | tail\n[    7.878369] audit: type=1107 audit(1733345694.330:59): pid=819 uid=102 auid=4294967295 ses=4294967295 subj=unconfined msg='apparmor=\"DENIED\" operation=\"dbus_method_call\"  bus=\"system\" path=\"/org/freedesktop/PolicyKit1/Authority\" interface=\"org.freedesktop.PolicyKit1.Authority\" member=\"CheckAuthorization\" mask=\"send\" name=\":1.3\" pid=1598 label=\"snap.snap-store.ubuntu-software\" peer_pid=832 peer_label=\"unconfined\"\n                exe=\"/usr/bin/dbus-daemon\" sauid=102 hostname=? addr=? terminal=?'\n[    7.880613] audit: type=1107 audit(1733345694.332:60): pid=819 uid=102 auid=4294967295 ses=4294967295 subj=unconfined msg='apparmor=\"DENIED\" operation=\"dbus_method_call\"  bus=\"system\" path=\"/org/freedesktop/PolicyKit1/Authority\" interface=\"org.freedesktop.DBus.Properties\" member=\"GetAll\" mask=\"send\" name=\":1.3\" pid=1598 label=\"snap.snap-store.ubuntu-software\" peer_pid=832 peer_label=\"unconfined\"\n                exe=\"/usr/bin/dbus-daemon\" sauid=102 hostname=? addr=? terminal=?'\n[    7.880708] audit: type=1107 audit(1733345694.332:61): pid=819 uid=102 auid=4294967295 ses=4294967295 subj=unconfined msg='apparmor=\"DENIED\" operation=\"dbus_method_call\"  bus=\"system\" path=\"/org/freedesktop/PolicyKit1/Authority\" interface=\"org.freedesktop.PolicyKit1.Authority\" member=\"CheckAuthorization\" mask=\"send\" name=\":1.3\" pid=1598 label=\"snap.snap-store.ubuntu-software\" peer_pid=832 peer_label=\"unconfined\"\n                exe=\"/usr/bin/dbus-daemon\" sauid=102 hostname=? addr=? terminal=?'\n[    8.039953] audit: type=1400 audit(1733345694.491:62): apparmor=\"DENIED\" operation=\"open\" class=\"file\" profile=\"snap.snap-store.ubuntu-software\" name=\"/etc/appstream.conf\" pid=1598 comm=\"snap-store\" requested_mask=\"r\" denied_mask=\"r\" fsuid=1000 ouid=0\n[ 8096.679822] audit: type=1326 audit(1733352979.809:63): auid=1000 uid=1000 gid=1000 ses=2 subj=snap.snap-store.ubuntu-software pid=1598 comm=\"pool-org.gnome.\" exe=\"/snap/snap-store/1217/usr/bin/snap-store\" sig=0 arch=c00000b7 syscall=55 compat=0 ip=0xf8108010910c code=0x50000\n[10648.110448] dicedevice: loading out-of-tree module taints kernel.\n[10648.110513] dicedevice: module verification failed: signature and/or required key missing - tainting kernel\n</code></pre> <p>Verify device noce</p> <pre><code>ls -l /dev/dice*\n</code></pre> <p>Test reading from device</p> <pre><code>sudo cat /dev/dice0\nsudo cat /dev/dice1\nsudo cat /dev/dice2\n</code></pre> <p> This is success result image.</p>"},{"location":"ECE482FA24/ECE482P2/Design/","title":"System Design","text":"<p>Software schema overview and description </p>"},{"location":"ECE482FA24/ECE482P2/Design/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Design/#system-overview","title":"System Overview","text":"<p>In our system, we employ a shared locking strategy for managing concurrent access to resources. Read locks, often implemented in shared locks, allow multiple threads to access the same resource concurrently for reading purposes. Write locks, on the other hand, do not permit concurrent access but can operate concurrently on different segments of data. Thus, as long as the operations do not modify the same segment, write locks can also effectively function as shared locks. The only one exception to this shared lock usage is during a dump operation, which requires exclusive access.</p> <p>To do a \"multi-shared-mutex\", we've developed a class called \"AdvancedLock\". This class combines two standard shared locks, allowing the efficient management of lock states during complex operations.</p> <p>An issue in multi-threading is the race condition, which arises when multiple threads attempt to modify shared data simultaneously. We address this challenge by the \"Advanced Mutex\". Thus threads either gain full required access to the resource or are put on hold, thereby preventing race conditions and ensuring data integrity and consistency.</p>"},{"location":"ECE482FA24/ECE482P2/Design/#architecture","title":"Architecture","text":"<p><code>./src</code> Contains the source code for an old version of lemnonDB. The code was recovered from crash site. As far as we know the original developer used CMake as their building system.</p> <ul> <li><code>./bin</code> Contains the lastest binary that survived the crash.</li> <li><code>./db</code> Contains sample database files.</li> <li><code>./sample</code> Sample inputs and outputs</li> <li><code>./build</code>: Build LemonDB by compile and run code inside folder  </li> <li><code>./src/query</code>: Query-related logic </li> <li><code>./src/query/execute</code>: Execution layer, managing threading and parallelism.</li> <li><code>./src/query/management</code>: Queries for managing the system state (e.g., table operations).</li> <li><code>./src/utils</code>: Utility functions and error handling.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Design/#main-components","title":"Main Components","text":""},{"location":"ECE482FA24/ECE482P2/Design/#parse-query","title":"Parse Query","text":"<p>Purpose: Parse the user input, validate syntax, and create query objects. </p> <ol> <li>Tokenize input.</li> <li>Validate syntax.</li> <li>Use QueryBuilder chain to create and return a query object</li> </ol> <pre><code>Function ParseQuery(input)\n    If no QueryBuilder exists:\n        Throw Error\n    Tokenize input\n    If tokens are empty:\n        Throw Error\n    Clear QueryBuilder state\n    Return QueryBuilder.extractQuery(tokens)\n</code></pre>"},{"location":"ECE482FA24/ECE482P2/Design/#execute-query","title":"Execute Query","text":"<ul> <li>Lock necessary resources.</li> <li>Execute query based on its type:</li> <li>Read-only: Process safely in parallel.</li> <li>Write-only: Process with required locks.</li> <li>Unlock resources and return results. </li> </ul> <pre><code>Function ExecuteQuery(queryObject)\n    Lock resources\n    If query is read-only:\n        Do read operation\n    Else if query is write-only:\n        Do write operation\n    Unlock resources\n    Return results\n</code></pre>"},{"location":"ECE482FA24/ECE482P2/Design/#thread-life-cycle","title":"Thread Life Cycle","text":"<ol> <li>Task assignment.</li> <li>Thread execution.</li> <li>Thread termination or reuse.</li> </ol> <pre><code>Function ThreadLifeCycle()\n    While thread is active:\n        Wait for task\n        Execute task\n        Mark thread as available\n</code></pre>"},{"location":"ECE482FA24/ECE482P2/Design/#data-flow","title":"Data Flow","text":"<ol> <li>Parse SQL Queries. </li> <li>Assign Unique IDs.</li> <li>Distribute Queries to Threads.</li> </ol> <pre><code>Function DataFlow()\n    Parse queries\n    Assign unique IDs\n    Distribute to threads\n    Collect and return results\n</code></pre> <p>Tree Structure for system </p> <pre><code>.\n?\uc48b??\u0080 CHANGELOG.md\n?\uc48b??\u0080 Develop.md\n?\uc48b??\u0080 INSTALL.md\n?\uc48b??\u0080 README.md\n?\uc48b??\u0080 build\n??  ?\uc48b??\u0080 CMakeCache.txt\n??  ?\uc48b??\u0080 CMakeFiles\n??  ??  ?\uc48b??\u0080 3.30.5\n??  ??  ??  ?\uc48b??\u0080 CMakeCCompiler.cmake\n??  ??  ??  ?\uc48b??\u0080 CMakeCXXCompiler.cmake\n??  ??  ??  ?\uc48b??\u0080 CMakeDetermineCompilerABI_C.bin\n??  ??  ??  ?\uc48b??\u0080 CMakeDetermineCompilerABI_CXX.bin\n??  ??  ??  ?\uc48b??\u0080 CMakeSystem.cmake\n??  ??  ??  ?\uc48b??\u0080 CompilerIdC\n??  ??  ??  ??  ?\uc48b??\u0080 CMakeCCompilerId.c\n??  ??  ??  ??  ?\uc48b??\u0080 a.out\n??  ??  ??  ??  ?\ubdb4??\u0080 tmp\n??  ??  ??  ?\ubdb4??\u0080 CompilerIdCXX\n??  ??  ??      ?\uc48b??\u0080 CMakeCXXCompilerId.cpp\n??  ??  ??      ?\uc48b??\u0080 a.out\n??  ??  ??      ?\ubdb4??\u0080 tmp\n??  ??  ?\uc48b??\u0080 CMakeConfigureLog.yaml\n??  ??  ?\uc48b??\u0080 CMakeDirectoryInformation.cmake\n??  ??  ?\uc48b??\u0080 Makefile.cmake\n??  ??  ?\uc48b??\u0080 Makefile2\n??  ??  ?\uc48b??\u0080 TargetDirectories.txt\n??  ??  ?\uc48b??\u0080 cmake.check_cache\n??  ??  ?\uc48b??\u0080 lemondb.dir\n??  ??  ??  ?\uc48b??\u0080 DependInfo.cmake\n??  ??  ??  ?\uc48b??\u0080 build.make\n??  ??  ??  ?\uc48b??\u0080 cmake_clean.cmake\n??  ??  ??  ?\uc48b??\u0080 compiler_depend.internal\n??  ??  ??  ?\uc48b??\u0080 compiler_depend.make\n??  ??  ??  ?\uc48b??\u0080 compiler_depend.ts\n??  ??  ??  ?\uc48b??\u0080 db\n??  ??  ??  ??  ?\uc48b??\u0080 Database.cpp.o\n??  ??  ??  ??  ?\uc48b??\u0080 Database.cpp.o.d\n??  ??  ??  ??  ?\uc48b??\u0080 Table.cpp.o\n??  ??  ??  ??  ?\ubdb4??\u0080 Table.cpp.o.d\n??  ??  ??  ?\uc48b??\u0080 depend.make\n??  ??  ??  ?\uc48b??\u0080 flags.make\n??  ??  ??  ?\uc48b??\u0080 link.txt\n??  ??  ??  ?\uc48b??\u0080 main.cpp.o\n??  ??  ??  ?\uc48b??\u0080 main.cpp.o.d\n??  ??  ??  ?\uc48b??\u0080 progress.make\n??  ??  ??  ?\ubdb4??\u0080 query\n??  ??  ??      ?\uc48b??\u0080 Query.cpp.o\n??  ??  ??      ?\uc48b??\u0080 Query.cpp.o.d\n??  ??  ??      ?\uc48b??\u0080 QueryBuilders.cpp.o\n??  ??  ??      ?\uc48b??\u0080 QueryBuilders.cpp.o.d\n??  ??  ??      ?\uc48b??\u0080 QueryParser.cpp.o\n??  ??  ??      ?\uc48b??\u0080 QueryParser.cpp.o.d\n??  ??  ??      ?\uc48b??\u0080 QueryResult.cpp.o\n??  ??  ??      ?\uc48b??\u0080 QueryResult.cpp.o.d\n??  ??  ??      ?\uc48b??\u0080 data\n??  ??  ??      ??  ?\uc48b??\u0080 AddQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 AddQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 CountQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 CountQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 DeleteQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 DeleteQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 DuplicateQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 DuplicateQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 InsertQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 InsertQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 MaxQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 MaxQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 MinQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 MinQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 SelectQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 SelectQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 SubQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 SubQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 SumQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 SumQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 SwapQuery.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 SwapQuery.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 UpdateQuery.cpp.o\n??  ??  ??      ??  ?\ubdb4??\u0080 UpdateQuery.cpp.o.d\n??  ??  ??      ?\uc48b??\u0080 execute\n??  ??  ??      ??  ?\uc48b??\u0080 QueryExecuter.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 QueryExecuter.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 QueryExecuterHelper.cpp.o\n??  ??  ??      ??  ?\uc48b??\u0080 QueryExecuterHelper.cpp.o.d\n??  ??  ??      ??  ?\uc48b??\u0080 QueryThreadPool.cpp.o\n??  ??  ??      ??  ?\ubdb4??\u0080 QueryThreadPool.cpp.o.d\n??  ??  ??      ?\ubdb4??\u0080 management\n??  ??  ??          ?\uc48b??\u0080 CopyTableQuery.cpp.o\n??  ??  ??          ?\uc48b??\u0080 CopyTableQuery.cpp.o.d\n??  ??  ??          ?\uc48b??\u0080 DropTableQuery.cpp.o\n??  ??  ??          ?\uc48b??\u0080 DropTableQuery.cpp.o.d\n??  ??  ??          ?\uc48b??\u0080 DumpTableQuery.cpp.o\n??  ??  ??          ?\uc48b??\u0080 DumpTableQuery.cpp.o.d\n??  ??  ??          ?\uc48b??\u0080 ListTableQuery.cpp.o\n??  ??  ??          ?\uc48b??\u0080 ListTableQuery.cpp.o.d\n??  ??  ??          ?\uc48b??\u0080 LoadTableQuery.cpp.o\n??  ??  ??          ?\uc48b??\u0080 LoadTableQuery.cpp.o.d\n??  ??  ??          ?\uc48b??\u0080 PrintTableQuery.cpp.o\n??  ??  ??          ?\uc48b??\u0080 PrintTableQuery.cpp.o.d\n??  ??  ??          ?\uc48b??\u0080 QuitQuery.cpp.o\n??  ??  ??          ?\uc48b??\u0080 QuitQuery.cpp.o.d\n??  ??  ??          ?\uc48b??\u0080 TruncateTableQuery.cpp.o\n??  ??  ??          ?\ubdb4??\u0080 TruncateTableQuery.cpp.o.d\n??  ??  ?\uc48b??\u0080 pkgRedirects\n??  ??  ?\ubdb4??\u0080 progress.marks\n??  ?\uc48b??\u0080 Makefile\n??  ?\uc48b??\u0080 cmake_install.cmake\n??  ?\uc48b??\u0080 lemondb\n??  ?\uc48b??\u0080 sample\n??  ??  ?\uc48b??\u0080 ...\n??  ??  ?\ubdb4??\u0080 test.query\n??  ?\uc48b??\u0080 sample_stdout\n??  ??  ?\uc48b??\u0080 ...\n??  ??  ?\ubdb4??\u0080 test.out\n??  ?\ubdb4??\u0080 stdout\n??      ?\ubdb4??\u0080 test.out\n?\uc48b??\u0080 db\n??  ?\uc48b??\u0080 fTable0.tbl\n??  ?\uc48b??\u0080 ... \n??  ?\uc48b??\u0080 mTable49.tbl\n??  ?\uc48b??\u0080 t1.tbl\n??  ?\uc48b??\u0080 t2.tbl\n??  ?\ubdb4??\u0080 tlarge.tbl\n?\uc48b??\u0080 src\n??  ?\uc48b??\u0080 CMakeLists.txt\n??  ?\uc48b??\u0080 db\n??  ??  ?\uc48b??\u0080 AdvancedLock.h\n??  ??  ?\uc48b??\u0080 Database.cpp\n??  ??  ?\uc48b??\u0080 Database.h\n??  ??  ?\uc48b??\u0080 Table.cpp\n??  ??  ?\ubdb4??\u0080 Table.h\n??  ?\uc48b??\u0080 main.cpp\n??  ?\uc48b??\u0080 query\n??  ??  ?\uc48b??\u0080 Query.cpp\n??  ??  ?\uc48b??\u0080 Query.h\n??  ??  ?\uc48b??\u0080 QueryBuilders.cpp\n??  ??  ?\uc48b??\u0080 QueryBuilders.h\n??  ??  ?\uc48b??\u0080 QueryParser.cpp\n??  ??  ?\uc48b??\u0080 QueryParser.h\n??  ??  ?\uc48b??\u0080 QueryResult.cpp\n??  ??  ?\uc48b??\u0080 QueryResult.h\n??  ??  ?\uc48b??\u0080 data\n??  ??  ??  ?\uc48b??\u0080 AddQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 AddQuery.h\n??  ??  ??  ?\uc48b??\u0080 CountQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 CountQuery.h\n??  ??  ??  ?\uc48b??\u0080 DeleteQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 DeleteQuery.h\n??  ??  ??  ?\uc48b??\u0080 DuplicateQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 DuplicateQuery.h\n??  ??  ??  ?\uc48b??\u0080 InsertQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 InsertQuery.h\n??  ??  ??  ?\uc48b??\u0080 MaxQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 MaxQuery.h\n??  ??  ??  ?\uc48b??\u0080 MinQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 MinQuery.h\n??  ??  ??  ?\uc48b??\u0080 SelectQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 SelectQuery.h\n??  ??  ??  ?\uc48b??\u0080 SubQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 SubQuery.h\n??  ??  ??  ?\uc48b??\u0080 SumQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 SumQuery.h\n??  ??  ??  ?\uc48b??\u0080 SwapQuery.cpp\n??  ??  ??  ?\uc48b??\u0080 SwapQuery.h\n??  ??  ??  ?\uc48b??\u0080 UpdateQuery.cpp\n??  ??  ??  ?\ubdb4??\u0080 UpdateQuery.h\n??  ??  ?\uc48b??\u0080 execute\n??  ??  ??  ?\uc48b??\u0080 QueryExecuter.cpp\n??  ??  ??  ?\uc48b??\u0080 QueryExecuter.h\n??  ??  ??  ?\uc48b??\u0080 QueryExecuterHelper.cpp\n??  ??  ??  ?\uc48b??\u0080 QueryExecuterHelper.h\n??  ??  ??  ?\uc48b??\u0080 QueryThreadPool.cpp\n??  ??  ??  ?\ubdb4??\u0080 QueryThreadPool.h\n??  ??  ?\ubdb4??\u0080 management\n??  ??      ?\uc48b??\u0080 CopyTableQuery.cpp\n??  ??      ?\uc48b??\u0080 CopyTableQuery.h\n??  ??      ?\uc48b??\u0080 DropTableQuery.cpp\n??  ??      ?\uc48b??\u0080 DropTableQuery.h\n??  ??      ?\uc48b??\u0080 DumpTableQuery.cpp\n??  ??      ?\uc48b??\u0080 DumpTableQuery.h\n??  ??      ?\uc48b??\u0080 ListTableQuery.cpp\n??  ??      ?\uc48b??\u0080 ListTableQuery.h\n??  ??      ?\uc48b??\u0080 LoadTableQuery.cpp\n??  ??      ?\uc48b??\u0080 LoadTableQuery.h\n??  ??      ?\uc48b??\u0080 PrintTableQuery.cpp\n??  ??      ?\uc48b??\u0080 PrintTableQuery.h\n??  ??      ?\uc48b??\u0080 QuitQuery.cpp\n??  ??      ?\uc48b??\u0080 QuitQuery.h\n??  ??      ?\uc48b??\u0080 TruncateTableQuery.cpp\n??  ??      ?\ubdb4??\u0080 TruncateTableQuery.h\n??  ?\ubdb4??\u0080 utils\n??      ?\uc48b??\u0080 formatter.h\n??      ?\ubdb4??\u0080 uexception.h\n?\ubdb4??\u0080 test\n    ?\uc48b??\u0080 run.sh\n    ?\uc48b??\u0080 run_wr.sh\n    ?\uc48b??\u0080 testAdd.query\n    ?\uc48b??\u0080 testMax.query\n    ?\uc48b??\u0080 testMin.query\n    ?\uc48b??\u0080 testSum.query\n    ?\ubdb4??\u0080 testSwap.query\n</code></pre>"},{"location":"ECE482FA24/ECE482P2/Design/#navigation_1","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/","title":"Developer Setup","text":"<p>Full setup and test guide from beginning to end </p>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#prerequisites","title":"Prerequisites","text":"<ol> <li>C++ compiler: Clang &gt;= 6.0</li> <li>CMake &gt;= 2.7</li> </ol>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#download-program-files","title":"Download Program Files","text":"<p>First, clone the git repository or download the file.</p> <pre><code>git clone ssh://git@focs.ji.sjtu.edu.cn:2222/ece482-24fa/p2team-02.git \ncd p2team-02 \n</code></pre> <p>Download required files and locate them from SJTU school server. </p> <p>Required files are <code>db</code>, <code>sample</code>, <code>sample_stdout</code>. </p> <p>Value <code>ID</code> is student ID like 512212345678. </p> <pre><code>scp -r ID@111.186.59.59:/opt/lemondb/db ./ \nscp -r ID@111.186.59.59:/opt/lemondb/sample ./\nscp -r ID@111.186.59.59:/opt/lemondb/sample_stdout ./\n</code></pre> <p>After download, move downloaded folder files into corresponding locations inside project </p> <pre><code>cp -r ~/Downloads/db ~/path/to/p2team-02 \ncp -r ~/Downloads/sample ~/path/to/p2team-02/build\ncp -r ~/Downloads/sample_stdout ~/path/to/p2team-02/build \ncp -r ~/Downloads/stdout ~/path/to/p2team-02/build \n</code></pre>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#compile","title":"Compile","text":"<p>For the first compile, make directory <code>build</code>. Compile and run code at the <code>build</code> folder. </p> <pre><code>mkdir build &amp;&amp; cd build\ncmake -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Release ../src\ncmake --build . -- -j8\ncd ..\n</code></pre> <p>If compile success, you will have a lemondb binary file at <code>./build/lemondb</code>. </p> <p>Note: You can use <code>CMAKE_BUILD_TYPE</code> to switch between debug and release.</p> <p>Recompile inside <code>build</code> folder. </p> <pre><code>cmake -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Release ../src\ncmake --build . -- -j8\n</code></pre>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#test-by-running-code-measuring-input-and-output-locally","title":"Test by running code, measuring input and output locally","text":"<pre><code>cd build\nmkdir stdout  \ntime ./lemondb --listen ./sample/test.query &gt; stdout/test.out\n</code></pre>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#segmentation-error-debugging-test","title":"Segmentation Error Debugging Test","text":"<pre><code>cd ./build \nlldb ./lemondb\nrun --listen ./sample/test.query\nbt\n</code></pre>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#difference-check","title":"Difference Check","text":"<pre><code>diff -n ./sample_stdout/test.out ./stdout/test.out\n</code></pre> <p>This terminal command will show difference between standard output and test output </p>"},{"location":"ECE482FA24/ECE482P2/DeveloperGuide/#navigation_1","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Home/","title":"Project 2 LemonDB Multi Threading Database","text":"<p>2024FA ECE4820 Introduction to Operating Systems</p>"},{"location":"ECE482FA24/ECE482P2/Home/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Home/#overview","title":"Overview","text":"<p>LemonDB is a multi-threaded database system project. It assigns each processes queries in parallel for faster execution.</p> <p>Project 2, named as LemonDB in this fictional home-brewed project of Lemonion.inc, is a team based assignment to program database from source code of previous system. Based on the concepts taught in the class, our team programmed the most efficient and optimized version of multi-threading database by considering parallel multi threading. By the time project is completed, the new implementation will be able to handle parallel query execution by concurrency, allowing heavy workload of multiple query execution in short period of time by optimized scheduling.</p> <p>Also, during the software development, team members will try to follow the principles for the agile development, clean documentation for better maintainability in the future, and software testing and benchmarking compared to the original system. Tasks will be divided and distributed as evenly as possible, but more competent member will contribute more to the project.</p>"},{"location":"ECE482FA24/ECE482P2/Home/#team-members-roles-and-contributions","title":"Team Members, Roles and contributions","text":"<p>Jae Heung Park</p> <ul> <li>Implementation of <code>MAX</code> <code>MIN</code> <code>SWAP</code> functions in single thread.</li> <li>Implementation of read  only <code>MAX</code> <code>MIN</code> <code>SUM</code> <code>SELECT</code> <code>COUNT</code> queries in multi thread.</li> <li>Documentation of <code>README</code> file and Wiki for project release.</li> <li>Compiling and debugging codes to run test cases in local environment.</li> <li>Detecting segmentation error and finding problematic queries.</li> <li>Discovering no implementation of <code>COPYTABLE</code> <code>TRUNCATE</code> and fix those.</li> <li>Supportive contribution to the project with effort</li> </ul> <p>He Wentao</p> <ul> <li>Project basic setup from given source code and functions.</li> <li>Compiling and debugging codes to run test cases in local environment.</li> <li>Code testing from server to check optimization and performance.</li> <li>Single thread functions implementation <code>ADD</code> <code>SUB</code> <code>COUNT</code> <code>DELETE</code></li> <li>Algorithm design implementation for multi threading</li> <li>Changing entire query functions to apply optimization algorithm</li> <li>Implementation of write queries in multi thread.</li> <li>High contribution to the project with great skills and effort</li> </ul> <p>Wang Rui</p> <ul> <li>Project template update, comment, and developer guide documentation</li> <li>Single thread functions implementation <code>SUM</code> <code>DELETE</code> <code>DUPLICATE</code></li> <li>Implementation of read  only <code>MAX</code> <code>MIN</code> <code>SUM</code> <code>SELECT</code> <code>COUNT</code> queries in multi thread.</li> <li>Algorithm design research and implementation for multi threading</li> <li>Implementation of write queries in multi thread.</li> <li>Compiling and debugging codes to run test cases in local environment.</li> <li>High contribution to the project with great skills and effort</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Home/#navigation_1","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/","title":"Multi-threading Challenges","text":"<p>Support concurrent query execution using multi-threading.  </p>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#features","title":"Features","text":""},{"location":"ECE482FA24/ECE482P2/MultiThreading/#1-multi-threaded-execution","title":"1. Multi-Threaded Execution:","text":"<ul> <li>Parallel execution of queries using a thread pool.</li> <li>Thread-safe resource management with fine-grained locks.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#2-query-types","title":"2. Query Types:","text":"<ul> <li>Read-Only: SELECT, COUNT, MAX, MIN, SUM</li> <li>Write-Only: INSERT, DELETE, UPDATE, LOAD, COPY_TABLE</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#3-concurrency-control","title":"3. Concurrency Control:","text":"<ul> <li>Shared locks for read operations.</li> <li>Exclusive locks for write operations.</li> <li>Deadlock prevention through ordered locking.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#challenges","title":"Challenges","text":""},{"location":"ECE482FA24/ECE482P2/MultiThreading/#deadlocks","title":"Deadlocks","text":"<ul> <li>Issue: Circular dependencies between locks might trigger threads to wait indefinitely  </li> <li>Solution: Break \"hold and wait\" by retrying when locks cannot be acquired </li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#race-conditions","title":"Race Conditions","text":"<ul> <li>Issue: Concurrent access to shared resources causes inconsistent states </li> <li>Used atomic operations and counters </li> <li>Enforce ordered locking to prevent cyclic dependencies</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#thread-safety","title":"Thread Safety","text":"<ul> <li>Use <code>std::mutex</code> for exclusive locks </li> <li>Use <code>std::shared_mutex</code> for shared locks.</li> <li>Use <code>std::condition_variable</code> for coordinate threads.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#original-approach-locking-each-function","title":"Original Approach: Locking Each Function","text":"<p>During the first 2 weeks, our approach for multi threading system lock was individual lock. Each query-related function (e.g., <code>SELECT</code>, <code>SWAP</code>, <code>MAX</code>) had its own lock  to protect the critical sections within that function. Locking within a function was the easiest method to implement.  Also, as each function handled its own locking,  detailed control over resource protection was possible. It also allowed minimal interference between unrelated operations. </p> <p>However, this method was not good approach to handle speed optimization.  There were large number of independent locks, making the system harder to manage and debug.  Moreover, higher risk of deadlocks when functions accessed shared resources followed.  Since original design's goal was simplicity and isolation, so that no function could accidentally handle shared resources without proper protection.  Thus, the operation speed was unacceptable, and new design was required. </p>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#current-approach-locks-per-table","title":"Current Approach: Locks Per Table","text":"<p>In the current design, locks are applied per table instead of per function.  Based on the query type: Each table has a shared or exclusive lock. </p> <ul> <li>Shared Locks (<code>std::shared_mutex</code>) allow multiple threads to perform read operations concurrently.</li> <li>Exclusive Locks  (<code>std::mutex</code>) block all other operations while a write operation is executed.</li> </ul> <p>Compared to the original design without enough consideration, table lock has several advantages. </p> <ul> <li>Read queries (<code>SELECT</code>, <code>COUNT</code>, etc.) can proceed in parallel without blocking each other.</li> <li>Write queries (<code>INSERT</code>, <code>DELETE</code>, etc.) need exclusive locks, ensuring data consistency.</li> <li>Ordered lock ensures threads lock in same order, preventing circular dependencies, meaning deadlock.</li> <li>Locks are managed at the table level rather than function level, reducing total lock/unlock operations. </li> <li>Allows unrelated queries on different tables to proceed simultaneously. </li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#comparison-between-two-methods","title":"Comparison between two methods","text":"Metric Lock Per Function Per-Table Lock Concurrency Low (locks on functions block threads) High (multiple threads can read concurrently) Deadlock Risk High (independent locks cause cyclic dependencies) Low (ordered locking and fewer locks) Overhead High (many lock/unlock calls) Lower (fewer, coarser locks) Scalability Poor (limited by function locks) Better (independent locks per table) Complexity Simple (isolated locking) Moderate (lock coordination required) <p>It was able to accomplish following by implementation of lock per table </p> <ul> <li>Resource Optimization: Concurrent read queries on the same table</li> <li>Higher Throughput: Write queries block only specific table in work, avoid bottlenecks</li> <li>Reduced Lock Contention: Per-table locks is reduced compared to per-function locks </li> <li>Simplified Debugging: Lock-per-table approach centralizes lock to table-specific resources</li> <li>Future Scalability: Supports scaling to larger systems with more tables and threads</li> </ul>"},{"location":"ECE482FA24/ECE482P2/MultiThreading/#navigation_1","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Performance/","title":"Performance Improvements","text":"<p>This section documents the performance improvements of our LemonDB systems in school server. </p>"},{"location":"ECE482FA24/ECE482P2/Performance/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Performance/#performance-analysis-overview","title":"Performance Analysis Overview","text":"<p>How multi-threading, query optimization, and efficient resource allocation improved overall system throughput and responsiveness will be recorded.</p> <p>Key observations from the timing log: - Baseline Performance: The original system's performance metrics were extracted to serve as a benchmark. - Improved Metrics:     - Execution times have been significantly reduced across all query types.     - Parallel query handling demonstrates efficient core utilization with minimal overhead.     - The system scales effectively with the number of cores, as verified on the 64-core test server.</p>"},{"location":"ECE482FA24/ECE482P2/Performance/#log-insights","title":"Log Insights","text":""},{"location":"ECE482FA24/ECE482P2/Performance/#timing-highlights","title":"Timing Highlights","text":"<p>Below are the key timing statistics derived from the log:</p> Query Type sample lemondb Time (ms) our lemondb Time (ms) Improvement (%) many_insert_delete 18021 5446.0 230.9 many_read 18899 5386 250.1 few_insert_delete 15708 5538 183.6 few_read 23977 7145 235.6 single_insert_delete 29316 23434 25.1 single_read 38493 28934 33.0"},{"location":"ECE482FA24/ECE482P2/Performance/#optimization-techniques","title":"Optimization Techniques","text":"<ol> <li>Multi-threading:<ul> <li>Implemented parallel query execution.</li> <li>Dynamically allocated threads using the <code>--threads</code> argument.</li> </ul> </li> <li>Resource Management:<ul> <li>Improved memory allocation and reallocation strategies.</li> <li>Minimized contention and avoided deadlocks.</li> </ul> </li> <li>Query Parsing Enhancements:<ul> <li>Optimized ID assignment for continuous integer sequences.</li> </ul> </li> <li>Core Utilization:<ul> <li>Auto-detection of available cores for <code>--threads=0</code>.</li> </ul> </li> </ol>"},{"location":"ECE482FA24/ECE482P2/Performance/#next-steps","title":"Next Steps","text":"<ul> <li>Continue profiling to identify edge cases that may impact performance.</li> <li>Explore advanced optimizations (e.g., thread pooling, asynchronous I/O).</li> <li>Document any additional improvements in subsequent updates.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/Performance/#navigation_1","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/RoadMap/","title":"Road Map","text":"<p>From beginning to end of the project, timeline and log </p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#milestone-1-single-threaded-version-of-the-database-program","title":"Milestone 1 : Single threaded version of the database program","text":"<p>Input from the standard input, all required instructions working;</p> <p>Single Query  Read Functions Checklist</p> <ul> <li>[x] <code>SELECT</code> Select and display records from a table based on conditions</li> <li>[x] <code>SUM</code> Aggregate the sum of fields in records</li> <li>[x] <code>COUNT</code> Count the number of records based on conditions</li> <li>[x] <code>MIN</code> Find the minimum values in specified fields based on conditions</li> <li>[x] <code>MAX</code> Find the maximum values in specified fields based on conditions</li> <li>[x] <code>QUIT</code> Exit the database program</li> </ul> <p>Single Query Write Functions Checklist</p> <ul> <li>[x] <code>ADD</code> Add specified fields and store the result in a destination field</li> <li>[x] <code>SUB</code> Subtract fields and store the result in a destination field</li> <li>[x] <code>DUMP</code> Dump an existing table to a file</li> <li>[x] <code>DROP</code> Delete an existing table to nothing</li> <li>[x] <code>DELETE</code> Delete records from a table based on conditions</li> <li>[x] <code>INSERT</code> Insert a new record into a table</li> <li>[x] <code>UPDATE</code> Update records in a table based on conditions</li> <li>[x] <code>SWAP</code> Swap values between fields based on conditions</li> <li>[x] <code>DUPLICATE</code> Duplicate records based on conditions</li> <li>[x] <code>LOAD</code> Load a new table from a file</li> <li>[ ] <code>COPYTABLE</code> Copy a table to create new table with same contents and different name</li> <li>[ ] <code>TRUNCATE</code> Clear all data from a table</li> </ul> <p>Accidentally, <code>COPYTABLE</code> and <code>TRUNCATE</code> were not implemented in beginning, so these two functions are discovered and implemented during milestone 2 testing. During testing, there were some segmentation error issues required for debugging.</p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#milestone-2-multi-threaded-version-of-the-database-program","title":"Milestone 2 : Multi-threaded version of the database program,","text":"<p>Input from the standard input, three-quarter of the instructions implemented;</p> <p>For the following, efficient algorithm design for handling multiple parallel query execution was key concept. There was need to decide Data structure (Bitmap, Balanced Tree, Hash Table, etc...)</p> <p>1. Multi-Threading Implementation: - [x] Introduced C++ threading libraries including <code>&lt;thread&gt;</code>, <code>&lt;mutex&gt;</code>, <code>&lt;condition_variable&gt;</code>. - [x] Ensured thread synchronization using mutexes and condition variables. - [x] Implemented a basic thread pool to manage query execution.</p> <p>2. Optimization of Read-Only Queries: - [x] Ensured thread-safe execution for queries like <code>SELECT</code>, <code>SUM</code>, <code>COUNT</code>, <code>MIN</code>, <code>MAX</code>. - [x] Benchmarked performance improvements over the single-threaded implementation.</p> <p>3. Partial Write Functionality: - [x] Implemented three-quarters of write-based instructions including <code>INSERT</code>, <code>DELETE</code>, and <code>UPDATE</code>. - [x] Implemented missing functions <code>COPYTABLE</code> and <code>TRUNCATE</code></p> <p>4. Testing and Debugging: - [x] Conducted multi threaded stress tests to identify race conditions and deadlocks. - [x] Debugged segmentation fault issues encountered during concurrent execution.</p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#milestone-3-final-submission-fully-working-database-program","title":"Milestone 3 : Final submission, fully working database program","text":"<p>Supporting multi-threading, all required instruction, and command line arguments;</p> <p>1. Finalize Write-Only Queries: - [x] Completed implementation of all write-based queries, including <code>ADD</code>, <code>SUB</code>, <code>DUPLICATE</code>, and <code>SWAP</code>.</p> <p>2. Add Command-Line Arguments: - [x] Implemented <code>--threads=&lt;int&gt;</code>: Allows users to specify the number of threads or auto-detect available CPU cores when set to 0. - [x] Implemented <code>--listen &lt;filename&gt;</code>: Enables file-based query input.</p> <p>3. Performance Optimization: - [x] Profiled the system for bottlenecks and improved thread scheduling. - [x] Conducted final performance benchmarks to ensure superior efficiency compared to the single-threaded version.</p> <p>4. Comprehensive Testing: - [x] Validated correctness using the provided test suite and custom test scripts. - [x] Ran stress tests on the school server to ensure stability under heavy workloads.</p> <p>5. Documentation: - [x] Provided detailed explanations of:   - System Design: Architectural overview of LemonDB.   - Threading Model: Thread pool design, synchronization strategies, and concurrency handling.   - Optimizations: Performance improvements and challenges resolved.   - Testing Results: Summary of test outcomes and benchmarks.</p> <p>Final programming and documentation continued until the deadline date.</p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#changelogs-meeting-records","title":"Changelogs &amp; Meeting records","text":""},{"location":"ECE482FA24/ECE482P2/RoadMap/#meeting-1-20241023","title":"Meeting 1: 2024.10.23","text":"<p>Discussion: Our team met each other and briefly discussed the whole project schema. Our short term goal was following, to finish basic setup as soon as possible. - Fix source code compilation - Write comment for part of source code - Start writing milestone 1 - Initiate the Agile Development steps on gitea</p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#remarkable-change-logs","title":"Remarkable Change Logs","text":"<ul> <li>AddQuery/SubQuery: Added implementation for handling addition/subtraction operations.</li> <li>CountQuery: Added implementation for counting entries.</li> <li>DeleteQuery: Added implementation for deleting records.</li> <li>DuplicateQuery: Added implementation for duplicating records.</li> <li>InsertQuery: Added implementation for inserting new rows.</li> <li>MaxQuery/MinQuery: Added implementation or finding maxima/minima.</li> <li>SelectQuery: Added implementation for accessing data in a table.</li> <li>SumQuery: Added implementation for summing records.</li> <li>SwapQuery: Added implementation for swapping values</li> <li> <p>UpdateQuery: Added implementation for updating data in a table</p> </li> <li> <p>Table Management:</p> </li> <li>CopyTableQuery: Added implementation for copy a table.</li> <li>DropTableQuery: Added implementation for deleting an existing table.</li> <li>DumpTableQuery: Added implementation for dumping exisiting table to file.</li> <li>TruncateTableQuery: Added implementation for clear an existing table.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#meeting-2-20241030","title":"Meeting 2: 2024.10.30","text":"<p>Discussion: First step is to remove useless files from original LemonDB source code. Our team accomplished goals in previous meeting and target to do. - Write comment for part of source code - Start writing milestone 1</p> <p>Now, implement all query execution functions for single thread.</p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#remarkable-change-logs_1","title":"Remarkable Change Logs","text":"<ul> <li>QueryExecuter, QueryExecuterHelper, QueryThreadPool: Introduced thread pool management. Changed the logic of query execution from single-thread to multithread, used a thread pool to manage the thread.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#meeting-3-20241110","title":"Meeting 3: 2024.11.10","text":"<p>Discussion: - Milestone 1 single-threaded functions were mostly completed but required passing all test cases to mark true completion. - Focus shifted to designing an efficient algorithm for handling parallel query execution. Key considerations included:   - Selection of data structures (Bitmap, Balanced Tree, Hash Table, etc.) for concurrent data access.   - Synchronizing shared resources to prevent race conditions and ensure thread safety.</p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#remarkable-change-logs_2","title":"Remarkable Change Logs","text":"<ul> <li>System Optimization:</li> <li>Improved resource handling for better memory and time efficiency during query execution.</li> <li>Improved mutex handling for better thread safety.</li> <li>Refined algorithms for query operations to reduce overhead and improve response times.</li> </ul>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#meeting-4-20241117","title":"Meeting 4: 2024.11.17","text":"<p>Discussion: - Successfully implemented thread pool for efficient multi-threaded query execution. - Identified the need to create custom test scripts for testing the program on the school server. - Evaluated and improved thread locking mechanisms to resolve performance bottlenecks.</p>"},{"location":"ECE482FA24/ECE482P2/RoadMap/#navigation_1","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>System Design</li> <li>Performance Improvements</li> <li>Multi-threading Challenges</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Design/","title":"System Design","text":"<p>Software design schema structure overview and description</p>"},{"location":"ECE482FA24/ECE482P3/Design/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>Risk Assessment</li> <li>Performance Analysis</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Design/#software-architecture-overview","title":"Software Architecture Overview","text":"<p>The project implements a lottery scheduling algorithm in kernel space using eBPF.  This section provides an overview of the system's key components, workflow, and design considerations.  The architecture leverages modern kernel technologies to achieve a balance of performance and extensibility.</p>"},{"location":"ECE482FA24/ECE482P3/Design/#system-workflow","title":"System Workflow","text":"<ul> <li>Run <code>src/start.sh</code> to start the project. </li> <li>Queue and manage processes by shared dispatch queues (DSQ) </li> <li>Allocate and schedule tickets by custom scheduler </li> <li>Use kernel probes and eBPF tracing tools to monitor task scheduling and performance in real time.  </li> </ul>"},{"location":"ECE482FA24/ECE482P3/Design/#lottery-scheduling-algorithm","title":"Lottery Scheduling Algorithm","text":"<ol> <li>Assign tickets to each process based on priority.</li> <li>Build a ticket pool with entries proportional to ticket counts.</li> <li>Select a random ticket to choose the next process to run.</li> <li>Allocate a time slice to the chosen process.</li> <li>Re queue or terminate the process based on its state. </li> </ol>"},{"location":"ECE482FA24/ECE482P3/Design/#key-components","title":"Key Components","text":""},{"location":"ECE482FA24/ECE482P3/Design/#bootloader","title":"Bootloader","text":"<p>A bootloader is a small program that loads the operating system (OS) into memory when a computer or device is powered on or reset. It acts as the initial step in the booting process, ensuring that the necessary system files are loaded for the OS to function properly.</p>"},{"location":"ECE482FA24/ECE482P3/Design/#ebpf-extended-berkeley-packet-filter","title":"eBPF (Extended Berkeley Packet Filter)","text":"<p>eBPF is an advanced kernel technology that allows users to run secure and high-performance programmable code within the operating system kernel. Originally, eBPF was designed for network packet filtering. However, it continuously evolved to support use cases in monitoring, security, networking, and performance optimization. eBPF programs are verified and loaded into the kernel, enabling functionality extension without modifying the kernel source code, all while maintaining low overhead and high security.</p>"},{"location":"ECE482FA24/ECE482P3/Design/#ebpf-events-monitoring","title":"eBPF Events monitoring","text":"<p>Following <code>bpftrace</code> command can be used to monitor scheduling events in real time</p> <pre><code>sudo bpftrace -e 'kprobe:schedule { printf(\"Scheduled Process : %s\\\\n\", comm); }'\n</code></pre> <p><code>kprobe:schedule</code> attach kernel probe to <code>schedule</code> function in kernel.</p> <p>This single line can leverage eBPF to monitor events.  </p>"},{"location":"ECE482FA24/ECE482P3/Developer/","title":"Developer Guide","text":"<p>Installation and Testing Guideline </p>"},{"location":"ECE482FA24/ECE482P3/Developer/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>Risk Assessment</li> <li>Performance Analysis</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Developer/#implement-in-user-space","title":"Implement in user space","text":"<p>First of all, we implemented the idea of lottery scheduling in user space as our first demonstration. Processes are assigned tickets based on their nice values. The process with more tickets has a higher chance of being selected.</p>"},{"location":"ECE482FA24/ECE482P3/Developer/#one-line-ebpf","title":"One-Line eBPF","text":"<p>Focus on basic use cases like system monitoring calls or capture process scheduling events. </p> <pre><code>sudo bpftrace -e 'kprobe:schedule { printf(\"Scheduled Process: %s\\\\n\", comm); }'\n</code></pre>"},{"location":"ECE482FA24/ECE482P3/Developer/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux Operating System </li> <li><code>GCC</code> (GNU Compiler Collection) </li> <li><code>make</code> for build automation</li> <li><code>git</code> for version control</li> <li>Optional: <code>valgrind</code> for memory debugging</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Developer/#environment-setup","title":"Environment Setup","text":"<p>Clone Repository  <pre><code>$ git clone ssh://git@focs.ji.sjtu.edu.cn:2222/ece482-24fa/p3team-02.git  \n$ cd p3team-02\n</code></pre> Build Project  <pre><code>$ cd src\n$ make vmlinux.h \n$ make NAME=simple_scheduler obj\n</code></pre> Start scheduler demo  <pre><code>$ ./start.sh\n$ sudo cat /sys/kernel/debug/tracing/trace_pipe\n</code></pre> Stop scheduler demo  <pre><code>$ ./stop.sh\n</code></pre> Clean compiled files  <pre><code>$ make NAME=simple_scheduler clean\n$ make \n</code></pre> Then, recompile is successful. </p> <pre><code>make vmlinux.h \nmake NAME=simple_scheduler obj\n\nsudo ./start.sh\n\nsudo cat /sys/kernel/debug/tracing/trace_pipe\n\nsudo ./stop.sh\n\nmake NAME=simple_scheduler clean\n</code></pre> <p>This will be final. </p>"},{"location":"ECE482FA24/ECE482P3/Developer/#debug-and-test","title":"Debug and Test","text":"<p>Use <code>trace_pipe</code> for process monitoring  <pre><code>sudo cat /sys/kernel/debug/tracing/trace_pipe\n</code></pre> Use debugging tools like <code>valgrind</code> for memory safety.  <pre><code>valgrind ./start.sh\n</code></pre></p>"},{"location":"ECE482FA24/ECE482P3/Home/","title":"Project 3 Lottery Scheduling","text":"<p>2024FA ECE4820 Introduction to Operating Systems</p>"},{"location":"ECE482FA24/ECE482P3/Home/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>Risk Assessment</li> <li>Performance Analysis</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Home/#team-members-roles-and-contributions","title":"Team Members, Roles and contributions","text":"<p>Jae Heung Park</p> <ul> <li>Documentation of <code>README</code> file and Wiki for project release.</li> <li>Supportive contribution to the project with effort</li> </ul> <p>He Wentao</p> <ul> <li>Project basic setup from given source code and functions.</li> <li>Compiling and debugging codes to run test cases in local environment.</li> <li>Project structure design and plan</li> </ul> <p>Wang Rui</p> <ul> <li>Project basic setup from given source code and functions.</li> <li>Compiling and debugging codes to run test cases in local environment.</li> <li>Project structure design and plan</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Home/#overview-of-ebpf-implementation","title":"Overview of eBPF implementation","text":"<p>For now, since we have get the idea of how to implement the lottery scheduler in user space.  The next thing to do is to implement it in kernel space with eBPF.  We referred to the websites and resources provided in wiki, especially in the <code>sched-ext</code> repo. By reading through some sample codes in this repo and refer to what we have learned in the lab,  we noticed that we need to implement <code>enqueue</code>, <code>dispatch</code> and <code>init</code> these three functions.</p>"},{"location":"ECE482FA24/ECE482P3/Home/#key-functions","title":"Key Functions","text":"<ul> <li><code>enqueue</code>: Adds tasks to dispatch queue.</li> <li><code>dispatch</code>: Selects tasks for execution based on ticket values.</li> <li><code>init</code>: Initializes the scheduler and shared dispatch queues.</li> </ul> <pre><code>struct sched_ext_ops sched_ops = {\n    .enqueue = (void *)sched_enqueue,\n    .dispatch = (void *)sched_dispatch,\n    .init = (void *)sched_init,\n    .flags = SCX_OPS_ENQ_LAST | SCX_OPS_KEEP_BUILTIN_IDLE,\n    .name = \"p3_scheduler\"};\n</code></pre>"},{"location":"ECE482FA24/ECE482P3/Home/#ticket-management","title":"Ticket Management","text":"<p>The first problem we met with was how to store all the ticket information.  Since we cannot modify a structure called <code>task_struct</code>,  so we use a map with hash to store all the ticket information:</p> <pre><code>struct\n{\n    __uint(type, BPF_MAP_TYPE_HASH);\n    __type(key, __u32); // task UID\n    __type(value, __u64);\n    __uint(max_entries, 1024);\n} task_tickets_map SEC(\".maps\");\n</code></pre>"},{"location":"ECE482FA24/ECE482P3/Home/#shared-dispatch-queues","title":"Shared Dispatch Queues","text":"<p>Next, we initialized two shared Dispatch Queue (DSQ). A shared dispatch queue used to coordinate the scheduling of different tasks.  It typically acts as a buffer for tasks or an intermediary for task scheduling, allowing interaction between different schedulers or task producers and consumers.</p> <pre><code>s32 BPF_STRUCT_OPS_SLEEPABLE(sched_init)\n{\n    bpf_printk(\"Scheduler initialized with DSQ ID: %d\\n\", SHARED_DSQ_ID);\n    int create_1 = scx_bpf_create_dsq(SHARED_DSQ_ID, -1);\n    int create_2 = scx_bpf_create_dsq(WINNER_DSQ_ID, -1);\n    return create_1 &amp;&amp; create_2;\n}\n</code></pre> <p>As you can see, it's very simple to implement.</p> <p>When enqueue tasks, we noticed that there is a variable called <code>enq_flags</code>  and we think that it's used for signal the priority of different tasks.  So we use it to help decide the number of tickets.  Basically, we first generate a random number between 1 and 100 as the ticket number,  then for high priority, we add 100 more; and for low priority, we minus 100.  As you can see, the ticket number signals the priority.</p> <p>When choosing which task to run, we get a random number, than find the corresponding task.</p> <p>At last, we want to talk about something about discussion.  First of all, we noticed that <code>bpf_task_from_pid</code> has different performance on different version of kernel.  For example, it works fine on version 6.12 on ubuntu while it meets some problem on version 6.12 on arch.  To avoid problems, we have to use multiple maps to store information like slice, task ID.  But we eventually managed to make it work.</p> <p>Another thing we want to discuss is about the ticket method.  For now, we tried to implement <code>nice</code> with <code>enq_flags</code> variable to decide the ticket number.  But we only had time to implement a rough one, it can be more precise.</p> <p>Moreover, we noticed that our scheduler fails after running for a while.  The performance is like the whole computer stucks and then our program was kicked out by the kernel.</p>"},{"location":"ECE482FA24/ECE482P3/Performance/","title":"System Design","text":"<p>Software design schema structure overview and description</p>"},{"location":"ECE482FA24/ECE482P3/Performance/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>Risk Assessment</li> <li>Performance Analysis</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Performance/#lottery-scheduling","title":"Lottery Scheduling","text":"<p>Lottery Scheduling is a probabilistic scheduling algorithm used in multi-tasking operating systems, particularly for CPU resource allocation. The core idea is to assign a number of \"lottery tickets\" to each process, and the process that wins the lottery (i.e., the one with the randomly drawn ticket) is granted CPU time. This approach ensures fair distribution of CPU time, with the option to adjust the number of tickets to prioritize certain processes.</p> <ol> <li>Ticket Allocation: Each process is assigned a certain number of tickets based on its weight or priority. The more tickets one process have, the higher chance to be scheduled.</li> <li>Randomness: CPU allocation is determined by a random lottery draw, ensuring fairness in scheduling.</li> <li>Priority Adjustment: The number of tickets can be adjusted to change the process's priority. More tickets mean higher priority.</li> <li>Use Case: Ideal for scenarios where fair resource distribution and flexible priority adjustment are needed.</li> </ol>"},{"location":"ECE482FA24/ECE482P3/Risk/","title":"Project 3 Lottery Scheduling Risk Assessment","text":"<p>2024FA ECE4820J Introduction to Operating Systems</p>"},{"location":"ECE482FA24/ECE482P3/Risk/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>Risk Assessment</li> <li>Performance Analysis</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Risk/#risk-categories","title":"Risk Categories","text":""},{"location":"ECE482FA24/ECE482P3/Risk/#1-technical-risks","title":"1. Technical Risks","text":"<ul> <li> <p>Complexity of Algorithm: Difficulty in implementing a fair and efficient lottery scheduling algorithm. Mitigation: Break down tasks and perform early unit tests.</p> </li> <li> <p>Performance under Load: The algorithm may degrade as the number of processes increases. Mitigation: Test with varying loads and optimize ticket distribution.</p> </li> </ul>"},{"location":"ECE482FA24/ECE482P3/Risk/#2-operational-risks","title":"2. Operational Risks","text":"<ul> <li> <p>Time Constraints: Limited time may delay progress. Mitigation: Use a structured timeline and monitor progress regularly.</p> </li> <li> <p>Testing Complexity: Difficulty in creating comprehensive test cases for a probabilistic algorithm. Mitigation: Develop a broad set of test cases and automate tests.</p> </li> </ul>"},{"location":"ECE482FA24/ECE482P3/Risk/#3-human-resource-risks","title":"3. Human Resource Risks","text":"<ul> <li>Lack of Expertise: Team members may be unfamiliar with eBPF or kernel programming. Mitigation: Allocate time for training and practice.</li> </ul>"},{"location":"ECE482FA24/ECE482P3/Risk/#4-external-risks","title":"4. External Risks","text":"<ul> <li>System Compatibility: Compatibility issues with the testing environment. Mitigation: Ensure portability and test on multiple platforms, like ubuntu, arch, etc.</li> </ul>"},{"location":"ECE482FA24/ECE482P3/RoadMap/","title":"Project 3 Lottery Scheduling RoadMap","text":"<p>2024FA ECE4820 Introduction to Operating Systems</p>"},{"location":"ECE482FA24/ECE482P3/RoadMap/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Project Roadmap</li> <li>Risk Assessment</li> <li>Performance Analysis</li> <li>Developer Guide</li> </ul>"},{"location":"ECE482FA24/ECE482P3/RoadMap/#documentation-plan","title":"Documentation Plan","text":"<ol> <li>Lottery Scheduling overview, key principles</li> <li>Code structure design choices and explanations</li> <li>Testing tools and methodologies in function, performance, edge cases</li> <li>Test result summary and performance analysis of throughput and latency</li> </ol>"},{"location":"ECE482FA24/ECE482P3/RoadMap/#development-strategies","title":"Development Strategies","text":""},{"location":"ECE482FA24/ECE482P3/RoadMap/#task-list","title":"Task List","text":"<ol> <li>Lottery Scheduling - 6 hours</li> <li>Solve Simple Investigation Questions - 1 hours</li> <li>Test Program for Lottery - 15 hours</li> </ol>"},{"location":"ECE482FA24/ECE482P3/RoadMap/#1-lottery-scheduling","title":"1. Lottery Scheduling","text":"<ul> <li>Action Plan:</li> <li>Study the basic principles of lottery scheduling and its implementation.</li> <li>Write the initial scheduling algorithm code and test its performance under various loads.</li> <li> <p>Debug and optimize the code to ensure stability and efficiency in a multitasking environment.</p> </li> <li> <p>Difficulty Evaluation:   High. Our major task</p> </li> <li> <p>Time Estimation:   Estimated to take 6 hours:  </p> </li> <li>Research and design: 1 hours  </li> <li>Code implementation: 3 hours  </li> <li>Debugging and optimization: 2 hours</li> </ul>"},{"location":"ECE482FA24/ECE482P3/RoadMap/#2-test-program-for-lottery","title":"2. Test Program for Lottery","text":"<ul> <li>Action Plan:</li> <li>Write test cases to cover different scheduling scenarios.</li> <li>Run the tests and record the results to verify the correctness of the lottery scheduling algorithm.</li> <li> <p>Conduct performance testing to ensure the algorithm performs well under different loads.</p> </li> <li> <p>Difficulty Evaluation:   Medium. Would be very fast if our original design is good enough.</p> </li> <li> <p>Time Estimation:   Estimated to take 2 hours:  </p> </li> <li>Write test cases: 0.5 hours  </li> <li>Execute tests and record results: 1.5 hours  </li> <li>Debugging and fixing issues: it depends</li> </ul>"},{"location":"ECE482FA24/ECE482P3/RoadMap/#total-time-estimation","title":"Total Time Estimation:","text":"<ul> <li>Lottery Scheduling: 6 hours  </li> <li>Solve Simple Investigation Questions: [ ] hours  </li> <li>Test Program for Lottery: 2 hours  </li> </ul> <p>Total: [] hours</p>"},{"location":"Game_Engine/AR250426/","title":"Windows API Programming","text":""},{"location":"Game_Engine/AR250426/#introduction","title":"Introduction","text":"<p>Understanding Windows API programming is essential for C++ game developers working in the Windows environment. This article breaks down fundamental concepts of Windows application development including process handling, window creation, resource management, and message loops. These concepts form the foundation of Windows desktop application development and are particularly relevant for game development.</p>"},{"location":"Game_Engine/AR250426/#process-handles-and-instances","title":"Process Handles and Instances","text":"<p>When developing Windows applications, understanding process handles and instances is crucial. Here's what you need to know:</p>"},{"location":"Game_Engine/AR250426/#hinstance-and-process-ids","title":"HINSTANCE and Process IDs","text":"<ul> <li><code>HINSTANCE</code> represents a handle to an instance, which is essentially the launched process ID.</li> <li>When you start a program like <code>mspaint.exe</code> multiple times, each instance gets its own process ID.</li> </ul>"},{"location":"Game_Engine/AR250426/#multiple-instance-detection","title":"Multiple Instance Detection","text":"<p>In older Windows systems, you could detect previous instances using:</p> <pre><code>__IN_ HINSTANCE hInstance       // Current process ID \n_In_opt_ HINSTANCE hPrevInstance // Previous instance handle\n</code></pre> <p>If you wanted to prevent multiple launches of your application (common in game clients):</p> <pre><code>if(nullptr != hPrevInstance) {\n    // Another instance exists\n    return 0; // Terminate this instance\n}\n</code></pre> <p>However, this mechanism is obsolete in modern Windows. Each process now operates in its own virtual memory space (approximately 150-180 MB of RAM), and Windows OS manages memory mapping. This means processes can't easily find or access each other even if they're instances of the same executable.</p>"},{"location":"Game_Engine/AR250426/#resource-management","title":"Resource Management","text":"<p>Resources are non-executable data included with your application, such as strings, icons, and menus.</p>"},{"location":"Game_Engine/AR250426/#string-tables","title":"String Tables","text":"<p>String tables let you store text values in your application's resources:</p> <pre><code>IDS_APP_TITLE    103    WinAPI_56  \nIDC_WINAPI56     109    WinAPI_56\n</code></pre> <p>These values can be accessed in code using:</p> <pre><code>LoadStringW(hInstance, IDS_APP_TITLE, szTitle, 100);\n</code></pre> <p>When an application launches: 1. The process is loaded into memory 2. Resources (including string tables) are loaded with it 3. Resource values can be accessed via their IDs</p>"},{"location":"Game_Engine/AR250426/#why-use-resource-strings","title":"Why Use Resource Strings?","text":"<p>While it's possible to hardcode strings directly:</p> <pre><code>wchar_t szWindowClass[100] = L\"WINAPI_56\";\n</code></pre> <p>Resources provide several advantages: - Centralized management of strings - Easier localization - Separation of code and content</p>"},{"location":"Game_Engine/AR250426/#window-registration-and-creation","title":"Window Registration and Creation","text":"<p>Creating windows involves two key steps: registering a window class and instantiating windows of that class.</p>"},{"location":"Game_Engine/AR250426/#window-class-registration","title":"Window Class Registration","text":"<pre><code>WNDCLASSEXW wcex;\n// Fill window class options\nwcex.lpszClassName = szWindowClass; // Class name (key value)\nRegisterClassExW(&amp;wcex);\n</code></pre> <p>This registers a \"blueprint\" for your windows, defining their behavior and appearance. The <code>lpszClassName</code> acts as a key that identifies this window type.</p>"},{"location":"Game_Engine/AR250426/#window-creation","title":"Window Creation","text":"<pre><code>HWND hWnd = CreateWindow(szWindowClass, szTitle, ...);\n</code></pre> <p>Key parameters include: - Window class name - Window title - Style and appearance settings</p> <p>After creation, windows need to be made visible:</p> <pre><code>ShowWindow(hWnd, nCmdShow); // Make window visible (true) or hidden (false)\nUpdateWindow(hWnd);         // Apply the settings\n</code></pre>"},{"location":"Game_Engine/AR250426/#window-customization","title":"Window Customization","text":"<p>Additional customization options include: - Menu bars: Set via <code>wcex.lpszMenuName</code> - Icons: Set via <code>wcex.hIcon</code> - Cursors: Set via <code>wcex.hCursor</code></p> <p>These resources are typically defined in the application's resource files.</p>"},{"location":"Game_Engine/AR250426/#message-loops-and-event-handling","title":"Message Loops and Event Handling","text":"<p>Windows applications are event-driven, using message loops to process user input and system events.</p>"},{"location":"Game_Engine/AR250426/#message-structure","title":"Message Structure","text":"<pre><code>MSG msg = {}; // Structure to hold message information\n</code></pre> <p>The <code>MSG</code> structure holds information about: - Which window received the event - What type of event occurred (message ID) - Additional parameters specific to the event</p>"},{"location":"Game_Engine/AR250426/#traditional-message-loop","title":"Traditional Message Loop","text":"<p>The standard Windows message loop:</p> <pre><code>while(GetMessage(&amp;msg, nullptr, 0, 0)) {\n    // Handle shortcut key combinations\n    if(!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg)) {\n        TranslateMessage(&amp;msg); \n        DispatchMessage(&amp;msg);\n    }\n}\n</code></pre> <p>This is known as reactive programming - the application waits for events and reacts to them.</p>"},{"location":"Game_Engine/AR250426/#how-getmessage-works","title":"How GetMessage Works","text":"<ul> <li><code>GetMessage</code> retrieves messages from the application's message queue</li> <li>If the queue is empty, <code>GetMessage</code> pauses execution until a message arrives</li> <li><code>GetMessage</code> returns false when it retrieves a <code>WM_QUIT</code> message (value 0x0012 or 18 in decimal)</li> <li>When false is returned, the loop ends and the application terminates</li> </ul>"},{"location":"Game_Engine/AR250426/#game-programming-peekmessage-alternative","title":"Game Programming: PeekMessage Alternative","text":"<p>Games can't just wait for user input - they need to run continuously. Instead of <code>GetMessage</code>, games typically use <code>PeekMessage</code>:</p> <pre><code>while(running) {\n    // Check for messages but don't wait if none exist\n    if(PeekMessage(&amp;msg, nullptr, 0, 0, PM_REMOVE)) {\n        if(msg.message == WM_QUIT) {\n            running = false;\n        } else {\n            TranslateMessage(&amp;msg);\n            DispatchMessage(&amp;msg);\n        }\n    }\n\n    // Game logic runs here, every frame\n    UpdateGame();\n    RenderFrame();\n}\n</code></pre> <p>The key differences between <code>GetMessage</code> and <code>PeekMessage</code>:</p> <ol> <li><code>GetMessage</code> waits if the message queue is empty; <code>PeekMessage</code> returns immediately</li> <li><code>GetMessage</code> returns false for <code>WM_QUIT</code>; <code>PeekMessage</code> returns true if any message was retrieved</li> <li><code>PeekMessage</code> allows the game loop to run continuously</li> </ol>"},{"location":"Game_Engine/AR250426/#forward-declarations-and-global-variables","title":"Forward Declarations and Global Variables","text":"<p>The code example includes some C/C++ programming concepts worth noting:</p>"},{"location":"Game_Engine/AR250426/#forward-declarations","title":"Forward Declarations","text":"<pre><code>// Function forward declarations\nint Add(int a, int b);\nint Sub(int a, int b);\nint Mul(int a, int b);\nint Div(int a, int b);\n</code></pre> <p>Forward declarations tell the compiler about functions before they're fully defined, typically in header files.</p>"},{"location":"Game_Engine/AR250426/#global-and-static-variables","title":"Global and Static Variables","text":"<pre><code>// Static global variable - only available in this file\nstatic int g_Global = 0;\n\n// Global variable accessible from all files\nint g_A = 0;\n\nint main() {\n    // Static local variable - retains value between function calls\n    static int iStatic = 0;\n\n    g_Global = 200;\n    //g_A = 100;\n\n    // Function calls\n    int i = 0;\n    i = Add(1, 9);\n    i = Sub(1, 9);\n    i = Mul(1, 9);\n    i = Div(1, 9);\n    Func();\n\n    return 0;\n}\n</code></pre> <ul> <li>Static global variables (prefixed with <code>static</code>) are only accessible within the file where they're defined</li> <li>Global variables without <code>static</code> can be accessed from any file (with proper external declarations)</li> <li>Static local variables retain their values between function calls</li> </ul>"},{"location":"Game_Engine/AR250426/#interview-preparation-questions","title":"Interview Preparation Questions","text":"<p>Based on this material, here are some questions you might encounter in a C++ game programmer interview:</p> <ol> <li> <p>Basic Windows Creation: Explain the process of creating a window in a Windows application.</p> </li> <li> <p>Message Loop Mechanics: What's the difference between <code>GetMessage</code> and <code>PeekMessage</code>, and why would you choose one over the other for game development?</p> </li> <li> <p>Resource Management: How would you store and access string resources in a Windows application?</p> </li> <li> <p>Multiple Instance Prevention: How would you prevent multiple instances of your game from running simultaneously?</p> </li> <li> <p>Game Loop Implementation: Design a basic game loop that handles Windows messages while ensuring continuous gameplay.</p> </li> <li> <p>Memory Management in Windows: Explain how process memory is allocated and managed in modern Windows operating systems.</p> </li> <li> <p>Event-Driven Programming: Describe the event-driven programming model used in Windows applications and how it differs from sequential programming.</p> </li> </ol>"},{"location":"Game_Engine/AR250426/#conclusion","title":"Conclusion","text":"<p>Understanding Windows API programming is essential for C++ game developers targeting the Windows platform. The concepts of process handles, window creation, message loops, and resource management form the foundation of Windows application development. By mastering these concepts, you'll be well-prepared for technical interviews and have the knowledge needed to create efficient, responsive Windows games.</p> <p>Remember that modern game development often uses frameworks like DirectX, SDL, or game engines that abstract many of these low-level Windows details, but understanding the underlying mechanisms remains valuable for debugging, optimization, and specialized implementation needs.</p>"},{"location":"Game_Engine/AR250429/","title":"Message Loops and Engine Architecture","text":""},{"location":"Game_Engine/AR250429/#introduction","title":"Introduction","text":"<p>Understanding Windows API programming fundamentals and engine architecture is essential for C++ game developers. While modern game development often relies on established game engines, mastering the underlying Windows message system and creating custom engine architectures provides a strong foundation for technical interviews and professional development. This guide explores Windows message processing and demonstrates how to build a basic game engine framework.</p>"},{"location":"Game_Engine/AR250429/#windows-message-system","title":"Windows Message System","text":"<p>At the core of Windows applications lies the message system. This event-driven architecture enables user interaction by processing input and system events.</p>"},{"location":"Game_Engine/AR250429/#getmessage-vs-peekmessage","title":"GetMessage vs. PeekMessage","text":"<p>Traditional Windows applications use <code>GetMessage</code> to retrieve messages from the application's message queue:</p> <pre><code>MSG msg;\nwhile (GetMessage(&amp;msg, nullptr, 0, 0)) {\n    if (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg)) {\n        TranslateMessage(&amp;msg);\n        DispatchMessage(&amp;msg);\n    }\n}\n</code></pre> <p>However, games require continuous execution even when no user input occurs. Here's how the two message-handling approaches differ:</p> Function Behavior Return Value Usage <code>GetMessage</code> Waits for messages, blocking execution <code>false</code> for WM_QUIT, <code>true</code> otherwise Regular applications <code>PeekMessage</code> Checks for messages without blocking <code>true</code> if message exists, <code>false</code> otherwise Games, real-time applications"},{"location":"Game_Engine/AR250429/#the-game-message-loop-pattern","title":"The Game Message Loop Pattern","text":"<p>Games typically implement this message loop pattern:</p> <pre><code>while (true) {\n    if (PeekMessage(&amp;msg, nullptr, 0, 0, PM_REMOVE)) {\n        if (msg.message == WM_QUIT) {\n            break; // Exit loop when WM_QUIT received\n        } else {\n            if (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))\n            {\n                TranslateMessage(&amp;msg);\n                DispatchMessage(&amp;msg);\n            }\n        }\n    } else {\n        // No message in queue - run game logic here\n        RunGame();\n    }\n}\n</code></pre> <p>This pattern ensures your game keeps running without interruption, while still processing Windows messages when they occur. In most frames, the <code>else</code> block runs (~99.99% of the time), allowing continuous gameplay.</p>"},{"location":"Game_Engine/AR250429/#message-processing-flow","title":"Message Processing Flow","text":"<p>When a message is retrieved:</p> <ol> <li><code>TranslateMessage</code> converts virtual-key messages to character messages</li> <li><code>DispatchMessage</code> sends the message to the window procedure function</li> </ol>"},{"location":"Game_Engine/AR250429/#window-procedure-function","title":"Window Procedure Function","text":"<p>Each window has a procedure function that handles its messages:</p> <pre><code>LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    switch (message) {\n    case WM_COMMAND:\n        // Handle menu commands\n        switch (LOWORD(wParam)) {\n        case IDM_ABOUT:\n            DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);\n            break;\n        case IDM_EXIT:\n            DestroyWindow(hWnd);\n            break;\n        default:\n            return DefWindowProc(hWnd, message, wParam, lParam);\n        }\n        break;\n\n    case WM_DESTROY:\n        PostQuitMessage(0); // This sends WM_QUIT to the message queue\n        break;\n\n    default:\n        return DefWindowProc(hWnd, message, wParam, lParam);\n    }\n    return 0;\n}\n</code></pre> <p>Key points: - <code>message</code> parameter contains the message type (like WM_COMMAND = 273) - <code>wParam</code> often contains additional information (like which menu item was clicked) - <code>DefWindowProc</code> handles standard window behavior when you don't need custom handling - <code>PostQuitMessage(0)</code> puts a WM_QUIT message in the queue, which will cause the message loop to exit</p>"},{"location":"Game_Engine/AR250429/#building-a-game-engine-framework","title":"Building a Game Engine Framework","text":"<p>Now let's examine how to build a simple game engine architecture that works with the Windows message system.</p>"},{"location":"Game_Engine/AR250429/#the-singleton-pattern","title":"The Singleton Pattern","text":"<p>Most engine subsystems use the Singleton pattern to ensure only one instance exists:</p> <pre><code>class Engine {\nprivate:\n    // Private constructor and destructor\n    Engine();\n    ~Engine();\n\n    // Delete copy constructor and assignment operator\n    Engine(const Engine&amp; _Other) = delete;\n    Engine&amp; operator=(const Engine&amp; _Other) = delete;\n\npublic:\n    // Static instance getter\n    static Engine* GetInst() {\n        static Engine mgr;\n        return &amp;mgr;\n    }\n\n    // Engine methods...\n};\n</code></pre> <p>This pattern has several key characteristics: - Private constructor prevents external instantiation - Static method returns the single instance - Copy constructor and assignment operator are deleted to prevent duplication</p> <p>For convenience, you can create a macro to generate singleton code:</p> <pre><code>#define SINGLE(ClassName) \\\npublic: \\\n    static ClassName* GetInst() { \\\n        static ClassName mgr; \\\n        return &amp;mgr; \\\n    } \\\nprivate: \\\n    ClassName(); \\\n    ~ClassName(); \\\n    ClassName(const ClassName&amp; _Other) = delete; \\\n    ClassName&amp; operator=(const ClassName&amp; _Other) = delete;\n</code></pre> <p>Then use it like this:</p> <pre><code>class Engine {\n    SINGLE(Engine)\n\n    // Engine methods...\n};\n</code></pre>"},{"location":"Game_Engine/AR250429/#engine-class-implementation","title":"Engine Class Implementation","text":"<p>The Engine class manages core functionality including window handling and rendering:</p> <pre><code>class Engine {\n    SINGLE(Engine)\n\nprivate:\n    HINSTANCE m_hInst;       // Process handle\n    HWND m_hMainWnd;         // Main window handle\n    POINT m_Resolution;      // Window resolution\n    HDC m_MainDC;            // Device context for rendering\n\npublic:\n    void Init(HINSTANCE _Inst, HWND _hWnd, UINT _Width, UINT _Height);\n    void Progress();         // Main game loop function\n};\n</code></pre> <p>The initialization method sets up the engine:</p> <pre><code>void Engine::Init(HINSTANCE _Inst, HWND _hWnd, UINT _Width, UINT _Height)\n{\n    m_hInst = _Inst;\n    m_hMainWnd = _hWnd;\n    m_Resolution = POINT{(LONG)_Width, (LONG)_Height};\n\n    // Position and size the window\n    SetWindowPos(m_hMainWnd, nullptr, 10, 10, m_Resolution.x, m_Resolution.y, 0);\n\n    // Get device context for rendering\n    m_MainDC = GetDC(m_hMainWnd);\n}\n</code></pre> <p>The constructor initializes members to safe defaults:</p> <pre><code>Engine::Engine() :\n    m_hInst(nullptr),\n    m_hMainWnd(nullptr),\n    m_Resolution{},\n    m_MainDC(nullptr)\n{\n}\n</code></pre> <p>The destructor releases resources:</p> <pre><code>Engine::~Engine()\n{\n    if (m_MainDC != nullptr) {\n        ReleaseDC(m_hMainWnd, m_MainDC);\n    }\n}\n</code></pre> <p>The Progress method contains game logic and rendering:</p> <pre><code>void Engine::Progress()\n{\n    // Example: Draw a rectangle\n    Rectangle(m_MainDC, 200, 200, 300, 300);\n\n    // Game update and rendering code would go here\n}\n</code></pre>"},{"location":"Game_Engine/AR250429/#integrating-with-the-windows-message-loop","title":"Integrating with the Windows Message Loop","text":"<p>Here's how to integrate the Engine with the Windows message loop:</p> <pre><code>int APIENTRY wWinMain(_In_ HINSTANCE hInstance,\n                      _In_opt_ HINSTANCE hPrevInstance,\n                      _In_ LPWSTR    lpCmdLine,\n                      _In_ int       nCmdShow)\n{\n    // Register window class and create window...\n    HWND hWnd = CreateWindow(...);\n\n    // Initialize the engine\n    Engine::GetInst()-&gt;Init(hInstance, hWnd, 1280, 768);\n\n    MSG msg;\n    while (true) {\n        if (PeekMessage(&amp;msg, nullptr, 0, 0, PM_REMOVE)) {\n            if (msg.message == WM_QUIT) {\n                break;\n            }\n\n            TranslateMessage(&amp;msg);\n            DispatchMessage(&amp;msg);\n        } else {\n            // Run game logic when no messages are waiting\n            Engine::GetInst()-&gt;Progress();\n        }\n    }\n\n    return (int)msg.wParam;\n}\n</code></pre>"},{"location":"Game_Engine/AR250429/#using-precompiled-headers","title":"Using Precompiled Headers","text":"<p>To improve compilation speed, use precompiled headers for commonly included files:</p> <ol> <li> <p>Create a <code>pch.h</code> file with common includes: <pre><code>#pragma once\n\n#include &lt;windows.h&gt;\n// Other common includes\n#include \"define.h\"  // For our singleton macro\n</code></pre></p> </li> <li> <p>Create a corresponding <code>pch.cpp</code> that includes it: <pre><code>#include \"pch.h\"\n</code></pre></p> </li> <li> <p>Configure Visual Studio to use precompiled headers:</p> </li> <li>Right-click on the project \u2192 Properties</li> <li>C/C++ \u2192 Precompiled Headers</li> <li>Set \"Precompiled Header\" to \"Use (/Yu)\"</li> <li>Set \"Precompiled Header File\" to \"pch.h\"</li> <li> <p>For <code>pch.cpp</code> specifically, set to \"Create (/Yc)\"</p> </li> <li> <p>Include <code>pch.h</code> at the top of all .cpp files: <pre><code>#include \"pch.h\"\n// Other includes...\n</code></pre></p> </li> </ol>"},{"location":"Game_Engine/AR250429/#drawing-with-device-context","title":"Drawing with Device Context","text":"<p>The Windows API provides functions to draw on a window using a Device Context (DC):</p> <pre><code>void Engine::Progress()\n{\n    // Clear background (optional)\n    RECT clientRect;\n    GetClientRect(m_hMainWnd, &amp;clientRect);\n    FillRect(m_MainDC, &amp;clientRect, (HBRUSH)GetStockObject(WHITE_BRUSH));\n\n    // Draw a rectangle\n    Rectangle(m_MainDC, 200, 200, 300, 300);\n\n    // Draw text\n    SetTextColor(m_MainDC, RGB(0, 0, 0));\n    SetBkMode(m_MainDC, TRANSPARENT);\n    TextOut(m_MainDC, 100, 100, L\"Hello, Game!\", 12);\n}\n</code></pre>"},{"location":"Game_Engine/AR250429/#interview-questions","title":"Interview Questions","text":"<p>Here are some potential interview questions related to this material:</p> <ol> <li> <p>Message Loop Question: Explain the difference between <code>GetMessage</code> and <code>PeekMessage</code>. Why would a game use <code>PeekMessage</code> instead of <code>GetMessage</code>?</p> </li> <li> <p>Singleton Pattern Question: What is the Singleton pattern and why is it commonly used in game engines? What are potential drawbacks?</p> </li> <li> <p>Memory Management Question: In the Engine class destructor, we call <code>ReleaseDC()</code>. Why is proper resource cleanup important in Windows programming?</p> </li> <li> <p>Architecture Question: Describe how you would structure a game engine to separate game logic from rendering and input handling.</p> </li> <li> <p>Window Procedure Question: What happens when a window receives a message? Describe the flow from user input to message handling.</p> </li> <li> <p>Practical Question: Write a Windows message loop suitable for a game that needs to run at 60 FPS.</p> </li> <li> <p>DeviceContext Question: What is a Device Context in Windows and how is it used for drawing?</p> </li> <li> <p>Advanced Question: How would you implement frame rate control in a Windows-based game using the architecture described?</p> </li> </ol>"},{"location":"Game_Engine/AR250429/#conclusion","title":"Conclusion","text":"<p>Understanding Windows message processing and engine architecture provides a strong foundation for C++ game development. While modern games often use established engines, knowing how these systems work under the hood is valuable for optimization, debugging, and technical interviews.</p> <p>The techniques covered here\u2014message loops, the Singleton pattern, window management, and basic rendering\u2014form building blocks that you can expand into more complex game engines. With this knowledge, you can build your own custom game frameworks or better understand existing engines.</p> <p>Remember that production-ready game engines have many additional components like resource management, input systems, scene graphs, physics, audio, and more sophisticated rendering. However, the architectural patterns described here scale to those more complex systems.</p>"},{"location":"Game_Engine/AR250430/","title":"WinAPI Actor Architecture and Rendering","text":""},{"location":"Game_Engine/AR250430/#introduction-to-actor-based-design","title":"Introduction to Actor-Based Design","text":"<p>In game development, effective architecture is crucial for creating maintainable and scalable systems. One of the most widespread patterns is the actor-based architecture, which serves as the foundation for many modern game engines like Unreal Engine and Unity.</p>"},{"location":"Game_Engine/AR250430/#understanding-actors-as-foundational-elements","title":"Understanding Actors as Foundational Elements","text":"<p>An Actor represents the minimum material unit in a game world. Rather than creating all game objects directly, we define a base Actor class from which more specific classes are derived. This approach leverages C++ polymorphism to create a flexible and extensible game architecture.</p> <p>The Actor base class typically cannot be instantiated directly - it's designed as an abstract class that provides common functionality while requiring derived classes to implement specific behaviors. This follows the principle that concrete objects in a game world are always specific entities (Player, Monster, Prop, etc.) rather than generic \"actors.\"</p>"},{"location":"Game_Engine/AR250430/#basic-actor-implementation","title":"Basic Actor Implementation","text":"<p>Let's examine a fundamental Actor class implementation:</p> <pre><code>class Actor \n{\nprivate: \n    // Position and scale represented as vectors\n    Vec2 m_Pos;\n    Vec2 m_Scale;\n\npublic: \n    // Position setter and getter\n    void SetPos(Vec2 _Pos)\n    {\n        m_Pos = _Pos; \n    }\n\n    // Scale setter and getter\n    void SetScale(Vec2 _Scale)\n    {\n        m_Scale = _Scale; \n    }\n\n    Vec2 GetPos()\n    {\n        return m_Pos; \n    }\n\n    Vec2 GetScale()\n    {\n        return m_Scale; \n    }\n\n    // Core functionality that all actors must implement\n    virtual void Tick() = 0;\n    virtual void Render(HDC _dc);\n};\n</code></pre>"},{"location":"Game_Engine/AR250430/#header-implementation-and-inline-functions","title":"Header Implementation and Inline Functions","text":"<p>A critical point to understand about the above implementation is the implications of defining functions within the header file. When functions are defined (implemented) directly in a header file, they are implicitly treated as inline functions.</p>"},{"location":"Game_Engine/AR250430/#what-are-inline-functions","title":"What are Inline Functions?","text":"<p>Inline functions are a compiler optimization where the function's code is inserted directly at the call site rather than generating an actual function call. This can improve performance for small, frequently called functions by eliminating the overhead of the function call mechanism.</p> <p>When a function is defined in a header file:</p> <ol> <li>The compiler treats it as an inline function</li> <li>The function's implementation is copied wherever it's called</li> <li>No separate function call is generated in the compiled code</li> </ol> <p>For example, when we call:</p> <pre><code>actor.SetPos(Vec2{10.0f, 10.0f});\n</code></pre> <p>The compiler effectively transforms this into:</p> <pre><code>actor.m_Pos = Vec2{10.0f, 10.0f};\n</code></pre> <p>This avoids the overhead of a function call, which includes: - Pushing parameters onto the stack - Jumping to the function code - Setting up the function's stack frame - Returning from the function - Cleaning up the stack</p>"},{"location":"Game_Engine/AR250430/#when-to-use-inline-functions","title":"When to Use Inline Functions","text":"<p>Inline functions are particularly beneficial when: 1. The function is small and simple 2. The function is called frequently 3. The function execution time is comparable to or less than the function call overhead</p> <p>Simple accessors and mutators (getters and setters) are excellent candidates for inline functions because they typically just return or assign a value.</p>"},{"location":"Game_Engine/AR250430/#cautions-with-inline-functions","title":"Cautions with Inline Functions","text":"<p>There are trade-offs to consider:</p> <ol> <li>Code Size Increase: Every place the function is called will contain a copy of the function code, potentially increasing the executable size</li> <li>Header File Bloat: Implementing complex functions in the header can make headers large and difficult to maintain</li> <li>Compilation Time: Changes to inline functions require recompiling all files that include the header</li> </ol> <p>For larger, more complex functions, it's generally better to provide only the declaration in the header and implement the function in a .cpp file.</p>"},{"location":"Game_Engine/AR250430/#custom-vector-implementation","title":"Custom Vector Implementation","text":"<p>For better precision in positioning and movement, we can implement a custom vector structure using floating-point values instead of integers:</p> <pre><code>struct Vec2 {\n    float x;\n    float y;\n\npublic: \n    // Default constructor initializes to zero\n    Vec2() : x(0.f), y(0.f) {}\n\n    // Parameterized constructor\n    Vec2(float _x, float _y) : x(_x), y(_y) {}\n};\n</code></pre> <p>Using floating-point values allows for smoother movement and more precise positioning than integer-based coordinates, which is especially important for game development where sub-pixel precision may be needed.</p>"},{"location":"Game_Engine/AR250430/#the-game-loop-tick-and-render","title":"The Game Loop: Tick and Render","text":"<p>In game development, a fundamental concept is the game loop, often divided into update (Tick) and rendering phases.</p>"},{"location":"Game_Engine/AR250430/#the-tick-function","title":"The Tick Function","text":"<p>The <code>Tick()</code> function is called once per frame and is responsible for updating an actor's state, handling input, applying physics, and any other frame-by-frame logic. All actors must implement their own Tick function:</p> <pre><code>// In the Actor base class\nvirtual void Tick() = 0; // Pure virtual function\n\n// In a derived class (e.g., Player)\nvoid Player::Tick() override {\n    // Check for input\n    if(GetAsyncKeyState('W')) {\n        m_Pos.y -= 0.001f; // Move up slightly\n    }\n    if(GetAsyncKeyState('S')) {\n        m_Pos.y += 0.001f; // Move down slightly\n    }\n    if(GetAsyncKeyState('A')) {\n        m_Pos.x -= 0.001f; // Move left slightly\n    }\n    if(GetAsyncKeyState('D')) {\n        m_Pos.x += 0.001f; // Move right slightly\n    }\n\n    // Additional actor-specific logic\n}\n</code></pre>"},{"location":"Game_Engine/AR250430/#the-render-function","title":"The Render Function","text":"<p>The <code>Render()</code> function is responsible for drawing the actor on the screen. While the base Actor class may provide a default implementation, derived classes often override it for custom visuals:</p> <pre><code>void Actor::Render(HDC _dc) {\n    // Calculate rectangle corners based on position and scale\n    Rectangle(_dc, \n            (int)(m_Pos.x - m_Scale.x / 2), \n            (int)(m_Pos.y - m_Scale.y / 2),\n            (int)(m_Pos.x + m_Scale.x / 2), \n            (int)(m_Pos.y + m_Scale.y / 2));\n}\n</code></pre>"},{"location":"Game_Engine/AR250430/#input-handling-in-games","title":"Input Handling in Games","text":"<p>A key aspect of interactive games is handling user input. While Windows typically processes input through the message loop (WM_KEYDOWN, WM_KEYUP, etc.), games often need more immediate input detection.</p>"},{"location":"Game_Engine/AR250430/#asynchronous-key-state-detection","title":"Asynchronous Key State Detection","text":"<p>For responsive input handling, games commonly use the <code>GetAsyncKeyState()</code> function, which checks the current state of a key directly without waiting for a Windows message:</p> <pre><code>if(GetAsyncKeyState('W')) {\n    // 'W' key is currently pressed\n    m_Pos.y -= 0.001f; // Move upward\n}\n</code></pre> <p>This approach allows for: 1. Continuous movement while a key is held down 2. Multiple key presses to be detected simultaneously 3. Input checking in sync with the game loop</p>"},{"location":"Game_Engine/AR250430/#working-with-the-windows-gdi-for-rendering","title":"Working with the Windows GDI for Rendering","text":"<p>The Graphics Device Interface (GDI) is Windows' legacy system for drawing graphics. While modern games typically use more advanced APIs (DirectX, OpenGL, etc.), understanding GDI concepts is valuable for learning fundamental graphics principles.</p>"},{"location":"Game_Engine/AR250430/#device-context-dc","title":"Device Context (DC)","text":"<p>A Device Context (DC) is a Windows structure that contains information about the drawing attributes of a device and serves as a container for drawing operations. It includes:</p> <ol> <li>The destination (window) where drawing will occur</li> <li>The current drawing tools (pen, brush, etc.)</li> <li>Various drawing parameters and settings</li> </ol>"},{"location":"Game_Engine/AR250430/#customizing-drawing-with-pens-and-brushes","title":"Customizing Drawing with Pens and Brushes","text":"<p>GDI uses two primary tools for drawing: - Pens: Define how lines are drawn (color, width, style) - Brushes: Define how enclosed areas are filled</p> <p>Here's how to create and use custom pens and brushes:</p> <pre><code>void Actor::Render(HDC _dc) {\n    // Create a red pen\n    HPEN hNewPen = CreatePen(PS_SOLID, 2, RGB(255, 0, 0));\n\n    // Save the original pen and select our new one\n    HPEN hPrevPen = (HPEN)SelectObject(_dc, hNewPen);\n\n    // Create a green brush\n    HBRUSH hNewBrush = CreateSolidBrush(RGB(20, 255, 20));\n\n    // Save the original brush and select our new one\n    HBRUSH hPrevBrush = (HBRUSH)SelectObject(_dc, hNewBrush);\n\n    // Draw the rectangle (with red outline and green fill)\n    Rectangle(_dc, \n            (int)(m_Pos.x - m_Scale.x / 2), \n            (int)(m_Pos.y - m_Scale.y / 2),\n            (int)(m_Pos.x + m_Scale.x / 2), \n            (int)(m_Pos.y + m_Scale.y / 2));\n\n    // Restore the original pen and brush\n    SelectObject(_dc, hPrevPen);\n    SelectObject(_dc, hPrevBrush);\n\n    // Clean up our created objects\n    DeleteObject(hNewPen);\n    DeleteObject(hNewBrush);\n}\n</code></pre>"},{"location":"Game_Engine/AR250430/#understanding-colorref-and-rgb-colors","title":"Understanding COLORREF and RGB Colors","text":"<p>Windows uses the COLORREF type to represent colors, which is essentially a 32-bit value where: - The lowest 8 bits represent the red component (0-255) - The next 8 bits represent the green component (0-255) - The next 8 bits represent the blue component (0-255) - The highest 8 bits are not used</p> <p>The RGB macro simplifies creating these values:</p> <pre><code>// Create a bright red color\nCOLORREF redColor = RGB(255, 0, 0);\n\n// This is equivalent to:\nCOLORREF redColor = 255 | (0 &lt;&lt; 8) | (0 &lt;&lt; 16);\n</code></pre>"},{"location":"Game_Engine/AR250430/#optimization-for-drawing-tools","title":"Optimization for Drawing Tools","text":"<p>Creating and destroying GDI objects for every frame is inefficient. For better performance, you can create commonly used pens and brushes once and reuse them:</p> <pre><code>class Engine {\nprivate:\n    // Arrays of common pens and brushes\n    HPEN m_Pen[6];  // Different colored pens\n    HBRUSH m_Brush[6];  // Different colored brushes\n\npublic:\n    void Initialize() {\n        // Create commonly used pens and brushes\n        m_Pen[0] = CreatePen(PS_SOLID, 1, RGB(255, 0, 0));    // Red\n        m_Pen[1] = CreatePen(PS_SOLID, 1, RGB(0, 255, 0));    // Green\n        m_Pen[2] = CreatePen(PS_SOLID, 1, RGB(0, 0, 255));    // Blue\n        // ... more pens and brushes\n    }\n\n    HPEN GetPen(int index) {\n        return m_Pen[index];\n    }\n\n    void Release() {\n        // Clean up all pens and brushes\n        for(int i = 0; i &lt; 6; ++i) {\n            DeleteObject(m_Pen[i]);\n            DeleteObject(m_Brush[i]);\n        }\n    }\n};\n</code></pre>"},{"location":"Game_Engine/AR250430/#understanding-frame-rate-and-game-loop","title":"Understanding Frame Rate and Game Loop","text":"<p>Frame rate, measured in frames per second (FPS), determines how smoothly a game runs. The game loop controls this by executing Tick and Render operations repeatedly:</p> <pre><code>// Simplified game loop\nwhile(running) {\n    // Process Windows messages\n    // ...\n\n    // Update all actors\n    for(Actor* actor : actors) {\n        actor-&gt;Tick();\n    }\n\n    // Render all actors\n    for(Actor* actor : actors) {\n        actor-&gt;Render(hDC);\n    }\n}\n</code></pre> <p>Modern games typically target specific frame rates (30, 60, 144 FPS, etc.) and may use frame timing to ensure consistent gameplay regardless of hardware speed.</p>"},{"location":"Game_Engine/AR250430/#interview-questions-and-challenging-cases","title":"Interview Questions and Challenging Cases","text":"<ol> <li> <p>Q: Why would you use an actor-based architecture in game development?    A: Actor-based architecture provides a consistent interface for all game objects, facilitates polymorphism for specialized behaviors, centralizes common functionality like positioning and rendering, and creates a clean separation of concerns through the Tick/Render pattern.</p> </li> <li> <p>Q: Explain the difference between synchronous and asynchronous input handling in games.    A: Synchronous input handling waits for Windows messages like WM_KEYDOWN, which can cause input lag. Asynchronous input handling (using GetAsyncKeyState()) proactively checks the state of keys during the game loop, providing more responsive controls.</p> </li> <li> <p>Q: What are the trade-offs of using inline functions in a header file?    A: Inline functions can improve performance by eliminating function call overhead, which is beneficial for small, frequently called functions. However, they can increase code size, slow compilation times, and make headers more difficult to maintain if overused.</p> </li> <li> <p>Q: How would you optimize the rendering of many similar objects?    A: Some optimization strategies include: creating pens and brushes once at initialization rather than per frame, implementing object pooling, using culling techniques to avoid rendering off-screen objects, and batching similar draw calls.</p> </li> <li> <p>Q: Why use floating-point values for position instead of integers in a 2D game?    A: Floating-point positions allow for sub-pixel movement, which enables smoother animation, particularly at varying frame rates. They also facilitate consistent movement speeds and can store accumulated small movements that would be lost with integer-only positions.</p> </li> </ol>"},{"location":"Game_Engine/AR250430/#conclusion","title":"Conclusion","text":"<p>Understanding actor-based architecture, game loops, rendering techniques, and efficient input handling provides a solid foundation for game development interviews. By mastering these concepts, you'll be better equipped to design and implement scalable, maintainable game systems.</p> <p>Remember that while these examples use Windows GDI for simplicity, modern game development typically employs more advanced graphics APIs. However, the core principles of game architecture remain consistent across different rendering technologies.</p>"},{"location":"Game_Engine/AR250501/","title":"Level Management and Resource Handling","text":""},{"location":"Game_Engine/AR250501/#introduction","title":"Introduction","text":"<p>Game engine architecture is a critical aspect of game development that requires careful consideration to ensure optimal performance, maintainability, and scalability. This article explores key components of a game engine with a focus on level management, resource handling, client-server architecture, and efficient rendering techniques. These concepts are fundamental knowledge for any C++ game programmer interview.</p>"},{"location":"Game_Engine/AR250501/#client-server-architecture-in-games","title":"Client-Server Architecture in Games","text":"<p>Before diving into the engine architecture, it's important to understand the client-server model, which influences many design decisions in multiplayer game development.</p>"},{"location":"Game_Engine/AR250501/#basic-client-server-interaction","title":"Basic Client-Server Interaction","text":"<p>In multiplayer games, particularly FPS (First Person Shooter) games, the server typically maintains the authoritative game state, while clients receive and visualize this information. This architecture has several implications:</p> <ul> <li>The server maintains and distributes information about all players to each client</li> <li>Each client already contains information about other players (enemies)</li> <li>Clients are primarily responsible for rendering the game state received from the server</li> </ul>"},{"location":"Game_Engine/AR250501/#handling-game-actions-and-anti-cheat-considerations","title":"Handling Game Actions and Anti-Cheat Considerations","text":"<p>When a player performs an action like shooting, the process typically follows these steps:</p> <ol> <li>The client detects the action (e.g., gun fired)</li> <li>Client-side collision detection determines what was hit</li> <li>The client sends this information to the server</li> <li>The server validates the action before applying it to the game state</li> </ol> <p>This separation of responsibilities creates vulnerabilities for cheating. For example, a modified client could:</p> <ul> <li>Ignore obstacles in collision detection</li> <li>Report false hits on enemies</li> <li>Manipulate player position data</li> </ul> <p>To mitigate these risks, proper server-side validation is crucial. In many competitive games, the server performs its own collision detection and validation rather than trusting client reports.</p> <pre><code>// Example of how a server might validate a hit report\nbool ServerValidateHit(const BulletInfo&amp; bullet, const PlayerPosition&amp; shooterPos, \n                       const PlayerPosition&amp; targetPos) {\n    // Check if line of sight exists between shooter and target\n    if (!HasLineOfSight(shooterPos, targetPos)) {\n        return false; // No line of sight, reject the hit\n    }\n\n    // Check if bullet trajectory matches reported hit\n    if (!IsTrajectoryValid(bullet, shooterPos, targetPos)) {\n        return false; // Invalid trajectory, reject the hit\n    }\n\n    return true; // Hit validated\n}\n</code></pre> <p>For some games, particularly non-competitive or console games, extensive anti-cheat measures may be less critical due to: - The limited impact of cheating in cooperative or single-player experiences - More controlled hardware environments (e.g., consoles) that make cheating difficult</p>"},{"location":"Game_Engine/AR250501/#gdi-resource-management","title":"GDI Resource Management","text":"<p>Moving to our engine implementation, proper management of GDI (Graphics Device Interface) resources is essential for rendering efficiency.</p>"},{"location":"Game_Engine/AR250501/#enumerating-common-resources","title":"Enumerating Common Resources","text":"<p>To efficiently manage graphical resources like pens and brushes, we can use enumerations:</p> <pre><code>#pragma once\n\nenum class PEN_TYPE\n{\n    RED,\n    BLUE,\n    GREEN,\n    GRAY,\n    BLACK,\n    WHITE,\n    MAGENTA,\n    END, // Marker for the total number of pens\n};\n\nenum class BRUSH_TYPE\n{\n    RED,\n    BLUE,\n    GREEN,\n    GRAY,\n    MAGENTA,\n    HOLLOW,\n    END\n};\n</code></pre>"},{"location":"Game_Engine/AR250501/#creating-and-managing-gdi-objects","title":"Creating and Managing GDI Objects","text":"<p>These resources are created once at initialization and stored for reuse:</p> <pre><code>// Declaration in the engine class\nHPEN m_pen[(UINT)PEN_TYPE::END];\nHBRUSH m_brush[(UINT)BRUSH_TYPE::END];\n\n// Creation of resources\nvoid Engine::CreateGDIObjects()\n{\n    m_pen[(UINT)PEN_TYPE::RED] = CreatePen(PS_SOLID, 1, RGB(255, 0, 0));\n    m_pen[(UINT)PEN_TYPE::GREEN] = CreatePen(PS_SOLID, 1, RGB(0, 255, 0));\n    m_pen[(UINT)PEN_TYPE::BLUE] = CreatePen(PS_SOLID, 1, RGB(0, 0, 255));\n    m_pen[(UINT)PEN_TYPE::MAGENTA] = CreatePen(PS_SOLID, 1, RGB(255, 0, 255));\n    // Other pens...\n\n    m_brush[(UINT)BRUSH_TYPE::RED] = CreateSolidBrush(RGB(255, 0, 0));\n    // Other brushes...\n\n    // The HOLLOW brush is obtained from the system\n    m_brush[(UINT)BRUSH_TYPE::HOLLOW] = (HBRUSH)GetStockObject(HOLLOW_BRUSH);\n}\n</code></pre>"},{"location":"Game_Engine/AR250501/#proper-resource-cleanup","title":"Proper Resource Cleanup","text":"<p>Cleaning up these resources when the engine shuts down is equally important:</p> <pre><code>void Engine::CleanupGDIObjects()\n{\n    // Release the device context\n    ReleaseDC(m_hMainWnd, m_MainDC);\n\n    // Delete all pens\n    for(UINT i = 0; i &lt; (UINT)PEN_TYPE::END; ++i) {\n        DeleteObject(m_pen[i]);\n    }\n\n    // Delete all brushes except HOLLOW (system-managed)\n    for(UINT i = 0; i &lt; (UINT)BRUSH_TYPE::END; ++i) {\n        if(i == (UINT)BRUSH_TYPE::HOLLOW) continue;\n        DeleteObject(m_brush[i]);\n    }\n}\n</code></pre>"},{"location":"Game_Engine/AR250501/#accessor-methods","title":"Accessor Methods","text":"<p>To provide access to these resources, we implement simple getter methods:</p> <pre><code>HPEN Engine::GetPen(PEN_TYPE _Type)\n{\n    return m_pen[(UINT)_Type];\n}\n\nHBRUSH Engine::GetBrush(BRUSH_TYPE _Type)\n{\n    return m_brush[(UINT)_Type];\n}\n</code></pre>"},{"location":"Game_Engine/AR250501/#level-management-architecture","title":"Level Management Architecture","text":"<p>Level management is a core component of game engines, responsible for organizing game stages and maintaining collections of actors.</p>"},{"location":"Game_Engine/AR250501/#level-class-design","title":"Level Class Design","text":"<p>The Level class serves as a container for all actors in a game stage:</p> <pre><code>class Level\n{\nprivate:\n    vector&lt;Actor*&gt; m_vecActor; // Collection of actors in this level\n\npublic:\n    void Tick();         // Update all actors\n    void Render(HDC _dc); // Render all actors\n    void AddActor(Actor* _actor); // Add an actor to the level\n\npublic:\n    Level();\n    ~Level();\n};\n</code></pre>"},{"location":"Game_Engine/AR250501/#level-manager-implementation","title":"Level Manager Implementation","text":"<p>The Level Manager controls which level is currently active and facilitates level transitions:</p> <pre><code>#pragma once\n\nclass Level;\n\nclass LevelMgr\n{\n    SINGLE(LevelMgr); // Singleton macro\nprivate:\n    Level* m_CurLevel; // Currently active level\n\npublic:\n    void Init();\n    void Progress();\n};\n</code></pre> <p>Implementation in LevelMgr.cpp:</p> <pre><code>#include \"pch.h\"\n#include \"LevelMgr.h\"\n\n#include \"Engine.h\"\n#include \"Level.h\"\n#include \"Actor.h\"\n\nLevelMgr::LevelMgr()\n    : m_CurLevel(nullptr)\n{\n\n}\n\nLevelMgr::~LevelMgr()\n{\n    if(nullptr != m_CurLevel)\n       delete m_CurLevel;\n}\n\nvoid LevelMgr::Init()\n{\n    m_CurLevel = new Level;\n\n    Actor* pActor = new Actor; \n    pActor-&gt;SetPos(Vec2(640, 284));\n    pActor-&gt;SetScale(Vec2(100, 100));\n    m_CurLevel-&gt;AddActor(pActor);\n\n    pActor = new Actor;\n    pActor-&gt;SetPos(Vec2(200, 400));\n    pActor-&gt;SetScale(Vec2(50, 50));\n    m_CurLevel-&gt;AddActor(pActor);\n}\n\nvoid LevelMgr::Progress()\n{\n    m_CurLevel-&gt;Tick();\n    m_CurLevel-&gt;Render(Engine::GetInst()-&gt;GetMainDC());\n}\n</code></pre>"},{"location":"Game_Engine/AR250501/#forward-declaration-and-header-management","title":"Forward Declaration and Header Management","text":"<p>Proper management of header files is crucial for optimizing compilation time and avoiding circular dependencies.</p>"},{"location":"Game_Engine/AR250501/#the-value-of-forward-declarations","title":"The Value of Forward Declarations","text":"<p>In the LevelMgr.h file, notice the use of a forward declaration:</p> <pre><code>class Level; // Forward declaration\n</code></pre> <p>This approach offers several advantages:</p> <ol> <li> <p>Reduced Compilation Time: When a header file changes, only files that directly include it need to be recompiled, not those that use forward declarations.</p> </li> <li> <p>Prevents Circular Dependencies: Forward declarations help break potential circular include dependencies.</p> </li> <li> <p>Minimized Header Coupling: Implementation details remain hidden from header files.</p> </li> </ol>"},{"location":"Game_Engine/AR250501/#guidelines-for-header-management","title":"Guidelines for Header Management","text":"<p>For optimal compilation performance:</p> <ol> <li>Use forward declarations in header files when possible</li> <li>Include the actual headers only in .cpp files where needed</li> <li>Keep header files minimal and focused</li> </ol> <pre><code>// Good practice\n// In header file\nclass SomeClass; // Forward declaration\n\n// In cpp file\n#include \"SomeClass.h\"\n</code></pre>"},{"location":"Game_Engine/AR250501/#actor-collection-management","title":"Actor Collection Management","text":"<p>Efficient storage and access to game objects is crucial for performance.</p>"},{"location":"Game_Engine/AR250501/#container-selection-vector-vs-linked-list","title":"Container Selection: Vector vs. Linked List","text":"<p>Both arrays/vectors and linked lists have O(n) time complexity for iterating through all elements, but there are practical performance differences:</p> <ul> <li>Dynamic Arrays/Vectors: Better cache locality and fewer memory allocations make iteration faster in practice</li> <li>Linked Lists: Each node access requires a pointer dereference, increasing the actual work done during iteration</li> </ul> <p>For a game where actors are iterated over every frame, a vector is typically the better choice:</p> <pre><code>class Level\n{\nprivate:\n    vector&lt;Actor*&gt; m_vecActor; // Vector of actor pointers\n\n    // Methods...\n};\n</code></pre>"},{"location":"Game_Engine/AR250501/#memory-management-for-actor-collections","title":"Memory Management for Actor Collections","text":"<p>When a level contains dynamically allocated actors, proper cleanup is essential:</p> <pre><code>Level::~Level()\n{\n    // Clean up all dynamically allocated actors\n    for (size_t i = 0; i &lt; m_vecActor.size(); ++i)\n    {\n        delete m_vecActor[i];\n    }\n\n    // Vector's own destructor will handle clearing its internal storage\n}\n</code></pre>"},{"location":"Game_Engine/AR250501/#polymorphism-and-virtual-destructors","title":"Polymorphism and Virtual Destructors","text":"<p>When using polymorphism with actor hierarchies, proper virtual destructor implementation is critical.</p>"},{"location":"Game_Engine/AR250501/#the-need-for-virtual-destructors","title":"The Need for Virtual Destructors","text":"<p>Consider this hierarchy: - Actor (base class)   - Player (derived class)   - Enemy (derived class)</p> <p>When storing these as base class pointers:</p> <pre><code>vector&lt;Actor*&gt; m_vecActor; // Contains Player* and Enemy* stored as Actor*\n</code></pre> <p>Without a virtual destructor, deleting through the base pointer will only call the base class destructor:</p> <pre><code>// If Actor's destructor is not virtual\ndelete someActorPointer; // Only calls ~Actor(), not ~Player() or ~Enemy()\n</code></pre>"},{"location":"Game_Engine/AR250501/#implementing-virtual-destructors","title":"Implementing Virtual Destructors","text":"<p>The solution is to declare the base class destructor as virtual:</p> <pre><code>class Actor \n{\npublic:\n    // Other members...\n\n    virtual ~Actor() {} // Virtual destructor ensures proper cleanup\n};\n</code></pre> <p>With this change, the appropriate derived class destructor will be called first, followed by the base class destructor, ensuring complete cleanup.</p>"},{"location":"Game_Engine/AR250501/#interview-questions","title":"Interview Questions","text":"<p>Here are some challenging interview questions related to these concepts:</p> <ol> <li> <p>Q: Why should you prefer using a vector over a linked list for storing game actors that need to be updated every frame?    A: Although both have O(n) theoretical complexity for iteration, vectors offer better cache locality and fewer pointer dereferences, making them significantly faster for sequential access patterns common in game loops.</p> </li> <li> <p>Q: What is the purpose of forward declarations and when should you use them?    A: Forward declarations tell the compiler that a class exists without defining its structure. They should be used in header files when you only need pointers or references to a class, helping to reduce compilation dependencies and improve build times.</p> </li> <li> <p>Q: Why is it crucial to declare destructors as virtual in base classes used for polymorphism?    A: When deleting objects through base class pointers, only the base class destructor will be called unless it's declared virtual. Virtual destructors ensure that the appropriate derived class destructor is called first, followed by the base class destructor, preventing memory leaks.</p> </li> <li> <p>Q: In a client-server game architecture, what validation should the server perform to prevent cheating?    A: The server should validate player positions, verify line-of-sight for attacks, perform its own collision detection, and check the plausibility of reported actions. Never trust client-reported data for game-critical decisions.</p> </li> <li> <p>Q: How would you optimize GDI resource management in a Windows-based game?    A: Create common GDI resources (pens, brushes) once at initialization and store them for reuse. Use enumerations to organize and access them. Ensure proper cleanup when the application exits to prevent resource leaks.</p> </li> <li> <p>Q: How would you implement a level transition system in your game engine?    A: The Level Manager should handle creating new levels, destroying old ones, and managing the transition between them. This might involve fading screens, loading new assets, and ensuring all resources from the previous level are properly cleaned up.</p> </li> </ol>"},{"location":"Game_Engine/AR250501/#conclusion","title":"Conclusion","text":"<p>Understanding these fundamental aspects of game engine architecture is essential for building efficient, maintainable games. From resource management to level organization, these principles form the foundation of well-designed game systems. Proper understanding of polymorphism, memory management, and optimization techniques will help you create robust game engines and perform well in technical interviews.</p> <p>The concepts covered in this article\u2014GDI resource management, level architecture, actor collections, and proper use of virtual destructors\u2014are not only theoretical knowledge but practical skills that directly impact the performance and maintainability of your game engine.</p>"},{"location":"Game_Engine/AR250507/","title":"Gaem Engine Delta Time","text":""},{"location":"Game_Engine/AR250507/#introduction","title":"Introduction","text":"<p>This article explores essential concepts in C++ game programming that frequently appear in technical interviews. We'll focus on game engine architecture, class inheritance, polymorphism, and the critical aspect of time management in games. Understanding these fundamentals is crucial for building robust game systems and demonstrating proficiency during interviews.</p>"},{"location":"Game_Engine/AR250507/#game-engine-architecture-the-actor-model","title":"Game Engine Architecture: The Actor Model","text":""},{"location":"Game_Engine/AR250507/#the-actor-base-class","title":"The Actor Base Class","text":"<p>At the heart of many game engines is the Actor model. An Actor is a base class that represents any object in the game world:</p> <pre><code>class Actor\n{\nprotected:\n    Vec2 m_Position;\n    Vec2 m_Scale;\n\npublic:\n    // Pure virtual function - making Actor an abstract class\n    virtual void Tick() = 0;\n\n    // Position getters/setters\n    void SetPos(Vec2 _pos) { m_Position = _pos; }\n    Vec2 GetPos() { return m_Position; }\n\n    // Scale getters/setters\n    void SetScale(Vec2 _scale) { m_Scale = _scale; }\n    Vec2 GetScale() { return m_Scale; }\n};\n</code></pre> <p>Initially, Actor might be a concrete class with its own implementation of methods like <code>Tick()</code>. However, as the engine evolves, Actor typically becomes an abstract class (using the pure virtual function <code>virtual void Tick() = 0;</code>). This prevents direct instantiation of the Actor class and requires derived classes to implement their own <code>Tick()</code> method.</p>"},{"location":"Game_Engine/AR250507/#derived-actor-classes","title":"Derived Actor Classes","text":"<p>Once Actor becomes an abstract base class, we need to create derived classes to represent specific game entities:</p> <pre><code>class Player : public Actor\n{\nprivate:\n    // Player-specific properties\n\npublic:\n    // Override the Tick method to implement player-specific behavior\n    virtual void Tick() override;\n\n    // Additional player-specific methods\n};\n\nclass Monster : public Actor\n{\nprivate:\n    // Monster-specific properties\n\npublic:\n    // Override the Tick method to implement monster-specific behavior\n    virtual void Tick() override;\n\n    // Additional monster-specific methods\n};\n</code></pre>"},{"location":"Game_Engine/AR250507/#polymorphism-in-game-design","title":"Polymorphism in Game Design","text":"<p>The Actor model leverages polymorphism, allowing the game engine to treat different types of game objects uniformly while each type maintains its unique behavior:</p> <pre><code>// Inside the Level class that manages game objects\nvoid Level::Tick()\n{\n    // Loop through all actors and call their Tick method\n    for (Actor* actor : m_Actors)\n    {\n        actor-&gt;Tick();  // Polymorphic call - each actor type behaves differently\n    }\n}\n</code></pre> <p>This polymorphic approach enables easier management of game objects and more maintainable code.</p>"},{"location":"Game_Engine/AR250507/#the-game-loop-and-time-management","title":"The Game Loop and Time Management","text":""},{"location":"Game_Engine/AR250507/#the-problem-with-simple-game-loops","title":"The Problem with Simple Game Loops","text":"<p>A naive implementation of a game loop might look like:</p> <pre><code>while (gameRunning)\n{\n    ProcessInput();\n    UpdateGame();\n    RenderFrame();\n}\n</code></pre> <p>However, this approach leads to significant problems:</p> <ol> <li>Performance Variance: Different computers will run this loop at different speeds</li> <li>Game Speed Inconsistency: Game speed becomes directly tied to hardware performance</li> <li>Screen Flickering: High frame rates can cause visual artifacts</li> </ol>"},{"location":"Game_Engine/AR250507/#the-historical-galaga-case","title":"The Historical Galaga Case","text":"<p>An interesting historical example is the original Galaga game. As enemies were defeated, the game would run faster because there were fewer objects to process in each frame. This was actually an unintended consequence of the simple game loop design, but players assumed it was a deliberate difficulty increase mechanism! Modern games need to avoid such hardware-dependent behavior.</p>"},{"location":"Game_Engine/AR250507/#introduction-to-delta-time","title":"Introduction to Delta Time","text":"<p>The solution to these problems is using a time-based approach instead of a frame-based approach. This is where Delta Time comes in:</p> <pre><code>// Move player 100 pixels per second, regardless of frame rate\ncase 'W':\n    vPos.y -= 100.f * DT;  // DT = Delta Time (seconds since last frame)\n    break;\ncase 'A':\n    vPos.x -= 100.f * DT;\n    break;\n</code></pre> <p>Delta Time represents the time elapsed between frames. By multiplying movement and other time-dependent actions by Delta Time, we ensure consistent behavior regardless of frame rate.</p>"},{"location":"Game_Engine/AR250507/#implementing-a-time-manager","title":"Implementing a Time Manager","text":"<p>A robust time management system is crucial for any game engine. Let's examine a complete implementation:</p>"},{"location":"Game_Engine/AR250507/#timemgr-class-definition","title":"TimeMgr Class Definition","text":"<pre><code>// TimeMgr.h\n#pragma once\nclass TimeMgr\n{\n    SINGLE(TimeMgr)  // Macro for singleton pattern implementation\nprivate:\n    LARGE_INTEGER m_Frequency;\n    LARGE_INTEGER m_CurCount;\n    LARGE_INTEGER m_PrevCount;\n\n    int           m_FrameCount;\n    wchar_t       m_String[256];\n\n    float         m_DeltaTime;  // Time taken to complete 1 frame\n    float         m_AccTime;    // Accumulated time\n\npublic:\n    float GetDeltaTime() { return m_DeltaTime; }\n\npublic:\n    void Tick();\n    void Render(HDC _dc);\n};\n</code></pre>"},{"location":"Game_Engine/AR250507/#timemgr-implementation","title":"TimeMgr Implementation","text":"<pre><code>// TimeMgr.cpp\n#include \"pch.h\"\n#include \"TimeMgr.h\"\n\nTimeMgr::TimeMgr()\n    : m_Frequency{}\n    , m_CurCount{}\n    , m_PrevCount{}\n    , m_FrameCount(0)\n    , m_String{}\n    , m_DeltaTime(0.f)\n    , m_AccTime(0.f)\n{\n    // Get the frequency of the performance counter\n    QueryPerformanceFrequency(&amp;m_Frequency);\n\n    // Initialize the previous count\n    QueryPerformanceCounter(&amp;m_PrevCount);\n}\n\nTimeMgr::~TimeMgr()\n{\n}\n\nvoid TimeMgr::Tick()\n{\n    ++m_FrameCount;\n\n    // Get the current count from the high-precision performance counter\n    QueryPerformanceCounter(&amp;m_CurCount);\n\n    // Calculate delta time as the time elapsed since last frame\n    m_DeltaTime = (float)(m_CurCount.QuadPart - m_PrevCount.QuadPart) / (float)m_Frequency.QuadPart;\n\n    // Update previous count for next frame\n    m_PrevCount = m_CurCount;\n\n    // Accumulate time for FPS calculation\n    m_AccTime += m_DeltaTime;\n\n    // Update frame stats once per second\n    if (m_AccTime &gt;= 1.f)\n    {    \n        swprintf_s(m_String, 256, L\"FrameCount : %d, DeltaTime : %f\", m_FrameCount, m_DeltaTime);\n        m_FrameCount = 0;\n        m_AccTime = 0.f;\n    }\n}\n\nvoid TimeMgr::Render(HDC _dc)\n{\n    TextOut(_dc, 10, 10, m_String, wcslen(m_String));\n}\n</code></pre>"},{"location":"Game_Engine/AR250507/#high-precision-timing","title":"High-Precision Timing","text":"<p>For accurate time measurement, the <code>TimeMgr</code> class uses Windows' high-precision performance counter:</p> <ul> <li><code>QueryPerformanceFrequency</code>: Gets the frequency of the counter (ticks per second)</li> <li><code>QueryPerformanceCounter</code>: Gets the current counter value</li> </ul> <p>These functions provide much greater precision than alternatives like <code>GetTickCount()</code>, which only has millisecond precision (1000 ticks per second). The performance counter typically offers precision in the microsecond range (millions of ticks per second), making it suitable for game timing.</p>"},{"location":"Game_Engine/AR250507/#using-delta-time-in-game-code","title":"Using Delta Time in Game Code","text":"<p>Once we have a <code>TimeMgr</code> class, we can create a convenient macro to access delta time:</p> <pre><code>// define.h\n#define DT TimeMgr::GetInst()-&gt;GetDeltaTime()\n</code></pre> <p>This macro allows easy use of delta time throughout the codebase:</p> <pre><code>// Example player movement with delta time\nvoid Player::Tick()\n{\n    Vec2 vPos = GetPos();\n\n    if (GetAsyncKeyState('W') &amp; 0x8000)\n    {\n        vPos.y -= 300.f * DT;  // Move 300 pixels per second\n    }\n\n    if (GetAsyncKeyState('S') &amp; 0x8000)\n    {\n        vPos.y += 300.f * DT;\n    }\n\n    // Update position\n    SetPos(vPos);\n}\n</code></pre>"},{"location":"Game_Engine/AR250507/#level-management","title":"Level Management","text":"<p>The Level class is responsible for managing all actors within a game level:</p> <pre><code>// LevelMgr.h\n#pragma once\n\nclass Level;\n\nclass LevelMgr\n{\n    SINGLE(LevelMgr);\nprivate:\n    Level* m_CurLevel;  // Current active level\n\npublic:\n    void Init();\n    void Progress();\n};\n</code></pre> <pre><code>// LevelMgr.cpp\n#include \"pch.h\"\n#include \"LevelMgr.h\"\n\n#include \"Engine.h\"\n#include \"Level.h\"\n#include \"Player.h\"\n#include \"Monster.h\"\n\nLevelMgr::LevelMgr()\n    : m_CurLevel(nullptr)\n{\n}\n\nLevelMgr::~LevelMgr()\n{\n    if(nullptr != m_CurLevel)\n        delete m_CurLevel;\n}\n\nvoid LevelMgr::Init()\n{\n    m_CurLevel = new Level;\n\n    // Create and configure a Player actor\n    Actor* pActor = new Player;    \n    pActor-&gt;SetPos(Vec2(640, 284));\n    pActor-&gt;SetScale(Vec2(100, 100));\n    m_CurLevel-&gt;AddActor(pActor);\n\n    // Create and configure a Monster actor\n    pActor = new Monster;\n    pActor-&gt;SetPos(Vec2(200, 400));\n    pActor-&gt;SetScale(Vec2(50, 50));\n    m_CurLevel-&gt;AddActor(pActor);\n}\n\nvoid LevelMgr::Progress()\n{\n    m_CurLevel-&gt;Tick();\n    m_CurLevel-&gt;Render(Engine::GetInst()-&gt;GetMainDC());\n}\n</code></pre>"},{"location":"Game_Engine/AR250507/#putting-it-all-together-the-game-engine","title":"Putting It All Together: The Game Engine","text":"<p>The game engine ties everything together and manages the main game loop:</p> <pre><code>// Engine.cpp (partial)\nvoid Engine::Progress()\n{\n    // Update time management system\n    TimeMgr::GetInst()-&gt;Tick();\n\n    // Process the current level\n    LevelMgr::GetInst()-&gt;Progress();\n\n    // Display timing information\n    TimeMgr::GetInst()-&gt;Render(m_hDC);\n}\n</code></pre>"},{"location":"Game_Engine/AR250507/#common-interview-questions","title":"Common Interview Questions","text":""},{"location":"Game_Engine/AR250507/#1-what-is-the-purpose-of-using-delta-time-in-games","title":"1. What is the purpose of using Delta Time in games?","text":"<p>Answer: Delta Time ensures consistent game behavior regardless of frame rate or hardware performance. It represents the time elapsed since the last frame. By multiplying time-dependent actions (like movement) by Delta Time, we ensure that objects move at the same speed regardless of how quickly frames are processed.</p>"},{"location":"Game_Engine/AR250507/#2-why-should-actor-be-an-abstract-class-in-a-game-engine","title":"2. Why should Actor be an abstract class in a game engine?","text":"<p>Answer: Making Actor an abstract class (with pure virtual functions) ensures that: - Developers must implement specific behavior for each game entity type - The base class provides a common interface for all game objects - The engine can use polymorphism to simplify game object management - It prevents instantiation of the generic Actor class, which would lack meaningful behavior</p>"},{"location":"Game_Engine/AR250507/#3-how-would-you-implement-a-frame-rate-limiter-in-a-game-engine","title":"3. How would you implement a frame rate limiter in a game engine?","text":"<p>Answer: A basic frame rate limiter could be implemented by adding a sleep or wait operation if a frame completes too quickly:</p> <pre><code>void Engine::Progress()\n{\n    const float targetFrameTime = 1.0f / 60.0f;  // Target 60 FPS\n\n    TimeMgr::GetInst()-&gt;Tick();  // Start frame timing\n\n    // Process game logic\n    LevelMgr::GetInst()-&gt;Progress();\n\n    // Display timing information\n    TimeMgr::GetInst()-&gt;Render(m_hDC);\n\n    // Calculate elapsed time for this frame\n    float frameTime = TimeMgr::GetInst()-&gt;GetDeltaTime();\n\n    // If frame completed too quickly, wait\n    if (frameTime &lt; targetFrameTime)\n    {\n        // Convert to milliseconds\n        DWORD sleepTime = (DWORD)((targetFrameTime - frameTime) * 1000.0f);\n        if (sleepTime &gt; 0)\n            Sleep(sleepTime);\n    }\n}\n</code></pre>"},{"location":"Game_Engine/AR250507/#4-what-is-the-difference-between-gettickcount-and-queryperformancecounter","title":"4. What is the difference between <code>GetTickCount()</code> and <code>QueryPerformanceCounter()</code>?","text":"<p>Answer:  - <code>GetTickCount()</code> provides millisecond precision (1000 ticks per second) and is simpler to use. - <code>QueryPerformanceCounter()</code> provides microsecond precision (millions of ticks per second) and is more accurate for measuring small time intervals. - For games requiring precise timing, <code>QueryPerformanceCounter()</code> is the preferred choice.</p>"},{"location":"Game_Engine/AR250507/#conclusion","title":"Conclusion","text":"<p>Understanding game engine architecture, object-oriented design principles, and time management is fundamental for C++ game development. The concepts covered in this article\u2014Actor model, polymorphism, delta time, and high-precision timing\u2014form the foundation of most modern game engines.</p> <p>For game programming interviews, be prepared to discuss these topics in depth and demonstrate how they contribute to creating robust, platform-independent game systems. Remember that a well-designed architecture not only makes your game run consistently across different hardware but also simplifies development and maintenance as your game grows in complexity.</p>"},{"location":"Game_Engine/AR250508/","title":"Resolution and Device Contexts","text":""},{"location":"Game_Engine/AR250508/#introduction","title":"Introduction","text":"<p>Game development on Windows platforms requires a solid understanding of how Windows manages rendering contexts, window sizes, and the underlying graphics pipeline. This article synthesizes key concepts every C++ game programmer should understand about window management, device contexts, and double buffering.</p>"},{"location":"Game_Engine/AR250508/#window-size-vs-resolution","title":"Window Size vs. Resolution","text":"<p>One of the first challenges in Windows-based game programming is understanding the difference between window size and actual rendering resolution.</p>"},{"location":"Game_Engine/AR250508/#the-window-size-problem","title":"The Window Size Problem","text":"<p>When creating a game window, specifying dimensions like 1280\u00d7768 actually sets the window size, not the rendering area. The rendering area is smaller due to window elements:</p> <ul> <li>Window frame borders (typically 8-9 pixels on each side)</li> <li>Title bar area (approximately 30 pixels)</li> <li>Optional menu bar</li> </ul> <p>This means if you want a rendering resolution of exactly 1280\u00d7768 pixels, your window must be larger.</p> <pre><code>// Initial approach (incorrect for exact resolution)\nSetWindowPos(m_hMainWnd, nullptr, x, y, 1280, 768, 0);\n</code></pre>"},{"location":"Game_Engine/AR250508/#calculating-proper-window-size","title":"Calculating Proper Window Size","text":"<p>Windows provides the <code>AdjustWindowRect()</code> function to calculate the required window size for a desired client area:</p> <pre><code>RECT rt = {0, 0, width, height}; // Define desired rendering area\nAdjustWindowRect(&amp;rt, WS_OVERLAPPEDWINDOW, !!hMenu); // Adjust for window style and menu\n\n// Use the calculated total size\nSetWindowPos(m_hMainWnd, nullptr, 10, 10, \n             rt.right - rt.left, rt.bottom - rt.top, 0);\n</code></pre> <p>The <code>AdjustWindowRect()</code> function accounts for: - Window style bits (<code>WS_OVERLAPPEDWINDOW</code> or custom combinations) - Menu bar presence (third parameter as boolean) - Window borders and title bar</p>"},{"location":"Game_Engine/AR250508/#window-styles","title":"Window Styles","text":"<p>Window styles define how a window appears and behaves. They're expressed as bit flags combined with bitwise OR operations.</p>"},{"location":"Game_Engine/AR250508/#common-window-styles","title":"Common Window Styles","text":"<p><code>WS_OVERLAPPEDWINDOW</code> is a macro that combines several window styles: - <code>WS_OVERLAPPED</code>: Basic window style - <code>WS_CAPTION</code>: Window with title bar - <code>WS_SYSMENU</code>: Window with system menu - Other styles for minimize/maximize buttons, etc.</p> <pre><code>// Explicit window style combination example\nDWORD windowStyle = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU;\n\n// Or using the pre-defined macro\nDWORD windowStyle = WS_OVERLAPPEDWINDOW;\n</code></pre>"},{"location":"Game_Engine/AR250508/#detecting-menu-presence","title":"Detecting Menu Presence","text":"<p>Menu bars affect window calculations. To automate detection:</p> <pre><code>HMENU hMenu = GetMenu(m_hMainWnd);\n// Use !! operator to convert pointer to boolean\nAdjustWindowRect(&amp;rt, WS_OVERLAPPEDWINDOW, !!hMenu);\n</code></pre>"},{"location":"Game_Engine/AR250508/#resolution-management","title":"Resolution Management","text":"<p>Resolution handling should be modularized to handle changes at runtime.</p> <pre><code>void ChangeResolution(UINT _Width, UINT _Height)\n{\n    m_Resolution.x = _Width;\n    m_Resolution.y = _Height;\n\n    RECT rt = {0, 0, (int)_Width, (int)_Height};\n    HMENU hMenu = GetMenu(m_hMainWnd);\n    AdjustWindowRect(&amp;rt, WS_OVERLAPPEDWINDOW, !!hMenu);\n\n    SetWindowPos(m_hMainWnd, nullptr, 10, 10, \n                 rt.right - rt.left, rt.bottom - rt.top, 0);\n\n    // Re-initialize rendering buffers with new size\n    // ...\n}\n</code></pre>"},{"location":"Game_Engine/AR250508/#device-contexts-and-rendering","title":"Device Contexts and Rendering","text":"<p>Windows GDI (Graphics Device Interface) uses Device Contexts (DC) for all drawing operations.</p>"},{"location":"Game_Engine/AR250508/#device-context-fundamentals","title":"Device Context Fundamentals","text":"<p>A Device Context is not the window itself, but an object that: - Provides an interface to draw on a bitmap - Holds drawing attributes (pens, brushes, colors) - Targets a specific bitmap surface</p> <pre><code>// Obtain the window's DC\nm_MainDC = GetDC(m_hMainWnd);\n</code></pre>"},{"location":"Game_Engine/AR250508/#the-flickering-problem","title":"The Flickering Problem","text":"<p>Drawing directly to the window's DC causes flickering because: - The monitor may capture partial drawing operations - Multiple drawing operations in one frame can cause visual artifacts - The screen refresh rate (typically 60Hz) doesn't match your rendering loop</p>"},{"location":"Game_Engine/AR250508/#double-buffering-implementation","title":"Double Buffering Implementation","text":"<p>Double buffering solves flickering by drawing to an off-screen buffer first, then copying the completed frame to the visible buffer.</p>"},{"location":"Game_Engine/AR250508/#creating-the-back-buffer","title":"Creating the Back Buffer","text":"<pre><code>// Create compatible bitmap with the main DC\nm_BackBufferBit = CreateCompatibleBitmap(m_MainDC, m_Resolution.x, m_Resolution.y);\n\n// Create a DC for the back buffer\nm_BackBufferDC = CreateCompatibleDC(m_MainDC);\n\n// Select the bitmap into the back buffer DC\n// Delete the default 1x1 bitmap that comes with the DC\nDeleteObject(SelectObject(m_BackBufferDC, m_BackBufferBit));\n</code></pre>"},{"location":"Game_Engine/AR250508/#rendering-with-double-buffering","title":"Rendering With Double Buffering","text":"<p>The rendering process becomes:</p> <ol> <li>Clear the back buffer</li> <li>Draw everything to the back buffer</li> <li>Copy the completed frame to the main buffer</li> </ol> <pre><code>// Rendering process\nvoid Engine::Render()\n{\n    // Clear the back buffer with a solid color\n    HBRUSH hPrevBrush = (HBRUSH)SelectObject(m_BackBufferDC, GetBrush(BRUSH_TYPE::GRAY));\n    Rectangle(m_BackBufferDC, -1, -1, \n              (int)m_Resolution.x + 1, (int)m_Resolution.y + 1);\n    SelectObject(m_BackBufferDC, hPrevBrush);\n\n    // Render game elements to back buffer\n    LevelMgr::GetInst()-&gt;Render(m_BackBufferDC);\n    TimeMgr::GetInst()-&gt;Render(m_BackBufferDC);\n\n    // Copy back buffer to front buffer (window)\n    BitBlt(m_MainDC, 0, 0, m_Resolution.x, m_Resolution.y,\n           m_BackBufferDC, 0, 0, SRCCOPY);\n}\n</code></pre>"},{"location":"Game_Engine/AR250508/#main-game-loop-organization","title":"Main Game Loop Organization","text":"<p>A well-organized game loop separates logic and rendering:</p> <pre><code>void Engine::GameLoop()\n{\n    // Update logic\n    TimeMgr::GetInst()-&gt;Tick();\n    LevelMgr::GetInst()-&gt;Tick();\n\n    // Rendering\n    Render(); // Handles the double-buffering process\n}\n</code></pre>"},{"location":"Game_Engine/AR250508/#asset-and-resource-management","title":"Asset and Resource Management","text":"<p>Game assets need proper management and organization.</p>"},{"location":"Game_Engine/AR250508/#file-structure","title":"File Structure","text":"<p>Assets should be organized in predictable locations relative to the executable: - Typically in folders like \"Content\" or \"Resources\" - Path management should be relative, not absolute</p>"},{"location":"Game_Engine/AR250508/#path-management","title":"Path Management","text":"<p>A path manager helps locate assets at runtime:</p> <pre><code>// Example path manager initialization\nvoid PathMgr::Init()\n{\n    // Get current directory (exe location)\n    GetCurrentDirectory(255, m_szContentPath);\n\n    // Navigate to content folder\n    wcscat_s(m_szContentPath, L\"\\\\Content\\\\\");\n}\n</code></pre>"},{"location":"Game_Engine/AR250508/#project-configuration","title":"Project Configuration","text":"<p>Proper project configuration helps manage build outputs.</p>"},{"location":"Game_Engine/AR250508/#output-directories","title":"Output Directories","text":"<p>Configure Visual Studio to output executables to consistent locations:</p> <pre><code>$(SolutionDir)\\OutputFile\\Bin\\\n</code></pre>"},{"location":"Game_Engine/AR250508/#different-build-configurations","title":"Different Build Configurations","text":"<p>Set different executable names for debug and release: - Debug: <code>MyGame_Debug.exe</code> - Release: <code>MyGame.exe</code></p>"},{"location":"Game_Engine/AR250508/#delta-time-and-frame-rate","title":"Delta Time and Frame Rate","text":"<p>Game timing is crucial for consistent gameplay across different hardware.</p> <pre><code>// Basic delta time calculation\nvoid TimeManager::Tick()\n{\n    LARGE_INTEGER currentTime;\n    QueryPerformanceCounter(&amp;currentTime);\n\n    m_DeltaTime = (float)(currentTime.QuadPart - m_PrevTime.QuadPart) / m_Frequency.QuadPart;\n    m_PrevTime = currentTime;\n\n    // Optional FPS calculation\n    m_FrameCount++;\n    m_AccTime += m_DeltaTime;\n\n    if (m_AccTime &gt;= 1.0f)\n    {\n        m_FPS = m_FrameCount;\n        m_FrameCount = 0;\n        m_AccTime = 0.f;\n    }\n}\n</code></pre>"},{"location":"Game_Engine/AR250508/#common-interview-questions","title":"Common Interview Questions","text":"<ol> <li>What's the difference between window size and rendering resolution in Windows?</li> <li> <p>Window size includes the frame, title bar, and menu, while rendering resolution refers to the actual drawable area.</p> </li> <li> <p>How would you implement double buffering to prevent screen flicker?</p> </li> <li> <p>Create an off-screen bitmap, draw to it first, then copy the completed frame to the visible window.</p> </li> <li> <p>How do you calculate the proper window size for a desired rendering resolution?</p> </li> <li> <p>Use <code>AdjustWindowRect()</code> with the window style and menu presence to calculate the total window size.</p> </li> <li> <p>How would you handle time in a game loop to ensure consistent movement across different frame rates?</p> </li> <li> <p>Calculate delta time between frames and scale all movement and animations by this value.</p> </li> <li> <p>What is a Device Context in Windows GDI and how is it used?</p> </li> <li>A DC is an object that encapsulates drawing attributes and a target surface for rendering operations.</li> </ol>"},{"location":"Game_Engine/AR250508/#conclusion","title":"Conclusion","text":"<p>Understanding Windows-specific graphic concepts is essential for C++ game programming interviews. By mastering window management, device contexts, and double buffering, you'll be well-prepared to tackle graphics-related interview questions and real-world game development challenges.</p> <p>Remember that while this article focuses on Windows GDI, modern games typically use DirectX, OpenGL, or Vulkan for hardware-accelerated rendering. However, the concepts of window management, resolution handling, and double buffering remain relevant regardless of the graphics API used.</p>"},{"location":"Game_Engine/AR250509/","title":"AR250509","text":"<p>Texture is image </p> <p>Image data input </p> <p>Game launch file process  Content resource path </p> <p>Binary folder inside  exe file inside all codes </p> <p>Contents folder  Path Manager </p> <p>Suppose player location painting should be painted  its image pixel 123 124  15252 </p> <p>most pixels are colored in magenta for should be vacant space  and other graphics are non magenta  now place this flight image </p> <p>bitmap to bitmap copy bitblt receives DCs  Suppose bitmap DC is connected to bitmap drawn with jet flight</p> <p>back buffer DC currently managed in DC </p> <p>Now we paint flight painted bitmap and DC , and based on player location  draw 123 124 </p> <p>fill the pixel  0, 0 pixel image color to the pixel on 123 124 to copy and paste ? </p> <p>CreateCompatibleBitmap  this one creates just empty big bitmap  but instead we are going to use assets </p> <p>When process executes it works on RAM  so from our image make bitmap from image and copy it ?  Texture folder fighter.bmp relative path  From C:\\ to contents folder it will be absolute path but  from contents folder assets like Sound Texture ...  Relative Path Fighter.bmp memory load and  generate bitmap and fill bitmap pixels based on image file loaded from SSD  bitmap is in RAM, texture file bmp png jpg whatever exist in SSD  so exe file running in RAM generates bitmap and load it from SSD </p> <p>One Monster several bitmaps ? 1 Image loading  If mosters are all same ... then ?  Only one original bitmap, but for each wishing actor it can be shared ?  Assets </p> <p>Asset class  one objet sharable ? </p> <p>Image file load from back buffer copy pixel and objects share same images </p> <p>Bitmap pixel borrowing </p> <p>If player want use that texture copy it  copy needs DC </p> <p>Texture class instance requires bitmap and dc! </p> <p>player by loading image function overriding </p> <p>PathMgr Player use image </p> <p>Windows OS </p> <p>Bitmap and DC are used </p> <p>DC connected  bitmap pixels </p> <p>Bitmap on back buffer to the bitmap displalyed in the main window  always dc connected to bitmap copy </p> <p>Bitblt  origin image color originally magenta color </p> <p>Should be hallow image is set up as magenta 255 0 255 right now  123 X 124 pixel back buffer to main DC  Copied well. </p> <p>Magenta color why? It should not be displayed but become hallow </p> <p>Squid game \ubf51\uae30 \ub9cc\ub4e4\uae30  Your goal is to make star or rectangle or umbrella </p> <p>Pixel also 123 124 shape you draw  but it is impossible to have it as hallow space ?  so it gets from 0 0 pixel to 123 124 pixels and fill it  while to notice unnecessary space fill it with magenta  If you fill it with black 0 0 0 color, but black is often used so not recommended  same for white 255255255 those pixels are also often used, while magenta is not </p> <p>Chromaki generally use green background color in movie  inserting that image  classical computer graphics  but superman inside green area might turun that green part into background too lol CG error </p> <p>Bitmap image function  bitblt similar but  TransparentBlt();  Instead of just normal bitblt it has transparecy color function for the last parameter  exact copy and paste for parameters used in BitBlt, except one more additional input that will neutralize its color  RGB macro magenta color will be empty RGB(255,0,255); </p> <p>So copy it into a destination  Error LNK1120 Link error  when function declaration only and not exist  Function is declared and used but not actually written </p> <p>Windows program include Windows header in pch </p>"},{"location":"Game_Engine/AR250509/#include","title":"include  <p>Function used very well  CreateWindow SetPos etc ... when we just included headers.  The reason why this exist  Visual Studio automatically setup project link and connection  Those are called as library </p> <p>Tick Render etc ... </p> <p>Method 1  Give Header file and CPP file both </p> <p>Compile process  linking moment  just give entire code  problem : it entirely exposes your code...  but what if you want to hide this cpp source code, while allowing it to use? </p> <p>Make header file and cpp file to compiled binary code so that it can be used while cpp code is invisible </p> <p>Windows dont even let us see its OS code kernel objects, so we should access only by Windows kernel object ID not code  We just link it. We include Windows header and use those functions during compile </p> <p>But, why TransparentBlt is not used ?  Generally this is not really used well normally.  BitBlt is included in Windows.h but TransparentBlt is kinda used rarely </p> <p>Windows header include  a lot of header files  Library is linked automatically by including Windows.h  It has header file ... but linking of cpp file is not yet ? </p> <p>Header file exist inside Windows.h so compile process it is possible , but  cpp file does not get linked inside Windows.h so we should access </p> <p>Search TransparentBlt Function inside Microsoft </p> <p>Header in wingdi.h, which is included in Windows.h  So we brought header info,  but its actual library is inside Msimg32.lib  https://learn.microsoft.com/ko-kr/windows/win32/api/wingdi/nf-wingdi-transparentblt</p>","text":""},{"location":"Game_Engine/AR250509/#include_1","title":"include","text":""},{"location":"Game_Engine/AR250509/#pragma-commentlib-msimg32lib","title":"pragma comment(lib, \"Msimg32.lib\") <p>Borrow to link together </p> <p>Now no link error anymore! </p> <p>All prepared bmp files are filled with Magenta right now </p> <p>Let Texture class generator and terminator private  friend class AssetMgr though </p> <p>Assets might be a lot hundreds  AssetMgr  Search Quick data structure </p> <p>Key Value  map BST  If Key is string  String Commparison to sort in order ..? is possible but  it is in alphabetical order  Programming Implementation? Ascii Code value Char is actually number  <p>ABC ABCD  Smaller String length is in priority </p> <p>String sort means which one is bigger or smaller </p> <p>Confusion: When learning string we learn as \"whatever\"  but inside code this is actually saved inside ROM as phrase and  optimized so when it is called access its address inside ROM and use that address  So program execution process it is saved inside ROM and must borrow its address by const pointer </p> <p>static cast access to the string represents forced change to the ROM area so it might cause error </p> <p>map  This approach might cause problem it might not be intuitive enough   suppose key value is  <p>public:   map mapStrings;   mapString.insert(make_pair(L\"Hello\", 10));   mapString.insert(make_pair(L\"MyName\", 20));  <p>It works fine without any compile error  mapString.find(L\"Hello\");  map:: iterator iter = mapString.find(L\"Hello\");  if(iter != mapString.end()) {     int a = iter-&gt;second; // a became 10, so it kinda works well!  } <p>But critical problem exist  map first type is POINTER type. 8 bytes address somewhere  map can get input as Addreess of string, not string itself!  ROM area address is string </p> <p>map saved Address value of string as Key, not string itself!!!  So Address value comparison was used inside map, NOT Strings themselves! </p> <p>So if you use   mapString.insert(make_pair(L\"Hello\", 10));  This again, then it gets very problematic. </p> <p>It is not inserting string \"Hello\" inside map again, but its ROM address already generated and saved inside ROM  wchar_t szString[100] = L\"Hello\";  it borrows string value from \"Hello\" existing inside ROM copied by address access  so L\"Hello\" address and szString address will be completely different  szString inside stack while L\"Hello\" string saved inside ROM and used as pointer to access ROM area  iter = mapString.find(szString);  This will NOT return L\"Hello\" input above that will save ROM address of L\"Hello\"  thus map find by szString will search by address of newly generated  String value designation </p> <p>specific string containor wstring or string class  Lets use map key val as wstring, not pointer but class wstring  wstring is string managing STL class </p> <p>it is very similar to vector, dynamic array  internally it supports several operator functiosn  wstring str1 = L\"Hello\";  wstring str2 = L\"Hello\";  In this case, str1 and str2 will manage their data inside heap memory dynamically allocated,  filling their H e l l o characters inside assigned space</p> <p>Since they manage str, when their operator == happens  they check by their data NOT pointer  So even though str1 and str2 have different address  if their contents inside heap are same its operator check by each character </p> <p>Also similarly works for big small operators &lt; &gt; so comparison works as intended  operator&lt;(str1, str2) // same as str1 &lt; str2  They compare each element from index 0 to end by accessing each character stored in their assigned heap  wstring  map Thus, this will work as intended in alphabetical order  instead of really using input string that will execute == or &gt; &lt; operators by using ROM pointers  <p>map and for this usage  myMap.find(L\"Hello\"); // This will work without problem  <p>find function will be find(wstring _str); for this map  so even though you input by L\"whatever\" direct string input find function will suppose input string as wstring data type </p> <p>Also wstring map will use copy operator of static array like wchar_t szString[100] = L\"whatever\" this will work too for map <p>string or array </p> <p>so for our asset manager </p> <p>map m_mapTex;  This will be used. Search by string will work by this way for these reasons  <p>FindTexture  LoadTexture  by wstring is now possible! it is more easy now to find and load texture </p> <p>texture class </p> <p>m_Image = AssetMgr::Get()-&gt;LoadTexture(L\"Fighter\", L\"Texture\\Fighter.bmp\"); </p>","text":""},{"location":"Game_Engine/AR250509/#include-pathmgrh","title":"include \"PathMgr.h\" <p>wstring ContentPath = PathMgr::GetInst()-&gt;GetContentPath();  m_Image = new ATexture; </p> <p>pNewTex-&gt;Load(ContentPath  + _RelativePath); </p> <p>m_mapTex.insert(make_pair(_Key, pNewTex)); </p> <p>m_Texture = AssetMgr::GetInst()-&gt;LoadTexture(L\"Sonic\", L\"Texture\\Idle_left.bmp\"); </p>","text":""},{"location":"Game_Engine/AR250512/","title":"Texture Loading and TransparentBlt","text":""},{"location":"Game_Engine/AR250512/#introduction-to-game-graphics-architecture","title":"Introduction to Game Graphics Architecture","text":"<p>Game development requires a solid understanding of how images are processed, stored, and displayed. This article explores the fundamental concepts of texture management, bitmap handling, and asset management in Windows game programming using C++.</p>"},{"location":"Game_Engine/AR250512/#texture-and-image-handling-fundamentals","title":"Texture and Image Handling Fundamentals","text":"<p>In game development, textures are the visual elements that bring your game world to life. Understanding how to manage these resources efficiently is crucial for performance optimization.</p>"},{"location":"Game_Engine/AR250512/#texture-loading-pipeline","title":"Texture Loading Pipeline","text":"<p>The basic texture loading process follows these steps:</p> <ol> <li>Locate the image file on disk (using relative or absolute paths)</li> <li>Load the image data from SSD/storage into RAM</li> <li>Convert the image into a bitmap format that can be manipulated in memory</li> <li>Use the bitmap for rendering game objects</li> </ol> <pre><code>// Example of a relative path structure\n// From the game's root directory:\n// /Contents/Texture/Fighter.bmp\n</code></pre> <p>When a game process executes, it operates primarily in RAM. Image files stored on disk (SSD/HDD) must be loaded into memory, converted to bitmaps, and then manipulated for rendering.</p>"},{"location":"Game_Engine/AR250512/#memory-considerations","title":"Memory Considerations","text":"<p>A key concept to understand is the difference between storage locations: - Image files: Stored on SSD/HDD (persistent storage) - Bitmaps: Generated in RAM during runtime - Executable code: Runs from RAM</p>"},{"location":"Game_Engine/AR250512/#windows-gdi-graphics-basics","title":"Windows GDI Graphics Basics","text":"<p>Windows game programming often leverages the Graphics Device Interface (GDI) for 2D rendering. Two core GDI concepts are:</p>"},{"location":"Game_Engine/AR250512/#device-contexts-dcs","title":"Device Contexts (DCs)","text":"<p>A Device Context (DC) is an essential Windows graphics concept - it's a handle that represents a drawing surface and contains the information needed to draw on that surface.</p> <pre><code>// Creating a compatible DC\nHDC memDC = CreateCompatibleDC(mainDC);\n</code></pre>"},{"location":"Game_Engine/AR250512/#bitmaps","title":"Bitmaps","text":"<p>Bitmaps are representations of image data in memory that can be manipulated and displayed.</p> <pre><code>// Creating an empty bitmap\nHBITMAP hBitmap = CreateCompatibleBitmap(mainDC, width, height);\n\n// Selecting the bitmap into a DC\nHBITMAP hOldBitmap = (HBITMAP)SelectObject(memDC, hBitmap);\n</code></pre>"},{"location":"Game_Engine/AR250512/#rendering-techniques","title":"Rendering Techniques","text":""},{"location":"Game_Engine/AR250512/#bitblt-bit-block-transfer","title":"BitBlt (Bit Block Transfer)","text":"<p>BitBlt is a fundamental Windows GDI function that copies a rectangle of pixels from one DC to another.</p> <pre><code>// Basic BitBlt usage\nBitBlt(\n    destDC,          // Destination device context\n    destX, destY,    // Destination coordinates\n    width, height,   // Width and height of area to copy\n    sourceDC,        // Source device context\n    sourceX, sourceY, // Source coordinates\n    SRCCOPY          // Raster operation code\n);\n</code></pre>"},{"location":"Game_Engine/AR250512/#transparentblt-for-transparency","title":"TransparentBlt for Transparency","text":"<p>Unlike BitBlt, TransparentBlt allows for transparent regions in your images, which is crucial for game sprites.</p> <pre><code>// TransparentBlt usage\nTransparentBlt(\n    destDC,          // Destination device context\n    destX, destY,    // Destination coordinates \n    width, height,   // Width and height of area to copy\n    sourceDC,        // Source device context\n    sourceX, sourceY, // Source coordinates\n    width, height,   // Source width and height\n    transparentColor // Color to treat as transparent\n);\n\n// Example of setting magenta as transparent\nCOLORREF transparentColor = RGB(255, 0, 255);\n</code></pre>"},{"location":"Game_Engine/AR250512/#important-note-linking-transparentblt","title":"Important Note: Linking TransparentBlt","text":"<p>While BitBlt is included in Windows.h by default, TransparentBlt requires an additional library:</p> <pre><code>#include &lt;Windows.h&gt;\n#pragma comment(lib, \"Msimg32.lib\")  // Required for TransparentBlt\n</code></pre> <p>Without this library link, you'll encounter linker errors (LNK1120) even though the function is declared in wingdi.h.</p>"},{"location":"Game_Engine/AR250512/#transparency-in-game-graphics","title":"Transparency in Game Graphics","text":""},{"location":"Game_Engine/AR250512/#using-magenta-for-transparency","title":"Using Magenta for Transparency","text":"<p>Game programmers often use magenta (RGB 255, 0, 255) as a transparent color because:</p> <ol> <li>It's rarely used in actual game graphics</li> <li>Unlike black (0,0,0) or white (255,255,255), which are common colors</li> <li>It's similar to chromakey techniques used in film/TV (though they typically use green)</li> </ol> <pre><code>// Setting magenta as the transparent color\nTransparentBlt(..., RGB(255, 0, 255));\n</code></pre>"},{"location":"Game_Engine/AR250512/#player-position-and-rendering","title":"Player Position and Rendering","text":"<p>When rendering game objects like a player character:</p> <ol> <li>Determine the player's position (e.g., coordinates 123, 124)</li> <li>Draw the sprite at that position using TransparentBlt</li> <li>Magenta pixels in the source image will be treated as transparent</li> </ol>"},{"location":"Game_Engine/AR250512/#asset-management","title":"Asset Management","text":"<p>Managing game assets efficiently is crucial for performance and maintainability. A good asset management system needs to:</p> <ol> <li>Quickly find and load assets</li> <li>Avoid duplicate loading of the same assets</li> <li>Handle memory efficiently</li> </ol>"},{"location":"Game_Engine/AR250512/#creating-an-asset-manager-class","title":"Creating an Asset Manager Class","text":"<pre><code>class AssetMgr {\nprivate:\n    // Using map with wstring keys for easy asset lookup\n    map&lt;wstring, ATexture*&gt; m_mapTex;\n\n    // Singleton pattern\n    static AssetMgr* m_pInst;\n\npublic:\n    static AssetMgr* GetInst() {\n        if (nullptr == m_pInst) {\n            m_pInst = new AssetMgr;\n        }\n        return m_pInst;\n    }\n\n    ATexture* LoadTexture(const wstring&amp; _Key, const wstring&amp; _RelativePath);\n    ATexture* FindTexture(const wstring&amp; _Key);\n};\n\n// Implementation example\nATexture* AssetMgr::LoadTexture(const wstring&amp; _Key, const wstring&amp; _RelativePath) {\n    // Check if texture already exists\n    ATexture* pTexture = FindTexture(_Key);\n    if (nullptr != pTexture) {\n        return pTexture;  // Return existing texture\n    }\n\n    // Create new texture\n    wstring ContentPath = PathMgr::GetInst()-&gt;GetContentPath();\n    ATexture* pNewTex = new ATexture;\n\n    // Load texture from file\n    if (!pNewTex-&gt;Load(ContentPath + _RelativePath)) {\n        delete pNewTex;\n        return nullptr;\n    }\n\n    // Store in map and return\n    m_mapTex.insert(make_pair(_Key, pNewTex));\n    return pNewTex;\n}\n</code></pre>"},{"location":"Game_Engine/AR250512/#path-management","title":"Path Management","text":"<p>Managing file paths is another critical aspect of game development. The <code>PathMgr</code> class handles path resolution:</p> <pre><code>class PathMgr {\nprivate:\n    wstring m_ContentPath;  // Base path to content folder\n\n    // Singleton pattern\n    static PathMgr* m_pInst;\n\npublic:\n    static PathMgr* GetInst() {\n        if (nullptr == m_pInst) {\n            m_pInst = new PathMgr;\n        }\n        return m_pInst;\n    }\n\n    const wstring&amp; GetContentPath() { return m_ContentPath; }\n    void Init();\n};\n</code></pre>"},{"location":"Game_Engine/AR250512/#data-structures-for-game-asset-management","title":"Data Structures for Game Asset Management","text":""},{"location":"Game_Engine/AR250512/#using-stl-map-for-asset-lookup","title":"Using STL Map for Asset Lookup","text":"<p>The notes highlight an important consideration when using maps with string keys:</p> <pre><code>// PROBLEMATIC: Using raw string pointers as keys\nmap&lt;const wchar_t*, int&gt; mapStrings;\nmapStrings.insert(make_pair(L\"Hello\", 10));\nmapStrings.insert(make_pair(L\"MyName\", 20));\n\n// The issue: This compares pointers, not string contents\n</code></pre> <p>The problem with using raw string pointers (like <code>const wchar_t*</code>) as map keys is that the map compares the pointers themselves, not the string contents. This can lead to unexpected behavior:</p> <pre><code>// These two strings have the same content but different addresses\nwchar_t szString[100] = L\"Hello\";  // On stack\nconst wchar_t* pString = L\"Hello\"; // Address to ROM\n\n// This lookup will fail even though the content is \"Hello\"\nauto iter = mapStrings.find(szString);  // Compares addresses, not content\n</code></pre>"},{"location":"Game_Engine/AR250512/#solution-using-wstring-as-map-key","title":"Solution: Using wstring as Map Key","text":"<p>The better approach is to use <code>wstring</code> as the key type:</p> <pre><code>// BETTER: Using wstring as the key type\nmap&lt;wstring, int&gt; mapStrings;\nmapStrings.insert(make_pair(L\"Hello\", 10));\n\n// Now this works correctly, comparing string contents\nwchar_t szString[100] = L\"Hello\";\nauto iter = mapStrings.find(szString);  // Finds the entry correctly\n</code></pre> <p>Using <code>wstring</code> ensures that: 1. String content comparisons work correctly (instead of pointer comparisons) 2. The map handles the memory management of the strings 3. Standard operations like alphabetical ordering function properly</p>"},{"location":"Game_Engine/AR250512/#texture-class-design","title":"Texture Class Design","text":"<p>A basic texture class for a game might look like:</p> <pre><code>class ATexture {\nprivate:\n    HBITMAP m_hBitmap;  // Handle to the bitmap\n    HDC     m_hDC;      // Device context for the bitmap\n\n    // Make constructor/destructor private if using factory pattern\n    ATexture();\n    ~ATexture();\n\n    // Friend the asset manager to allow it to create textures\n    friend class AssetMgr;\n\npublic:\n    bool Load(const wstring&amp; _strFilePath);\n    void Render(HDC _dc, int _x, int _y);\n};\n\n// Example usage in a game object\nclass Player {\nprivate:\n    ATexture* m_Texture;\n    int m_PosX;\n    int m_PosY;\n\npublic:\n    void Init() {\n        m_Texture = AssetMgr::GetInst()-&gt;LoadTexture(L\"Fighter\", L\"Texture\\\\Fighter.bmp\");\n    }\n\n    void Render(HDC _dc) {\n        if (m_Texture) {\n            m_Texture-&gt;Render(_dc, m_PosX, m_PosY);\n        }\n    }\n};\n</code></pre>"},{"location":"Game_Engine/AR250512/#compilation-and-linking-process","title":"Compilation and Linking Process","text":""},{"location":"Game_Engine/AR250512/#headers-vs-implementation-files","title":"Headers vs Implementation Files","text":"<p>The notes touch on an important aspect of C++ development: the separation of interface (headers) and implementation (cpp files):</p> <ol> <li>Headers (.h): Declare functions, classes, and their interfaces</li> <li>Implementation (.cpp): Contain the actual code that implements those declarations</li> </ol>"},{"location":"Game_Engine/AR250512/#libraries-and-linking","title":"Libraries and Linking","text":"<p>When you use functions like <code>CreateWindow</code> or <code>BitBlt</code>, they're declared in headers but implemented in libraries that are linked during compilation:</p> <pre><code>// Including Windows.h brings in many header files\n#include &lt;Windows.h&gt;\n\n// For TransparentBlt, you also need to link to Msimg32.lib\n#pragma comment(lib, \"Msimg32.lib\")\n</code></pre> <p>This separation allows library creators to: 1. Share functionality without exposing source code 2. Update implementations without requiring users to change their code 3. Distribute binary libraries (.lib files) instead of source code</p>"},{"location":"Game_Engine/AR250512/#best-practices-and-optimization","title":"Best Practices and Optimization","text":""},{"location":"Game_Engine/AR250512/#1-asset-sharing","title":"1. Asset Sharing","text":"<p>When multiple game objects use the same texture (e.g., multiple enemies of the same type), load the texture only once and share references:</p> <pre><code>// Instead of loading for each monster\nfor (auto monster : monsters) {\n    // WRONG: Loads multiple copies of the same texture\n    monster.texture = new Texture(\"monster.bmp\"); \n}\n\n// CORRECT: Load once and share\nATexture* sharedTexture = AssetMgr::GetInst()-&gt;LoadTexture(L\"Monster\", L\"Texture\\\\monster.bmp\");\nfor (auto monster : monsters) {\n    monster.texture = sharedTexture;\n}\n</code></pre>"},{"location":"Game_Engine/AR250512/#2-double-buffering","title":"2. Double Buffering","text":"<p>The notes mention a \"back buffer DC\", which refers to double buffering:</p> <ol> <li>Render everything to an off-screen buffer (back buffer)</li> <li>Copy the completed frame to the visible screen buffer (front buffer)</li> <li>This prevents visual artifacts and flickering</li> </ol> <pre><code>// Create back buffer\nHDC backBufferDC = CreateCompatibleDC(mainWindowDC);\nHBITMAP backBuffer = CreateCompatibleBitmap(mainWindowDC, windowWidth, windowHeight);\nSelectObject(backBufferDC, backBuffer);\n\n// Draw to back buffer\n// ... rendering code ...\n\n// Copy to screen in one operation\nBitBlt(mainWindowDC, 0, 0, windowWidth, windowHeight, backBufferDC, 0, 0, SRCCOPY);\n</code></pre>"},{"location":"Game_Engine/AR250512/#3-memory-management","title":"3. Memory Management","text":"<p>Always clean up resources when they're no longer needed:</p> <pre><code>// Clean up GDI resources\nDeleteObject(hBitmap);\nDeleteDC(memDC);\n</code></pre>"},{"location":"Game_Engine/AR250512/#conclusion","title":"Conclusion","text":"<p>Game programming in C++ with Windows GDI requires a solid understanding of graphics concepts, memory management, and efficient asset handling. By implementing proper texture management, transparency handling, and asset management systems, you can create efficient and maintainable game code.</p> <p>This article covered the core concepts needed for 2D game graphics programming on Windows using C++. These fundamentals form the foundation for more advanced game development techniques.</p>"},{"location":"Game_Engine/AR250513/","title":"AR250513","text":"<p>Actor  Render  Virtual Function Override  Actor Pointer </p> <p>Sprite Asset  Image piece basically </p> <p>One image containing several images as player image  link_32.bmp file.  about 32 images one character with different actions, and we want only one piece of those 32 to be used. </p> <p>Sprite asset certain texture inside certain value </p> <p>Sprite asset represents specific texture certain part only  class ASprite: public Asset  { private:      ATexture* m_AtlasTex;      Veec2 m_LeftTop;      Vec2 m_Slice; // How to cut ? can be named as m_Area </p> <p>public:      void Create(ATexture* _AtlasTex, Vec2 _LeftTop, Vec2 _Slice);  }</p> <p>int ASprite::Load(const wstring&amp; _FilePath)</p> <p>void ASprite::Create(ATexture* _AtlasTex, Vec2 _LeftTop, Vec2 _Slice);  We currently have no sprite usage file, so better to make sprite file </p> <p>map m_mapTex;  map m_mapSprite;  <p>ASprite FindSprite(const wstring &amp; _Key); ASprite LoadSprite(const wstring &amp; _Key, coinst wstring &amp; _RelativePath);</p> <p>Load Sprite  ASprite* pSprite = FindSprite(_Key);  FindSprite(_Key); </p> <p>void AssetMgr::AddSprite(const wstring&amp; _Key, ASprite *_Sprite)  {</p> <p>}</p> <p>Sprite File existance  AssetMgr  Initializer  void Init(); </p> <p>PathMgr::Init();  AssetMgr()::Init(); </p> <p>First load texture to be used as sprite  void AssetMgr::Init() {     //      LoadTexture (L\"LinkTexture\", L\"Texture\\link_32.bmp\");  }</p> <p>ASprite *pSprite = new ASprite;  pSprite-&gt;Create();  1200 X 1040 Pixels </p> <p>1200 / 10 = 120 width  1040 / 8 = 130 length  X Axis </p> <p>pSprite-&gt;Create(pAtlasTex, Vec2(240.f, 520.f), Vec2(120.f, 130.f)) AddSprite(L\"Sprite_01\", pSprite); </p> <p>class ASprite;  Player now render itself as sprite, not image now </p> <p>LoadTexture(LinkTexture, Texture\\link_32.bmp) </p> <p>m_Image(nullptr), m_Sprite(nullptr)  Texture Image </p> <p>Player Atlas Texture to top right  Slice only some part of the entire bmp file should get parsed and rendered  x y value Player location slice half half up </p> <p>m_Sprite-&gt;GetSlice().x / 2.f  m_Sprite-&gt;GetSlice().y / 2.f </p> <p>Vec2 GetSlice(){return m_Slice;} Vec2 GetLeftTop()</p> <p>Sprite  Player Render Function Sprite Pointing  Several Sprites switch time continuously  Atlas Texture to Sprite Animation </p> <p>All players and monsters will need sprite animations then how?  Copy and paste all these functions will be too much </p> <p>Actor function added dilemma : class inheritance  Actor class to player monster parsed and divided Actor is virtual class </p> <p>Monster Animation and Player Animation is required  Use inheritance, Actor inherited Animactor  Add animation, inherited player and monster will have animation function in default  So virtual declaration of Animator function is required  Actor inherited UI exist, Player monster health bar circumstance inventory status etc  UI purpose animation  Actor is drived from UI, but we want certain UI to have animation ... then how?  The problem is game designers don't know programming so even though it is good idea  programmers generally get exclusive for instance comics  Game Designers can do programming and have understanding, so they design game by making sense </p> <p>Inheritance structure  class inherit functions of parent what if certain class want animation in inheritance tree ... how to predict this is Old fashioned  </p> <p>Currently Component  Pointer based Polymorphism is necessary, but since some need animation or others dont without clear inheritance structure  Component based design like like equipment is required  Diablo, Path of Exile : Tribe or Character Class  If inheritance based structure ... Barbarian Archer Whatever ...  if skills are independently implemented like a component, then skills might be shared. </p> <p>Actors main components inside inheritence  Component class  Component.h Component.cpp </p> <p>class Component  { private:</p> <p>public:      virtual void FinalTick = 0; </p> <p>public:      Component();      virtual ~Component(); // Inheritance parent, terminator must be virtual }</p> <p>Like Actor, Components will be used by Actor()  Actor might have a lot of Componeents </p> <p>Component will have  Collider  Aminator // Sprite FlipbookPlayer etc several names per each different Engine  RigidBody // \uac15\uccb4  StateMachine // Game AI, not ML. All controlled by Programmer coded FSM</p> <p>Collider might be several. for instance in FPS body head leg shot will be treated differently </p> <p>Components will also be based on polymorphism vector m_vecCom;  Actor will get Components as parent components  <p>Actor will also have FinalTick()'  original Tick represented : what Actors execute per each frame  FinalTick represents: what Components owned by Actor will do per each  void Actor::FinalTick() {     for(size_t i=0; iFinalTick();      } } <p>enum COMPONENT_TYPE {     COLLIDER,      RIGIDBODY,     FLIPBOOKPLAYER,      STATEMACHINE,  }</p> <p>class Component { private:      const COMPONENT_TYPE m_Type;  public:      virtual void FinalTick() = 0;  }</p> <p>Rigid body perspective Component  Rigid Body will contain enum value COMPONENT_TYPE  If you make whatever COMPONENT type variable flip book player </p> <p>FB Player Type Rigid Body </p> <p>// Remove Default generator  COMPONENT::COMPONENT(COMPONENT_TYPE _Type): m_Type(_Type) {}</p> <p>Now, default generator usage will cause error since parent class default generator is resetted </p> <p>FlipbookPlayer::FlipBookPlayer(): Component(COOMPONENT_TYPE::FLIPBOOKPLAYER) {}</p> <p>Actor does Not know aht component type it includes inside vector in default  <p>So even though parent pointer points component  parent class inherited  runtime  RTTI (RunTime Type Identification(or Identification)) During program execution what type notify.  In this case RTTI is COMPONENT_TYPE  also supported in language type called as dynamic_cast </p> <p>C++ RTTI dynamic_cast </p> <p>const COMPONENT_TYPE m_Type  Collide Component State Machine Component  Rigid Body Component  Default Generator </p> <p>Collider::Collider():Component(COMPONENT_TYPE::COLLIDER) virtual vodi FinalTick() override; </p> <p>all Component inherited classes to override </p> <p>Actor derived player monster etc all can receive </p> <p>void Actor::AddComponent(Component* _Component) // Could be whatever  {     m_vecCom }</p> <p>Actor instance and Actor Collider Component inputed inside Actor then it will point  Player collider actor add component FP RB generate all and input Components </p> <p>pActor-&gt;AddComponent(new Collider);  pActor-&gt;AddComponent(new FlipbookPlayer);</p> <p>State Machine like Component Actor behavior Component  Moster State Machine Player Actor find walk there move should know Actor current address </p> <p>class Actor* m_Owner  Component generation process  m_Owner(nullptr)  Actor Component Vector pointing  so now Actor know Components address and Components know owner Actor address now </p> <p>Each Component is newly dynamic allocation data inside heap so should be freed </p> <p>Level will also have FinalTick();  All Actors call FinalTick();  Then All Components inide each Actor will call FinalTick(); </p> <p>Flipbook player is kinda CD player  Flipbook is kinda CD  all group of sprite images </p> <p>class ASprite; </p> <p>class AFlipbook : public Asset{     private:      vector m_vecSprite;      public:      void AddSprite(int idx, ASprite *_Sprite);  public:      AFlipBook();      virtual ~AFlipBook();  } <p>AFlipBook</p> <p>LinkSprite  FindSprite </p> <p>// m_VecSprite.reserve(); // Empty Vector Space Get Only  if(m_vecSprite.size()&lt;= Idx){     m_VecSprite.resize(idx+ 1);  // Empty Vector Space Get and Fill  }</p> <p>Now Animation will be done by FlipBookPlayer! </p>"},{"location":"Game_Engine/AR250513/#0514","title":"0514","text":"<p>Parent ptr to child class pointing is possible but child ptr pointing parent class does not work  So forced casting is required </p> <p>Forced pointer casting from Component parent class to FlipbookPlayer child class  FlipbookPlayer pFlipbookPlayer = (FlipbookPlayer)  GetComponent(COMPONENT_TYPE::FLIPBOOKPLAYER);</p> <p>Down casting </p> <p>Component* pFlipBookPlayer = GetComponent(COMPONENT_TYPE::FLIPBOOKPLAYER); </p> <p>FlipbookPlayer *pFP = dynamic_cast(pFlipbookPlayer);  <p>this case preventing failure is possible </p> <p>Component inherited collider or FlipbookPlayer etc  Forced casting will always make ptr as FlipBookPlayer, but suppose you made mistake so  GetComponent returns another child class like Collider* which is another child class then it is dangerous </p> <p>Thus dynamic casting is much safer to ensure  What you received is really ? </p> <p>Component pFlipBookPlayer = GetComponent(COMPONENT_TYPE::FLIPBOOKPLAYER);  FlipbookPlayer pFP = dynamic_cast(pFlipbookPlayer); If this failed, aka returned pointer *Component pFlipbookPlayer is NOT FlipbookPlayer then  dynamic_cast will return nullptr, instead of forcing non FlipbookPlayer class pointer forced   Virtual function pointing result in  <p>one virtual function existence is required to make virtual function pointer __vptr ? </p> <p>Pointing by Component pointer or FlipbookPlayer pointer it would fine. </p> <p>But when you point newly generated pointer  Down Casting by Dynamic Pointer. Whether it is possible to point it out or not  If component Pointer is new flipbookPlayer pointer </p> <p>Suppose inheritance happened twice, so Component : FBPlayer : ChildFBPlayer  Then, down casting from Component to FBPlayer Success,  but you are NOT sure about whether it is FBPlayer or ChildFBPlayer </p> <p>That is why const COMPONENT_TYPE m_Type generation for each Component is recommended.  dynamic_cast might be problematic for this reason when inheritance level is complicated </p> <p>FlipbookPlayer *pFP = dynamic_cast(GetComponent(L\"FlipbookPlayer\")); assert(pFlipbookPlayer); // assert of dynamic casting failed  <p>template T* GetComponent(const wstring&amp; _Name); <p>RigidBody GetComponent(const wstring&amp; _Name); Collider GetComponent(const wstring&amp; _Name);</p> <p>Template is better this case. should be inside header file. If function gets big then do it outside class  template T* Actor::GetComponent(const wstring&amp; _Name){     for(size_t i=-; i&lt;m_VecCom.size(); ++i){ <pre><code>}\n</code></pre> <p>}</p> <p>Name Type T Type No input Compiler  FlipbookPlayer* pFlipbookPlayer = GetComponent(); // calls Like thi <p>Type T Component Type Ptr no need to do down casting now this way so that intended ptr is returned as intended class ptr RTTI enum type downcasting </p> <p>Player Collider * m_Collider;  FlipbookPlayer * m_FlipbookPlayer;</p> <p>Player::Player(): </p> <p>template T AddComponent(T* _Component) { <pre><code>m_vecCo.push_back(_Component); \n_Component-&gt;m_Owner = this;\n\nreturn _Component;\n</code></pre> <p>}</p> <p>Player should not delete Component  also Actor will delete all Components  so should NOT perform heap clening outside Actor parent class, double free </p> <p>FlipbookPlayter  vector m_PlayList;  AFlipbook*         m_CurFlipBook; // <p>Now Player's FlibookPlayer will be in charge of rendering  Among several sprite images owned by Fliboook Player </p> <p>int GetMaxSprite{ return m_vecSprite.size();} ASprite* GetSprite(int idx){ return m_vecSprite[_Idx];}</p> <p>if(m_CurFlipbook == nullptr) return;  </p>"},{"location":"Game_Engine/AR250515/","title":"AR250515","text":"<p>Key manager singleton  tick  Engine  KeyMgr // Kinda InputMgr ?  TimeMgr::GetInst()-&gt;Tick();  KeyMgr::GetInst()-&gt;Tick();  LevelMgr::GetInst()-&gt;Tick(); </p> <p>Now check all key status  void KeyMgR::Tick() {     for(size_t i=0; i&lt; m_vecKeys.size(); ++i)     {         if(GetAsyncKeyState('W')){}     } }</p> <p>What windows get about key val and you get is completely different so  int KeyData[KEY_END] =  {</p> <p>} Windows key press preprocessor VK_RETURN // Keyboard key Enter  if(GetAsyncKeyState(VK_RETURN)) is Enter press  '0' '1' ...  'W' 'A' /// VK_MENU  VK_CONTROL VK_SPACE VK_LSCHIP VK_ESCAPE VK_END </p> <p>if(GetAsyncKeyState(KeyData[i])) {     m_VecKeys[i].PrevPressed = true;  }else {     m_VecKeys[i].PrevPressed = false;  }</p> <p>KeyData[i].State; </p> <p>enum KEY_STATE{     NONE,      TAP, // Pressed at Now Tick     PRESSED, // Pressed at previous tick and currently still pressed      RELEASED // Pressed at previous tick and not pressed this tick  }</p> <p>So TAP and RELEASED should be one Tick and after that should be NONE or PRESSED </p> <p>Game 1 second to 60 frames processed \ucca0\uad8c PVP game 1 sec to 60 Frame because  \uaca9\ud22c \uac8c\uc784\uc740 \uc608\uc0c1\uc744 \ud558\uba74 \uc548\ub428  1 Frame to \ub799 &gt;  1000 0.5 1/2 500 so delta time system lack Delta Time it would make serious problem  Collision \ud310\uc815 \uc815\uad50 include collision and damage input when knife moves it takes a second but \ub799 DT gets over a seocnd  weapon should hit monster ... but if DT makes monster lack caused so collision does not happen due to lack  DT based game, no execptional cases then you use weapon, but frame let knife top to down directly so collison might not happen </p> <p>Also if character moves to the wall collision should happen, but if frame drop became 500FPS to 1FPS then it can literally ignore wall and go straight DT based system current position and DT increments a lot so if collision exist it should get checked ... so  Game 1 second divided by 60 frames still so FRAME fixed to execute tick and collision happening check </p> <p>3 / 60 If RA key pressed 1/60 second is still very short time and even though you press it again 5 Frame  and animation speed too so if it takes about 15 frames, then attack wil happen about 20 frames </p> <p>20 frame delay enemy unable to gurard, </p> <p>So anyway key frame should be figured out  GetAsyncState if key is pressed  PrevPressed records whether it is previously pressed in the previous frame </p> <p>if(GetAsyncKeyState(KeyData[i])) {     if(m_vecKeys[i].PrevPressed){ // pressed in previous frame and still pressed          m_vecKeys[i].State = PRESSED;     }</p> <pre><code>else { // Not pressed in previous frame \n    m_vecKeys[i].State = TAP;\n}\n</code></pre> <p>}</p> <p>else {     if(m_vecKeys[i].PrevPressed){ // not pressed in previous frame and still not pressed          m_vecKeys[i].State = RELEASED;     }</p> <pre><code>else { // pressed in previous frame and not pressed this frame \n    m_vecKeys[i].State = NONE;\n}\n</code></pre> <p>}</p> <p>Now key check complete  and windows will get KeyMgr received info  instead of GetAsyncKeyState('W)  KeyMgr::GetInst()-&gt;GetKeyState(Key::W) == PRESSED </p> <p>State PlayerState cpp h file  Idle </p> <p>Header enum DIR </p> <p>DIR GetDir  Idle state enter  GetOwnerActor(); </p>"},{"location":"Game_Engine/AR250515/#include-playerh","title":"include \"Player.h\"","text":"<p>Player OwnerActor = dynamic_cast (GetOwnerActor());  assert (OwnerActor);  DIR Direction = OwnerActor-&gt;GetDir();  FlipbookPlayer pFlipbookPlayer = OwnerActor-&gt;GetComponent();  <p>Animation Play now removed </p> <p>void ChangeFlipbook </p> <p>Animation Move up MOVE_UP </p>"},{"location":"Game_Engine/AR250519/","title":"AR250519","text":"<p>\ub808\ubca8 \uc548\uc5d0\uc11c \ubb38\uc81c \ubd84\ub958 \uae30\uc900 \ub450\uae30 class Level : public Base  {     vector m_VecActor; <pre><code>void AddActor(int _idx, Actor *_Actor){m_VecActor[_idx].push_back(_Actor)}\n</code></pre> <p>} </p> <p>enum ACTOR+TYPE {     DEFAULT,      BACKGROUND,      TILE,      PLAYER,      ENEMY,      PLAYER_PROJECTILE, </p> <pre><code>ACTOR_END = 32; // Total maximum number\n</code></pre> <p>}</p> <p>void AddActor should input ACTOR_TYPE </p> <p>Now tick execution inside Level class als should be changed  for(UINT i = ACTOR_TYPE::DEFAULT; I &lt; ACTOR_END' ++i) {     for(size_t i = 0; i &lt; m_vecActor[i].size(); ++j)     {         m_vecActor[i][j]-&gt;Tick();      } }</p> <p>Dual Vector containing each type </p> <p>class Collider : public Component  { private:  public:      virtual void FinalTick() override; </p> <p>public:      Collider();      ~Collider();  } </p> <p>Visualization, Debug Rendering  Debug Renderer </p> <p>Currently LevelMgr handles everything. Engine gives Level tick  and LevelMgr executes all actor tick and  Engine delete  Backbuffer screen and then  Level Render then All Actors inside Level gets rendered  Finally Engine copies Backbuffer to the main screen </p> <p>RenderMgr is recommended to be created now </p> <p>class RenderMgr (Singleton Also)  RenderMgr::GetInst()-&gt;Tick(); </p> <p>Now Engine gets more simple  HDC hBackDC = Engine::GetInst()-&gt;GetBackBufferDC(); </p> <p>Back buffer to main buffer DC Engine </p> <p>RenderMgr will also include DebugRender  will be located between  LevelMgr::GetInst()-&gt;Render(hBackDC); // here Debug Render  TimeMgr::GetInst()-&gt;Render(hBackDC);</p> <p>void RenderMgr::DebugRender(){     Actor;  }</p> <p>// Debug painting info  struct tDebugShapeInfo {     Vec2 vCenter;      Vec2 vScale;      PEN_TYPE PenType;      BRUSH_TYPE BrushType;      DEBUG_SHAPE Shape; // should make new enum  }; </p> <p>enum DEBUG_SHAPE {     RECT, // not only squrare      CIRCLE,     LINE,  }</p> <p>list m_DebugRenderList;  <p>list is better to make or remove data easily  struct tDebugShapeInfo  {     Vec2 Center;      Vec2 Scale;      PEN_TYPE PenType;      BRUSH_TYPE BrushType;  }</p> <p>class RenderMgr  if(m_DebugRenderList.empty()) return; </p> <p>void AddDebugShape(const tDebugShapeIndo &amp;Info){     m_DebugRenderList.push_back(_Info);  }</p> <p>void RenderMgr::DebugRender()</p> <p>list must work by iterator  for list iteration  iter-&gt;Center;  iter-&gt;Scale;  iter-&gt;PenType;  iter-&gt;Duration;  iter-&gt;CurTime;  iter-&gt;Shape; </p> <p>switch case </p> <p>Engine::GetInst()-&gt;GetPen();  SelectObjecT(hBackDC, Engine::GetInst()-&gt;GetPen(iter-&gt;PenType));  switch(DEBUG_SHAPE){     case DEBUG_SHAPE::RECT:          Rectangle(hBackDC,          (int)(iter-&gt;Cetner.x - iter-&gt;Scale.x / 2.f),          (int)(iter-&gt;Cetner.y - iter-&gt;Scale.y / 2.f),          (int)(iter-&gt;Cetner.x + iter-&gt;Scale.x / 2.f),          (int)(iter-&gt;Cetner.y - iter-&gt;Scale.y / 2.f),          ) }</p> <p>Important note : iterator in list  if  iter = m_list.erase(iter); // This case iterator moves more, due to for loop ++ execution  else  ++iter; </p> <p>When removing something inside list remember to do eraase and handle ++iter properly, since erase will retuurn NEXT element! </p> <p>Moven onto player Tick if key_tap space then  include RenderMgr::GetInst()-&gt;AddDebugShape(); </p> <p>Debug Rendering like this </p> <p>Component inherited case then  Actor  Vec2 m_OffsetPos // Actor Owner distance (relative value) Collision location is same as Actor  Vec2 m_FinalPos  Actor Position + m_OffsetPos -&gt; Real location of the Collision Component </p> <p>Finaltick Collider will calculate  the final position of the Actor  GetOwner () - &gt;  GetPos() + m_OffsetPos;  GetFinalPos() // this should exist but  SetFinalPos() // This should NOT exist should be handled inside the logic </p> <p>void Collider::FinalTick(){     m_FinalPos = GetOwner()-&gt;GetPos() + m_Offset;  }</p> <p>void SetOffset  Vec2 GetOffset </p> <p>void Collider::FinalTick() </p>"},{"location":"Game_Engine/AR250521/","title":"AR250521","text":"<p>Collision Manager </p> <p>CollisionMgr.h cpp file add  Singleton Mgr  private: </p> <p>public:      CollisionMgr();      ~CollisionMgr(); </p> <p>inside enum.h  ACTOR_TYPE  {     DEFAULT,      BACKGROUND,      TILE,      PLAYER,      ENEMY,      ...      ACTOR_EHD = 32,  }</p> <p>Collision Manager Matrix num is total ACTOR_END  unsigned int m_Matrix[ACTOR_END];  Why? this is row col </p> <p>32 X 32 Matrix is generated  4 Byte </p> <p>We are trying to make collision manager  now actor type classified, several actors exist  but now they are </p> <p>Inside Collision Manager, record  Collision check inside 32 X 32 matrix,  actor type total  index check [col][row] and [row][col] will return same  0 to 31 actor types </p> <p>DEFAULT = 0,  UI = 31,  ACTOR_END = 32,  </p> <p>So either check row col or col row would be symmetric  So we are going to use only half of thee entire matrix  center part will be col == row  Sometimes same group actor might collide together </p> <p>Suppose </p> <p>So indexing should be  x = \uc5f4 = horizontal location = vertical column number = col idx  y = \ud589 = vertical location = horizontal row number = row idx x index bigger y index smaller to use only left upper half triangle  col idx bigger row idx  smaller </p> <p>Index based access unsigned int </p> <p>Collision Check Box UI checking v or re pressing check ?  bit value input </p> <p>Bit  If bit value is 0 then turn it as 1  m_Matrix[Row] ^= (1 &lt;&lt; col); </p> <p>void CollisionCheck(ACTOR_TYPE _Left, ACTOR_TYPE _Right, bool _Check) {     UINT Row = _Left;      UINT Col = _Right; </p> <pre><code>if(_Check)\n    m_Matrix[Row] |= (1 &lt;&lt; Col); \nelse\n    m_Matrix[Row] &amp;= ~(1 &lt;&lt; Col);\n</code></pre> <p>} // This it bit masking based </p> <p>Clear all  for(UINT i = 0; i &lt; ACTOR_TYPE::ACTOR_END; ++i) {     m_Matrix[i] = 0;  } // aka  memset(m_Matrix, 0, sizeof(UINT) * ACTOR_END);  void Tick(); </p> <p>Collision Manager inside Engine  Collisoin Check after TimeMgr KeyMgr LevelMgr Tick </p> <p>Total 32 X 32 Matrix for loop to check collision  for(UINT Row = 0; Row &lt; ACTOR_END; ++row) {     for(UINT Col = Row; Col &lt; ACTOR_END, ++Col){ // Only use half of matrix to check collision          if(m_Matrix[Row] &amp; (1 &lt;&lt; Col)){             // if You mark during debug by F5 and collision happens debug will check here              CollisionActor((ACTOR_TYPE) Row, (ACTOR_TYPE) Col)          }     } }</p> <p>void CollisionActor(ACTOR_TYPE _Row, ACTOR_TPYE _Col)</p> <p>If you have hundreds of actors then collision check should happen a lot  100 99 98 ... 1 Collision check </p> <p>To prevent this, actor classification </p> <p>Microsoft OpenAI ChatGPT  Amazon.com Anthropic Claude  Google Deepmind Gemini  Meta Open Source Llama  </p> <p>vector m_vecCollider[ACTOR_END];  <p>void RegisterCollider(Collider *Collider); </p> <p>Player Actor Final Tick </p> <p>If player onned collider final tick </p> <p>Collider FinalTick  m_FinalPos = GetOwner()-&gt;GetPos() + m_OffsetPos </p> <p>Actor Type  Actor itself should recognize what actor type it has Actor Component  what Actor type you are..? So, Actor also should get  what ACTOR_TYPE it is in the virtual Actor class, and if not belonged  m_ACtorType((ACTOR_TYPE) -1); // Not generated </p> <p>If Actor without initialization then  Level Actor  void AddActor also should let its index known what type it is </p> <p>ACTOR_TYPE GetActorType() return m_ActorType;  then Collider will also know what Actor type its owner have  Enemy layer collider vector </p> <p>Collision  So all Colliders registered ... </p> <p>CollisionMgr  Tick C</p> <p>For last execution clear all Colliders inside Tick  register per each tick  what if one object is deleted? Object is kept refreshed over and over  no need to refresh  Player Monster Enemy  Collision one by one check? </p> <p>CollisionMgr  CollisionActor </p> <p>Should know whether collision happened previoulsyl among a lot of colliders </p> <p>If Collision happens a lot, since a lot of Actors  We need id for collision </p> <p>All Components are Base inherited so they all have not same ID Collision Manager keywords struct class union etc  union COLLIER_ID  {     unsigned long long ID; // 8 byte integer      struct{ // total 8 byte          UINT left; // 4 byte         UINT right;  // 4 byte      } }; // Share Memory based on its largest data type  Union declarecd case memory structure will be  memory 8 bytes integer ID and Left Right also SHARED!  SAME Space is reprsented with different name  unsinged long long ID is also accessible with half as Left and half as Right, into same space </p> <p>COLLIDER_ID ColID = {};  ColID.Left  = m_vecCollider[_Row][i]-&gt;GetID();  ColID.Right = m_vecCollider[_Row][j]-&gt;GetID(); Collision of unique id made is  unique 8 byte id possible to make by two Colliders with their own unique id. </p> <p>DWORD_PTR ID ; // unsigned long long  map m_ColInfo; // Recording Collision mhappening  <p>map:: iterator iter = m_ColInfo.find(ColID.ID);  If (iter == m_ColInfo.end()) // Does not exist  {     m_ColInfo.insert(make_pair(ColId.ID, false)); // Not existing two colliders combiination      iter = m_ColInfo.find(ColID.ID);  } iter-&gt;second; // Whether previously collided or not, if this is true collision happened last frame, false means collision did not happen  <p>if(IsOverlap(m_vecCollider[Row][i],m_vecCollider[_Col][j] )) if previously not collied, meaning this is first collision so begin overlap  Overlap function call  else // It was separated before  BeginOverlap function call </p> <p>else  it was previously in overlap  then call  EndOverlap function  iter-&gt;second = true; or false </p> <p>int m_OverlapCount; // </p> <p>Overlaps  Player::BeginOverlap Player::Overlap  PlayeR::EndOverlap  For all Actors  Monster::BeginOverlap etc ...  Suppose player shoots something </p> <p>Actor Missile  class Missile : public Actor  private: public: </p> <p>Missile();  virtual ~Missile() override; </p> <p>float m_Speed; // Missile Speed  float m_Angle; // Missile Moving direction </p> <p>Missile will also have it scollider </p> <p>class Collider; // Predeclaration </p> <p>Collider *m_Collider; </p> <p>TimeMgr  GetPos  vPos.y -= m_Speed * DT;  Ellipse draw </p> <p>Shoot when player press space in tick </p> <p>Missile is created  inside DT Tick FinalTick and Render  Suppose Missile is generated  but even though you generate missile inside  if loop has not added </p> <p>Tick will NOT be called and Finaltick will be called  Some object might be ambiguous </p> <p>If you are going to make missile in this tick, then  suppose that new actor Missile will exist AFTER this tick  so taht it will only execute FinalTick and Render </p> <p>Level if something is newly created it should work for next frame not this frame  so we are going to make it as  EventMgr or TaskMgr.  And next frame will execute  </p> <p>Now Player Tick will register event my Actor creation of Missile inside its Tick  ACTOR is removed from memory? Level Change how? Stage change inside game?</p> <p>Also you can make several Levels and switch level </p> <p>enum class EVENT {     CREATE_ACTOR      DESTROY_ACTOR      CHANGE_LEVEL  }</p> <p>m_vecEvent.clear(); </p> <p>Now missile creation is right after 1 frame of space pressing frame </p> <p>Similarly object deleting  When monster get hit by missile let missile to be deleted </p> <p>if EventMgr directly delete after the DT tick finaltick render execution  vector Actor Tick FinalTick Render  Monster Player Actor Address </p> <p>Mark certain Actor as \"Dead\" for more safer allocation. It should be supposed as deleted,  but for safer memory release it will be marked as just dead in the first frame  and will be deleted in the second frame for dead marked  finally for third frame it will not exist anymore inside memory </p> <p>Inside EventMgr, make vector&lt;*Actor&gt; m_Garbage  make their status as dead and push inside EventMgr garbage can  Event Manager Trashcan now next frame while dead execute one more frame </p> <p>LevelMgr Tick FinalTick Render ...  some Actor might be Dead state! then,  Tick and FinalTick will still be called </p> <p>Clear Garbage before </p> <p>Dead status even call Tick and FinalTick, and  CollisionMgr will check </p> <p>So add another collision condition  bool IsDead  m_vecCollider[_Row][i]-&gt;GetOwner()-&gt;IsDead() || m_vecCollider[_Col][i]-&gt;GetOwner()-&gt;IsDead()  Among all colliders, if one of Owner Actor of the each collider is  Colliding now and collided before </p> <p>If isDead is true then ?  else </p> <p>If colliding now and it was previously separated ? </p> <p>Dual free problem prevention to put same Actor pointer into Garbage as dead  by putting loop inside Actor </p> <p>You have collsion flipbook animation, so simple game is now possible to generate!  About a decade ago </p> <p>x how much y how much  divide by axis  x axis accumulated  y axis accumulated </p> <p>dx = speed * DT * cos(angle) dy = speed * DT * sin(angle)</p> <p>Rigid Body Component Usage  Now Component based movement </p> <p>void Missile::FindTarget  m_TargetType;  Among actors that are targeted destination,  find the closet actor as a target to reach </p> <p>m_TargetType(ACTOR_TYPE::ACTOR_END) // If target group is not assigned do not find target  if(ACTOR_TYPE::ACTOR_END == m_TargetType) return; </p> <p>m_TargetType </p>"},{"location":"Game_Engine/AR250527/","title":"AR250527","text":"<p>Access to current level by LevelMgr.h and Level.h include  access to current level and borrwo actor type data all actors </p> <p>Level pCurrentLevel = LevelMgr::Get GetCurrentLevel  pCurLevel-&gt;GetActor  GetActor return by vector GetActor  but this way ... it is temporal generation of vector,  so refereence is recommended so that only  but this way it is read only purpose so final function will be  const vector &amp;GetActor (ACTOR_TYPE Type) <p>// In missile side receive by  const vector vecActor = pCurLevel-&gt;GetActor(m_TargetType) <p>for(size_t i = 0; i &lt; vecActor.size(); ++i) </p> <p>Vec2 GetPos(); </p> <p>float Distance(Vec2 _Other){     sqrt (     (x - _Other.x) * (x - _Other.x) +      (y - _Other.y) * (y - _Other.y)     )  }</p> <p>Missile itself and find distance for each moster class </p> <p>float m_DetectRange; // During Find Target </p> <p>DrawDebugCircle(GetPos(), m_DetectRange, PEN_TYPE::BLUE, 0.f) This debugger will be used </p> <p>// If Target not found, go into original direction  if(m_Target == nullptr) Move_DireVector();  else </p> <p>DrawDebugCircle(GetPos(), m_DetectRange, )</p> <p>const vector <p>to get angle between missile and target object,  use arc cos and arc sin functions  acosf  asinf </p> <p>however if you use arc cosine out of  0 to pi then it will return error, so  it is limited input from 0 to pi </p> <p>So exceptional case is required when theta is above pi value  GetPos().x </p> <p>so basically pre processing of Radian value to become input of acosf and asinf should be  vpos.x += _m_Speed. x </p> <p>class Camera </p> <p>Camera rendering position render </p> <p>Actor will get  GetRenderPos function </p> <p>Now all of them when rendered, GetRenderPos () will be done </p> <p>Camera Movement </p> <p>Go to KeyMgr and add  LEFT RIGHT UP DOWN  to use it for camera movement </p> <p>VK_LEFT VK_RIGHT VK_TOP VK_DOWN </p> <p>setup camera speed </p> <p>DebugRender too  Rendering Position is based on camera and temporal relative value </p> <p>GetRenderPos </p> <p>Tick  Camera  Move Camera  Camera Oscillation </p> <p>void CalcDiff(); </p> <p>Camera Oscillation  Frequency per second represents  y axis change upward and downward cycle per second  Delta Time Difference </p> <p>float fMove = m_Amplitude * 4.f * m_Frequency * DT; // Camera y axis this frame movement amouunt How much offset movement should be odne  m_OffsetLook.y += fMove; </p> <p>// This frame camera offset change </p> <p>offset look change </p> <p>Alpha Blending  What you want about color  Currently inside pixel RGB  Mix the color you want to mix and original pixel data file have </p> <p>Suppose RGB in some pixel 200 30 30 Narly Red color  You want to cover its RGB to somewhat color like 30 20 220 Then, multiply each by half and mix them  So the cconsequence will be  230 / 2 , 50 / 2 , 250 / 2 so that in consequence  115 25 125 as an average value so in result it will be somewhat purple </p> <p>Alpha Blend generally means Alpha means opaquity or hallow, or empty  so one pixel will include R G B A, where A represents how opaque it is.  A value 255 represents it is not opaque A value 0 represents it is opaque </p> <p>But currently my rendering is based on OpenGL, then how? </p> <p>Alpha value is zero, </p> <p>Each value of RGB will be multiplied by Alpha value which is generally float between 0 and 1 </p> <p>WinAPI Alpha Blendin gfunctions </p> <p>blend.AlphaFormat = AC_SRC_ALPHA; // Important  blend.SourceConstantAlpha = 255 // Important  blend.BlendFrags // Not really useful blend.BlendOp // Same, not really useful </p> <p>If you load image in photoshop  you have alpha channel, you can see alpha value  light part alpha 255 and black part alpha 0 vallue </p> <p>Tha is why in bmp file magenta pixel,  render by AlphaBlending from TransparentBlt returns gray value </p> <p>When Alpha Channel does not exist in the file then  AlphaFormat should be set as 0 </p> <p>Since there is no alpha channel usage so it will be same as BitBlt or TranasparentBlt  if AlphaFormat setup is 0 instead of AC_SRC_ALPHA </p> <p>SourceConstantAlpha means More Alpha value impllication.  If SourceConstantAlpha, the global Alpha variable applied.  So blend.SourceConstantAlpha = 0 will make all rendering completely opaque  while about SourceConstantAlpha = 127 will make half opaque for all GDI AlphaBlend rendered objects</p> <p>If you want to make alpha blending to bmp file then you can just add  originally existing RGB to Alpha channel by adding new channel  and then in photoshop Set Only Magenta Area by clicking all space by   Ctrl Shift I   Put Alt Delete   and let Character value have Alpha value only   Now 32Bit Texture bmp file with Alpha blending channel   from 24 Bit texture bmp file without Alpha channel </p> <p>And Now you can apply additional alpha blending globally by SourceConstantAlpha </p> <p>in Class Monster::Public Actor </p> <p>float m_Alpha; </p> <p>Alpha Blending from 0 to 1  then blink might get implemented  or let rendered graphics fade away slowly for dead monster </p> <p>png file  png file includes alpha application </p> <p>Then ... How about OpenGL Alpha Blending ? </p> <p>So we should borrow alpha value from png  Asset -&gt; Texture -&gt; Loading  now Texture loading will include  wchar_t szExt[50] = {}; </p> <p>_wsplitppath_s(_FilePath.c_str(), nullptr, 0, nullptr, 0, nullptr, 0, szExt, 50);  This will likely to get the last part wstring strExt = szExt;  if(strExt == L\".bmp\" || strExt == L\".BMP\")</p> <p>bmp file case bitmap data bitmap DC connect ... </p> <p>else if(strExt == L\".png\" || strExt == L\".PNG\")</p>"},{"location":"Game_Engine/AR250527/#include","title":"include","text":""},{"location":"Game_Engine/AR250527/#include_1","title":"include","text":""},{"location":"Game_Engine/AR250527/#pragma-commentlib-gdipluslib","title":"pragma comment(lib, \"Gdiplus.lib\") <p>using namespace Gdiplus; </p> <p>Original file texture loading </p> <p>HDC HBitMap  Engine holds texture slide </p> <p>Now Create Texture based on resolution  void ATexture::Create(UINT width, UINT height) m_BackBufferBlt </p> <p>Texture class hBitMap and m_hDC created  DeleteObject  GetObject </p> <p>Texture Generation by pNewTex-&gt;Create without any original file for now.  Now Engine does not require any backbuffer texture </p> <p>RenderMgr </p> <p>return BackBuffer itself instead of BackbufferDC but my rendering is done by OpenGL now </p> <p>Now backbuffer texture will be deleted by assetMgr </p> <p>Camera Singleton Camera texture asset manager request create texture  Engine::Getnst</p> <p>Screen generation resolution same as texture  Now Camera will have one texture Camera Render </p> <p>Pixel count 1024 768  if alpha value is zero, no need to print, but camera internally render camera effect  Frame drop is significant </p> <p>if alpha value is less than or equal to zero do not render,  fade in out effect inside camera when alpha value is nearly zero but still not below or equal zero  the Render function might stiill continue per each tick despite of  if (m_CamEffectAlpha &lt;= 0.f) return; // This circumstance  Alpha value </p> <p>DT FADE_IN OUT 0.f  so lets suppose that if duration is less than curtime set m_CamEffectAlpha as 0.f completely  so when range reaches setup remanining value clearly into 0.f or 1.f </p> <p>Rigid Body Component </p> <p>Current Destination, unavoidable missile  two missiles if monster move next frame then  direction vector time  angle rotation is also supposed to be changed marginally for smoother path to move close to target  Per Second, DT Frmae, move per each frame  Not able to find instantly, missile will moee quite in somewhat circular direction </p> <p>So, movement of projectile will be more ... realistic and angle change is more slower  Rotation direction setup Clockwise or counterclockwise </p>","text":""},{"location":"Game_Engine/AR250604/","title":"AR250604","text":"<p>\ubca1\ud130\uc758 \ub0b4\uc801 </p> <p>\ub450 \ubca1\ud130\uc758 \uacf1 </p> <p>A B \ubca1\ud130\uc758 \ub0b4\uc801 \uac12\uacfc \uc678\uc801 \uac12\uc774 \ub2e4\ub984  \ub9ac\ud134\uc73c\ub85c \uc5bb\uc744 \uc218 \uc788\ub294 \uc218\uc9c1 \ubc29\ud5a5 \ubca1\ud130\uac00 \ub2e4\ub978\uac00\uc5d0 \ub530\ub77c \ub2e4\ub984 </p> <p>Vector </p> <p>A B value </p> <p>missile vector  targety  you need to change angle </p> <p>Target location and your </p> <p>When target vector and your current vector angle theta should be recognized  to figure out whether continue angle change or not as angle fits perfect </p> <p>Normalized vector </p> <p>From destination to your location Vector </p> <p>Direction Vector  Target Vector inner access </p> <p>\ubca1\ud130\uc758 \ub0b4\uc801  vCurDir.Dot(vTargetDir); // \ub0b4\uc801 \ubca1\ud130 \uac12  \\arrow(A) \\times \\arrow(b)  float Dot(Vec2 _Other) x * _Other.x + y * _Other.y </p> <p>Meaning length of this vector and _Other vector and cos(theta)  this Length * Other Length * cos (\\theta)</p> <p>acos(Dot); </p> <p>When each other pointing  rotation cosine theta value as zero </p> <p>When value Theta is nearly close to zero then no need to rotate </p> <p>Suppose rotation speed 90 degree per second, and rotation is not likely to return exact value </p> <p>Rotate minimal, but it  might get more movement than  So not likely to return Theta value as zero for this method changing angle over and over and over with oscillation </p> <p>So when angle is nearly same it might take long time.  Collision angle </p> <p>Also Appropriate rotation direction should be found </p> <p>\ubca1\ud130\uc758 \ub0b4\uc801 \uc678\uc801 \ubc29\ud5a5 \ubca1\ud130\uc758 \uac01\ub3c4  3D \ubc29\ud5a5, \ub4a4\uc5d0\uc11c \uce90\ub9ad\ud130\ub97c \ub54c\ub838\ub294\uc9c0? \ubc31 \uc5b4\ud0dd \ud310\uc815  \ud0c0\uac9f \uc704\uce58\uc5d0\uc11c \ub9de\uc740 \uc704\uce58\ub97c \ube7c\uba74 ?  \ub098\ub97c \ub54c\ub9b0 \ubc29\ud5a5 \ubca1\ud130 ? \uc9c4\ud589 \ubc29\ud5a5 ? \uc77c\uc815 \uac01\ub3c4 \uc774\uc0c1 \uc2dc \ub4a4\uc5d0\uc11c \ub54c\ub9b0 \uac78\ub85c \uce5c\ub2e4?  \ub450 \ubca1\ud130\uc758 X Y \uc131\ubd84 \uae38\uc774\ub97c \uacf1\ud558\uba74  \ubca1\ud130 Normalize \ud558\uace0 \ub0b4\uc801 </p> <p>\uc678\uc801\uc740 3D\uc5d0\uc11c \uc790\uc8fc \uc0ac\uc6a9  DX2D\ubd80\ud130 \uc678\uc801 \uc790\uc8fc \uc0ac\uc6a9 \uadf8\ub7ec\ub098 \uc5ec\uae30\uc11c\ub294 \uc870\uae08 \ub2e4\ub978 \uc6a9\ub3c4  \uac00\uc0c1\uc758 Z\ucd95\uc774 \uc874\uc7ac\ud55c\ub2e4\uace0 \uace0\ub824  </p> <p>3D \uc678\uc801\uc740 3\ucc28\uc6d0 \uacf5\uac04\uc5d0\uc11c \ub450 \ubc29\ud5a5 \uacf5\uac04\uc5d0\uc11c \uc678\uc801 \uc2dc \ub458 \ub2e4\uc5d0\uac8c \uc218\uc9c1 \ubc29\ud5a5\uc778 \ubca1\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\uc74c  \uc989 \uc678\uc801\uc758 \ubca1\ud130 \uac12\uc740 \uc5ec\uc804\ud788 \uc88c\ud45c \ud615\ud0dc\ub85c \ub098\uc634  \ub450 \ubca1\ud130\uc5d0 \uc218\uc9c1\ud55c \ubc29\ud5a5 \uc704\ub97c \ud5a5\ud558\uac70\ub098 \uc544\ub798\ub97c \ud5a5\ud560 \uc218 \uc788\uc74c  \ub458 \uc911 \uc5b4\ub290 \ubc29\ud5a5 \ubca1\ud130\uac00 \ub098\uc624\ub294\uc9c0\ub294 \uac04\ub2e8\ud558\uac8c \uc218\uc2dd\uc73c\ub85c \uc815\ub9ac \uac00\ub2a5 </p> <p>x y z \ud3c9\uba74 \ubaa8\ub2c8\ud130 \uc548\uc73c\ub85c \ub4e4\uc5b4\uac00\ub294 \ubc29\ud5a5\uacfc \ub098\uc624\ub294 \ubc29\ud5a5\uc774 \uc874\uc7ac\ud55c\ub2e4\uba74  \uc678\uc801\uc774 \uc5b4\ub290 \ubc29\ud5a5\uc778\uac00\uc5d0 \ub530\ub77c\uc11c  z \uac12\uc774 \uc74c\uc218\ub098 \uc591\uc218\uac00 \ub420 \uc218 \uc788\ub2e4 </p> <p>\ubbf8\uc0ac\uc77c \uc9c4\ud589 \ubc29\ud5a5  \ubbf8\uc0ac\uc77c\uc758 \ubaa9\uc801\uc9c0 \ubc29\ud5a5  \uc5c4\uc9c0\uac00 \ub6ab\uace0 \uc74c\uc218 \ubc29\ud5a5\uc73c\ub85c \ub098\uc634  \uadf8\ub7ec\uba74 \uc2dc\uacc4 \ubc29\ud5a5\uc73c\ub85c \ubbf8\uc0ac\uc77c \ud68c\uc804 </p> <p>\ubaa9\uc801\uc9c0 \ubc29\ud5a5\uacfc \ud604 \ubc29\ud5a5\uc758 Target Directory \ud50c\ub7ec\uc2a4 \uac12 \ubc18\uc2dc\uacc4 </p> <p>\uc678\uc801 \uacb0\uacfc\uac12\uc758 + - \uc5d0 \ub530\ub77c \ud68c\uc804 \ubc29\ud5a5 \uacb0\uc815 </p> <p>2\ucc28\uc6d0 \ubca1\ud130\ub85c \uc678\uc801\uc744 \ud558\ub294 \uac8c \ub9d0\uc740 \uc548 \ub428 </p> <p>float Cross (Vec2 _Other){</p> <p>}</p> <p>If space </p> <p>line gets outside then all direction vectors </p> <p>Rigid Body \uac15\uccb4 \uc801\uc6a9 </p> <p>Rigid Body Component Design </p> <p>float m_Mass //  Vec2 m_Force // Rigid Body \uac15\uccb4\uc5d0 \ub204\uc801\ub41c \ud798  Vec2 m_Velocity // \uac00\uc18d\ub3c4  \ube59\ud310 \ubbf8\ub044\ub7ec\uc9d0 \ub9c8\ucc30\ub825 \uba48\ucda4  \ud798\uc744 \uc8fc\uc9c0 \uc54a\ub354\ub77c\ub3c4 \ubb34\ud55c\ud788 \ub4f1\uc18d \uc6b4\ub3d9\ud558\uba74 \uc548\ub428  float m_FrictionCoefficient m_FricCoef \ub9c8\ucc30 \uacc4\uc218  \uc18d\ub3c4\uc758 \ubc18\ub300 \ubc29\ud5a5\uc73c\ub85c \uc801\uc6a9\ub418\ub294 \ub9c8\ucc30 \uacc4\uc218  \uac15\uccb4 \ucef4\ud3ec\ub10c\ud2b8 \ub123\uace0 \ub9c8\ucc30 \uacc4\uc218 \uc124\uc815  \ub3cc\ubc14\ub2e5 \ube59\ud310 \uc124\uce58 \uc2dc \uce90\ub9ad\ud130\uac00 \ube59\ud310\uacfc \ucda9\ub3cc \uc2dc Begin Overlap  \ube59\ud310 \ucda9\ub3cc\uccb4\uc640 \ubd80\ub51b\ud788\ub294 \uc21c\uac04  \ub9c8\ucc30 \uacc4\uc218 \uc124\uc815 </p> <p>Rigid Body m_FricCoef \uac00 \ub192\uc73c\uba74 </p> <p>EndOverlap \uc2dc m_FricCoef \uc911\uac00 \ud558\ub294 \ubc29\uc2dd\uc73c\ub85c  \ube59\ud310 \uacc4\uc218  \ud798, \uc18d\ub3c4, \ub9c8\ucc30 \uacc4\uc218, \uc9c8\ub7c9 </p> <p>AddForce(Vec2 _Force) m_Force += _Force;  AddVeolcity  FinalTick </p> <p>RigidBody Content \uad6c\ud604 </p> <p>\uc6b0\uc120 Player\uc5d0 RigidBody Component \ucd94\uac00  RigidBody m_Rigid;  m_Rigid = AddComponent(new RigidBody);  \uc9c8\ub7c9, \ub9c8\ucc30 \uacc4\uc218 \uc124\uc815  \uac15\uccb4  RigidBody GetRigidBody  \ubcf8\uc778 \uc18d\ub3c4 \uc815\ubcf4 m_Velocity \ub3c4 Actor Player \uc5d0\uc11c  Component RigidBody\ub85c \uc774\ub3d9\uc2dc\ud0a4\uae30  m_Speed; \uc18d\ub3c4 \ub294 \ucd5c\ub300 \uc18d\ub3c4\ub85c \uc124\uc815, \uc65c\ub0d0\ud558\uba74  m_Velocity \uc758 \uc18d\ub3c4 \uc81c\ud55c\uc744 \uc8fc\uae30 \uc704\ud574\uc11c, \uace0\ub85c \uc774\ub984\uc744  m_MaxSpeed \ub85c \uc124\uc815, \ub9cc\uc57d \uac77\uae30 \ub6f0\uae30 \ub2e4\ub974\uba74  m_MaxWalkSpeed, m_MaxRunSpeed \ub4f1\ub4f1 \uc124\uc815  \uc560\ub2c8\uba54\uc774\uc158 \uc774\ub3d9 \ubaa8\uc158 \uac77\uae30 / \ub2ec\ub9ac\uae30 \ucd5c\ub300 \uc18d\ub3c4 \uc124\uc815 </p> <p>\uac15\uccb4\uac00 \uc774\uac78 \ub2e4 \ub4e4\uace0 \uc788\uc73c\uba74 ..? \uc544\ub2c8\uba74 Dash \uac19\uc740 \ud568\uc218\uac00 \uc788\uc73c\uba74?  \uc5ec\uae30\uc11c\ub294 maxSpeed\ub9cc \ub450\ub294 \uac8c \ub098\uc74c. \uc774\ub3d9\uc2dc \ucd5c\ub300 \uc18d\ub3c4  \uac77\uae30 \ub2ec\ub9ac\uae30 \uc804\uc18d\ub825 \ub2ec\ub9ac\uae30 \ub4f1\ub4f1 \uc788\uc73c\uba74 maxSpeed\ub97c \uc0c1\ud669\uc5d0 \ub530\ub77c\uc11c \ubcc0\uacbd </p> <p>Player \ub294 Move \uc0c1\ud0dc \uc9c4\uc785 \uc2dc RigidBody\uc5d0 \uc790\uae30 \uc0c1\ud0dc\ub97c Move \uc0c1\ud0dc\ub85c \ub9cc\ub4e4\uace0  Flipbook \uc560\ub2c8\uba54\uc774\uc158\ub3c4 \ubcc0\uacbd\ud568, \uadf8\ub9ac\uace0 \uac15\uccb4\ub97c \uac00\uc838\uc640\uc11c SetMaxSpeed  \ucd5c\ub300 \uc774\ub3d9 \uc18d\ub3c4\ub97c \uc124\uc815\ud568 </p> <p>\uac15\uccb4\ub97c \uac00\uc838\uc640\uc11c W\ud0a4\ub97c \ub204\ub974\uba74 \uac15\uccb4\uc5d0 AddForce(Vec2(-500.f, 0.f)); </p> <p>\uc774\uc81c \uc9c1\uc811 \uc88c\ud45c \uac15\uc81c \uc218\uc815\uc774 \uc544\ub2c8\ub77c, Rigid Body\uc5d0 \ud798 \ubca1\ud130\ub97c \uc8fc\ub294 \ubc29\uc2dd\uc73c\ub85c \uc801\uc6a9  Player RigidBody FinalTick \uc5d0 \uac00 \ubcf4\uba74 \uc774\ubc88 \ud504\ub808\uc784\uc5d0 \ubc1b\uc740 \ud798 \ub9cc\ud07c  \uba3c\uc800 \ubc1b\uc740 \ud798 \ud655\uc778,  \ud798\uc5d0 \uc758\ud55c \uac00\uc18d\ub3c4 \uacc4\uc0b0,  \uac00\uc18d\ub3c4\uc5d0 \ub530\ub77c \uc18d\ub3c4 \ubcc0\ud654,  \uc18d\ub3c4\uc5d0 \ub530\ub77c \uc774\ub3d9, \ud798 \ucd08\uae30\ud654 </p> <p>\ub2e8\uacc4\ub85c \uac15\uccb4\uc758 FinalTick \uc744 \uc9c4\ud589  \ubbf8\uc138\ud55c Delta Time \uc0ac\uc774 \uadf8 \uc548\uc5d0 Tick \ud568\uc218\ub85c \uc870\uae08\uc529 \ubb3c\uccb4\uac00 \ud560 \uc77c\uc744 \ud558\uac8c \ud558\ub294 \uac83 </p> <p>\uac19\uc740 \ud504\ub808\uc784\uc758 \ud798\uc744 \uc5ec\ub7ec \uad70\ub370\uc5d0\uc11c \ub3d9\uc2dc\uc5d0 \ubc1b\uc744 \uac00\ub2a5\uc131\ub3c4 \uc874\uc7ac  \ud798 \uc790\uccb4\uac00 Add Force  \ud798\uc744 \ub204\uc801\ud574\uc11c \ub354\ud568  700 * 200 ?  \uc0ac\uc120 \ubc29\ud5a5\uc73c\ub85c \uc774\ub3d9  \ubca1\ud130\ub97c \uc88c\ud45c \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\uba74 \ub367\uc148\uacfc \ube84\uc324\uc774 \uc6a9\uc774\ud568  \uc904\ub2e4\ub9ac\uae30\uc5d0\uc11c \uc11c\ub85c -1000, 0 \uadf8\ub9ac\uace0 1000 0 \ud798\uc774 \uc11c\ub85c \uac00\ud574\uc9c0\uba74 \ud33d\ud33d\ud558\uac8c \uc11c\ub85c \ubc84\ud300  \ud798\uc774 \uc5b4\ub290 \ubc29\ud5a5\uc73c\ub85c \uac00\ud574\uc9c0\ub294\uac00 </p> <p>\ub204\uc801\ubc1b\uc740 \ud798\uc744 \ud655\uc778  \ubcf8\uc778\uc758 \ub204\uc801\ub41c \ud798\uc744  m_Force = Vec2(0.f, 0.f) \ub85c \ucd08\uae30\ud654  \ubb3c\ub9ac \uae30\ucd08 F = m X a  \ud798 = \uc9c8\ub7c9 X \uac00\uc18d\ub3c4  \ubb3c\uccb4\uc5d0\uac8c \ud798\uc744 \uc8fc\uba74 \uadf8\uac74 \uc9c8\ub7c9 X \uac00\uc18d\ub3c4\ub85c \ubd84\ud574 \uac00\ub2a5\ud558\ub2e4  \uc9c8\ub7c9\uc774 1\uc774\uba74 1 X 100  \ud798\uc744 \uc900 \ubc61\ud5a5\uc73c\ub85c 100\uc758 \uac00\uc18d\ub3c4\uac00 \uc0dd\uae40 </p> <p>\uc9c8\ub7c9\uc774 \ucee4\uc9c0\uba74 \ucee4\uc9c8\uc218\ub85d \ub3d9\uc77c\ud55c \ud798 \ub300\ube44 \uac00\uc18d\ub3c4\uac00 \ucee4\uc9d0  \uac00\uc18d\ub3c4 \uacc4\uc0b0 \uc2dc \ub204\uc801\ubc1b\uc740 \ud798\uc744 \uc9c8\ub7c9\uc73c\ub85c \ub098\ub204\uc5b4\uc57c \ud568  Vec2 vAccel = m_Force / m_Mass;  \uc22b\uc790\ub85c 100,0 \ub4f1\uc73c\ub85c \ud45c\ud604  \uc9c8\ub7c9\uc774 2\ub2e4 \uadf8\ub7ec\uba74 X Y \ub098\ub214 </p> <p>Vec2 operator / (float _Data) {     return Vec2(x / _Data, y / _Data); }</p> <p>\ub9cc\uc57d \uc9c8\ub7c9 \uc124\uc815\uc744 \uc548 \ud558\uba74 \ubb38\uc81c  \uc9c8\ub7c9 \uc124\uc815\uc744 \uc548 \ud574\uc11c \uc9c8\ub7c9\uc774 0 \uc774\uba74 \uac00\uc18d\ub3c4\uac00 \ubb34\ud55c\ub300 ..? \ubc84\uadf8 \uc6d0\ud749  \ubd84\ubaa8\uac00 0\uc774\ub2c8\uae4c ...  \uc5d0\ub7ec \ube44\ud2b8 NaN \uc774 \ub4e4\uc5b4\uac10 ...  \uc9c8\ub7c9 \uc18d\ub3c4 \uac00\uc18d\ub3c4  \uac00\uc18d\ub3c4\ub294 1\ucd08 \ub4a4\uc5d0 \ub2c8 \uc18d\ub3c4\uac00 50\uc774 \ub418\ub294 \uac83 \uc18d\ub3c4\uc758 \uc99d\uac10 \ub7c9\uc774 \uac00\uc18d\ub3c4\uc784  \ucc98\uc74c\uc5d0 \uc2dc \uc791 \ud558\uc790\ub9c8\uc790 \ube60\ub978\uac8c \uc544\ub2c8\uc796\uc544 \uc810\uc810 \ube68\ub77c\uc9c0\uc790 </p> <p>\uac00\uc18d\ub3c4 X DT \ub9cc\ud07c \uc18d\ub3c4\uc5d0 \ubcc0\ud654\uac00 \uc0dd\uae40  \uac00\uc18d\ub3c4 \ub54c\ubb38\uc5d0 \uc18d\ub3c4\uac00 \uc99d\uac00, \uc774\ubc88 \ud504\ub808\uc784\uc5d0 \uc18d\ub3c4 X DT X \uc774\ub3d9\ub7c9 \ubcc0\ud654  Vec2 vMove = m_Velocity * DT;  GetOwner</p> <p>\uac00\uc18d\ub3c4\uc5d0 \uc758\ud574\uc11c \uc18d\ub3c4\uac00 \uc99d\uac00\ud558\ub294 \uc640\uc99d  \ud0a4\ub97c \ub204\ub974\uba74 \ubc29\ud5a5\uc73c\ub85c \ud798\uc744 \uc8fc\uace0 \ud798\uc774 \uc810\uc810\uc810 \uc99d\uac00! </p> <p>\uc9c0\uae08\uc740 \ub9c8\ucc30\ub825\uc774 \uc5c6\uc5b4\uc11c \uac00\uc18d\ub3c4\uc5d0 \uc758\ud574 \ub298\uc5b4\ub09c \uc18d\ub3c4 \ub4f1\uc18d\uc62c \uac10 \uc6b0\uc8fc\uacf5\uac04\ucc98\ub7fc  \uadf8\ub798\uc11c \ub9c8\ucc30\ub825 \ud544\uc694 \ub9c8\ucc30\ub825\uc73c\ub85c \uc18d\ub3c4\uac00 \uc810\ucc28 \uac10\uc18c\ud574\uc57c \ud568 </p> <p>\ub9c8\ucc30\ub825 \uc801\uc6a9 \uc2dc\uc810 \uc6c0\uc9c1\uc784  \ub9c8\ucc30 \uc6b4\ub3d9\ub9c8\ucc30\ub825 \uc815\uc9c0\ub9c8\ucc30\ub825 \ub4f1\ub4f1 \uc6c0\uc9c1\uc774\ub294 \uc21c\uac04\ubd80\ud130\ub294 \ub9c8\ucc30\ub825\uc774 \uc904\uc5b4\ub4ec ?  \uac8c\uc784\uc801 \ud5c8\uc6a9 ? \ub9c8\ucc30\ub825 \uc801\uc6a9 \uc2dc\uc810\uc744 \ubb3c\uccb4\uc5d0\uac8c \ud798\uc774 \uc801\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc2dc\uc810\uc5d0\ub9cc \uc801\uc6a9\uc2dc\ud0a4\uae30  (\uac8c\uc784\uc801 \ud5c8\uc6a9) \uc190\uc744 \ub54c\ub294 \uc2dc\uc810\ubd80\ud130\ub9cc \ub9c8\ucc30\ub825\uc774 \uc801\uc6a9  \uc815\uc9c0\ub9c8\ucc30\ub825 \ubb34\uc2dc, \uc6b4\ub3d9\ub9c8\ucc30\u3139\ub825\ub9cc \uadf8\ub3d9\uc548 \uc99d\uac00\ud55c \uc18d\ub3c4\ub97c \uac10\uc18c\uc2dc\ud0a4\uae30 \uc704\ud574 \uc874\uc7ac  \ud798 Force \uac00 0 \uc774\ub77c\uba74 ? \uc774\ubc88 \ud504\ub808\uc784\uc5d0\uc11c \ub204\uad6c\ub3c4 \ub098\ud55c\ud14c \ud798\uc744 \uc8fc\uace0 \uc788\uc9c0 \uc54a\ub2e4\ub294 \uac83 </p> <p>m_Velocity \uc18d\ub3c4 \uc810\uc810 \ub290\ub824\uc9c0\ub2e4\uac00 ... \ub9cc\uc57d\uc5d0 \ubc18\ub300 \ubc29\ud5a5\uc73c\ub85c \uac00\uba74..?  \ub118\uc5b4\uc11c\uc11c \ub4a4\ub85c \uac00\uba74 \uc548 \ub428. \uc989, m_Velocity _- vFriction * DT \uc2dc  \uc6d0\ub798 \ubc29\ud5a5\uc758 \ub4a4\ub85c \ub118\uc5b4\uac00 \ubc84\ub9ac\uba74 \uc548 \ub428, \uc608\uc678\ucc98\ub9ac\ub85c \ub9cc\uc57d  vFriction * DT  if(m_Velocity.Length() &lt; m_FricCoef) {     // \uc18d\ub3c4\ub97c 0\uc73c\ub85c \uc124\uc815\ud574\ubc84\ub9ac\uae30      m_Velocity = Vec2(0.f, 0,f);  } else {     m_Velocity += vFriction * DT;  }</p> <p>\ub9c8\ucc30 \uacc4\uc218 \uc801\uc6a9, \ucd5c\ub300 \uc18d\ub825 \uc81c\ud55c\uc740 \uc5b4\ub5bb\uac8c?  RigidBody \ub294 MaxSpeed\uac00 \uc874\uc7ac. </p> <p>\uac00\uc18d\ub3c4\uc5d0 \uc758\ud574\uc11c \uc18d\ub3c4\uac00 \ubcc0\ud654, \ucd5c\ub300\uc18d\ub3c4 \uc81c\ud55c  if (m_Veclocity.Length() &gt; m_MaxSpeed)  {     m_Velocity.Normalize();  }</p> <p>\uc774\uc81c \uc544\ubb34\ub9ac \ud798\uc744 \uc8fc\uc5b4\ub3c4 \ucd5c\ub300 \uc18d\ub3c4 \uc774\uc0c1\uc73c\ub85c\ub294 \uac00\uae30 \uc5b4\ub824\uc6c0  \uadf8\ub9ac\uace0 \uc774\uc81c \uc88c\uc6b0 \uac19\uc774 \ub204\ub974\uba74 \ub9c8\ucc30\ub825\uc774 \uc0dd\uae40!  \ub9c8\ucc30\ub825\uc744 \uace0\ub824\ud574\uc11c \ud798\uc744 \uc8fc\ub294 \uac83  \ucd5c\ub300 \uc18d\ub825 \uacc4\uc0b0\ub3c4 \ud6c4 Velocity \uc81c\uc5b4\ub3c4 \ub9c8\ucc30\ub825 \uc18d\ub3c4 \uac10\uc18c \uacc4\uc0b0 \uc774\ud6c4  \ud798\uc740 \ub9c8\ucc30\ub825 \uc774\uc0c1\uc73c\ub85c \uc8fc\uc5b4\uc57c \ud55c\ub2e4  \ud0d1 \ubdf0 \ubc29\uc2dd \ud6a1\uc2a4\ud06c\ub864 / \ubca8\ud2b8\uc2a4\ud06c\ub864 \uc561\uc158 \uac8c\uc784 \uc2dc  \uc88c \uc6b0\uac00 \uc774\ub3d9\uc774\uace0 \uc704 \uc544\ub798\uac00 \uc810\ud504 / \uc911\ub825\uc73c\ub85c \ub5a8\uc5b4\uc9d0  \uc911\ub825 \uc801\uc6a9\uc2dc\ucf1c \ubcf4\uae30  float m_Gravity; // \uc911\ub825 \uac00\uc18d\ub3c4, 9.8 m / sec,  \uc911\ub825\uc740 \ubaa8\ub4e0 \ubb3c\uccb4 \uc0ac\uc774\uc5d0 \uc874\uc7ac\ub294 \ud558\uc9c0\ub9cc, \ud604\uc2e4\uc801\uc73c\ub85c\ub294 \uc9c0\uad6c\uc640 \uac01 \ubb3c\uccb4 \uc0ac\uc774\uc5d0  \ub545 \ubc29\ud5a5\uc73c\ub85c \uc791\uc6a9\ud55c\ub2e4\uace0 \ub9cc\ud654\uc801 \ud5c8\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4.  \uae30\uc874\uc758 F = ma \ub85c \ubcf4\uae30\ub294 \ud55c\ub370, \ub0b4 \uc9c8\ub7c9\uc740 \ubb34\uc758\ubbf8\ud568. \uc9c0\uad6c\uac00 \ub9e4\uc6b0 \ubb34\uac70\uc6cc\uc11c  \uc911\ub825\uc740 \ub530\ub77c\uc11c \uc77c\uc815\ud558\uac8c \uc801\uc6a9\ub41c\ub2e4. \uac08\ub9b4\ub808\uc774 \uc2e4\ud5d8 \uae30\uc5b5\ub098\uc9c0?  \uc989 \ubaa8\ub4e0 \ubb3c\uccb4\uc5d0\uac8c \uc911\ub825\uc740 \uc0c1\uc218, \uc77c\uc815\ud55c \uc758\ubbf8. \ubaa8\ub4e0 \ubb3c\uccb4\uc758 \uc9c8\ub7c9\uacfc \ubb34\uad00,  \uc77c\uc815\ud55c \uac00\uc18d\ub3c4\ub97c \uc544\ub7ab\ubc29\ud5a5\uc73c\ub85c \uc801\uc6a9  \uc810\ud504\ub294 \ud0d1\ubdf0 \ud615\uc2dd \uac8c\uc784\uc5d0\uc11c \uc88c\ud45c \ub294 \uace0\uc815\ud558\uace0,  \uc815\ub9d0 \uc704\ub85c \uc62c\ub77c\uac00\ub294 \uac70\uba74 \uc62c\ub77c\uac14\uc744 \ub54c \ubbf8\uc0ac\uc77c\uc744 \ub9de\uc744 \uc218 \uc788\ub294\ub370  \uc810\ud504\ub97c \ud574\uc11c \ub80c\ub354\ub9c1\uc774 \uc704\ub85c \uac04 \uac70\uba74 \ucda9\ub3cc\uccb4 \uc0c1 \ub9de\uc73c\uba74 \uc548 \ub428 ... \uadf8\ub798\uc11c \ud0d1\ubdf0 \ud615\ud0dc\uc758 \uac8c\uc784\uc5d0\uc11c \uc810\ud504 \uad6c\ud604\uc2dc \ubcf8\uc778 XY \uc88c\ud45c \uc720\uc9c0\ud558\uace0,  \ucda9\ub3cc\uccb4\ub9cc \uc62c\ub824\uc57c \ud568. \uc774\ub807\uac8c \ucda9\ub3cc\ud588\uc5b4\ub3c4 \uc598\uc758 \ub545 \ubc1c\ubc14\ub2e5 XY \uc88c\ud45c\ub791  \ub0b4 \uc2e4\uc81c XY \uc88c\ud45c \ucda9\ub3cc\uccb4\ub791 \ucda9\ub3cc \uac80\uc0ac\ub97c \ud574\uc57c \ud568.  \ud0d1\ubdf0\ub294 \uc544\ubb34\ud2bc xy + \uc810\ud504 \uad6c\ud604\uc2dc z \ucd95  \ud6a1\uc2a4\ud06c\ub864\uc5d0\uc11c\ub294 \uacf5\uc911\uc73c\ub85c \uc62c\ub77c\uac00\uac70\ub098 \ub545 \ucabd\uc73c\ub85c \ub5a8\uc5b4\uc9c0\uac70\ub098 ...  \ud0d1\ubdf0 \uac8c\uc784\uc5d0 \uc911\ub825 \uac00\uc18d\ub3c4\ub97c \uc801\uc6a9\uc2dc\ud0ac \ud544\uc694\ub294 \uad73\uc774 \uc5c6\uc74c  \uce90\ub9ad\ud130 \uc704 \uc544\ub798 \ubcc0\uacbd \uc560\ub2c8\uba54\uc774\uc158, \ucda9\ub3cc\uccb4 \ubb34\ud6a8 \ucc98\ub9ac \uc815\ub3c4  \uc911\ub825\uc740 \uc77c\ub2e8 0\uc73c\ub85c \ucc98\ub9ac\ud558\uace0  \uc704 \uc544\ub798 \ub20c\ub7ec\uc11c \uc6c0\uc9c1\uc774\uc9c0 \uc54a\uc73c\uba74 ... \uc704\uce58 \uc88c\uc6b0 </p> <p>\ucda9\ub3cc \ud568\uc218 overwriting ?  Ground Class </p> <p>Ground::Ground() </p> <p>Collider Component should Exist  Collider is showed by DebugRender, so just use it first </p> <p>pActor = new Ground; </p>"},{"location":"Game_Engine/AR250604/#include-groundh","title":"include \"Ground.h\"","text":"<p>ACTOR_TYPE::BACKGROUND, pActor </p> <p>pActor-&gt;SetName </p> <p>Collision with Ground, How..?  TILE, PLATFORM, </p> <p>CollisionMgr CollisionCheck(PLAYER, PLATFORM, true);  RigidBody has Gravity, and Player should SetGravity (980.f)  If RigidBody Gravity applied to Downward, there should exist  Vec2 m_GravityVelocity that will be applied  MaxSpeed exists also for Gravity, for side scroll game  m_MaxGravitySpeed // Max Speed of the Gravity caused speed, in real life due to air friction speed gets same soon.  Maximum speed to go downard is 2000 ... and  Top View perspective gravitiy is not applicable.  enum RIGIDBODY_TYPE{     PLATFORMER,      TOPVIEW,  }; </p> <p>RIGIDBODY_TYPE m_Type  void Move_Platformer();  void Move_TopView(); </p> <p>Move_TopView();  Move_Platformer();  if(m_Type == PLATFORMER){</p> <p>} else if (m_Type == TOPVIEW) </p> <p>Default m_Type(PLATFORMER)  If Rigid Body Control by Top View approach then  m_Rigid-&gt;SetType(RIGIDBODY::TYPE::PLATFORMER); // Whatever etc rigidbody setup  Rigid Body  Platformer  Gravity setup done and its maximum speed etc ...  Platformer games  When you jump, no friction should be applied  when you get collided with ground </p> <p>bool m_bGround; // Whether landed on the ground or not  if(m_Ground ){     Vec2 vFriction = -m_Velocity;      vFriction.Normalize();      vFriction *= m_FricCoef;  }</p> <p>Now for Collision with ground case  if(_OtherActor-&gt;GetMame() == L\"Ground\") m_Rigid-&gt;SetGround(true);  if(m_Ground){     m_GravityVelocity = Vec2(0.f, 0.f);  } else {     m_GravityVelocity.y += m_Gravity * DT;      // Maximum gravity  speed limit too      if m_GravityVelocity.Length() ? m_MaxGravitySpeed      m_GravityVelocity.Normalize();      m_GravityVelocity *= m_MaxGravitySpeed;        }</p> <p>When Ground EndOverlap then set Ground as False  Tick Space clicked then  ... </p> <p>if Space is pressed then give RigidBody Jump function  \uac15\uc81c\ub85c velocity\ub97c \uc989\uc2dc \uc138\ud305\ud574 \uc918\uc57c jump \ud568\uc218\uac00 \uc801\uc6a9\ub420 \uac83 </p> <p>\uac15\uccb4 RigidBody\uc5d0 Jump \uc124\uc815 \uc2dc Jump \ud568\uc218\uac00 \ubcf8\uc778 Velocity Y\ucd95\uc73c\ub85c Jump Speed \uc8fd\uc2dc \uc138\ud305 \ud6c4 \ubc14\ub85c \ucd94\uac00  Jump Velocity \ub294 Gravity Velocity \ub85c \uc870\uc815\ud574\uc57c \ud568 Ground \uc0c1\ud0dc ?  \uacf5\uc911 \uc774\ub3d9\uacc4\uc218\uac12\uc744 \uc124\uc815\ud558\uc5ec \uacf5\uc911 \uc774\ub3d9  float m_AirMoveCoef; // \uacf5\uc911\uc5d0\uc11c \uc6c0\uc9c1\uc784 </p> <p>\ub9cc\uc57d\uc5d0 m_Ground \uac00 true \uc774\uba74 m_Velocity += vAccel * DT * m_AirMoveCoef;  \uc544\ub2c8\uba74 m_Velocity += DT * vAccel; </p> <p>\uac8c\uc784\uc801 \ud5c8\uc6a9\uc744 \uc704\ud574 \uc810\ud504\ub294 \uac15\uc81c \uc138\ud305\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ub9cc\ub4dc\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc74c  2\ub2e8 \uc810\ud504 \uae30\ub2a5\uc740 Jump Stack Count \uac19\uc740 \uac78 \ub9cc\ub4e4\uc5b4 \ub458 \uc218\ub3c4 \uc788\uc74c \ucd5c\ub300 \uc810\ud504 \ud69f\uc218 </p> <p>\uc810\ud504 \uc2a4\ud0dd \ucd08\uacfc\ub098 \uc774\uc0c1\uc77c \uacbd\uc6b0 .. \ub9ac\ud134 </p> <p>Tick  m_vecActor[i][j]-&gt;Tick();  Level Begin Tick FinalTick \ub808\ubca8 \uc2dc\uc791, \ub9e4 \ud504\ub808\uc784 \ub808\ubca8 \ub0b4 Actor \ud560 \uc77c \uc218\ud589  \ub9e4 \ud504\ub808\uc784 \ub808\ubca8 \ub0b4 Actor \ubcf4\uc720 Component \ud560 \uc77c \uc218\ud589  \uc774\uc81c Level Render </p> <p>Start Level  Begin by CollisionMgr Setup  Actor Generation </p> <p>Level End will now </p> <p>Terminate previous level and begin the new level </p> <p>Level End will terminate every elements inside </p> <p>void ClearActor(ACTOR_TYPE _TYPE); </p> <p>for(size_t i = 0; i &lt; m_vecActor[(UINT) _Type].size(); ++i)      delete m_vecActor [(UINT) _Type][i];  m_vecActor[(UINT) _Type].clear();</p> <p>void ClearAllActor();  for((UINT i = 0; i &lt; ACTOR_TYPE::ACTOR_END; ++i)){     ClearActor(i);  }</p> <p>Now Start Level To Editor Level </p> <p>virtual void Tick() override; </p> <p>Level Editor  m_hMenu = CreateMenu(); // This will make empty menu  InsertMenu(m_hMenu, ) // Add more elements on men bar on the top so  Windows have \ub9ac\uc18c\uc2a4 \ubdf0 / \uba54\ub274  File \ud30c\uc77c  \uba54\uc778 \ud568\uc218 \uba54\ub274  IDC_WINAPI56  \ub9ac\uc18c\uc2a4 \ubdf0 \uba54\ub274  Resource View Menu/IDC_WINAPI56  \ub9ac\uc18c\uc2a4 \ubdf0 \uac00\uc11c \ud655\uc778  \ud30c\uc77c / \ub05d\ub0b4\uae30  \ub3c4\uc6c0\ub9d0 / \uc815\ubcf4  \uc774\ub7ec\ud55c \uc124\uc815 \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \ub370\uc774\ud130  \uc544\ubb34\ud2bc \uadf8\ub798\uc11c \ub9ac\uc18c\uc2a4 \ubdf0 / Menu \uac00\uc11c \uba54\ub274 \ubc14 \ud655\uc778  \uba54\ub274 \ubc14 \uc774\ubbf8 \ub9cc\ub4e4\uc5b4\uc9c4 \uac70 \ub85c\ub529\ud574 \ubc84\ub9ac\uae30 LoadMenu(Engine::GetInst()-&gt;GetProcessInst(), MAKEINTRESOURCEW(MENU_EDITOR)); </p> <p>SetMenu(Engine::GetInst()-&gt;GetMainWindow(), m_hMenu);  Level::Begin(); </p> <p>Windows \uc885\ub8cc Procedure WM_DESTROY PostQuitMessage(0);  \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc \ud568\uc218 \ud504\ub85c\uc138\uc2a4\uac00 \ubcf4\uc720\ud55c \uc708\ub3c4\uc6b0 \uc911 \ud558\ub098\ub77c\ub3c4 \uc885\ub8cc\uac00 \ub418\ub294 \uacbd\uc6b0  \uc708\ub3c4\uc6b0\uac00 \uc885\ub8cc Procedure \uac00 WM_DESTROY  \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc \uc644\ub8cc, \ud504\ub85c\uadf8\ub7a8 \uaebc\uc9c8 \uc900\ube44 \uc644\ub8cc  WM_QUIT \uc774\uba74 \ud504\ub85c\uadf8\ub818 \uc548\uc804\ud788 \uc885\ub8cc \uac00\ub2a5\ud558\uaca0\ub2e4\uace0 \uace0\ub824\ud558\uace0 \ub098\uac10  IDM_EXIT  \ub9ac\uc18c\uc2a4 \ubdf0\uc5d0\uc11c \uae30\uc874 \uba54\ub274 \ubc14 \ub05d\ub0b4\uae30 \ubc84\ud2bc \ub204\ub974\uace0 f4 \ub204\ub974\uba74  \ub05d\ub0b4\uae30 \ubc84\ud2bc\uc758 ID \uac00 IDM_EXIT \uc784 </p> <p>\ubc84\ud2bc\uc774 \ub20c\ub838\uace0 \ub20c\ub9b0 \ubc84\ud2bc\uc758 ID\uac00 105 \uc77c \uc2dc DestroyWindow(hWnd);  IDM_ABOUT \ub294 \uc815\ubcf4 DialogBox \ub744\uc6cc\uc8fc\ub294 \uac70 </p> <p>\uc5d0\ub514\ud130 Level_Editor \ucd5c\ud558\ub2e8\uc5d0  \uba54\ub274 \ubc14 \ubc84\ud2bc \uad00\ub828 \ud568\uc218 \uc81c\uc791\ud558\uae30  LRESULT CALLBACK (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {</p> <p>} \uc5d0\ub514\ud130 \ub808\ubca8 CPP\uc5d0 \uc874\uc7ac\ud558\ub294\uac00 ?  case WM_COMMAND:  MenuButtonCallBack(hWnd, message, wParam, lParam); </p> <p>HINISTANCE hInst = Engine::GetInst()-&gt;GetProcessInst(); </p> <p>\ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc \ubc84\ud2bc \ub9cc\ub4e4\uae30 ? </p> <p>DialogBox  MainWin </p> <p>WMCommandPhase  \ubc18\ud658 \ud0c0\uc785 \uc804\ubd80 \ub2e4 \uac19\uc740 \uc778\uc790  WndProc \uc640 \ub611\uac19\uc740 About \ub77c\ub294 \ud568\uc218\uac00 \uc788\uc74c.  \uadf8 \ud568\uc218 \uc8fc\uc18c\ub97c DialogBox(hInst, .... About); // About \uc774\uac8c \uba54\uc138\uc9c0 \uc804\ub2f4\ucc98\ub9ac \ud568\uc218  \uadf8\ub9ac\uace0 WndProc\ub294 WinMain \ud568\uc218\uc758 \uc804\ub2f4 \ucc98\ub9ac </p> <p>\uadf8\ub7ec\ub2c8\uae4c \uc774 \uad6c\uc870 \uadf8\ub300\ub85c Level_Editor.cpp \uc5d0 \uc62e\uae30\uae30 </p> <p>\ud568\uc218 \uc8fc\uc18c int_ptr callback \ud568\uc218 \uc8fc\uc18c \ubd88\ub7ec\uc8fc\uae30.  \uc804\ubc29\uc120\uc5b8 \ud544\uc694 </p> <p>Tile ColRow Dialog Procedure  \uc804\uc6a9 Dialogue \uc9c1\uc811 \uc81c\uc791 </p> <p>====================================================</p> <p>0610 </p> <p>\ud655\uc778 \ucde8\uc18c \ubc84\ud2bc \uae30\ubcf8\uc73c\ub85c \ubc30\uc815\ub418\uc5b4 \uc788\ub294 ID\uac00 \uc788\uc74c  switch wmID  WinUser.h \ub85c \uac00\uc11c \ub9e4\ud06c\ub85c \ud655\uc778\ud574 \ubcf4\uba74  IDOK 1  IDCANCEL 2  \uc73c\ub85c \uc774\ubbf8 \uc9c0\uc815\ub418\uc5b4 \uc788\uc74c  \ud655\uc778 \ucde8\uc18c \ubc84\ud2bc, \uc0c8\ub85c\uc6b4 \ubc84\ud2bc \ucd94\uac00 \uac00\ub2a5\ud558\ub2e4  DialogBox DLG_TILE_COLROW  TileColRow \ub2e4\uc77c\ub85c\uadf8 \ucc3d \ucc98\ub9ac \uba54\uc138\uc9c0  WM_COMMANND \ub294 \ud574\ub2f9 \uc708\ub3c4\uc6b0\uc5d0\uc11c </p> <p>iValue \ud655\uc778 \ubc84\ud2bc\uc744 \ub204\ub974\uba74  \uc774 \ucc3d\uc5d0 \ubc84\ud2bc\uc774 \ub20c\ub838\ub354\ub2c8 WM_COMMAND \uba54\uc2dc\uc9c0\uac00 \uc634  WParam\uc740 \ubc84\ud2bc\uac19\uc740\uac70 \ub204\ub974\uba74 WMCOMMAND \ub85c \uadf8\ub7ec\uba74 \ubc84\ud2bc ID  \ud655\uc778 OK \ubc84\ud2bc \ub204\ub974\uba74 WParam == 1 \uc778\uac70 \ub514\ubc84\uae45\uc5d0\uc11c \ud655\uc778  \ub9cc\uc57d\uc5d0 wParam == IDCANCEL \uc774\uba74 \ud574\ub2f9 \uc708\ub3c4\uc6b0\ub97c \uc885\ub8cc\uc2dc\ucf1c\ub77c  EndDialog(hDlg, LOWORD(wParam)); </p> <p>if(iValue == IDOK) {</p> <p>}</p> <p>/*else if (iValue == IDCANCEL){</p> <p>}*/</p> <p>iValue = DialogBox(...) \ub9ac\ud134 \uac12\uc740 </p> <p>OK \uac12\uc774\ub4e0 Cancel \uac12\uc774\ub4e0 \ud655\uc778 \ubc84\ud2bc\uc744 \ub204\ub974\uba74 \ucc3d\uc744 \uc885\ub8cc\ud558\uc9c0 \uc54a\uae30 ?  if(LOWORD(wParam == IDOK)){     RETURN (INT_PTR)  } \uc774\ub7f0 \uc2dd\uc774\uba74 OK \ud655\uc778 \ubc84\ud2bc \ub20c\ub7ec\ub3c4 \uc548 \ub098\uac00\uc9d0 </p> <p>X \ubc84\ud2bc\uc774\ub098 \ucde8\uc18c \ubc84\ud2bc \ub4f1\ub4dc\uc740 IDCANCEL \uac12\uc774 Default \uac12\uc73c\ub85c \uace0\uc815\uc774 \ub418\uc5b4 \uc788\uc74c  \ub0b4\ubd80\uc5d0 \uc788\ub294 \ubc84\ud2bc\uc740 ID\ub97c \ub0b4 \ub9c8\uc74c\ub300\ub85c \ubc14\uafc0 \uc218 \uc788\uc74c  \uadf8\ub798\uc11c IDCANCEL \ubb50 \uc774\ub7f0 \uac78\ub85c \uc124\uc815\ud574 \ub193\uc744 \uc2dc ... myID \uac00 #define 273 \ubb50 \uc774\ub7f0 \uc2dd\uc73c\ub85c ...  X \ubc84\ud2bc \ub20c\ub7ec\ub3c4 \uc548 \uaebc\uc9c0\ub294 \uc2dd\uc774 \ub420 \uc218\ub3c4 \uc788\ub2e4 </p> <p>Resource View - Time Column Row \ud56d\ubaa9 \ucd94\uac00, \ub3c4\uad6c \uc0c1\uc790 \ubcf4\uae30 \ub3c4\uad6c \ubaa8\uc74c \ud45c\uc900  \ubc84\ud2bc \ucd94\uac00\ub098 Edit Control \ub4f1\ub4f1 \ubc30\uce58 \uac00\ub2a5  \ucc3d \ub514\uc790\uc778 \uc54c\uc544\uc11c ... </p> <p>\uc785\ub825\uc744 \ud558\uba74 \uc774 \ucc3d\uc758 \uc815\uccb4\ub294  10 X 10 -&gt; \ud655\uc778 \uc2dc  10 X 10 \ud0c0\uc77c \ub9f5\uc744 \ub9cc\ub4e4\uac8c \ud558\ub294 \uac83\uc774 \ubaa9\ud45c\uc774\ub2e4 </p> <p>TileMap \ucef4\ud3ec\ub10c\ud2b8\ub97c \uc5d0\ub514\ud130\uc640 \uc5f0\ub3d9\ud558\uc5ec \uc624\ube0c\uc81d\ud2b8 \ub9cc\ub4e4\uc5b4 \ubcf4\uae30  TileMap \uc740 2D \uac8c\uc784\uc5d0\uc11c \uac70\ub300\ud55c \ud310\uc5d0\ub2e4\uac00 \ud0c0\uc77c \uc774\ubbf8\uc9c0\ub97c \uae4c\ub294 \ud615\ud0dc\uc758 \ud0c0\uc77c \uae30\ubc18 \uac8c\uc784\ub4e4  \uc61b\ub0a0 2D \uac8c\uc784\ub4e4 \ud0c0\uc77c \ud55c\uce78\uc529 \uadf8\ub9bc \uadf8\ub9ac\uae30  \ud0c0\uc77c\ub4e4\uc744 \ubc30\uce58\ud574\uc11c \ub545\uc744 \ub9cc\ub4dc\ub294 \uac83  \uc65c \uc61b\ub0a0 \uac8c\uc784\ub4e4\uc740 \ud0c0\uc77c\uc744 \uc37c\uc744\uae4c  \ub514\uc790\uc774\ub108\uac00 \ub9f5\uc744 \uadf8\ub9bc \ub610 \uadf8\ub9bc\uc744 \uadf8\ub9bc \ub9ac\uc18c\uc2a4\uce74 \ubb34\ud55c\ub300\ub85c \ucd94\uac00  \uac8c\uc784 \uc11c\ube44\uc2a4\uac00 \uc624\ub798 \ub418\uba74 \ub9f5 \ub9ac\uc18c\uc2a4\uac00 \uae30\ud558\uae09\uc218\uc801\uc73c\ub85c \ub298\uc5b4\ub0a8 \ub9f5\uc744 \uacc4\uc18d \uacc4\uc18d \uadf8\ub824\uc57c \ud568  \uac8c\uc784 \uc6a9\ub7c9\uc774 \ubb34\uc2a8 2D \uc8fc\uc81c\uc5d0 3D\ubcf4\ub2e4 \uc6a9\ub7c9\uc774 \ub9ce\uc774 \ub098\uac08 \uc218\ub3c4 \uc788\ub2e4 ...  \uadf8\ub7ec\uba74 \uc61b\ub0a0 \ucf58\uc194 \uac8c\uc784\ub4e4\uc740 \uc6a9\ub7c9\uc774 \uc9c0\uae08\uc5d0 \ube44\ud574 \ub9e4\uc6b0 \uc81c\ud55c\uc801\uc774\uc5b4\uc57c \ud588\uc74c \ub514\uc2a4\ud06c \ub7a8 \ub4f1\ub4f1  \ub85c\ub529\ub3c4, \ub7a8\uc774 \uc791\uc73c\ub2c8\uae4c \uae30\uc874\uc758 \ub7a8\uc744 \uc624\ub798 \ud558\ub294 \uc2dd\uc774\uc5c8\uc74c  \ub85c\ub529\uc774 \uacc4\uc18d \ubc1c\uc0dd ... \uc9c0\uae08\uc740 \uc6a9\ub7c9\uc774 \ub109\ub109\ud574\ub3c4 ... \ub7a8\uc774 32\uae30\uac00\uc5ec\ub3c4 \uac8c\uc784\uc740 200\uae30\uac00 \uc774\ub7ec\uba74 ..?  \uc5ec\uc804\ud788 \uc800\uc0ac\uc591 \uac8c\uc784\uc774 \uc544\ub2cc \uc774\uc0c1 \ub7a8\uc5d0\ub2e4 \uac8c\uc784\uc744 \ub2e4 \uc62c\ub9ac\uae30\ub294 \uac70\uc758 \ubd88\uac00\ub2a5  \uadf8\ub798\uc11c \ud0c0\uc77c \uae30\ubc18 \ub514\uc790\uc778\uc774 \ub098\uc634. \ud14d\uc2a4\uccd0\ub3c4 \uc6a9\ub7c9\uc744 \ub9ce\uc774 \uba39\ub294\ub370  \ub9f5\uc744 \uc804\ubd80 \ub2e4 \uadf8\ub9ac\uba74, \ud558\ub098\ub2f9 \uc6a9\ub7c9\uc774 10MB, 20\uac1c\uba74 200MB\uac00 \ub428.  \uadf8\ub7ec\uba74 \uc791\uc740 \ud0c0\uc77c \ud14d\uc2a4\uccd0 \uadf8\ub798\ud53d\uc744 \uacc4\uc18d \ud65c\uc6a9\ud558\uc5ec \uae38\uc744 \ub9cc\ub4e4\uc5b4 \ubc84\ub9ac\uae30  \uba54\ubaa8\ub9ac\ub294 \ud14d\uc2a4\uccd0 \ud55c \uc7a5\ub9cc \uc788\uc73c\uba74 \ub428 \ub80c\ub354\ub9c1 \uc2dc \uc774\ubbf8\uc9c0\ub97c \ubc31 \ubc84\ud37c\uc5d0 \ucd9c\ub825\ub9cc \ud558\uba74 \ub428  \uc598\ub4e4\uc744 \ub9f5 \ub514\uc790\uc778\uc5d0\uc11c \ub3cc\ub824 \uc368 \ubc84\ub9ac\uae30  \uc774\ub7ec\uba74, \ub9cc\uc57d \uac70\ub300\ud55c \uaca9\uc790 \ubc30\uc5f4 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uace0, \uac01 \ubc30\uc5f4\uc758 \uc704\uce58\uc5d0\ub294 \uadf8\ub0e5 \ud0c0\uc77c enum \ub9cc \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \ub41c\ub2e4.  \ud0c0\uc77c\uc774 6 8 48\uac1c\uc774\uc9c0\ub9cc, \uc544\ubb34\ud2bc \ubb50 \uc774 \ud14d\uc2a4\uccd0 \ud558\ub098\ub85c \ub9f5\uc744 \uac70\uc758 \ubb34\ud55c\ub300\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc74c  \uc774\uac8c \uac00\ub2a5\ud558\uac8c \ud574 \uc8fc\ub294 \uac8c \ud0c0\uc77c \ub9f5 \ucef4\ud3ec\ub10c\ud2b8, \ub610\ub294 \ud0c0\uc77c \ub80c\ub354 \ub77c\uace0 \ud574 \uc8fc\uae30  class TileRender : public Component {};  \uc598\ub294 \ub80c\ub354\ub9c1 \uae30\ub2a5\ub3c4 \uac00\uc9c0\uace0 \uc788\uc744 \uac83 </p> <p>private: UINT m_Col; UINT m_Row;  public: void SetColRow(UINT _Col, UINT _Row){     m_Col = _Col; m_Row = _Row;  } </p> <p>\uc6b0\uce21 \ud558\ub2e8\uc73c\ub85c \ubed7\uc5b4\ub098\uac00\ub294 \uc774\uc720\ub294 ... \ud0c0\uc77c \uc704\uce58 \uacc4\uc0b0\uc774 \ub9e4\uc6b0 \ud3b8\ud574\uc11c  3 X 3 \ud0c0\uc77c \ub9f5\uc5d0\uc11c \uc911\uc2ec \uc704\uce58\uc640 3\uc904 3\uc5f4\uc774 \ub098\uc624\uaca0\uc9c0  LineRender \uc904 4\uc904 \uadf8\uc5b4\ubc84\ub9ac\uace0 \uadf8\ubb3c\ub9dd\uc73c\ub85c \ud0c0\uc77c \ud14c\ub450\ub9ac \uc678\uacfd\uc120\uc774 \ub098\uc62c \uac83  3 BY 3 \uc774\uba74 +1\uc529 \ud574\uc11c 4\uc904\uc529  \uac00\ub85c \uc138\ub85c \ud589\ub82c  \ud0c0\uc77c \uc0ac\uc774\uc988 \uac00\ub85c \uc138\ub85c \ud0c0\uc77c \ud55c \uce78\ub2f9 \ud06c\uae30  \ud0c0\uc77c \uc0ac\uc774\uc988 Vec2 m_TileSize; // \ud0c0\uc77c 1\uac1c\uc758 \ud06c\uae30 </p> <p>void SetTileSize(Vec2 _Size); \ubb50 \uc774\ub7f0 \uc2dd\uc73c\ub85c  \ud0c0\uc77c \ud558\ub098\uc758 \uc0ac\uc774\uc988\ub97c 64\ub85c \uc7a1\uc73c\uba74 (\ud53d\uc140\uc774 64\ub77c\uc11c) DebugRender \uc694\uccad FinalTick()\uc5d0\uc11c  \uc88c\uc0c1\ub2e8 \uc2dc\uc791\uc810\uc5d0\uc11c \ubc18\ubcf5\ubb38 \ud69f\uc218 * \ud0c0\uc77c \uc0ac\uc774\uc988 </p> <p>Actor \ucd94\uac00  class TileActor  private:  TileRender* m_TileRender </p> <p>public:  virtual void Tick() override;  virtual void Render() overide; </p> <p>Editor Level now has one TileActor  TileRender Ciomponent  TileActor  TileRender* GetTileRender() </p> <p>Editor  \uac15\uc81c \uce90\uc2a4\ud305 ?  Level_Editor pEditorLevel = (Level_Editor) pCurLevel;  pEditorLevel-&gt;GetTileActor()-&gt;GetTileRender()-&gt;SetColRow(Col, Row);  Compared to this Dynamic Casting will be more safer  Level_Editor* pEditorLevel = dynamic_cast (pCurLevel); // This method instead  assert(pEditorLevel); \ud0c0\uc77c \uc124\uc815 \uc774\uc81c \uac00\ub2a5  \ud0c0\uc77c \ucabd\uc5d0 \uc6d0\ud558\ub294 \uac12 \uc138\ud305 \uac00\ub2a5  Editor UI\uc640 \uc5f0\ub3d9 \uac00\ub2a5!  <p>Tile Render \ud568\uc218\uc758 \uae30\ub2a5 \ub9cc\ub4e4\uae30 </p> <p>Tile Render Members should include  class ATexture;  Texture pointer is also required m_AtlasTex // contains several images  Similar to Flipbook Image extortion </p> <p>class ATexture;  class ASprite; </p> <p>struct tTileInfo{     ASprite *m_Sprite;      bool bCollision;     bool bBlock;  };</p> <p>class TileRender : public Component {     private:      vector m_vecTileInfo; (m_Col * m_Row)  } <p>Tile 5 X 5 25 ? Map larger design ? vector resize  So SetColRow should change file size too ...  if(m_Col * m_Row)  if(m_vecTileInfo.size() &lt; m_Col * m_Row){     m_vecTileInfo.reserve(); // ?      m_vecTileInfo.resize(m_Col * m_Row);  } else if  m_vecTileInfo; </p> <p>\ubca1\ud130 \uacf5\uac04\uc774 \uacc4\uc18d\ud574\uc11c \ubcc0\ud558\ub294\ub370 ...  \uc784\uc2dc \uc9c0\uc5ed\ubca1\ud130\ub97c \ub9cc\ub4e0\ub2e4  vector vecTemp;  vecTemp.resize(m_Col* m_Row);  std::swap(m_vecTileInfo, vecTemp);  resize \uc774\ud6c4 \uc784\uc2dc \ubca1\ud130\ub97c resize \ud574 \ubc84\ub9ac\uae30  \uc774\ub7ec\uba74 \uc6d0\ub798 \ubca1\ud130\ub97c \uc9c0\uc5ed\ubcc0\uc218 \ucc98\ub9ac\ud574\ubc84\ub824\uc11c \uc0ad\uc81c\ud574\ubc84\ub9ac\uae30!  \uc6d0\ubcf8\uacfc Capacity\uac00 25\uc9dc\ub9ac\uc778 \ub531 \ud560\ub2f9\ub41c \uacf5\uac04\ub9cc \uc800\uc7a5\ud574 \ubc84\ub9ac\uae30!  <p>\ubcf8\uc778\uc774 \uba87 \uc5f4 \uba87 \ud589\uc778\uc9c0 </p> <p>void SetSprite  \uc9c0\uae08 25\uac1c\uc758 \ubca1\ud130 \ud0c0\uc77c \uc815\ubcf4\ub97c 1\ucc28\uc6d0 \ub3d9\uc801\ubc30\uc5f4\uc5d0\uc11c \uad00\ub9ac\ud558\ub294 \uc911  UINT loc = m_Row * _Col + _Row </p> <p>wstring \uc744 fwrite \ud558\ub294 \uacbd\uc6b0 sizeof(wstring) \uc744 \ud558\uba74 \uc2a4\ud0dd \uc601\uc5ed\uc758 wstring class\uc758 \uc0ac\uc774\uc988,  wstring\uc758 size capacity \uadf8\ub9ac\uace0 *pointer \ud799 \uc601\uc5ed\uc758 \ub3d9\uc801\ubc30\uc5f4\uc744 \uac00\ub9ac\ud0a4\ub294 \uacf3\uc73c\ub85c ...  \uadf8\ub798\uc11c Key.length(); \uc774\ub807\uac8c \ub370\uc774\ud130 \uae38\uc774 \ub77c\uace0 \ud45c\ud604\ud568 Key.size()\uc640 \uac19\uc74c \ubb50 \uc544\ubb34\ud2bc  UINT Len = (UINT) Key.length();  fwrite(&amp;Len, sizof(UINT), 1, pFile);  Key.data();  Key.c_str();  fwrite(Key.c_str(), sizeof(wchar_t), Len, pFile); \uc774\ub7f0 \ubc29\uc2dd\uc73c\ub85c \ud558\uba74  Key.data(); Key.c_str(); \uc774 \ud568\uc218\ub4e4\uc740 \ud799 \uc601\uc5ed \uc8fc\uc18c\ub97c \uac00\uc838\uc624\ub294 \uac70 ? </p> <p>\uc77d\ub294 \uc2dc\uc810\uc5d0\uc11c\ub294  fread(&amp;Len, sizeof(UINT), 1, pFile);  wchar_t buffer[255] = {}; // 255\ub294 \uc0c1\uc218\ub77c \uac00\ub2a5. \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0\uc11c \uc815\uc801\ubc30\uc5f4 \ud06c\uae30 \uc124\uc815 \uc644\ub8cc  fread(buff, sizeof(wchar_t), Len, pFile); </p> <p>wstring Key = buff; </p> <p>void SaveWString(const wstring&amp; _String, FILE _File);  void LoadWString(wstring&amp; _String, FILE _File);  \ubb38\uc790\uc5f4 \ud558\ub098\ub97c \uc9c0\uc815\ub41c fstring\uc5d0 \ubd88\ub7ec\uc62c \uc218 \uc788\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc11c Load \ucabd\uc5d0 \ub123\uc5b4 \ubc84\ub9ac\uae30 </p> <p>\uc544\ubb34\ud2bc \uc774 \ud568\uc218\ub97c SaveWString(Key, pFile) \uc774\ub7f0 \uc2dd\uc73c\ub85c \uc9c4\ud589  \ud0c0\uc77c\uc744 \ucc38\uc870\ud558\ub358 Sprite\uc758 Key\ubb38\uc790\uc5f4\uc744 \ud30c\uc77c\ub85c\ubd80\ud130 \uc77d\uc5b4 \uc628\ub2e4  wstring Key;  LoadWString(Key, pFile); \ubb50 \uc774\ub7f0 \uc2dd\uc73c\ub85c  AssetManager FindSprite  \uadf8\ub7f0\ub370 \ub9cc\uc57d Sprite \uac00 nullptr\uc774\ub77c\uba74 ... \uc5b4\ub5a0\ud55c \uc2a4\ud504\ub77c\uc774\ud2b8  \uc65c\ub0d0\ud558\uba74 \ud574\ub2f9 Sprite\uac00 \uc544\ubb34 Sprite\ub3c4 \uac00\ub9ac\ud0a4\uace0 \uc788\uc9c0 \uc54a\uc558\uc744 \uc218\ub3c4 \uc788\uc74c \uadf8\ub798\uc11c \ud655\uc778\uc774 \ud544\uc694\ud568  \uc8fc\uc18c\uac12\uc758 \uc874\uc7ac \uc5ec\ubd80 \ud655\uc778  bool Exist = m_vecTileInfo[i].Sprite;  fread(&amp;Exist, sizeof(bool), 1, pFile); // \uc774\ub807\uac8c \uc874\uc7ac \uc5ec\ubd80\ub97c \ud655\uc778 \uba3c\uc800  if(Exist) {     wstring Key;     ... \uc774\ud558 \ud568\uc218      } </p> <p>\uc774\uc81c \ud30c\uc77c \uaed0\ub2e4 \ud0a4\uae30 \ub4f1 \ubaa8\ub450 \uc815\uc0c1\uc791\ub3d9!!  \uc9c0\uae08 \uc774 Sprite\uac00 \uc788\ub294 \uc774\uc720\ub294 AssetMgr Initialize \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c  AssetMgr\uc5d0\uc11c \ub4f1\ub85d\uc744 \ud574\ubc84\ub9bc \uc6d0\ub798 \ucf54\ub4dc\ub294  \ud504\ub85c\uadf8\ub7a8\uc774 AssetMgr\uc5d0 \ud0c0\uc77c \ud615\uc2dd\uc744 \ubaa8\ub450 \ub123\uc5b4 \ub193\uace0 \uc2dc\uc791\ud558\ub294 \uac70\uc784 </p> <p>TileSprite \ubd88\ub7ec\uc624\uae30 \ud558\uba74 \uc544\uc9c1\uc740 \uc548 \ub428 \uc65c\ub0d0\ud558\uba74 FileRender\uc5d0\uc11c  \uc544\uae4c \uc800\uc7a5\uc774\ub791 \uac19\uc740 Key\uac12\uc744 \ub2ec\ub77c\uace0 \ud588\ub294\ub370 find\ud568\uc218\uc5d0\uc11c \ucc3e\uc544\ub3c4 \uc5c6\uc5b4\uc11c nullptr\uc774 \ub098\uc634  \uc774\uac8c \uac00\ub2a5\ud55c \uc774\uc720\ub294 \ub178\uac00\ub2e4\ub85c AssetMgr\uac00 \uc804\ubd80 \ub2e4 \ud30c\uc77c \ub178\uac00\ub2e4\ub85c \uc800\uc7a5\ud574 \ub193\uc544\uc11c\uc784  \uadf8\ub798\uc11c ... \uc774 \ubd80\ubd84 \ud574\uacb0\uc744 \uc704\ud574 Sprite Asset\uc758 \uc800\uc7a5 \ubd88\ub7ec\uc624\uae30 \uae30\ub2a5 </p> <p>Sprite\uac00 \ub85c\ub529\uc774 \ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc740 ... AssetMgr Create \ud574\uc11c  \uc774\uc81c AssetMgr\uc5d0\uc11c \ubb34\uc2a8 \ud0a4 \uac12\uc73c\ub85c \ub85c\ub529\uc774 \ub418\uc5c8\ub294\uc9c0 \ubb38\uc790\uc5f4 \uc800\uc7a5  \ud30c\uc77c \ub85c\ub4dc \uc138\uc774\ube0c \ud0a4\uac12 / \uc0c1\ub300 \uacbd\ub85c \uc124\uc815 </p> <p>\uc800\uc7a5\ub420 \ub54c Sprite \ud3ec\uc778\ud305 \ud0a4 \uac12 \ubc1b\uc544\uc11c \ud30c\uc77c\uc5d0 \uc800\uc7a5, Path\ub3c4 \ud30c\uc77c\uc5d0 \uc800\uc7a5 ?  \ub85c\ub529 \uc2dc\uc810\uc5d0 \ub9cc\uc57d Sprite\uac00 \uba54\ubaa8\ub9ac\uc5d0 \ub85c\ub529\uc774 \uc548 \ub418\uc5b4 \uc788\uc5c8\ub2e4\uace0 \uac00\uc815\ud574\ub3c4  \uacbd\ub85c\uc5d0 \uc788\ub294 Sprite\ub97c </p> <p>\uac8c\uc784 \uc5d4\uc9c4 Asset\ub4e4\uc774 \uc774\ub807\uac8c \ud558\ub098\ub9cc \uc800\uc7a5\ud558\uba74 \uad00\ub828 \uc815\ubcf4\uac00 \ub2e4 \uc800\uc7a5\ub428  \uadf8\ub798\uc11c \ub85c\ub529\ud560 \ub54c \ub2e4\ub978 \uc5d0\uc14b\ub4e4\uc774 \uc5f0\uc1c4\uc801\uc73c\ub85c \uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uc640 \ubc84\ub9bc  \uc2e4\ud589 \ub2f9\uc2dc \uc774\ub7f0 \uc5d0\uc14b\uc744 \uc54c\uace0 \uc788\uc5c8\ub294\ub370  Mest Texture Sound Asset \ub4f1\ub4f1 \ud55c\uaebc\ubc88\uc5d0 \ub2e4 \ub04c\uc5ec\uc62c\ub824\uc9d0 </p> <p>Sprite\ub294 AtlasTex\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc74c \uc6d0\ub798 ...  \ud0c0\uc77c\uc774 \ub85c\ub529\ub420 \ub54c \uad00\ub828\ub41c Asset\ub294 Sprite \ub85c\ub529 \uacfc\uc815\uc5d0\uc11c  \uac01\uac01\uc758 Asset\ub4e4\uc740 \uac1c\ubcc4\ub85c \ud30c\uc77c\uc744 \uc800\uc7a5\ud558\uac70\ub098 \ubd88\ub7ec\uc624\ub294 \uae30\ub2a5\uc774 \ud544\uc694\ud568 ... \uadf8\ub798\uc11c \uc774 \ubb38\uc81c \ud574\uacb0\uc744 \uc704\ud558\uc5ec  Sprite\uc640 Flipbook\uac00 \uc2a4\uc2a4\ub85c \uc800\uc7a5\uacfc \ubd88\ub7ec\uc624\uae30\uac00 \uac00\ub2a5\ud574\uc57c \ud568  Flipbook\ub3c4 \ud30c\uc77c\ub85c \uc800\uc7a5\ub418\uace0 \ubd88\ub7ec\uc624\uae30 \uae30\ub2a5\uc774 \uc874\uc7ac\ud574\uc57c \ud568 </p> <p>\ub85c\ub529\uc774 \ub418\ub824\uba74 AtlasTex\ub3c4 \ub85c\ub529, \uc2a4\ud504\ub77c\uc774\ud2b8\ub3c4 \ub85c\ub529, \ud50c\ub9bd\ubd81\ub3c4 \ub85c\ub529 \ub418\ub294 \uac70 ...  Sprite Save and Load \uad6c\ud604 </p> <p>AtlasTexture Sprite Asset Key or Path Saving  LoadWString  LoadTexture if key exist return else register by given path load it and return after loading </p> <p>Sprite Generation, Sprite Key generation, Register to AssetMgr,  wsting FilePath = PathMgr()-&gt;GetInst()-&gt;GetContentMgr(); </p> <p>\ud074\ub9ad\ud558\ub294 \uc21c\uac04 AtlasTex\uc640 Sprite \ub4f1\ub4f1 \ubaa8\ub450 \ub85c\ub529\uc774 \ub418\uc5b4\uc11c \uc800\uc7a5\ub428  \ud0c0\uc77c \ubd88\ub7ec\uc624\uae30 \ub80c\ub354 Key\ub9cc \uc800\uc7a5 \uc218\uc815 \uac00\ub9ac\ud0a4\uace0 \uc788\ub358 Sprite\uac00 \uc788\uc5c8\ub294\uc9c0 \uc800\uc7a5\ud55c\ub2e4 </p> <p>\uc55e\uc73c\ub85c ... \ud30c\uc77c \ub85c\ub4dc \uc138\uc774\ube0c \uacfc\uc815\uc744 \uc774\ub7ec\ud55c \ubc29\uc2dd\uc73c\ub85c \uc9c4\ud589  \uae54\ub054\ud558\uac8c \ud568\uc218\ud654\ud574\ub3c4 \uad1c\ucc2e\uc74c  </p> <p>void SaveSprite(class ASprite _Sprite, FILE _File);  ASprite LoadSpriteReference(FILE _File); </p> <p>SaveTextureRef  LoadTextureRef </p> <p>SaveFlipbookRef  LoadFlipbookRef </p> <p>\ubb50 \uc774\ub7f0 \uc2dd\uc73c\ub85c Asset Save Load \ubaa8\ub4c8\ud654  Flipbook Save Load Function Generation </p> <p>\uc5b4\ub5a4 Sprite\ub97c \uc800\uc7a5\u314e\ud558\uace0 \uc788\uc5c8\ub294\uc9c0  func Save Load Sprite Reference </p> <p>Save Sprite Reference  Vector Size  \uc800\uc7a5 \uc21c\uc11c  Flipbook\uc740 \uba87 \uc7a5\uc758 Sprite\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc5c8\ub294\uac00 ? </p> <p>\ub85c\ub529 \uc21c\uc11c  \uadf8 \ubc18\ub300\ub85c </p> <p>LoadSpriteReference  vector push_back  return S_OK; </p> <p>\uc774\uc81c \uc800\uc7a5\ub41c \ud50c\ub9bd\ubd81 \ub85c\ub529\uc73c\ub85c \ub611\uac19\uc740 \uc560\ub2c8\uba54\uc774\uc158\uc744 \ubf51\uc744 \uc218 \uc788\uc74c! </p> <p>Resolution \ud574\uc131\ub3c4 \uc704\uce58\uc5d0\uc11c  Scale Setup UI </p> <p>Reverse End \uc0c1\ud0dc  \uc2dc\uc791\ubcf4\ub2e4 \uc774\uc804\uc758 \uac1c\ub150\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0  \uc77c\ubd80\ub85c \uc2e4\uc9c8\uc801\uc73c\ub85c \uac00\ub9ac\ud0a4\ub294 \ub300\uc0c1\uacfc \uc0ac\uc6a9\uc790\ud55c\ud14c \uc8fc\ub294 \ub300\uc0c1 \uac12\uc774 \ub2e4\ub984  vecttor::iterator iter = rbegin(); iter != rend();  ++iter  \uac1c\ub150\uc801\uc778 \ub370\uc774\ud130\uac00 \uc544\ub2c8\ub77c \uc9c4\uc9dc  rbegin iterator \uae30\uc900\uc73c\ub85c \uc815\ubc29\ud5a5 \ud558\uba74 end iterator \uac00 \ub098\uc634  reverse iterator \uac00 \uac00\uc9c0\uace0 \uc788\ub294 \uac78 \uc9c0\uc6b0\uace0 \uc2f6\ub2e4\uba74  \ub9e8 \ucc98\uc74c rbegin \uc2e4\uc81c\ub85c\ub294 End\uc9c0\ub9cc * \ubd99\uc5b4\uc11c \uc811\uadfc\ud558\uba74 ...  <p>Reverse iterator's pointing value will return ...  \uc2e4\uc81c \uc704\uce58</p> <p>vecUI.erase((riter + 1).base());  vecUI.push_back(pParentUI);  Reverse Iterator \uc124\uacc4 \uc6d0\ub9ac ? + 1 \ubca0\uc774\uc2a4 ??  \uadf8\ub9bc\uc73c\ub85c \uc798 \uc815\ub9ac\ud558\uae30  reverse iterator ?  \ud65c\uc6a9\ubc95 \ud655\uc778 \ud544\uc694 </p> <p>vector::iterator iter = vecUI.erase((riter + 1)).base();  Panel K vs Panel  <p>Panel 1 2 Coexist check by reverse iterator  continue iteration reverse iter increment </p> <p>Sound Card  VGA \ucc98\ub7fc\ubd80\ucc29 \uac00\ub2a5  \uc6d0\ub798\ub294 VGA\ucc98\ub7fc \ubd80\ucc29\ud588\uc9c0\ub9cc \uc774\uc81c\ub294 \uac70\uc758 \ub300\ubd80\ubd84 \uba54\uc778\ubcf4\ub4dc\uc0ac\uc5d0 \uc778\uc218\ub428  \uadf9\ub3c4\ub85c \uc804\ubb38\uc801\uc778 \uc74c\uc545\uc0b0\uc5c5 \ub4f1\uc774 \uc544\ub2c8\uba74 \uc0ac\uc6b4\ub4dc\uce74\ub4dc\ub97c \ub530\ub85c \uad6c\ub9e4\ud558\uc9c0 \uc54a\uace0  \uba54\uc778\ubcf4\ub4dc \ub0b4\uc7a5 \uc0ac\uc6b4\ub4dc \uce74\ub4dc\ub97c \uc0ac\uc6a9 \uc911 </p> <p>IDirectSound8 \uc774\ub140\uc11d\uc774 \ud568 </p> <p>Asset Sound \ub97c \ub9cc\ub4e4\uace0  AssetMgr\uc5d0\uc11c \uad00\ub9ac </p> <p>Sound Device \uc544\ubb34\ud2bc \ub9cc\ub4e4\uace0 </p> <p>wav \ud3ec\uba67\uc73c\ub85c \ud30c\uc77c \ubcc0\uacbd\uc774 \ud544\uc694\ud568 </p> <p>\uc6d0\ub798 \uc758\ub3c4\uac00 \uc18c\ub9ac \ub370\uc774\ud130\uac00 \uc544\ub2cc\ub370 \uc18c\ub9ac \ub370\uc774\ud130 \ub85c \ucc98\ub9ac\ud574\uc11c \uc3f4 \ubc84\ub9ac\uba74  \uc774\uc0c1\ud55c \ub370\uc774\ud130\uac00 \uc7a1\uc74d\uc744 \ub9cc\ub4e4\uc5b4 \ubc84\ub9b4 \uac83 ...  \uacf5\uc601\ubc29\uc1a1 \uc1a1\ucd9c \uc885\ub8cc \uc2dc\uc810\uc5d0 \ub178\uc774\uc988 \ub098\uc624\ub294 \uac70  \uc5d0\uc14b \ub9e4\ub2c8\uc800 \uc18c\ub9ac \uad00\ub828 \uc815\ubcf4 \ucc98\ub9ac  \ub370\uc774\ud130 \ub85c\ub529 \uc0ac\uc6b4\ub4dc \uce74\ub4dc \uc7ac\uc2f1  SetPosition </p> <p>\ub370\uc2dc\ubca8\uc740 \uc18c\ub9ac\uac00 \uc81c\uacf1 \ud568\uc218\ub85c \uc62c\ub77c\uac10 ... \uadf8\ub798\uc11c ++ \uc774\ub534\uc2dd\uc73c\ub85c \ud558\uba74 \uc18c\ub9ac \uac1c \ucee4\uc9d0  \uadf8\ub798\uc11c \uc774\ub97c \uc120\ud615\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uacf5\uc2dd\uc774 \uc788\ub294 \uac8c \uc88b\uc74c \uc785\ub825\uc73c\ub85c \ub370\uc2dc\ubca8\uc744 \ubc1b\uc544\uc57c \ud574\uc11c  Volume\uc740  SoundBuffer  LevelEditior Begin -&gt; Play one Sound (Background Sound)  Loading First  AssetMgr::GetInst()-&gt;LoadSound(L\"DM\", L\"Sound\\DM.wav\");  Play();  ASound *pBGM;  \ubb50 \uc774\ub807\uac8c \uc0ac\uc6b4\ub4dc \ub85c\ub529\ud558\uace0 \ud50c\ub808\uc774\ud558\uae30 </p> <p>\uc774\ud399\ud2b8 \uc0ac\uc6b4\ub4dc\ub294 \ub3d9\uc2dc\ub2e4\ubc1c\uc801\uc73c\ub85c \ud50c\ub808\uc774\uac00 \ub418\uc5b4\uc57c \ud558\ub294\ub370  BGM \uc740 ... \ud558\ub098\ub9cc \ud50c\ub808\uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4 \uadf8\ub7ec\ubbc0\ub85c  PlayToBGM(true); \uc774\ub77c\ub294 \ud568\uc218\uac00 \ub530\ub85c \uc874\uc7ac\ud568  AssetMgr\ud55c\ud14c \uc774 \uc18c\ub9ac \uc0ac\uc6b4\ub4dc\ub97c AssetMgr\uc5d0 \ub4f1\ub85d\ud574 \ubc84\ub9ac\uae30 </p> <p>void RegisterToBGM(ASound* _BGM); </p> <p>\uac19\uc740 \uc0ac\uc6b4\ub4dc \ud30c\uc77c \uacf5\uc720 \ubb38\uc81c  \ud30c\uc774\uc5b4\ubcfc\uc744 \ud50c\ub808\uc774\uc5b4 1 2 \uac00 \uc3d8\ub294\ub370, \uadf8\ub7ec\uba74  \uc0ac\uc6b4\ub4dc \ud558\ub098\ub97c \ud50c\ub808\uc774\ud558\ub2e4\uac00 \ub2e4\uc2dc \uc2dc\uc791\uc810\uc73c\ub85c \ub3cc\uc544\uac00\uc11c ... \ud574\uc57c \ub418\ub294\ub370  \uc774\ub7ec\uba74 \ub3d9\uc77c\ud55c \uc0ac\uc6b4\ub4dc\ub97c \uc911\ucca9\ub418\uc5b4\uc11c \ud30c\uc774\uc5b4\ubcfc\uc774 \ub3d9\uc2dc\uc5d0 \uc5ec\ub7ec \uac1c \ub4e4\ub9ac\uac8c \ud574\uc57c \ud558\uba74 ...  \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud568  \uba54\ubaa8\ub9ac\uc5d0\ub294 \ub85c\ub529\uc744 \ud558\ub098\uc529 \ud558\ub418, SoundBuffer \ub0b4\ubd80 \uc7ac\uc0dd \uc2dc\uc5d0\ub294  Channel \ub9cc\ub4e4\uc5b4\uc11c \uc774\uac78 \uc6d0\ubcf8\uc5d0\uc11c \ubcf5\uc0ac\ud55c \ud6c4 \uc2e4\ud589\ud568 \uc774\ub7ec\uba74 ...  \uc0c8\ub85c\uc6b4 \ucc44\ub110 \ub9cc\ub4e4\uc5b4\uc11c \ubcf5\uc0ac \uc0c8\ub85c \ud558\uace0  \uadf8\ub9ac\uace0 \uc7ac\uc0dd \ub05d\ub098\uba74 \ubc84\ud37c\ub97c \ube44\uc6cc \ubc84\ub9bc </p> <p>API \ub54c\ub294 \uc911\ucca9 \ub3d9\uc2dc\uc7ac\uc0dd \uc0ac\uc6b4\ub4dc\ub294 \ud0a4\uac12 \uc870\uae08 \uc529 \ubcc0\uacbd  \ub2e4\ub809 FMOD \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc44\ub110 \uc2dc\uc2a4\ud15c </p>"},{"location":"Windows_OS/WIN03/","title":"WIN03","text":"<p>32 Bit OS VS 84 Bit OS  IO Bus 32Bit or 64 Bit </p> <p>\uba85\ub839\uc5b4 Fetch \ub97c  IO BUS \ub97c \ud1b5\ud574\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uac00\uac8c \ub428  \ub370\uc774\ud130 \uc774\ub3d9 \ud55c\ubc88\uc5d0 32\ube44\ud2b8\ub97c \uc6c0\uc9c1\uc774\ub0d0 64\ube44\ud2b8\ub97c \uc6c0\uc9c1\uc774\ub0d0 </p> <p>HW Perspective </p> <p>Step 1 Fetch Command From IO Bus to Bus Interface  Step 2 Decode Command by Control Unit  Step 3 Execute in ALU (Arithmetic Logic Unit) </p> <p>Programmer Perspective 32 Bit VS 64 Bit  \uccb4\uac10\uc774 \ud06c\uc9c0 \uc54a\uc9c0\ub9cc </p> <p>\ub9cc\uc57d 4Bit OS\uba74, 0000 \ubd80\ud130 1111\uae4c\uc9c0 16\uac00\uc9c0  16\uac00\uc9c0 \ud3ec\uc778\ud130\ubc16\uc5d0 \ud45c\ud604 \ubabb\ud568 ... </p> <p>\uc717\ubd80\ubd84\uacfc \uc544\ub7ab\ubd80\ubd84\uc758 Addressing Type\ub294 \uc77c\uce58\ud574\uc57c \ud568 </p> <p>32Bit OS Pointer \ub294 2^32 = 4294967296 ~= 4GB  64Bit OS Pointer \ub294 2^64 = 18446744073709551616 ~= </p> <p>\ud3ec\uc778\ud130\uac00 \ud06c\uba74 \uba54\ubaa8\ub9ac \uc811\uadfc \ubc94\uc704\ub3c4 \ucee4\uc9d0 </p> <p>If Pointer Size is 64Bit and IO Bus is 32 Bit, then  IO Bus should be used twice to send address, meaning  performance decrease. </p> <p>So, Memory is best when same size of Bus memory transfer maximum. </p> <p>LLP64 VS LP64 </p> <p>char short int long pointer  WORD  DWORD </p> <p>BYTE  WORD  DWORD (Double Word)  DWORD is simply unsigned long  QWORD (Quadra Word)</p> <p>HANDLE  Kernel Object ID </p> <p>Kernel Object  \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8 </p> <p>CreateProcess \uae30\ubc18 \ud504\ub85c\uc138\uc2a4 \uc0dd\uc131  Windows OS\uac00 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub9de\uac8c Process \uc0dd\uc131 \uc989 Process \uc0dd\uc131 \uad00\ub9ac \uc18c\uba78 \uc8fc\uccb4\ub294 OS </p> <p>Process Status Info  Running Blocked Ready  Process Priority Info </p> <p>\ud504\ub85c\uc138\uc2a4 \uc0c1\ud0dc \uc815\ubcf4 : Running Blocked Ready \ud504\ub85c\uc138\uc2a4 \uc6b0\uc120\uc21c\uc704 \uc815\ubcf4  \uc774 \ub450 \uc815\ubcf4 \uac31\uc2e0 \uc2dc Process Scheduler \uac00 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac  \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\ud558\ub294 \uc774\ub7f0 \uad6c\uc870\uccb4\uac00 \uc874\uc7ac\ud560 \uac83 </p> <p>\ud504\ub85c\uc138\uc2a4 \ub0b4\ubd80\uc5d0\uc11c \uc0dd\uc131\ub41c \uc2a4\ub808\ub4dc\ub3c4 \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8  IPC (Inter Process Communication) \ud30c\uc774\ud504 / \uba54\uc77c \uc2ac\ub86f\ub3c4 \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8  \uadf8\ub798\uc57c, OS\uac00 \uad00\ub9ac </p> <p>Windows \uc5d0\uc11c\ub294 \ud30c\uc77c \uc0dd\uc131 \uc2dc\uc5d0\ub3c4 Kernel Object \uc0dd\uc131, \uc65c\ub0d0\ud558\uba74  \ud30c\uc77c\ub3c4 Windows Kernel \uc758 \uad00\ub9ac \ub300\uc0c1 </p> <p>\uadf8\ub9ac\uace0 Kernel Object Type \uc885\ub958\ubcc4\ub85c \ubaa8\uc591\ub3c4 \ub2e4\ub984 </p> <pre><code> Kernel Object       Resource \n|------------|      |---------|\n| Pipe KO    | &lt;--&gt; | Pipe    |\n|------------|      |---------|\n| Process KO | &lt;--&gt; | Process |\n|------------|      |---------|\n| Thread KO  | &lt;--&gt; | Thread  |\n|------------|      |---------|\n</code></pre> <p>\uc774\ub7f0 1\ub300 1 \ub300\uc751 \ubc29\uc2dd  \uadf8\ub9ac\uace0 Windows OS\uc5d0\uc11c Kernel Object \ub97c \uc870\uc791\ud558\ub294 \ubc29\ubc95\uc740  HANDLE \uc744 \uc774\uc6a9\ud558\ub294 \uac83 \uc608\ub97c \ub4e4\uc5b4,  \uc5b4\ub5a4 KO \uc758 \uc6b0\uc120\uc21c\uc704 \ubcc0\uacbd\ud558\ub294 \ud568\uc218  <pre><code>BOOL SetPriorityClass (\n    HANDLE hProcess, \n    DWORD dwPriorityClass \n);\n</code></pre> \uc5ec\uae30\uc11c hProcess \ub294 Process \uc758 HANDLE  dwPriorityClass \ub294 \uc6b0\uc120\uc21c\uc704 \uac12 </p>"},{"location":"Windows_OS/WIN05/","title":"Create &amp; Terminate Process","text":"<p>Windows OS  CreateProcess Function Parameters  <pre><code>BOOL CreateProcess (\n    LPCTSTR lpApplicationName,          // 1. Name of executable module\n    LPTSTR lpCommandLine,               // 2. Command line string\n    LPSECURITY_ATTRIBUTES lpProcessAttributes,  // 3. Process security attributes\n    LPSECURITY_ATTRIBUTES lpThreadAttributes,   // 4. Thread security attributes\n    BOOL bInheritHandles,               // 5. Handle inheritance flag\n    DWORD dwCreationFlags,              // 6. Creation flags\n    LPVOID lpEnvironment,               // 7. Environment block\n    LPCTSTR lpCurrentDirectory,         // 8. Current directory\n    LPSTARTUPINFO lpStartupInfo,        // 9. Startup information\n    LPPROCESS_INFORMATION lpProcessInformation  // 10. Process information\n);\n</code></pre></p> <p>struct <code>STARTUPINFO</code> \uad6c\uc870\uccb4 </p> <pre><code>typedef struct _STARTUPINFOW {\n    DWORD   cb;\n    LPWSTR  lpReserved;\n    LPWSTR  lpDesktop;\n    LPWSTR  lpTitle;\n    DWORD   dwX;\n    DWORD   dwY;\n    DWORD   dwXSize;\n    DWORD   dwYSize;\n    DWORD   dwXCountChars;\n    DWORD   dwYCountChars;\n    DWORD   dwFillAttribute;\n    DWORD   dwFlags;\n    WORD    wShowWindow;\n    WORD    cbReserved2;\n    LPBYTE  lpReserved2;\n    HANDLE  hStdInput;\n    HANDLE  hStdOutput;\n    HANDLE  hStdError;\n} STARTUPINFOW, *LPSTARTUPINFOW;\n</code></pre> <p>\ud604\uc7ac \ub514\ub809\ud130\ub9ac \uc124\uc815  <pre><code>DWORD GetCurrentDirectory (\n    DWORD nBufferLength, // memory buffer size \n    LPTSTR lpBuffer      // memory buffer pointer \n); \n// If fail, return 0; \n</code></pre></p>"},{"location":"Windows_OS/WIN06/","title":"Kernel Object and HANDLE","text":""},{"location":"Windows_OS/WIN06/#about-kernel-object","title":"About Kernel Object","text":"<p>CreateProcess let Windows OS make Process </p> <p>Process Status Info </p> <ul> <li>Running </li> <li>Blocked</li> <li>Ready </li> </ul> <p>Process Priority Info </p> <p>OS Process Scheduler will handle these two info : </p> <ul> <li>Process Status Info </li> <li>Process Priority Info </li> </ul> <p>In Windows File generation of Kernel Object  Files are also under Windows Kernel's control </p> <p>1 to 1, kernerl object per resource </p> <pre><code> Kernel Object       Resource \n|------------|      |---------|\n| Pipe KO    | &lt;--&gt; | Pipe    |\n|------------|      |---------|\n| Process KO | &lt;--&gt; | Process |\n|------------|      |---------|\n| Thread KO  | &lt;--&gt; | Thread  |\n|------------|      |---------|\n</code></pre> <p>In Windows OS, Kernel Object is controlled by HANDLE </p> <p>For instance Priority change of Process, which is Windows Kernel Object, by </p> <pre><code>BOOL SetPriorityClass (\n    HANDLE hProcess, \n    DWORD dwPriorityClass \n);\n</code></pre> <p>so Process is accessible by HANDLE datatype </p> <p>Compile and Run then </p> <pre><code>cl Operation1.cpp\ncl Operation2.cpp\n.\\Operation1.cpp \n</code></pre> <p>Result is similar to </p> <pre><code>Operation2.exe\nOperation2.exe\nOperation2.exe\n...\nOperation2.exe\nOperation2.exe\nOperation2.exe\nOperation2.exe\nOperation2.exe\nOperation1.exe\nOperation2.exe\nOperation2.exe\nOperation2.exe\n</code></pre> <p>Kernel Objects are Subordinate to OS, not Process, while </p> <p>HANDLE , aka handle table, are subordinate to Process, not OS </p> <p>Types of Kernel Objects include  </p> <ul> <li>Process </li> <li>Thread </li> <li>Mutex </li> <li>Semaphore </li> <li>Event </li> <li>File / Pipe / Socket </li> <li>Timer / Job Object / Completion Port </li> </ul> <p>The core difference between <code>Operation1.cpp</code> and <code>KerObjShare.cpp</code> are  Last lines that only exist in <code>KerObjShare.cpp</code> code.  <pre><code>++timing; \n        if (timing == 2)\n            SetPriorityClass(pi.hProcess, NORMAL_PRIORITY_CLASS);\n</code></pre></p> <p>Operation2.exe process set priority class of itself by  getting its own handle by function <code>HANDLE GetCurrentProcess()</code>  which returns <code>HANDLE</code> value of process Operation2.exe </p> <p>Structure of PROCESS_INFORMATION is following </p> <pre><code>typedef struct _PROCESS_INFORMATION {\n    HANDLE hProcess;\n    HANDLE hThread; \n    DWORD dwProcessId; \n    DWORD dwThreadId; \n} PROCESS_INFORMATION; \n</code></pre> <p>Access to Process, which is Kernel Object, by HANDLE </p> <pre><code>|-----------------| \n| Operation2.exe  | \n|-----------------|\n        ||\n SetPriorityClass (HANDLE) \n to HIGH_PRIORITY_CLASS  \n        ||\n        \\/  \n|-----------------| \n|  Kernel Object  | \n|---------------- |\n        /\\\n        ||\n SetPriorityClass (HANDLE) \n to NORMAL_PRIORITY_CLASS  \n        ||\n|-----------------| \n| KerObjShare.exe | \n|-----------------|\n</code></pre> <p>For cases to change Process priority, HANDLE is used  to access Process, which is Kernel Object. </p> <pre><code>// Operation2.cpp\nSetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS); \n// KerObjShare.cpp \nPROCESS_INFORMATION pi; \n/* ... codes ... */ \nSetPriorityClass(pi.hProcess, NORMAL_PRIORITY_CLASS); \n</code></pre> <p>A Process creates B Process, B Process gets its priority higher  then A Process turn B Process priority to lower again  </p>"},{"location":"Windows_OS/WIN06/#kernel-object-handle","title":"Kernel Object &amp; HANDLE","text":"<p>HANDLE \uc740 \ud504\ub85c\uc138\uc2a4 \uc885\uc18d\uc801\uc774\ub2e4 \uc758 \uc758\ubbf8  \uadf8\ub7ec\uba74 HANDLE \uc740 \ubaa8\ub4e0 \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8 (Thread, Mutex, Semaphore, etc) \ub4f1  \ub2e4 \uac00\ub9ac\ud0ac \uc218 \uc788\ub294\ub370  \uc65c \ud504\ub85c\uc138\uc2a4 \uc885\uc18d\uc801\uc774\ub77c\uace0 \ud45c\ud604\ud558\ub294\uac00? </p> <p>HANDLE \uc774 \ud504\ub85c\uc138\uc2a4 \uc885\uc18d\uc801\uc774\ub77c\ub294 \ub9d0\uc740 \uc5b4\ub5a0\ud55c \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\ub97c \uac00\ub9ac\ud0a4\ub0d0\uc640\ub294 \uc0c1\uad00 \uc5c6\uace0,  \uadf8 HANDLE \uac12 \uc790\uccb4\uac00 \uc18c\uc18d\ub41c \ud504\ub85c\uc138\uc2a4\uc758 HANDLE TABLE \uc5d0\uc11c\ub9cc \uc720\uc694\ud558\ub2e4\ub294 \uc758\ubbf8  A \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \uc0dd\uc131 \ub41c HANDLE \uac12\uc73c\ub85c\ub294 B C D \ud504\ub85c\uc138\uc2a4\uc758 HANDLE TABLE \uc5d0\uc11c \ubb34\ud6a8\ud568  \uadf8\ub798\uc18c HANDLE \uac12\uc740 PROCESS \uc885\uc18d\uc801  HANDLE \uac12\uc774 Kernel Object \ub9cc \uac00\ub9ac\ud0a8\ub2e4\ub294 \ub73b\uc774 \uc808\ub300\ub85c \uc544\ub2d8  A \ud504\ub85c\uc138\uc2a4\uc640 B \ud504\ub85c\uc138\uc2a4\uac00 \uac19\uc740 C \ucee4\ub110 \uc73c\ube0c\uc81d\ud2b8\ub97c HANDLE \uac12\uc73c\ub85c \uc811\uadfc\ud560 \ub54c  A \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \ub9cc\ub4e0 HANDLE \uac12\uacfc B \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \ub9cc\ub4e0 C \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\uc758 \ud578\ub4e4 \uac12\uc740 \ub2e4\ub974\uc9c0\ub9cc  \ub450 \ud578\ub4e4 \uac12 \ubaa8\ub450 \ub3d9\uc77c\ud55c C \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\ub97c \uac00\ub9ac\ud0b4 </p>"},{"location":"Windows_OS/WIN06/#kernel-object-usage-count","title":"Kernel Object &amp; Usage Count","text":"<p>\uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc758 \uc885\ub8cc\ucf54\ub4dc\ub294 \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\uc5d0 \uc800\uc7a5  \uc790\uc2dd \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc \uc2dc\uc810\uc5d0 \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\ub3c4 \ub3d9\uc2dc\uc5d0 \uc18c\uba78\ub418\uba74  \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\ub294 \uc885\ub8cc\ucf54\ub4dc\ub97c \uc5bb\uc744 \uc218 \uc5c6\uc74c  \uadf8\ub798\uc11c \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc -&gt; \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8 \uc18c\uba78\uc744 \uc548 \ud568 </p> <p>\uadf8\ub7ec\uba74 \uc5b8\uc81c \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\ub97c \uc18c\uba78 ?  \ud574\ub2f9 Kernel Object \ucc38\uc870 \ub300\uc0c1\uc774 \ud558\ub098\ub3c4 \uc5c6\uc744 \ub54c \uc18c\uba78  \uc774 \uc18c\uba78\uc2dc\uae30 \uacb0\uc815\uc744 \uc704\ud558\uc5ec Usage Count (UC) \ucc38\uc870 \ud69f\uc218 \uc0ac\uc6a9  Usage Count \uac00 0\uc774 \ub418\uba74 \ud574\ub2f9 Kernel Object \uc18c\uba78 </p> <p>Process \uc0dd\uc131\uacfc \ub3d9\uc2dc\uc5d0 Kernel Object Usage Count \ub294 1  UC\uac00 0\uc73c\ub85c \ucd5c\ucd08\uc124\uc815\ub418\uba74, \uc0dd\uc131\uacfc \ub3d9\uc2dc\uc5d0 \uc18c\uba78\ub420 \uac83  \uc774\ud6c4 Kernel Object \uc811\uadfc \uac00\ub2a5\ud55c \ub300\uc0c1\uc774 \ub298\uc5b4\ub0a0\uc218\ub85d UC \uc99d\uac00  \uadf8\ub798\uc11c Child UC\ub294 2, \uc65c\ub0d0\ud558\uba74  \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 CreateProcess\ub85c \uc790\uc2dd Process HANDLE \uc744 \uc5bb\uc74c  PROCESS_INFORMATION pi; // In naming convention \uc744 \ud1b5\ud574\uc11c </p> <pre><code>|---------|           |---------|\n| Parent  |  Create   | Child   |\n| Process | --------&gt; | Process |\n|---------|           |---------|\n      \\                    /\\\n       \\                   ||\n        \\  HANDLE          ||\n         \\ return          ||\n          \\                \\/\n           \\____ |---------------|\n                 | Child Process |\n                 | Kernel Object |\n                 |---------------|     \n</code></pre> <p>\uc774\ub807\uac8c UC\uac00 2\uac1c\ub85c \uae30\ubcf8 \uc0dd\uc131  <code>OperationStateParent.cpp</code> </p> <p>CloseHandle \ud568\uc218\uc5d0 \uc804\ub2ec\ub418\ub294 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4 \ud578\ub4e4  <pre><code>CloseHandle(pi.hProcess); \n</code></pre> CloseHandle \ud568\uc218\ub294 \ud578\ub4e4\uc744 \ubc18\ud658  \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\uc758 Usage Count UC\ub97c \ud558\ub098 \uac10\uc18c\uc2dc\ud0a4\ub294 \uae30\ub2a5  UC\uac00 0\uc774 \ub418\uba74, OS\uac00 \ud574\ub2f9 KO \ub97c \uc54c\uc544\uc11c \uc81c\uac70  \ub610\ud55c, \ud504\ub85c\uc138\uc2a4 \uc790\uccb4\uac00 \uc885\ub8cc\ub420 \ub54c \uc77c\uc5b4\ub098\ub294 \uc77c\ub3c4 UC\uac00 \ud558\ub098 \uc801\uc5b4\uc9c0\ub294 \uac83 </p> <p>CloseHandle \ud568\uc218\uc640 Process \uc885\ub8cc\ub294 \uc644\uc804\ud788 \ubcc4\uac1c  \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc \ud568\uc218\ub294 TerminateProcess \uac15\uc81c \uc885\ub8cc \uc694\uccad, \ubb34\uc870\uac74 \uc885\ub8cc\uc2dc\ucf1c\ub77c  \uadf8\ub798\uc11c \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uc5ec\ub3c4, \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub97c \uac15\uc81c \uc885\ub8cc\uc2dc\ud0a4\ub294 \uac83\uc740 \uc88b\uc9c0 \uc54a\uc74c  \uac15\uc81c \uc885\ub8cc \uc2dc \uc77c\ubc18\uc801 \uc885\ub8cc\uc640 \ub2ec\ub9ac \ubb38\uc81c \uc0dd\uae40  \ud30c\uc77c \uc785 \ucd9c\ub825 \uacfc\uc815 \ud504\ub85c\uc138\uc2a4 \uac11\uc790\uae30 \uc885\ub8cc \uc0c1\ud669  \ud504\ub85c\uc138\uc2a4\uac00 \uc790\uae30 \uc77c \ub9c8\uce58\uace0 \ub9c8\uc9c0\ub9c9 return \ubb38\uc73c\ub85c \uc885\ub8cc\ud558\ub294 \uac8c \uc81c\uc77c \uc548\uc815\uc801,  TerminateProcess \uc0ac\uc6a9\uc740 \ube44\ucd94\ucc9c </p> <p><code>Calculator.cpp</code></p> <p>\ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\ub294 Usage Count UC \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc74c  UC \uac12\uc740 \ud574\ub2f9 \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8\ub97c \ucc38\uc870\ud558\ub294 HANDLE \uac1c\uc218 </p> <p>\ub9cc\uc57d\uc5d0 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub97c \ub9cc\ub4e4\uace0 \ub2eb\uc544\uc8fc\uae30\ub97c \ubc18\ubcf5\ud558\ub294\ub370,  <pre><code>case ELSE:\n    ZeroMemory(&amp;pi, sizeof(pi));\n    CreateProcess(\n        NULL, command, NULL, NULL,\n        TRUE, 0, NULL, NULL, &amp;si, &amp;pi\n    );\n    // CloseHandle(pi.hProcess); \n    // CloseHandle(pi.hThread); \n    break;\n</code></pre> \uc774\ub807\uac8c \ud578\ub4e4\uc744 \ub2eb\uc544\ubc84\ub9ac\uc9c0 \uc54a\uc73c\uba74, UC\uac00 \uc5ec\uc804\ud788 \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uac00 \ucc38\uc870\ud558\uace0 \uc788\ub294 1\uc774 \ub428  \ub9cc\uc57d \ud578\ub4e4\uc744 \uacc4\uc18d \ub2eb\uc9c0 \uc54a\ub294\ub2e4\uba74,  \uc790\uc2dd \uacc4\uc0b0\uae30 \ud504\ub85c\uc138\uc2a4 \uc790\uccb4\ub294 \ub05d\ub098\ub3c4 \uc0dd\uc131\ub418\uc5c8\ub358 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4 UC\uac00 \uacc4\uc18d \ub204\uc801 </p> <pre><code>|---------|       |---------|\n| Parent  | ----&gt; | Parent  |\n| Process | ---|  | Knl Obj |\n| Exist   | -| |  | UC = 1  |\n|---------|  | |  |---------|\n             | |\n|---------|  | |  |---------|\n| Child   |  | |  | Child   |\n| Process |  | |-&gt;| Knl Obj |\n| Deleted |  |    | UC = 1  |\n|---------|  |    |---------|\n             |\n|---------|  |    |---------|\n| Child   |  |    | Child   |\n| Process |  |---&gt;| Knl Obj |\n| Deleted |       | UC = 1  |\n|---------|       |---------|\n</code></pre> <p>\uc774\ub7f0 \ubc29\uc2dd\uc73c\ub85c, CloseHandle \ub204\ub77d\ud55c \uc0c1\ud0dc\ub85c \ubc18\ubcf5\uc801\uc73c\ub85c Child Process\ub97c \uc0dd\uc131\ud55c\ub2e4\uba74  Child Process\ub294 \ubaa8\ub450 \uc885\ub8cc\ub418\uc5b4 \uc788\uc9c0\ub9cc, \ud574\ub2f9 Process \uc758 Kernel Object\ub294  \uacc4\uc18d \uc0ac\ub77c\uc9c0\uc9c0 \uc54a\uace0 \ub204\uc801\ub428. Parent Process\uc5d0\uc11c \uc0dd\uc131\ud55c HANDLE\uc744 \uacc4\uc18d \ub4e4\uace0 \uc788\uae30 \ub54c\ubb38  </p> <p>\ubc14\ud0d5\ud654\uba74\uc740 \ud504\ub85c\uc138\uc2a4  Ctrl Alt Delete &gt; Windows \uc791\uc5c5 \uad00\ub9ac\uc790  Explorer.exe // \ubc14\ud0d5 \ud654\uba74 (\ud0d0\uc0c9\uae30)  \ud504\ub85c\uc138\uc2a4\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uc0dd\uc131\uacfc \ub3d9\uc2dc\uc5d0 Usage Count \uac00 2\uac00 \ub428 </p>"},{"location":"Windows_OS/WIN06/#command-prompt-project-functions","title":"Command Prompt Project Functions","text":"<p>\uba85\ub839 \ud504\ub86c\ud504\ud2b8 \ud504\ub85c\uc81d\ud2b8 \uae30\ub2a5 </p>"},{"location":"Windows_OS/WIN07/","title":"IPC Inter Process Communication","text":""},{"location":"Windows_OS/WIN07/#ipc-meaning","title":"IPC Meaning","text":"<p>Inter-Process Communication  \ud504\ub85c\uc138\uc2a4 \uc0ac\uc774\uc758 \ud1b5\uc2e0 </p> <p>\ud1b5\uc2e0 Communication, \ub370\uc774\ud130 \uc8fc\uace0\ubc1b\uae30  \ud504\ub85c\uc138\uc2a4\ub4e4\uc740 \uc11c\ub85c \ub9cc\ub0a0 \uc218 \uc5c6\uc74c \uacf5\uac04\uc774 \ub3c5\ub9bd\uc801\uc73c\ub85c \ubd84\ub9ac</p> <pre><code> Process A Process B\n|--------| |--------|\n|  DATA  | |  DATA  |\n|--------| |--------|\n|  HEAP  | |  HEAP  |\n|~~~~~~~~| |~~~~~~~~|\n| STACK  | |  STACK |\n|--------| |--------|\n</code></pre> <p>\ub450 \ub2e4\ub978 \ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac \uad6c\uc870  \uc11c\ub85c \ub9cc\ub0a0 \uc218 \uc5c6\ub3c4\ub85d \ub514\uc790\uc778 </p>"},{"location":"Windows_OS/WIN07/#mail-slot-based-ipc","title":"Mail Slot Based IPC","text":"<p>Windows OS\ub294 \ub2e4\uc591\ud55c IPC \uae30\ubc95 \uc81c\uacf5  \uba54\uc77c \uc2ac\ub86f Mail Slot \ub3c4 \uadf8\uc911 \ud558\ub098  \ud3b8\uc9c0\ub97c \ub123\uc744 \uc218 \uc788\ub294 \uc6b0\uccb4\ud1b5 \uc785\uad6c  \uc6b0\uccb4\ud1b5\uc740 Mail Box </p> <p>IPC\ub97c \uc704\ud55c  Kernel Object MailSlot \uc744 \uba3c\uc800 \ub9cc\ub4e4\uc5b4\uc57c \ud568  <pre><code>HANDLE CreateMailSlot (\n    LPCTSTR lpName, \n    DWORD nMaxMessageSize,\n    DWORD lReadTimeOut, \n    LPSECURITY_ATTRIBUTES lpSecurityAttributes\n); \n</code></pre> if function <code>CreateMailSlot</code> fails, return value is <code>INVALID_HANDLE_VALUE</code></p>"},{"location":"Windows_OS/WIN07/#singnaled-vs-non-signaled","title":"Singnaled VS Non-Signaled","text":"<p>IPC \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8 \uc0c1\ud0dc  \uc5ec\uae30\uc11c Singal \uc740 \ub044\ub77c\ub294 Signal </p> <p>Signaled \uc0c1\ud0dc (\uc2e0\ud638\ub97c \ubc1b\uc740 \uc0c1\ud0dc)</p> <p>Non-Signaled \uc0c1\ud0dc (\uc2e0\ud638\ub97c \ubc1b\uc9c0 \uc54a\uc740 \uc0c1\ud0dc) </p> <p>Kernel Object status change from  - Signaled to Non-Signaled  - Or Non-Signaled to Signaled </p> <p>Kernel Object state info </p> <p>Process end  Non Signaled to Signaled or Vice Versa </p>"},{"location":"Windows_OS/WIN07/#handle-inheritence","title":"Handle Inheritence \ud578\ub4e4 \uc0c1\uc18d","text":"<p>Microsoft Documentation  CreateProcessA Function </p> <pre><code>BOOL CreateProcessA(\n  [in, optional]      LPCSTR                lpApplicationName,\n  [in, out, optional] LPSTR                 lpCommandLine,\n  [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,\n  [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  [in]                BOOL                  bInheritHandles,\n  [in]                DWORD                 dwCreationFlags,\n  [in, optional]      LPVOID                lpEnvironment,\n  [in, optional]      LPCSTR                lpCurrentDirectory,\n  [in]                LPSTARTUPINFOA        lpStartupInfo,\n  [out]               LPPROCESS_INFORMATION lpProcessInformation\n);\n</code></pre> <p>5th parameter <code>bInheritHandles</code> determines whether HANDLE table registered  handles to the child process or not. If <code>TRUE</code> is input then  parent process HANDLE table info will get inherited to child process.</p> <p>Here is how handle table works by inheritance  <pre><code> Parent Process HANDLE Table         Child Process HANDLE Table \n| HANDLE | Address |Inherit?|       | HANDLE | Address |Inherit?| \n|   127  |  0x1200 |   Y    |------&gt;|   127  |  0x1200 |   Y    |\n|   168  |  0x1680 |   N    |   /--&gt;|   256  |  0x2400 |   Y    |\n|   256  |  0x2400 |   Y    |--/\n</code></pre></p> <p>There exist column to figure out whether HANDLE will be inherited.  Also, when Child process inherit HANDLE from parent process, it will be  automatically inherit HANDLE to the child process's child process and continue. </p> <p>Then, HANDLE inheritence and Usage Count </p> <p>Suppose MailSlot created by CreateMailSlot function then process will be following. </p> <ol> <li>Mail Slot resource generation </li> <li>Kernel Object generation </li> <li>HANDLE info updated to HANDLE table HANDLE</li> <li>CreateMailSlot Function get out, return HANDLE </li> </ol> <p>When Process gets HANDLE, people mistakenly focus on step 4.  However, process receive HANDLE at step 3, when HANDLE info update to  process HANDLE table. </p> <p>Suppose UC Usage Count in the following graphics from </p>"},{"location":"Windows_OS/WIN08/","title":"Inter Process Communication, HANDLE","text":"<p>MailReceiver.cpp </p> <p>CreateMailslot </p>"},{"location":"Windows_OS/WIN08/#process-handle-table","title":"Process Handle table","text":"<pre><code>   Process \n|----------------|\n|  Handle Table  | \n|----------------|    \\\n||Handle|Address||-----\\  |------|\n||------|-------||      \\ | MAIL |\n|| .... | 0x....||      / | SLOT |\n||------|-------||-----/  |------|\n||  256 | 0x2400||    /      ||\n||------|-------||           ||\n|| .... | 0x....||          \\||/\n||------|-------||           \\/\n|----------------|   |---------------|\n           |         | Mail Slot     | \n           |-------- | Kernel Object |\n    (256, 0x2400)    |---------------|\n                       Assign 0x2400 \n</code></pre> <p>Handle table is where  Handle info saved  exist per each process </p> <p>When process CreateProcess or CreateMailSlot Function Call  Resource Generation requested and HANDLE info obtained </p> <p>Process HANDLE TABLE will get registered </p> <p>Now CloseHandle function call Handle info 256 how is it saved at 0x2400 is known  inside Handle Table, so that HANDLE 256 represents Kernel object addrexx 0x2400 </p> <p>Not only just Handle Table, but </p> <p>Process Hanlde Table </p> <p>Because Handle Table is independent PER Process.  AKA Each process owns its own handle </p>"},{"location":"Windows_OS/WIN08/#inheritance-of-handle","title":"Inheritance of HANDLE","text":"<p>CreateProcess creates new function, making new child process </p> <p>also handle table for child process is generated together with child process </p> <p>HANDLE inheritance </p> <p>BOOL CreateProcess </p> <p>5th parameter  BOOL bInheritHandle  asks whether HANDLE info registered in HANDLE table will be inherited or not </p> <p>bInheritHandle TRUE mdans parent process HANDLE table info will be inherited to child  This is not HANDLE inherit, </p> <p>but HANDLE table info inherit </p> <p>Kernel Object Usage Count increments KO accessing process num. </p> <p>Now HANDLE Table info  KO citing process num, Kernel object Usage Count increment </p> <p>If Kernel Object citing process what makes it this  HANDLE Table that HANDLE info is updated </p> <p>Process getting HANDLE means  HANDLE Table got that Handle info added </p> <p>Suppose CreateMailSlot function MailSlot is generated in this order </p> <ol> <li>MailSlot Resource generation </li> <li>Kernel Object generation </li> <li>Handle info added to HANDLE table </li> <li>CreateMailSlot function finish, returning HANDLE value </li> </ol> <p>When Process got HANDLE, people often focus into step 4, which is problematic. </p> <p>Process getting HANDLE means after Step 3.  Handle Table A Handle info registered, A Handle is obtained. </p> <p>Normally 3rd and 4th steps proceed together, </p>"},{"location":"Windows_OS/WIN08/#pseudo-handle-and-duplicate","title":"Pseudo HANDLE and Duplicate","text":"<p>Function <code>GetCurrentProcess</code> returns HANDLE of process itself. However, the HANDLE returned by <code>GetCurrentProcess</code> is actually  a Pseudo HANDLE. It is not registered at the HANDLE Table.  It is rather close to the currently working process cited promised integer is returned. Or, it might be compared to the  network IP address <code>192.168.0.1</code> or <code>127.0.0.1</code> which represents  IP to maintain localhost rather than real IP address in other's perspective. </p> <p>However, somethimes process might require its real HANDLE value  rather than Pseudo HANDLE that works only inside process itself.  This is when function <code>DuplicateHandle</code> below is used. </p> <pre><code>BOOL DuplicateHandle(\n  [in]  HANDLE   hSourceProcessHandle, // Original HANDLE Owner Process \n  [in]  HANDLE   hSourceHandle,        // Original HANDLE to Duplicate \n  [in]  HANDLE   hTargetProcessHandle, // Duplicated HANDLE Owner Process \n  [out] LPHANDLE lpTargetHandle,       // Duplicated HANDLE value save address \n  [in]  DWORD    dwDesiredAccess,\n  [in]  BOOL     bInheritHandle,\n  [in]  DWORD    dwOptions\n);\n</code></pre>"},{"location":"Windows_OS/WIN09/","title":"Process Scheduling","text":"<p>OS and Real Time OS Difference </p> <p>RTOS and normal OS main difference is response speed.  RTOS is quicker in response than normal OS. </p> <p>Traditionally RTOS are Hard RTOS </p> <p>They are not only simply enhanced response  but Dead Line. </p> <p>This happens in really time Critical circumstances.  For instance, automobile systems that work 0.1 second slower  will result in car accident and casulty. </p> <p>Preemptive OS and Non Preemptive OS </p>"},{"location":"Windows_OS/WIN09/#round-robin-scheduling-algorithm","title":"Round Robin Scheduling Algorithm","text":"<p>For sampe priority classes, to maintain equity \ud615\ud3c9\uc131  execute for only restricted amount of time and  send CPU resource to other resource with same priority. </p> <p>The time unit for each execution is called as Quantum, or Time Slice.  Same priority class will get CPU resource based on this Time Slice.  If time slice is too long, then interactive system will not operate properly.  Basically you move mouse to drag and drop cursor, but graphic will be  displayed much slower. </p> <p>However, too short time slice is also problematic, because  it means more context switching, meaning lower performance. </p> <pre><code>|----------------|\n|Priority 9 Queue| Highest Priority \n|Priority 8 Queue|     Processes \n|Priority 7 Queue|   _     _     _     _\n|Priority 6 Queue|- |_| - |_| - |_| - |_|\n|Priority 5 Queue|   -&gt; Round Robin -&gt;  \n|Priority 4 Queue|\n|Priority 3 Queue|    _\n|Priority 2 Queue| - |_|\n|Priority 1 Queue|\n|Priority 0 Queue|  Lowest Priority \n|----------------|\n</code></pre>"},{"location":"Windows_OS/WIN09/#scheduling-algorithm-when-scheduling-happens","title":"Scheduling Algorithm when scheduling happens?","text":"<p>So when Scheduling happens ? </p> <ol> <li>Per each Time Slice, aka Quantum </li> <li>Process Creation and Termination </li> <li>Current Running Process in Blocking state </li> </ol>"},{"location":"Windows_OS/WIN09/#priority-inversion","title":"Priority Inversion","text":"<p>Suppose Priority in this order </p> <p>Process A &gt; Process B &gt; Process C </p> <p>Process A has highest priority, so it is in progress. </p> <p>Process B is just looking for chance. </p> <p>Sunddenly Process A stops operation, because  Process C should calculate some value and return it to Process A,  but Process C have not sent it back. </p> <p>So, Process A will get into blocked phase to give Process C to work. </p> <p>Then, Process B will take CPU resource, taking Process C's time to work. </p> <p>So, Process A although has higher priority than Process B, should waint for Process B  since Process C that Process A is blocked to get response has lower priority than  Process B. </p> <p>The solution might be, instead of Process A just turn to blocked without responsibility  it might rent its high priority to Process C and then gets blocked, so that  Process B will not take CPU resource. </p>"},{"location":"Windows_OS/WIN10/","title":"Function &amp; Calling Convention","text":""},{"location":"Windows_OS/WIN10/#functions-and-stack-frames","title":"Functions and Stack Frames","text":"<ul> <li>When a function is called, local variables and parameters are stored on the stack.</li> <li>A frame pointer (FP) is used to refer to the current stack frame.</li> <li>Stack frames are organized based on the stack pointer (SP).</li> <li>Function parameters are pushed onto the stack from right to left (C-style).</li> <li>The Pascal style (left to right) is rarely used in modern systems.</li> </ul>"},{"location":"Windows_OS/WIN10/#stack-operations","title":"Stack Operations","text":""},{"location":"Windows_OS/WIN10/#push-example","title":"Push Example","text":"<p>Storing the value 7 onto the stack:</p> <pre><code>ADD r1, 7, 0        ; r1 \u2190 7\nSTORE r1, [sp]      ; -sp \u2190 r1\nADD sp, sp, 4       ; sp \u2190 sp + 4\n</code></pre> <p>This is equivalent to:</p> <pre><code>push 7\n</code></pre>"},{"location":"Windows_OS/WIN10/#pop-example","title":"Pop Example","text":"<pre><code>SUB sp, sp, 4       ; sp \u2190 sp - 4\nLOAD r1, [sp]       ; r1 \u2190 -sp\n</code></pre> <p>This is equivalent to:</p> <pre><code>pop \u2192 r1\n</code></pre>"},{"location":"Windows_OS/WIN10/#frame-pointer-and-function-call","title":"Frame Pointer and Function Call","text":"<p>Entering a function:</p> <pre><code>PUSH bp             ; Save previous base pointer\nMOV bp, sp          ; Set new base pointer\nSUB sp, size        ; Allocate space for local variables\n</code></pre> <p>Exiting a function:</p> <pre><code>MOV sp, bp          ; Deallocate local variables\nPOP bp              ; Restore previous base pointer\nRET                 ; Return to caller\n</code></pre>"},{"location":"Windows_OS/WIN10/#program-counter-and-link-register","title":"Program Counter and Link Register","text":"<ul> <li>The Program Counter (PC) holds the address of the currently executing instruction.</li> <li>When a function call occurs, the current PC value must be saved to return later.</li> <li>This role is handled by the Link Register (LR).</li> <li>The Link Register functions similarly to the Base Pointer, storing the return address.</li> </ul>"},{"location":"Windows_OS/WIN10/#calling-conventions","title":"Calling Conventions","text":""},{"location":"Windows_OS/WIN10/#32-bit-systems","title":"32-bit Systems","text":"Convention Parameter Passing Stack Cleanup <code>__cdecl</code> Stack (right to left) Caller <code>__stdcall</code> Stack (right to left) Callee <code>__fastcall</code> ecx, edx then stack Callee <code>__thiscall</code> ecx (for <code>this</code> pointer) Callee"},{"location":"Windows_OS/WIN10/#64-bit-systems","title":"64-bit Systems","text":""},{"location":"Windows_OS/WIN10/#windows-ms-abi","title":"Windows (MS ABI)","text":"<ul> <li>Parameters: <code>rcx</code>, <code>rdx</code>, <code>r8</code>, <code>r9</code></li> <li>Floating point: <code>xmm0</code> to <code>xmm3</code></li> <li>Stack cleanup: Caller</li> </ul>"},{"location":"Windows_OS/WIN10/#linux-system-v-abi","title":"Linux (System V ABI)","text":"<ul> <li>Parameters: <code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>rcx</code>, <code>r8</code>, <code>r9</code></li> <li>Floating point: <code>xmm0</code> to <code>xmm7</code></li> <li>Stack cleanup: Caller</li> </ul>"},{"location":"Windows_OS/WIN10/#summary","title":"Summary","text":"<ul> <li>Function parameters are pushed onto the stack from right to left.</li> <li>Upon function entry, the current base pointer is saved and a new stack frame is created.</li> <li>Upon function exit, the previous stack frame is restored using the base pointer.</li> <li>The Link Register saves the return address, enabling return to the caller.</li> <li>The stack typically grows downward (higher to lower addresses), so <code>SUB sp, size</code> allocates space.</li> </ul>"},{"location":"Windows_OS/WIN11/","title":"Process VS Thread","text":"<p>Divide Process ? </p> <p>If parent process create child processes, then  they have their own independent code, data, and heap section. </p> <p>However, if thread is created, then only stack is independent  while code, data, and heap are shared. </p> <p>Code  Stack Share between Threads is not likely. Actually it is impossible. </p> <p>But, each stack will execute commands from same code section,  but with different Program Counters (aka Instruction Registers). </p> <p>Functions :  Global functions, and main function ?  In thread, suppose that  they have invisible independent main functions too. </p> <p>Share not only code section  but also resources </p> <p>Suppose that m2 and m3 are thread main functions  Since they share code section,  m2 and m3 can access all functions existing in the code section of the process. </p> <p>Compared to creating child process, which cannot access parent process functions because their code section is separated. </p>"},{"location":"Windows_OS/WIN11/#what-is-kernel-level-thread-and-user-level-thread","title":"What is Kernel Level thread and User Level Thread?","text":"<p>Very Important </p> <p>In Past, some OS did not support threads. Designed by single thread. </p> <p>Kernel level thread support </p> <p>Kernel Level Thread </p> <p>Kernel access directly to the thread since thread info is saved and managed by Kernel</p> <pre><code>+-----------User Area-------------+\n|------------|\n|  Process 1 | \n|  Thread A  | \n|  Thread B  |\n|------------| \n+---------------------------------+\n\n+----------Kernel Area------------+\n|           | &lt;---&gt; Thread A Info |\n|  Process  | &lt;---&gt; Thread B Info |\n| Scheduler | &lt;---&gt; Thread C Info |\n|           | &lt;---&gt; Thread D Info |\n+---------------------------------+\n</code></pre> <p>If Scheduler have 100 Resources,  and distribute it to 5 threads equally,  it would be distributed 20 for each threads. </p> <p>User Level Thread </p> <p>Kernel access Process, and from there access threads inside process  based on the information provided by the process. </p> <p>So, Kernel has Process info, but not thread info.  Each tread info is inside Process. </p> <pre><code>+-----------User Area-------------+\n|------------|\n|  Process 1 | \n|  Thread A  | \n|  Thread B  |\n|------------| \n+---------------------------------+\n\n+----------Kernel Area-------------+\n|           | &lt;---&gt; Process 1 Info |\n|  Process  | &lt;---&gt; Process 2 Info |\n| Scheduler | &lt;---&gt; Process 3 Info |\n|           | &lt;---&gt; Process 4 Info |\n+----------------------------------+\n</code></pre> <p>If Scheduler have 100 Resources,  and distribute it to 2 process equally,  and process A has 1 thread while other process B has 4 threads,  it would be distributed 50 50 for each process, and  process B will redistribute thread running time  so that each 1 of 4 threads in process B have 12.5  while 1 thread in process A gets 50 resource.  This is just example for understanding, real OS will work more efficiently than this. </p>"},{"location":"Windows_OS/WIN11/#kernel-level-thread-vs-user-level-thread","title":"Kernel Level Thread vs User Level Thread","text":"<p>For Kernel Level Thread  In Kernel perspective,  CPU resource is directly distributed to each thread without passing process.  If kernel level thread A is blocked by I/O then scheduler will send  priority to the thread B or thread c. </p> <p>For User Level Thread  In Kernel Perspective, CPU resource is redistributed again by process.  Suppose User level thread A and B are in Process A.  If user level thread A is blocked by I/O then scheduler will not  detect or figure out what thread A or B inside process A is blocked but  only figure out that process A is interrupted.  Thus, scheduler will assign resource to process C, which is not inside process A.  Even though user level thread B inside process A is not blocked and cannot run,  scheduler will not assign resource to thread B becaue it only detects  that process A is blocked, without information about threads status inside process A. </p>"},{"location":"Windows_OS/WIN11/#kernel-mdoe-and-user-mode","title":"Kernel Mdoe and User Mode","text":"<p>Program is ran by  OS and application.  In embedded system it is OS + App. </p> <p>Suppose that Memory is divided into  Kernel Space and User space.  <pre><code>            ^ |--------| ^\n            | |  User  | | User Mode \n        All | |  Area  | | Accessible \n Accessible | |--------| v\n  in Kernel |\n       Mode | |--------| ^\n            | | Kernel | | User Mode \n            | |  Area  | | Unaccessible \n            v |--------| v\n</code></pre></p> <p>In Windows Perspective,  both User area and kernel area should run. </p> <p>Also, user space might potentially access to kernel area in memory.  However, kernel is afraid of user area to access kernel area and  change very important logic of kernel core logic. </p> <p>Thus, kernel level thread is slow, because  inter thread context switching between kernel level threads  represents mode change from user mode to kernel mode. </p> <p>This is why kernel level thread context switching is slower,  because it requires thread to change from user mode to kernel mode. </p> <p>However,for user level thread, since process manages user level threads,  context switching  between user level threads inside same process will  not require mode change from user to kernel and from kernel to user.  Kernel level context switching will happen only in process perspective.   </p> <p>So in summery</p> <p>Kernel Level Thread </p> <p>PROS : Kernel direct accessed thread, safety and several functions </p> <p>CONS : context switching will involve user mode to kernel mode </p> <p>User Level Thread PROS: User mode to Kernel mode context switching is unnecessary </p> <p>CONS: process level blocking, if one of several threads inside process is blocked  entire process and all other threads inside will be blocked too. </p>"},{"location":"Windows_OS/WIN12/","title":"Thread Generation and Termination","text":"<p>In Windows, HANDLE is process subordinate, and generally  not usable outside that process that created HANDLE.  However, Kernel Object ID are consistent for all different processes.</p>"},{"location":"Windows_OS/WIN12/#thread-generation","title":"Thread Generation","text":"<pre><code>HANDLE CreateThread (\n    LPSECURITY_ATTRIBUTES lpThreadAttributes, \n    SIZE_T dwStackSize, \n    LPTHREAD_START_ROUTINE lpStartAddress, \n    LPVOID lpParameter, \n    DWORD dwCreationFlags, \n    LPDWORD lpThreadId \n)\n</code></pre> <p>Three parameters are important. </p> <p><code>SIZE_T dwStackSize</code> will define thread stack size.  If this is zero, it is default stack size 1MB, not 0! </p> <p><code>LPTHREAD_START_ROUTINE lpStartAddress</code> is a function pointer.  It looks like <code>typedef DWORD (WINAPI *PTHREAD_START_ROUTINE)(LPVOID lpThreadParameter)  Get void pointer * value and return type is DWORD. Basically make function and  give function name as parameter. This input parameter</code>lpStartAddress` will act  as thread main function. </p> <p><code>LPVOID lpParameter</code> is pointer value for arguments for thread main function <code>lpStartAddress</code>. </p> <p>If function fails return value is 0.  Windows can create as much thread as possible, if memory allows it.  Check <code>CountThread.cpp</code>. </p> <p>Main thread return 0; will terminate process.  Non main thread return will terminate thread. </p> <p>Thread termination by <code>return</code> is most recommended! </p> <pre><code>CreateThread( /*Params*/); \nprintf(\"Whatever\"); \n</code></pre> <p>It is not clear what will start quicker.  Generally, default Stack size is 1MB. </p> <p>Also, compared to <code>CreateThread</code>, function <code>_beginthreadex</code> is more recommended. </p> <pre><code>uintptr_t _beginthreadex (\n     void *security, \n     unsigned stack_size, \n     unsigned ( *start_address ) (void *),\n     void *arglist, \n     unsigned initflag, \n     unsigned *threadaddr\n);\n</code></pre> <p>Its parameter deliver order is same as <code>CreateThread</code> function.  Both <code>CreateThread</code> and <code>_beginthreadex</code> are inside process stack memory. </p> <p>Difference is that, <code>CreateThread</code> will NOT CORRECTLY RESET C/C++ runtime library (CRT).  If process uses CRT, then specific functions that require reset per thread including  <code>errno</code> value or <code>stdio</code> buffer will result in memory leak or unexpected behavior. </p> <p>On the other hand, <code>_beginthreadex</code> will correctly reset C/C++ runtime library (CRT).  Thus, <code>CreateThread</code> is not recommended, so use <code>_beginthreadex</code>. </p>"},{"location":"Windows_OS/WIN12/#thread-termination","title":"Thread Termination","text":"<p>Use return function in thread function  Suppose sum from 1 to 10.  This will require a lot of I/O externally, so it will get blocked often.  So, to finish this as quick as possible, create several threads to  distribute workload. Then, CPU will do more work in limited amount of time,  and Blocked status will be distributed evenly to each thread too, thus improving speed. </p> <p>Thread function Design <pre><code>              +-------------+\n              | Main Thread |\n              +-------------+\n              /      |       \\\n           6 /       |        \\\n            /      22|         \\ 27 \n           /         |          \\\n+----------+   +----------+   +----------+\n| Thread A |   | Thread B |   | Thread C |\n+----------+   +----------+   +----------+\n</code></pre></p> <p>Now declare function and use it as thread. </p> <pre><code>DWORD WINAPI ThreadProc(LPVOID lpParam)\n{\n    DWORD * nPtr = (DWORD *) lpParam; \n    DWORD numOne = *nPtr, numTwo = *(nPtr+1); \n    DWORD total = 0; \n    // Whatever codes \n    return total; \n}\n\nint main(int argc, TCHAR *argv[]){\n    HANDLE hThread[3]; \n    DWORD paramThrad[] = {1, 3, 4, 7, 8, 10}; \n    hThread[2] = // Do same for index 0 and 1 too \n    CreateThread( NULL, 0, ThreadProc, (LPVOID)(&amp;paramThread[4]), 0, &amp;dwThreadID[2] ); \n}\n</code></pre> <p>So that function is executed inside thread, and function parameters are transferrable  through pointer access.  </p> <pre><code>BOOL TerminateThread(HANDLE hThread, DWORD dwExitCode); // For CreateThread \nvoid _endthreadex(unsigned retval); // For _beginthreadex \n</code></pre> <p>this function is possible, forcing thread to quit. However, since thread will NOT  recognize that it is ending, so it might be terminated while handling data, so  <code>TerminateThread</code> and <code>_endthreadex</code> functions are dangerous and not recommended. </p> <p><pre><code>GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode);\n</code></pre> This function will let it possible to get the exit code of the thread into unsigned int DWORD.  Similar to getting the exit code of the child process. </p> <p>Since thread generated by <code>_beginthreadex</code> assigns memory stack space outside main process,  <code>_endthreadex</code> will retrieve allocated memory. </p> <p>Also, thread can generate thread! </p>"},{"location":"Windows_OS/WIN12/#characteristics-of-thread-and-thread-state-management","title":"Characteristics of Thread and Thread state Management","text":"<p>Suppose two threads access same resource like global value declared in <code>.data</code> section.  Over two threads simultaneously using same memory space would make unexpected consequence. </p> <p>Change 1. Ready after Beginning </p> <p>Change 2. When selected by Kernel Scheduler, Running state execution begins </p> <p>Change 3. Time Slice for executing Threaed is all done, so move to other thread, running to ready state movement.      Some people misunderstand that it is from Running to Blocked, but it is Running to Ready here. </p> <p>Change 4. For I/O or sleep so execution of thread is blocked, then turn to blocked, </p> <p>Change 5. If blocked reason is solved, blocked status will turn into ready status. </p>"},{"location":"Windows_OS/WIN12/#suspend-and-resume","title":"Suspend and Resume","text":"<p>In WINAPI, it is possible to turn thread into blocked state and ready state. </p> <pre><code>DWORD SuspendThread (HANDLE hThread); // If success return prev suspend count, else return -1 for fail \nDWORD ResumeThread  (HANDLE hThread); // If function succeeds return value is thread's prev suspend count. if not -1  \n</code></pre> <p>Also, Windows Kernel Object <code>Thread</code> has value called <code>Suspend Count</code>.  When <code>SuspendThread</code> is called <code>Suspend Count</code> became 1, and when <code>ResumeThread</code> is called <code>Suspend Count</code> became 2. </p>"},{"location":"Windows_OS/WIN13/","title":"Thread Synchronization by Memory Access","text":"<p>Two perspectives of thread synchronization </p> <p>Synchronize means matching different stuffs.  For instance A server and B server synchronous means both data are in same status </p> <p>However, synchronous here represents order, or sequence, rather than match.</p> <ul> <li>Memory access synchronization about critical section </li> <li>Sequence synchronization between threads, ex: if one thread need calculation result of other thread. </li> </ul> <p>Memory Access based synchronization  Blocking simultaneous, or Councurrent access of more than one thread into memory </p> <p>Memory access synchronization Methods : User mode sync and kernel mode sync </p> <p>User mode sync is fast  kernel mode sync has several functions </p> <p>inter thread sync between threads </p> <p>Sequence synchronize</p> <p>Two people want to go toilet, and one use toilet while other wait </p> <p>Memory access synchronize</p> <p>Two people want to go toilet, both people enter toilet at the same time </p> <p>User Mode Sync </p> <ul> <li>Critical Section based sync </li> <li>Interlock function based sync (Easy to make sync work)</li> </ul> <p>Kernel Mode Sync (Memory Access sync)</p> <ul> <li>Mutex based sync </li> <li>Semaphore based sync </li> <li>Named Mutex based sync </li> <li>Event based sync </li> </ul>"},{"location":"Windows_OS/WIN13/#critical-section","title":"Critical Section","text":"<p>For sync methds, think about key to open toilet.  Define beginning and end of the critical section first. </p> <pre><code>CRITICAL_SECTION gCriticalSection; // This is critical section key \nInitializeCriticalSection(&amp;gCriticalSection); // Initialize \nEnterCriticalSection(&amp;gCriticalSection); // Beginning of critical section, get key \n// Critical Section \nLeaveCriticalSection(&amp;gCriticalSection); // End of critical section, return key \nDeleteCriticalSection(&amp;gCriticalSection); \n</code></pre> <p>If critical section is bigger, is it more stable? Yes!  But it will decrement performance, because multiple threads access will be inefficient. </p>"},{"location":"Windows_OS/WIN13/#interlock-function-based-sync","title":"Interlock Function based sync","text":"<p>Considering declaration of CRITICAL_SECTION, and  Initialize Enter Leave Delete all these functions,  it seems quite inefficient with too much codes to input. </p> <p>When Critical Section is so small, like the shared resources  are only small global variable, then interlock functions can be used. Instead of doing gTotalCount++; inside Critical Sectioned code,  InterlockedIncrement(&amp;gTotalCount); can be used instead. </p>"},{"location":"Windows_OS/WIN13/#kernel-level-synch","title":"Kernel Level synch","text":"<p>If scheduler do not work, context switching will not work.  Thus, if thread A was working, then thread A will keep working without context switching  so thread B cannot work while scheduler is paused, thus will not do context switching. </p> <p>Timer Disable interrupt based synchronization </p> <p>HW notice OS by interrupt by timer interrupt. HW notice OS time by interrupt. </p> <p>Disable interrupt means interrupt signal recognized by OS will be blocked, so  OS will suppose that time is not passing. Then, scheduler will not do context switching,  because time is not passing according to OS. </p> <p>This method is technically possible. </p>"},{"location":"Windows_OS/WIN13/#semaphore-mutex","title":"Semaphore &amp; Mutex","text":"<p>In OS, sync name is semaphore. Among semaphore, binary semaphore is mutex.  So semaphore is theoretically larger concept including mutex. </p> <p>Suppose critical section access.  Semaphore has several keys.  Mutex has only one key. </p> <p>Semaphore can limit access of thread into critical section. </p> <p><pre><code>HANDLE CreateMutex (\n    LPSECURITY_ATTRIBUTES lpMutexAttributes, // Security setup, \n    // like whether HANDLE table Key is inherited or not \n    BOOL bInitialOwner, // Owner (TRUE FALSE) Whether Key generator will own it or not \n    LPCTSTR lpName      // Mutex Name \n);\n</code></pre> Semaphore and Mutex are kernel objects, and synchronization is based on Kernel Mode.  <code>LPSECURITY_ATTRIBUTES lpMutexAttribute</code> is kernel level security setup like  whether HANDLE table Key is inherited or not. </p> <p>Mutex is also Kernel Object. In Mutex, Signaled is not finished status of process or thread,  but it is not occupied. </p> <pre><code>WaitForSingleObject();  // Make Mutex Non Signaled \nReleaseMutex();         // Make Mutex Signaled \n</code></pre> <p><code>WaitForSingleObject()</code> is waiting for mutex, kernel object, to be signaled, aka not occupied.  After <code>WaitForSingleObject()</code> function will enter Critical Section, and it will be non signaled.</p> <p>During some function is using <code>mutex</code> as a key and in critical section, mutex is non-signaled. </p> <p><code>ReleaseMutex()</code> will get called after leaving Critical Section, to change mutex as signaled. </p> <p>In code, CRIRICAL_SECTION based synchronization and Mutex based sync looks very similar  for simple critical section like <code>gdata++</code> one line example. </p>"},{"location":"Windows_OS/WIN13/#about-semaphore","title":"About Semaphore","text":"<pre><code>HANDLE CreateSemaphore (\n    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, // Security setup, \n    LONG lInitialCount, // Size , suppose it is 3 \n    LONG lMaximumCount, // Must be bigger than 3. lMaximumCount &gt;= lInitialCount\n    LPCTSTR lpName      // Mutex Name \n); // If function fails return value is NULL \n</code></pre> <p>While Mutex is just one single key, semaphore can be compared to  several keys, whhere key number is <code>lMaximumCount</code>.  While SemaphoreCount value is not zero, it is signaled status. </p> <pre><code>WaitForSingleObject();  // Decrement Semaphore Count \nReleaseSemaphore();     // Increment Semaphore Count \n</code></pre> <p>So, when WaitForSingleObject(); function is called, it will not get blocked, until  <code>WaitForSingleObject</code> is called over <code>lMaximumCount</code> without <code>ReleaseSemaphore</code>,  meaning entire total number of keys are in use without return, and  <code>lMaximumCount</code> threads are in critical section. </p> <p>If <code>lMaximumCount</code> of semaphore is 1, then it is same as Mutex. </p>"},{"location":"Windows_OS/WIN13/#named-mutex-based-process-sync","title":"Named Mutex based process sync","text":"<p>Suppsoe Process A and B exists. Trying to synchronize thread A and thread B,  if each belong to different process.  Is it possible to synchronize threads in different process by WinAPI Mutex! </p> <p>However, HANDLE based Mutex access is impossible outside Process.  Then, how to register Mutex created from Process A to use in Process B?  By using name <code>LPCTSTR lpName</code>. Giving name to mutex represents that  this mutex will get accessed by external process. </p> <p>Register by name, and call Mutex created by other process by function <code>OpenMutex</code>  with name input.  This will work similar for semaphore too. </p> <p>Although it is not likely to use, good to know. </p> <pre><code>dwWaitResult = WaitForSingleObject(hMutex, INFINITE); \nswitch(dwWaistResult) {\n    case WAIT_ABANDONED: return; // Mutex return was not appropriately worked, \n    // so Windows OS will trace, sending Mutex key to the process in WaitForSingleObject. \n}\n</code></pre> <p>Mutex has ownership, but semaphore has no ownership. </p>"},{"location":"Windows_OS/WIN14/","title":"Thread Synchronization by sequence","text":"<p>Thread Synchronization by sequence </p> <p>Manipulate sequence </p>"},{"location":"Windows_OS/WIN14/#producer-consumer-pattern","title":"Producer Consumer Pattern","text":"<p>Suppose </p> <p>Input -&gt; Thread -&gt; Buffer -&gt; Thread -&gt; Output </p> <p>Already output size and time are expected.  Output size and time are dependent on input. </p> <p>However, input is unexpected, because input is based on external factors.  It can be many or few. If designe dfor 10Byte input and received 10MB input,  if resource is not enough there might be data loss.  If it is simply saving for input, it might take some time but okay,  but if direct output is required, it would be impossible to  give fully processed output based on input over limit to process for CPU. </p> <p>System engineers use this model above for this.  Input thread keep receiving input and accumulate date into buffer.  Output thread keep reading buffer and process it to output.  Unless buffer got overflowed it is safe. </p> <p>In this model, input thread is producer thread while output thread is consumer thread. </p>"},{"location":"Windows_OS/WIN14/#event-based-sync","title":"Event based sync","text":"<p>Manual Reset Event (\uc218\ub3d9 \ub9ac\uc14b \ubaa8\ub4dc \uc774\ubca4\ud2b8) <pre><code>+--------------+   SetEvent  +----------+\n|              |------------&gt;|          |\n| Non Signaled |             | Signaled |\n|              |&lt;------------|          |\n+--------------+ ResetEvent  +----------+\n</code></pre> Event Object signaled or nonsignaled should be manually changed. Not automatic change </p> <p>Auto Reset Event (\uc790\ub3d9 \ub9ac\uc14b \ubaa8\ub4dc \uc774\ubca4\ud2b8) <pre><code>+--------------+   SetEvent  +----------+\n|              |------------&gt;|          |\n| Non Signaled |             | Signaled |\n|              |&lt;------------|          |\n+--------------+   WaitFor   +----------+\n                   SingleObject \n</code></pre> Still Signaled is given by Producer Thread SetEvent() Function Manually.</p> <p>However, from Singaled to Non-Signaled is done by <code>WaitForSingleObject</code>  Thread will be in blocking mode until Kernel Object Event became Signaled. </p>"},{"location":"Windows_OS/WIN14/#need-more-understanding","title":"Need more understanding","text":"<p>Suppose two threads A and B access to Auto Reset Event  If Producer Thread change Event as Signaled by <code>SetEvent</code> then  Among one of threads A and B, <code>WaitForSingleObject</code> waiting  if one thread is out then it will be Non-Signaled, and only one  thread will have chance to do.  If intended to wake ONLY One thread use Auto Reset Event. </p> <p>On the other hand,  Suppose two threads A and B access to Manual Reset Event  both Thread A and B will get activated simulataneously. </p>"},{"location":"Windows_OS/WIN14/#event-and-mutex","title":"Event and Mutex","text":"<p>In StringEvent.cpp  Main thread is Producer thread and  _beginthreadex thread is consumer thread. </p> <p>SetEvent(hEvent);  WaitForSingleObjecT(hThread, INFINITE); </p> <p>Both threads waiting for Event to be signaled by <code>WaitForSingleObject</code>. </p> <p>Generally Critical SEction means memory access. Or certain code block. Thread launch sequence got sync, but console access to print output did not.  </p> <p>However, sometimes two different code blocks in different function  might form critical section too. For instance, _fputs(string, stdout) in  several threads, it is not completely synchronized. </p> <p>In StringEvent2.cpp  This code is implemented with adding Mutex,  covering _fputts(_T(\"str\"), output); with  <pre><code>WaitForSingleObject(gSynString.hEvent, INFINITE); \nWaitForSingleObject(gSynString.hMutex, INFINITE); \n_fputts(whatever); \nReleaseMutex(gSynString.hMutex);\n</code></pre></p>"},{"location":"Windows_OS/WIN14/#timer-sync","title":"Timer Sync","text":"<p>Timer and event meaning in software </p> <pre><code>HANDLE CreateWaitableTimer (\n    LPSECURITY_ATTRIBUTES lpTimerAttributes, \n    BOOL bManualReset, \n    LPCTSTR lpTimerName \n)\n</code></pre> <p>Timer is also Kernel Object.  If it alarms, it is signaled.  Timer is, if some amount of time passes, it is signaled. </p> <p>Event is signaled when designated by concept like \"Right Now!\". </p> <p>However, Timer is Signaled like \"10 seconds later and once per 5 seconds\" like this. </p> <pre><code>BOOL SetWaitableTimer (\n    HANDLE hTimer, \n    const LARGE_INTERGER* pDueTime, // Start Signal after 10 seconds, if input is 10 \n    LONG lPeriod, // Signal per 5 second, and other times will be non signaled if input 5 \n    PTIMERAPCROUTINE pfnCompletionRoutine, \n    LPVOID lpArgToCompletionRoutine, \n    BOOL fResume \n);\n</code></pre> <p>Check <code>PeriodicTimer.cpp</code> and <code>ManualResetTimer.cpp</code>. </p> <p>Timer based sync </p> <p>Critical Section seems more challenging</p> <p>Event and Timer  But if software is more sophisticated, Event and Timer are also often used. </p>"},{"location":"Windows_OS/WIN15/","title":"Thread Pool","text":"<p>Generation and Termination of Thread give System a lot of pressure. </p> <p>Thread Pool is a structure that manage already created threads  and allocate one of threads in thred pool when work is requested  and retrieve that thread when work is done, returning memory pool to the thread pool. </p> <p>Middleware  Framework support Thread Pool  Engineers  how to make thread pool? </p> <p>Do not need to make thread pool by yourself  However making for understanding worth </p> <p>First understand thread pool  Second make thread pool  Complete check about thread pool </p>"},{"location":"Windows_OS/WIN15/#what-is-work","title":"What is Work","text":"<p>Function pointer </p> <p>WORK defined as function pointer </p> <pre><code>typedef void (*WORK) (void); \n// In disassembly pointer value address in code section \n\ntypedef struct __WorkerThread \n{\n    HANDLE hThread; \n    DWORD idThread; \n} WorkerThread; \n\n\nstruct __ThreadPool \n{\n    WORK workList[WORK_MAX]; (Saving function pointers)\n\n    WorkerThread workerThreadList[THREAD_MAX]; \n    HANDLE workerEventList[THREAD_MAX]; \n\n    DWORD idxOfCurrentWork; \n    DWORD idxOfLastAddedWork; \n\n    DWORD threadIdx; \n} gThreadPool; \n</code></pre> <p>Save WORK, aka function pointer, in sequential order. </p> <pre><code>    Thread&lt;+\n            \\\n|WORK|WORK|WORK|WORK|WORK|WORK|WORK|    |    |\n            |                         |\n     idxOfCurrentWork        idxOfLastAddedWork\n</code></pre> <p>Functions before idxOfCurrentWork are either completed or assigned in progress by Thread.  So, after idxOfCurrentWork, functions are registered but not executed yet. </p> <p>When function is called, Thread waits by using  WaitForSingleObject looking at Event Kernel Object  so it gets automatically blocked. </p> <p>Thread ststus if blocked, will not be scheduled by OS. </p> <p>So when Thread is created, then let each thread blocked to wait for Event,  so that it sleeps while OS scheduler will not assign resources  This is status saved in Thread pool. </p> <p>Work is function pointer. When WORK is registered, Thread pool might awake thread.  One or all or whatever ... waking only one thread per work would be efficient way. </p> <p>In thread pool wake up thread from thread pool.  From non signaled to signaled.  </p> <p>Thread function how to get implemented? First WaitForSingleObject call  sleeping, when event signaled it gets ready.  Then that thread will get function pointer from WORK array and execute it. </p> <p>When function by WORK access is over and returned get into loop again  Waiting for Single Object. </p> <p>Thread that wait Event Object assigned to itself until it gets signaled,  when WinAPI Event gets out from WaitForSingleObject call function by  WORK function pointer then WaitForSingleObject then repeat ...  </p>"},{"location":"Windows_OS/WIN15/#memory-hierarchy","title":"Memory Hierarchy","text":"<p>Memory </p> <p>Main Memory is RAM, DRAM. </p> <p>Register is also memory but inside processor, so it is memory inside CPU. </p> <p>Cache is not part of CPU, but concept of memory in CPU,  even though it is physically inside CPU. </p> <p>Cache is Memory closest to the CPU.</p> <p>Secondary Storage AKA Auxiliary Storage like HDD and SSD are also Memory.  Also SD Card CD ROM USB etc ... these I/O (Input Output) Devices are also memory. </p> <p>Programmer should always conscious about memory during system software development. </p> <p>Programmer should consider  based on register cache RAM HDD SSD and all other I/O devices input output timing and wait time as most priority, thinking about it consistently. </p> <p>What memory does during program execution is Input / Output.  Basic concepts all memory hierarchy are same even from register to HDD.  The point is , how far they are from CPU. It is in order Register Cache RAM SSD HDD </p> <p>Closer to CPU means faster, and further from CPU mean sslower.  CPU have nearly no time to access register, relatively longer time for cache,  and should use RAM by some complicated processes IO Bus interface control.  Also, closer distance to the CPU means more expense and technical limit.  Thus memory will have pyramid hierarchy </p> <p>Register L1Cache L2Cache RAM SSD/HDD </p> <p>Mostly, it is generally over 90% probability to include data trying to find are inside L1 Cache or L2 Cache, Cache hit percentage is over 90%. </p>"},{"location":"Windows_OS/WIN15/#virtual-memory","title":"Virtual Memory","text":""},{"location":"Windows_OS/WIN18/","title":"File Basic IO","text":"<p><code>CreateFile</code> function  Open the file, rather than really create file.  It creates File Kernel Object in OS, rather than  creating file in Disk </p> <pre><code>HANDLE CreateFile (\n    LPCTSTR lpFileName, \n    DWORD dwDesiredAccess, \n    DWORD dwShareMode, \n    LPSECURITY_ATTRIBUTES lpSecurityAttributes, \n    DWORD dwCreationDisposition, \n    DWORD dwFlagsAndAttributes, \n    HANDLE hTemplateFile \n); \n</code></pre> <p><code>ReadFile</code> reads data </p> <p><pre><code>BOOL ReadFile (\n    HANDLE hFile, \n    LPVOID lpBuffer, \n    DWORD nNumberOfBytesToRead, \n    LPDWORD lpNumberOfBytesRead, \n    LPOVERLAPPED lpOverlapped \n); \n</code></pre> If <code>ReadFile</code> function fails return value is zero </p> <p><code>WriteFile</code> saves data  <pre><code>BOOL WriteFile(\n    HANDLE hFile, \n    LPVOID lpBuffer, \n    DWORD nNumberOfBytesToWrite, \n    LPDWORD lpNumberOfBytesWritten, \n    LPOVERLAPPED lpOverlapped \n)\n</code></pre></p> <p>If <code>WriteFile</code> function fails return value is zero </p> <p>ANSI American Standard offered (defined? in more correct description) File related functions supported </p> <p>File I/O ANSI standard  for all Windows Linux UNIX all OS  Platform independent </p> <p>Suppose Hardware, install Windows Linux UNIX etc  File System dependent, how to define and organize file? </p> <p>Who designs file system? Part of OS  File System is part of Operating System  Some colleges have independent lecture about file system and its internal  data structure in OS, while OS lecture partially explain it  OS defined independent system </p> <p>ANSI vs OS  Windows Linux UNIX etc ...  File system function call then file creation process will be  before ANSI System File functions supported by Windows OS is completed </p> <p>So, creating file must be done by WINAPI OS System function  fopen function will create Windows System function  Linux UNIX similar, ANSI is just a shell.  Internally recall system function </p> <p>Win Linux UNIX etc ... functions  ANSI functions only support common sharing part  Each OS System function should be used. </p> <p>File based Basic functions </p> <p>File Create  - <code>CreateFile</code> Generation Kernel Object, HANDLE file pointer is returned  - ReadFile - WriteFile  - CloseHandle Termination like other Kernel Objects  - <code>GetFileTime</code> created, edited, accessed date, check info by HANDLE  - <code>GetFileAttributes</code> Read only, hide, store, check info by file name instead of HANDLE  - <code>GetFileInformationByHandle</code> get info OF both <code>GetFilelTime</code> and <code>GetFileAttributes</code>, get info by HANDLE </p> <p>File pointer movement </p> <p>32 Bit OS based </p> <p>SetFilePointer(hFile, sizeof(TCHAR) * 4, NULL, FILE_BEGIN);  File Maximum Size : 4GB - 2  4GB - 1 ==== INVALID_SET_FILE_POINTER (0xFFFFFFFF) aka -1 </p> <p>64 Bit OS based  SetFilePointer(hFile, lDistanceLow, &amp;lDistanceHigh, FILE_BEGIN);  lDistanceLow is low 4 bytes  4GB - 1 Check  dwPtrLow = SetFilePointer(...) if((dwPtrLow == INVALID_SET_FILE_POINTER) &amp;&amp; (GetLastError() != NO_ERROR)) { // Real Error}</p>"},{"location":"Windows_OS/WIN19/","title":"Asynchronous I/O","text":"<p>Video Player program, recieve data and play principle </p> <pre><code>|receive| play  |receive| play  |receive|\n| data  | video | data  | video | data  |\n</code></pre> <p>This is kind of exaggarated, but in this case CPU usage will have  drastic change during play video and receive data. </p> <p>Since CPU will NOT work while receiving data,  because I/O Input/Output of file is nearly  CPU independent calculation. </p> <p>ANSI standard I/O function usage to read or write file data  will be in blocking status. These functions waiting until  I/O finish is Blocking Function, and these blocking function  based I/O is called as Synchronous I/O. </p> <p>If you launch editor file that should load quite big file, there might be  subtle Delay during opening such a large file.  However, in video player perspective it is crucial problem to feel delay in that way. </p> <p>Data retrieve does not require CPU allocation that much.  Thus during play even though I/O work concurrently there won't be big problem.  So continue I/O, while play buffered data would siginficantly reduce latency.  This concurrently I/O with execution of CPU functions is called as  Asynchronous I/O. </p>"},{"location":"Windows_OS/WIN19/#overlapped-io","title":"Overlapped I/O","text":"<p>ANSI standard function <code>fread</code> reads data from file. </p> <p>However, it is ANSI, so it is synchronous function.  Meaning that function <code>fread</code> will be blocking function until I/O is finished.  Suppose loading a music to play it during loading more larger file. ANSI based  synchronous music file read will result in music began to be played after  all files are loaded, which is far from expected consequence. </p> <p>The problem is Blocking function. Most functions that were observed,  are blocking based like this. When function is called, it is in blocking status  until it is completed, so two different works, file loading and music play  do NOT work simultaneously unlike intention, since  function call to receive data followed by function call of music player is impossible. </p> <p>This is synchronous I/O, function blocking let play function called after fread is returned. </p> <pre><code>fread call     fread return \n+              +\n|--------------|\n| Receive Data |\n|--------------|------------~\n               | Sound Play ~\n               |------------~\n               +            \n               play call    \n</code></pre> <p>Thus, to read data and play music simultaneously, function <code>fread</code> should be  Non-Blocking. </p> <p>Blocking function is returned after completed,  Non-Blocking function will return regardless of function completion!  Moreover, even after return, function keep operation. </p> <p>ANSI standard does NOT contain concept of Non-Blocking, so <code>fread</code> cannot work in Non-Blocking way in default.  However, Windows System functions like <code>ReadFileEx</code> can be operated in Non-Blocking. </p> <p>This is asynchronous Overlapped I/O,  function Non-Blocking so play music function  wait for a short period of time for <code>ReadFile</code> return while function <code>ReadFile</code> operates after return. </p> <pre><code>ReadFile       \ncall     \n|    ReadFile\n|    Retuen   \n+    +       \n|--------------|\n| Receive Data |\n|----------------------------~\n     | Sound Play           ~\n     |-----------------------~\n     +           \n    play call    \n</code></pre> <p>This kind of asynchronous file reading / writing functions that continue execution after return,  can be literally overlapped multiple times.  </p> <pre><code>+----------------------------+\n|        Receive Data        |\n+---+------------------------+---+\n    |        Receive Data        |\n    +---+------------------------+---+\nreturn  |        Receive Data        |\n        +----------------------------+\n    return\n</code></pre> <p>This is called as Overlapped I/O. I/O calculation might be literally overlapped multiple times. </p> <p>In <code>cpp</code> struct code, Overlapped struct. </p> <pre><code>typedef struct _OVERLAPPED \n{\n    ULONG_PTR Internal; \n    ULONG_PTR InternalHigh; \n    DWORD Offset;     // Union \n    DWORD OffsetHigh; // Union \n    HANDLE hEvent; \n} OVERLAPPED; \n</code></pre>"},{"location":"Windows_OS/WIN19/#completion-routine-based-extended-io","title":"Completion Routine Based Extended I/O","text":"<p>Event Kernel Object is used to be signaled when I/O is complete. </p> <pre><code>BOOL WriteFileEx(\n    HANDLE hFile, // HANDLE to Output File \n    LPCVOID lpBuffer, // Data Buffer \n    DWORD nNumberOfBytesToWrite, // numbers of Bytes to Write \n    LPOVERLAPPED lpOverlapped, // Overlapped Buffer \n    LPOVERLAPPED_COMPLETEION_ROUTINE lpCompletionRoutine // \n);\n</code></pre> <p>I/O Completion Routine is basically  adding Routine (CALLBACK Function) after I/O is completed  Difference between Overlapped I/O and I/O Completion Routine is  simply that, just adding Routine (CALLBACK Function) after I/O is completed </p> <pre><code>VOID CALLBACK FileIOCompletionRoutine(\n    DWORD dwErrorCode, // Completion Code \n    DWORD dwNumberOfByytesTransferred, // Number of Bytes Transferred \n    LPOVERLAPPED lpOverlapped // IO Information Buffer \n);\n</code></pre> <p>This <code>WriteFileEx</code> function is IO CoRoutine based.  It connects I/O and completion routine.  Since Completion Routine will automatically call CALLBACK function,  Event Kernel Object and its HANDLE, used in <code>Overlapped</code> struct  is now unnecessary. </p> <p>Waiting can be done like this. </p> <pre><code>WaitForSingleObject(overlappedInst.hEvent, INFINITE); \n</code></pre> <p>Anyway, Completion Routine like <code>WriteFileEx</code> or <code>ReadFileEx</code> can be used  like this, and given function must be void function pointer.  Also, this function is not called by process thread, but  automatically by Windows System as a CALLBACK function. </p> <p>Also, since CoRoutine do NOT use Event HANDLE value as Event Kernel Object,  it can be used to pass value intended, since only void function is  used as CALLBACK function without return, so use HANDLE instead. </p>"},{"location":"Windows_OS/WIN19/#alertable-state","title":"Alertable State","text":"<p>SleepEX(INFINITE, TRUE); </p> <p>Thread that called Function will be alertable state  I/O function call get return, and I/O continues.  If I/O completion is required for further execution, and still uncertain about  when I/O will finish, but still after I/O Completion, CALLBACK function is guaranteed. </p> <p>Then, the priority of the work would be into Completion Routine.  However, if intended to execute Completion Routine, so either want to  get priority of CoRoutine higher or lower than original priority of CoRoutine,  Alertable State is used. Alert that it is okay to go Completion Routine and  do CALLBACK function. </p> <p>There are three ways of Alarm methods of these I/O Completion Routine Alertable State <pre><code>DWORD SleepEx(\n    DWORD dwMiliseconds, \n    BOOL bAlertable \n)\nDWORD WaitForSingleObjectEx(...)\nDWORD WaitForMultipleObjectsEx(...)\n</code></pre></p> <p>These functions make Alertable State, Completion Routine Priority Setup.  <code>SleepEx</code>, unlike <code>Sleep</code>, has <code>BOOL bAlertable</code> value as difference. </p> <p>If these are called, when I/O function already returned but still in I/O, then  they will not get called. </p>"},{"location":"Windows_OS/WIN19/#apc-asynchronous-procedure-call","title":"APC (Asynchronous Procedure Call)","text":"<p>Every Thread has each of their own APC Queue, </p> <p>Each Thread, when their I/O are completed and became alertable state, then  all CALLBACK functions are collected in APC Queue </p> <p>So what inside APC Queue are CALLBACK functions that will be  executed when I/O is in alertable state. </p>"},{"location":"Windows_OS/WIN20/","title":"Virtual Memory, Heap, MMF","text":"<p>Why Virtual Memory Control is required,  Why Heap is generated by programmers  What advantages MMF provide .  Sample Codes in Windows OS environment. </p>"},{"location":"Windows_OS/WIN20/#virtual-memory-management","title":"Virtual Memory Management","text":"<p>In 32Bit OS,  CPU think 4GB exist  Programmer think 4GB exist  Physical RAM is not sure, maybe more or less. </p> <p>In 64 Bit OS it is much larger.</p> <p>Virtual Memory Control </p> <p>Virtual Memory Page Table, Page Status  VM is divided by unit called Page.  These day X86-64 Architecture Page is mostly  \\(2^{12} = 4KB\\). So, in 32 Bit OS, the total possible number of  virtual memory pages would be 4GB / 4KB = 1,000,000. It is one million. </p> <p>Virtual page status in Windows is three. </p> <ul> <li>Reserve </li> <li>Commit </li> <li>Free </li> </ul> <p>In VS2022, Free Memories are displayed as ?? ?? Question Marks.  All unallocated pages are in free status, meaning that it is not allocated,  aka not connected to the physical memory frame in RAM. </p> <p>Committed 4KB page in virtual memory is connected to the physical RAM 4KB frame.  Commit is Memory allocated, while free memory is not allocated.</p> <p><code>malloc</code> for instance, make memory commit. Commit virtual memory page means that virtual memory will be mapped to  physical memory frame, while <code>free</code> will remove the mapping between  virtual memory page 4KB and physical memory frame 4KB. </p> <p>However, using two status <code>commit</code> and <code>free</code> only is inefficient.  Suppose some process is running and its memory usage sometimes  gets 1MB for 99% of time while sometimes 4GB in 1% of time.  Sometimes, process must need all 4GB RAM of the computer,  but it is quite inefficient for 99% of the cases. Thus, status named  <code>reserve</code> is implemented.</p> <p><code>Commit</code> status represent physical RAM frame is mapped to the  virtual memory of the thread, so other threads of CPU cannot access that  RAM frames. So, occupation of all 4GB while 99% of times it will not be necessary,  is inefficient. </p> <p>In virtual memory, aka our programming, sometimes programmers intend to make  sequential order of data, like arrays. Arrays let sequential access due to  connected address. So, it is NOT expected to acquisit separated pages.  Thus, connected pages are required, while waste of RAM should be minimized.</p> <p><code>Reserved</code> status (\uc608\uc57d) means it is not currently used.  It means, in Virtual Memory, it will NOT be committed.  However, it will NOT be mapped to the physical address neither,  preventing any physical frame mapping that will result in occupation of  physical RAM resources. It will occupy ONLY virtual memory, but no  physical memory due to lack of mapping of page and frame.  When more RAM is required, then reserved virtual pages will be  mapped to the physical memory. </p> <p>Allocation Granularity Boundary, meaning  Starting point of Memory allocation </p> <p>Based, start by 4KB Unit. Page size times to prevent too much \ub2e8\ud3b8\ud654 fragmentation.  Recommended for pages to be connected. </p> <p>Minimum allocation memory isze is at least one page, 4KB. </p> <pre><code>GetSystemInfo(&amp;si) \npageSize = si.dwPageSize // Page Size (4KB)\nallocGranularity = si.dwAllocationGranularity // Memory Allocation Start Point HOW (64KB)\n</code></pre>"},{"location":"Windows_OS/WIN20/#virtual-alloc-virtual-free","title":"Virtual Alloc &amp; Virtual Free","text":"<p>malloc and free  allocate in heap.  Is it virtual Memory ?  malloc guarantees commit status!  malloc and free CANNOT make Reserved status,  meaning efficient RAM occupation is impossible!!! </p> <pre><code>LPVOID VirtualAlloc(\n    LPVOID lpAddress, \n    SIZE_T dwSize, \n    DWORD flAllocationType, // MEM_RESERVE OR MEM_COMMIT \n    DWORD flProtect         // PAGE_NOACCESS OR PAGE_READWRITE \n);\n\nBOOL VirtualFree(\n    LPVOID lpAddress, \n    SIZE_T dwSize, \n    DWORD dwFreeType // MEM_DECOMMIT OR MEM_RELEASE \n);\n</code></pre> <p>Virtual Memory is divided into code data heap and stack</p> <p>Virtual Free turns not only Commit to Free, but also Reserved to Free.  Moreover, Virtual Free might turn Commit to Reserved too!  When parameter <code>dwFreeType</code> is <code>MEM_DECOMMIT</code> or <code>MEM_RELEASE</code>. </p>"},{"location":"Windows_OS/WIN20/#heap-control","title":"Heap Control","text":"<p>Virtual Memory pages can be Commit or Reserved or Free status </p> <p>Heap Control  Default Heap and Dynamic Heap </p> <p>Suppose data structure like Linked List.  Generally, for safe memory deallocation,  well calculated accurate delete code is required.  One Heap contains two or more different lists or other  complicated graph like structure usingg pointer and requires delete functions.</p> <p>However, this heap used in programming is actually called as  Default Heap. When process is generated, this default heap is also  generated in default too! It automatically increase its size when required. </p> <p>In Windows OS, it is allowed to create another Heap outside default heap.  This is Heap Control.  Then, when two independent lists are implemented in each different  heap space created, then when deleting one list, it can be removed by  removing entire heap, instead of list deleting function. </p> <p>Dynamic Heap is more likely to be in separation of heap.  In 32 Bit OS some data some heap some stack ... and most zones are empty. </p> <p>Some VM is in commit, some in reserve status.  Heap is defined its size in RunTime.  VM allocation is also in Runtime, so in some perspective  this VM is also classified as Heap. </p> <p>Pros and Cons of Dynamic Heap </p> <ul> <li>Pros : Memory Fragmentation rreduced </li> <li>Cons : Program Locality reduced </li> <li>Pros : Free from asynchronous problem  </li> <li>Pros : Because heap created per thread </li> </ul> <p>Dynamic Heap Create and Destroy </p> <ul> <li><code>HeapCreate</code> </li> <li><code>HeapDestroy</code> </li> <li><code>HeapAlloc</code></li> <li><code>HeapFree</code> </li> </ul> <p>In virtual memory space, among data stack default heap etc ...  <code>malloc</code> will allocate in Default Heap.  create independent heap by this <code>CreateHeap</code>.  And inside this newly created heap space can be allocated by <code>HeapAlloc</code> </p>"},{"location":"Windows_OS/WIN20/#mmf-memory-mapped-file","title":"MMF Memory Mapped File","text":"<p>Connect certain memory space of file into the process virtual memory!  Then, writing data in process virtual memory result in file data change. </p> <p>Process &lt;-&gt; Memory I/O should be frequent  Memory &lt;-&gt; File I/O do not have to get applied that frequently </p> <p>So, Memory and File IO can be periodic, or up to circumstance rather than  high frequency required. </p> <p>MMF implementation </p> <p><pre><code>HANDLE hFile = CreateFile(...); // Create File K O \nHANDLE hMapFile = CreateFileMapping(hFile, ...); // File Mapping K O \nTCHAR * pWrite = MapViewOfFile(hMapFile, ...); // Connect Virtual Memory and File  \n// By using File Mapping K O  \n</code></pre> This returns void pointer <code>*pWrite</code>.  Now, similar to array access, it is file data access like array or pointer access. </p>"},{"location":"Windows_OS/WIN250709/","title":"\ud504\ub85c\uc138\uc2a4\uc758 \uc0dd\uc131\uacfc \uc18c\uba78","text":"<p>VS2022\uc5d0\uc11c \uc194\ub8e8\uc158\uacfc \ub450 \ud504\ub85c\uc81d\ud2b8 \ub9cc\ub4e4\uae30 </p> <p>cl\uc73c\ub85c \ub9cc\ub4e4\uae30  <code>cl</code>\uc740 Visual Studio\uac00 \uc124\uce58\ud55c MSVC \ucef4\ud30c\uc77c\ub7ec  MSVC \ud658\uacbd \uc124\uc815 (vcvars64.bat) \ud544\uc694</p> <p>CMD/Powershell \uc5d0\uc11c  <pre><code>\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n</code></pre></p> <p>\ud638\ucd9c \uc2dc cl\uba85\ub839\uc5b4 \ud65c\uc131\ud654  <pre><code>cl .\\CreateProcess.cpp \nc1 .\\AdderProcess.cpp\n.\\CreateProcess.exe\n</code></pre></p> <p>\ub9c8\uce58 gcc \ucef4\ud30c\uc77c\ub7ec\ucc98\ub7fc \ud130\ubbf8\ub110\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c </p> <p>GetLastError.cpp </p>"},{"location":"Windows_OS/Win23/","title":"Asynchronous I/O","text":"<p>File Input Output </p> <p>Relationship between I O and CPU Clock </p> <p>CPU Clock increment generally represents higher speed. </p> <p>IO has very high BUS Clock independency.  But generally if CPU clock is higher then BUS clock is also higher </p> <p>CPU and CPU Clock  and I O Clock </p> <p>Relationship between System Clock and I/O </p> <p>Suppose System A and B exist  A System Clock 100 Destination  B System Clock 200 Destinatino</p> <p>Faster clock means faster IO? Generally correct,  but not always. </p> <p>File / Network / Console / etc Buffering  IO Buffer </p> <p>If you send data altogether then </p> <p>Suppose A Buffer and B Buffer exist  we can decide Buffer delete policy, but let's suppose that  Once per 10 clocks buffer is erased. </p> <p>Then, System B will get flushed 20 times per second  while System A will get flushed 10 times per second </p> <p>Even though System B is slightly quicker to generate data, </p> <p>System A will vacate buffer when a b c d 4 elements are in buffer while  System B will vacate buffer when only a b or c d 2 elements are in buffer </p> <p>Since A combines all elements and send them altogether, they have  Only One communication signal  while System B sending smaller elements per communication signal  use more communication signal per limited abount of time. </p> <p>CPU Clock 100 200 is not that much important  File IO is slow, but Network TCP IP telecommunication is way much slower  So using more network protocol would represent slower speed, since  that time is independent from CPU clock, so in worst case  higher clock CPU gets 3 times lower than normal clock CPU. </p> <p>Since I/O, especially compared to Network Communication,  is relatively not necessarily that big. </p>"},{"location":"Windows_OS/Win23/#what-is-asynchronous-io","title":"What is Asynchronous I/O?","text":"<p>When Write is called data transfer begins  When Write is returned data transfer ends  This is Synchronous I/O </p> <p>Then Write function call is synchronous,  but if return time does NOT represent end of I/O,  it is asynchronous I/O </p> <p>Even though I/O function is returned,  I/O calculation is independent and not that much CPU dependent.  IO device, handling unit, and actual CPU in calculation have divided role for each.  So I/O function progress can be concurrent with CPU working for other assembly command  </p> <p>About 60% percent or just above average calculations are I/O.  So synchronous IO shows inefficient, fluctuating CPU resoruce usage while  asynchronous IO shows relatively stable and efficient CPU resource usage. </p> <p>Two Types to control Async IO </p> <ul> <li>Overlapped I/O </li> <li>I/O Completion Routine </li> </ul>"},{"location":"Windows_OS/Win23/#overlapped-io","title":"Overlapped I/O","text":"<p>Literally overlap I O </p> <p>Read function call starts I.O  then return first while reading still has over 90% of runtime to finish </p> <p>Simultaneous I/O does Not consume that high resource. </p> <p>B - A - C Suppose Network Communication  A B inter communication process bandwidth is allocated quite a lot. </p> <p>CPU internally wait quite long for a while for IO  So it is better to wait 2 or more overlapped IO, than just wait 1 IO  to increase performance espeically quantity of IO is required. </p> <p>After IO there would be saving process  A B C each complete I/O then should check whether I O is complete. </p>"},{"location":"Windows_OS/Win23/#completion-routine","title":"Completion Routine","text":"<p>A IO  B IO  C IO </p> <p>Routine Control in center </p> <p>Routine D  Routine E  Routine F </p>"}]}